using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace Stock季报_IndividualStocks
{

    class Program
    {

        private static string ConnectionStr = System.Configuration.ConfigurationManager.ConnectionStrings["DB"].ConnectionString;
        #region 股票池

        private static List<string> arrayStock = new List<string>
        {
           "002880",
"002346",
"002881",
"002883",
"002524",
"002631",
"002130",
"002745",
"002208",
"002780",
"002195",
"002050",
"002842",
"002626",
"002652",
"002136",
"002365",
"002876",
"002386",
"002466",
"002361",
"002580",
"002316",
"002741",
"002450",
"002869",
"002424",
"002402",
"002832",
"002475",
"002359",
"002081",
"002047",
"002492",
"002313",
"002739",
"002605",
"002413",
"002037",
"002127",
"002300",
"002679",
"002640",
"002044",
"002808",
"002085",
"002410",
"002726",
"002236",
"002597",
"002534",
"002297",
"002145",
"002008",
"002847",
"002295",
"002471",
"002648",
"002833",
"002422",
"002341",
"002751",
"002020",
"002767",
"002604",
"002294",
"002016",
"002456",
"002722",
"002414",
"002824",
"002001",
"002214",
"002182",
"002407",
"002853",
"002038",
"002097",
"002421",
"002116",
"002748",
"002732",
"002482",
"002815",
"002171",
"002623",
"002434",
"002568",
"002017",
"002305",
"002032",
"002678",
"002088",
"002738",
"002057",
"002204",
"002408",
"002142",
"002537",
"002507",
"002799",
"002703",
"002241",
"002245",
"002139",
"002405",
"002460",
"002570",
"002023",
"002340",
"002685",
"002153",
"002420",
"002516",
"002759",
"002611",
"002620",
"002321",
"002560",
"002406",
"002529",
"002092",
"002296",
"002614",
"002671",
"002101",
"002724",
"002030",
"002415",
"002770",
"002801",
"002803",
"002389",
"002272",
"002306",
"002629",
"002651",
"002229",
"002217",
"002583",
"002325",
"002254",
"002378",
"002152",
"002146",
"002496",
"002831",
"002601",
"002233",
"002335",
"002658",
"002384",
"002022",
"002782",
"002156",
"002230",
"002395",
"002126",
"002240",
"002627",
"002472",
"002730",
"002709",
"002383",
"002446",
"002311",
"002090",
"002334",
"002125",
"002009",
"002452",
"002247",
"002002",
"002789",
"002840",
"002244",
"002578",
"002639",
"002258",
"002246",
"002849",
"002659",
"002094",
"002717",
"002643",
"002265",
"002213",
"002043",
"002080",
"002438",
"002497",
"002323",
"002172",
"002579",
"002635",
"002190",
"002019",
"002549",
"002239",
"002183",
"002192",
"002553",
"002377",
"002398",
"002068",
"002074",
"002055",
"002758",
"002820",
"002333",
"002676",
"002598",
"002484",
"002634",
"002811",
"002108",
"002734",
"002572",
"002223",
"002454",
"002518",
"002274",
"002095",
"002366",
"002562",
"002137",
"002345",
"002355",
"002829",
"002268",
"002151",
"002530",
"002838",
"002174",
"002322",
"002574",
"002372",
"002512",
"002425",
"002191",
"002320",
"002342",
"002792",
"002692",
"002508",
"002100",
"002476",
"002248",
"002773",
"002328",
"002481",
"002119",
"002599",
"002707",
"002755",
"002848",
"002752",
"002615",
"002501",
"002210",
"002468",
"002201",
"002392",
"002459",
"002071",
"002798",
"002536",
"002697",
"002250",
"002435",
"002277",
"002093",
"002027",
"002138",
"002288",
"002548",
"002776",
"002160",
"002054",
"002470",
"002117",
"002393",
"002276",
"002535",
"002401",
"002308",
"002778",
"002688",
"002198",
"002708",
"002617",
"002644",
"002628",
"002743",
"002575",
"002212",
"002666",
"002273",
"002035",
"002827",
"002428",
"002185",
"002662",
"002727",
"002714",
"002440",
"002485",
"002404",
"002719",
"002234",
"002768",
"002216",
"002111",
"002373",
"002490",
"002810",
"002194",
"002228",
"002363",
"002493",
"002349",
"002387",
"002221",
"002458",
"002462",
"002753",
"002196",
"002067",
"002024",
"002528",
"002618",
"002423",
"002062",
"002432",
"002672",
"002165",
"002110",
"002079",
"002571",
"002592",
"002557",
"002199",
"002188",
"002716",
"002379",
"002271",
"002538",
"002104",
"002176",
"002439",
"002026",
"002003",
"002278",
"002451",
"002091",
"002357",
"002235",
"002582",
"002187",
"002304",
"002279",
"002376",
"002636",
"002299",
"002645",
"002144",
"002595",
"002828",
"002859",
"002593",
"002621",
"002836",
"002370",
"002694",
"002473",
"002668",
"002696",
"002465",
"002380",
"002463",
"002486",
"002498",
"002499",
"002504",
"002505",
"002509",
"002513",
"002318",
"002547",
"002291",
"002567",
"002569",
"002576",
"002263",
"002453",
"002259",
"002252",
"002606",
"002608",
"002610",
"002619",
"002447",
"002622",
"002625",
"002630",
"002638",
"002642",
"002650",
"002654",
"002442",
"002669",
"002675",
"002681",
"002684",
"002147",
"002141",
"002418",
"002436",
"002128",
"002729",
"002750",
"002757",
"002077",
"002781",
"002787",
"002796",
"002806",
"002433",
"002012",
"002173",
"002175",
"002526",
"002427",
"002426",
"002180",
"002437",
"002417",
"002082",
"002186",
"002006",
"002558",
"002348",
"002168",
"002046",
"002409",
"002711",
"002129",
"002132",
"002070",
"002399",
"002358",
"002207",
"002049",
"002209",
"002162",
"002053",
"002013",
"002225",
"002469",
"002856",
"002255",
"002600",
"002464",
"002329",
"002098",
"002331",
"002256",
"002025",
"002312",
"002596",
"002260",
"002691",
"002143",
"002586",
"002303",
"002264",
"002693",
"002112",
"002122",
"002124",
"002356",
"002766",
"002076",
"002075",
"002072",
"002048",
"002040",
"002120",
"002837",
"002202",
"002545",
"002382",
"002351",
"002416",
"002585",
"002167",
"002817",
"002369",
"002310",
"002577",
"002203",
"002015",
"002467",
"002170",
"002699",
"002736",
"002686",
"002089",
"002397",
"002689",
"002114",
"002546",
"002554",
"002337",
"002763",
"002641",
"002523",
"002237",
"002695",
"002521",
"002007",
"002581",
"002868",
"002607",
"002064",
"002029",
"002275",
"002812",
"002286",
"002855",
"002731",
"002014",
"002319",
"002161",
"002733",
"002086",
"002706",
"002756",
"002215",
"002588",
"002396",
"002154",
"002178",
"002326",
"002063",
"002503",
"002701",
"002118",
"002164",
"002309",
"002069",
"002594",
"002429",
"002219",
"002238",
"002793",
"002825",
"002851",
"002563",
"002461",
"002852",
"002670",
"002474",
"002096",
"002231",
"002301",
"002522",
"002661",
"002400",
"002261",
"002613",
"002179",
"002158",
"002775",
"002262",
"002589",
"002616",
"002860",
"002266",
"002021",
"002159",
"002367",
"002520",
"002293",
"002495",
"002157",
"002314",
"002721",
"002041",
"002805",
"002121",
"002760",
"002637",
"002287",
"002487",
"002344",
"002332",
"002065",
"002514",
"002448",
"002150",
"002281",
"002059",
"002609",
"002749",
"002660",
"002653",
"002603",
"002687",
"002713",
"002290",
"002166",
"002224",
"002690",
"002381",
"002106",
"002018",
"002354",
"002809",
"002779",
"002283",
"002005",
"002566",
"002184",
"002004",
"002673",
"002010",
"002039",
"002500",
"002056",
"002740",
"002317",
"002169",
"002835",
"002550",
"002347",
"002374",
"002033",
"002102",
"002783",
"002251",
"002177",
"002702",
"002327",
"002506",
"002584",
"002133",
"002478",
"002540",
"002790",
"002218",
"002515",
"002559",
"002705",
"002270",
"002818",
"002489",
"002189",
"002419",
"002533",
"002330",
"002664",
"002657",
"002746",
"002385",
"002084",
"002556",
"002544",
"002737",
"002444",
"002028",
"002061",
"002841",
"002477",
"002871",
"002723",
"002285",
"002107",
"002242",
"002200",
"002821",
"002181",
"002060",
"002656",
"002819",
"002205",
"002073",
"002800",
"002163",
"002364",
"002541",
"002078",
"002232",
"002391",
"002826",
"002590",
"002479",
"002042",
"002222",
"002861",
"002336",
"002155",
"002561",
"002269",
"002573",
"002802",
"002700",
"002663",
"002052",
"002394",
"002517",
"002551",
"002866",
"002353",
"002011",
"002867",
"002302",
"002403",
"002388",
"002718",
"002491",
"002149",
"002087",
"002253",
"002083",
"002267",
"002612",
"002542",
"002677",
"002632",
"002712",
"002646",
"002226",
"002683",
"002527",
"002647",
"002103",
"002761",
"002390",
"002788",
"002206",
"002519",
"002430",
"002220",
"002148",
"002352",
"002131",
"002823",
"002772",
"002777",
"002795",
"002762",
"002298",
"002457",
"002099",
"002411",
"002587",
"002511",
"002680",
"002858",
"002483",
"002197",
"002135",
"002565",
"002031",
"002813",
"002338",
"002791",
"002066",
"002324",
"002488",
"002284",
"002728",
"002360",
"002502",
"002532",
"002494",
"002552",
"002058",
"002531",
"002371",
"002682",
"002211",
"002445",
"002362",
"002193",
"002280",
"002034",
"002375",
"002822",
"002123",
"002315",
"002774",
"002698",
"002725",
"002850",
"002674",
"002543",
"002243",
"002455",
"002227",
"002857",
"002449",
"002797",
"002769",
"002443",
"002633",
"002667",
"002765",
"002870",
"002872",
"002480",
"002105",
"002649",
"002735",
"002747",
"002249",
"002539",
"002807",
"002655",
"002665",
"002292",
"002715",
"002045",
"002343",
"002368",
"002863",
"002862",
"002865",
"002785",
"002431",
"002289",
"002742",
"002839",
"002412",
"002624",
"002816",
"002115",
"002051",
"002786",
"002441",
"002602",
"002875",
"002878",
"002873",
"002350",
"002555",
"002282",
"002830",
"002307",
"002771",
"002140",
"002846",
"002564",
"002134",
"002843",
"002591",
"002510",
"002877",
"002109",
"002113",
"002036",
"002845",
"002339",
"000002",
"000921",
"000627",
"000792",
"000830",
"000063",
"000530",
"000333",
"000600",
"000507",
"000510",
"000633",
"000423",
"000651",
"000869",
"000545",
"000710",
"000402",
"000060",
"000736",
"000050",
"000762",
"000411",
"000546",
"000413",
"000525",
"000960",
"000973",
"000822",
"000878",
"000040",
"000017",
"000990",
"000663",
"000581",
"000409",
"000671",
"000421",
"000158",
"000418",
"000911",
"000584",
"000659",
"001979",
"000601",
"000703",
"000338",
"000905",
"000786",
"000901",
"000760",
"000672",
"000795",
"000983",
"000626",
"000009",
"000963",
"000918",
"000858",
"000532",
"000938",
"000429",
"000688",
"000757",
"000692",
"000622",
"000655",
"000089",
"000538",
"000798",
"000504",
"000863",
"000707",
"000823",
"000756",
"000999",
"000915",
"000069",
"000779",
"000628",
"000900",
"000816",
"000026",
"000561",
"000681",
"000951",
"000820",
"000509",
"000011",
"000635",
"000531",
"000592",
"000880",
"000540",
"000006",
"000758",
"000056",
"000488",
"000725",
"000978",
"000780",
"000831",
"000796",
"000666",
"000959",
"000777",
"000687",
"000955",
"000027",
"000811",
"000517",
"000751",
"000088",
"000912",
"000018",
"000058",
"000630",
"000037",
"000042",
"000030",
"000547",
"000596",
"000886",
"000691",
"000559",
"000686",
"000426",
"000159",
"000665",
"000021",
"000965",
"000919",
"000906",
"000090",
"000031",
"000408",
"000070",
"000972",
"000690",
"000797",
"000998",
"000989",
"000859",
"000576",
"000883",
"000981",
"000612",
"000898",
"000639",
"000737",
"000544",
"000851",
"000521",
"000926",
"000603",
"000637",
"000806",
"000800",
"000933",
"000813",
"000636",
"000595",
"000815",
"000560",
"000670",
"000761",
"000156",
"000568",
"000430",
"000598",
"000732",
"000948",
"000519",
"000035",
"000731",
"000833",
"000723",
"000417",
"000713",
"000782",
"000848",
"000892",
"000835",
"000788",
"000968",
"000722",
"000669",
"000895",
"000985",
"000791",
"000809",
"000611",
"000721",
"000838",
"000726",
"000589",
"000862",
"000729",
"000403",
"000682",
"000887",
"000802",
"000716",
"000755",
"000629",
"000301",
"000733",
"000099",
"000916",
"000059",
"000928",
"000932",
"000753",
"000935",
"000836",
"000752",
"000038",
"000950",
"000571",
"000953",
"000718",
"000662",
"000001",
"000506",
"000656",
"000503",
"000557",
"000563",
"000570",
"000750",
"000632",
"000007",
"000673",
"000012",
"000155",
"000153",
"000020",
"000908",
"000922",
"000949",
"000610",
"000034",
"000032",
"000693",
"000613",
"000029",
"000727",
"000885",
"000100",
"000511",
"000889",
"000157",
"000505",
"000014",
"000625",
"000828",
"000533",
"000789",
"000739",
"000961",
"000768",
"000573",
"000650",
"000695",
"000422",
"000868",
"000022",
"000565",
"000523",
"000541",
"000046",
"000962",
"000969",
"000825",
"000513",
"000876",
"000860",
"000587",
"000785",
"000861",
"000609",
"000807",
"000518",
"000410",
"000967",
"001896",
"000667",
"000738",
"000698",
"000420",
"000937",
"000520",
"000759",
"000917",
"000715",
"000528",
"000931",
"000566",
"000591",
"000404",
"000979",
"000810",
"000623",
"001696",
"000620",
"000498",
"000936",
"000150",
"000685",
"000066",
"000776",
"000701",
"000997",
"000783",
"000700",
"000166",
"000548",
"000652",
"000829",
"000875",
"000552",
"000952",
"000767",
"000679",
"000793",
"000096",
"000554",
"000803",
"000910",
"000988",
"000534",
"000016",
"000023",
"000839",
"000661",
"000008",
"000593",
"000582",
"000705",
"000903",
"000516",
"000657",
"000812",
"000400",
"000597",
"000537",
"000680",
"000850",
"000977",
"000683",
"000939",
"000572",
"000036",
"000564",
"000428",
"000927",
"000735",
"000586",
"000502",
"000425",
"000028",
"000717",
"000920",
"000925",
"000890",
"000536",
"000501",
"000555",
"000616",
"000678",
"000043",
"000976",
"000975",
"000728",
"000888",
"000526",
"000048",
"000902",
"000881",
"000929",
"000419",
"000407",
"000897",
"000524",
"000966",
"000996",
"000539",
"000987",
"000930",
"000005",
"000558",
"000638",
"000708",
"000010",
"000709",
"000543",
"000702",
"000514",
"000826",
"000061",
"000719",
"000677",
"000550",
"000045",
"000882",
"000055",
"000995",
"000980",
"000068",
"000970",
"000599",
"000590",
"000078",
"000668",
"000697",
"000415",
"000551",
"000712",
"000676",
"000957",
"000837",
"000720",
"000039",
"000971",
"000529",
"000819",
"000606",
"000567",
"000617",
"000607",
"000778",
"000416",
"000151",
"000899",
"000799",
"000049",
"000993",
"000553",
"000790",
"000631",
"000877",
"000004",
"000821",
"000025",
"000711",
"000062",
"000818",
"000958",
"000923",
"000909",
"000913",
"000605",
"000619",
"000585",
"000608",
"000893",
"000856",
"000065",
"000801",
"000401",
"000019",
"000982",
"000615",
"000766",
"000852",
"000033",
"603679",
"603316",
"603133",
"603380",
"603326",
"603335",
"603536",
"603879",
"600791",
"600828",
"600883",
"603878",
"600436",
"600516",
"603618",
"600615",
"600501",
"600612",
"600191",
"600132",
"601005",
"603319",
"600409",
"600159",
"600702",
"600965",
"600456",
"601011",
"600392",
"600480",
"603033",
"600158",
"600560",
"600262",
"600741",
"600549",
"600085",
"600291",
"603868",
"600048",
"603197",
"603777",
"603088",
"603085",
"600872",
"600055",
"600309",
"603799",
"600390",
"601127",
"600004",
"603677",
"600690",
"600074",
"603429",
"600683",
"600980",
"600196",
"600622",
"600966",
"603388",
"600746",
"600606",
"600298",
"600477",
"601336",
"603030",
"600855",
"600148",
"603028",
"600246",
"603066",
"600250",
"603050",
"600684",
"603288",
"600362",
"600879",
"600781",
"600328",
"600503",
"600742",
"600623",
"600383",
"600498",
"600570",
"600305",
"601233",
"600169",
"603313",
"600095",
"600185",
"600295",
"601231",
"603788",
"600839",
"603377",
"600162",
"600188",
"600865",
"600071",
"600152",
"600703",
"600239",
"600209",
"603896",
"600259",
"600466",
"600507",
"603637",
"603703",
"600178",
"603165",
"600130",
"600459",
"603338",
"603559",
"603515",
"600416",
"600160",
"601100",
"600677",
"603766",
"600338",
"600346",
"600984",
"603929",
"600874",
"603041",
"603078",
"603816",
"603027",
"600487",
"600784",
"600031",
"600325",
"601668",
"600718",
"600321",
"600967",
"600315",
"600660",
"603959",
"600282",
"603718",
"601168",
"601966",
"600082",
"600458",
"601933",
"600780",
"603688",
"600088",
"600408",
"600491",
"600131",
"601116",
"603811",
"600973",
"600316",
"600876",
"600038",
"600258",
"603186",
"601877",
"600523",
"600887",
"600753",
"601699",
"603266",
"600332",
"600161",
"600664",
"600774",
"600511",
"603320",
"603322",
"603955",
"601607",
"600281",
"600300",
"601238",
"603883",
"600817",
"603989",
"600192",
"600022",
"603505",
"600351",
"600884",
"600877",
"600557",
"600816",
"600278",
"600909",
"601678",
"600773",
"600218",
"603096",
"603023",
"600036",
"600546",
"600845",
"603518",
"601886",
"600197",
"601020",
"600212",
"600167",
"600711",
"600121",
"600083",
"600699",
"603126",
"600276",
"600562",
"603069",
"600888",
"603131",
"600301",
"600267",
"600329",
"600585",
"600992",
"601318",
"600271",
"600743",
"600620",
"600678",
"600190",
"603808",
"600809",
"600674",
"601636",
"600640",
"600732",
"600373",
"603167",
"603716",
"600184",
"601012",
"600114",
"600213",
"603969",
"600060",
"600698",
"603026",
"603839",
"603758",
"601882",
"600302",
"600366",
"600598",
"600790",
"600694",
"600686",
"601229",
"600505",
"600176",
"600360",
"600009",
"600073",
"603160",
"601155",
"600765",
"600308",
"600995",
"600377",
"600182",
"600015",
"601515",
"600348",
"603899",
"600062",
"603717",
"601137",
"600535",
"600750",
"600782",
"603906",
"600886",
"603568",
"600367",
"600084",
"600232",
"600538",
"603021",
"603833",
"603701",
"600352",
"600737",
"601991",
"600007",
"600496",
"600242",
"600802",
"600859",
"603966",
"600513",
"601628",
"601939",
"600187",
"600094",
"600522",
"603678",
"601398",
"600722",
"600600",
"600388",
"601669",
"603399",
"600091",
"603939",
"600255",
"600860",
"601519",
"600099",
"600794",
"600758",
"601918",
"600068",
"600401",
"600820",
"600143",
"601558",
"603355",
"603036",
"600592",
"600805",
"601166",
"600028",
"600497",
"601106",
"600856",
"600163",
"601857",
"601998",
"600571",
"601101",
"600870",
"600280",
"600868",
"600823",
"600975",
"603456",
"600648",
"603101",
"603012",
"603330",
"603638",
"600866",
"600112",
"601002",
"600104",
"600771",
"603886",
"603018",
"603889",
"600854",
"600847",
"600107",
"600745",
"600712",
"601958",
"600149",
"600558",
"600153",
"600764",
"600605",
"600739",
"600000",
"603843",
"600226",
"601988",
"600072",
"600663",
"600777",
"600270",
"600714",
"600297",
"600770",
"603180",
"603578",
"600012",
"600539",
"600376",
"603099",
"601901",
"600804",
"600768",
"600057",
"600428",
"601588",
"600063",
"603569",
"603188",
"600076",
"600900",
"603928",
"601996",
"603999",
"600380",
"600410",
"600365",
"600637",
"600285",
"600017",
"600551",
"600173",
"600889",
"603300",
"603060",
"600135",
"603663",
"600096",
"600133",
"600577",
"600633",
"603022",
"600665",
"600381",
"603979",
"600747",
"600999",
"600509",
"601111",
"603737",
"600682",
"600247",
"603077",
"600720",
"601688",
"603818",
"600320",
"600719",
"600540",
"601677",
"600105",
"603936",
"600331",
"603600",
"600023",
"601006",
"600111",
"601018",
"603558",
"600307",
"600521",
"600125",
"600006",
"603123",
"600210",
"600231",
"600439",
"600078",
"600168",
"600237",
"601328",
"600378",
"603218",
"603819",
"603001",
"603689",
"600177",
"601899",
"600395",
"600317",
"600844",
"600419",
"601199",
"601288",
"601008",
"601222",
"600086",
"600486",
"600056",
"603909",
"600644",
"603058",
"600359",
"600207",
"603035",
"600685",
"603421",
"600345",
"600971",
"600735",
"600397",
"601818",
"603636",
"600030",
"600151",
"600961",
"601600",
"603968",
"600708",
"600343",
"600206",
"600066",
"600586",
"600090",
"600363",
"603393",
"600266",
"603908",
"603998",
"600785",
"600027",
"600423",
"600716",
"600322",
"600061",
"600216",
"600827",
"600382",
"603538",
"601766",
"600527",
"601618",
"603823",
"601009",
"600058",
"603038",
"600448",
"600759",
"601611",
"600853",
"600261",
"600399",
"600018",
"603081",
"600260",
"600572",
"601226",
"600688",
"601208",
"603159",
"600118",
"600667",
"600257",
"600435",
"600748",
"600800",
"601985",
"603803",
"600760",
"603698",
"601601",
"600801",
"600391",
"600755",
"603116",
"603660",
"601169",
"603877",
"600101",
"603986",
"601567",
"600576",
"600532",
"600070",
"600761",
"600680",
"603838",
"600593",
"600421",
"603696",
"600138",
"600897",
"603611",
"603517",
"600201",
"603208",
"601069",
"600636",
"603598",
"601989",
"600666",
"601028",
"600582",
"600610",
"600997",
"600175",
"600658",
"600704",
"603299",
"603861",
"603090",
"600960",
"600710",
"601608",
"600050",
"603010",
"600358",
"600220",
"603333",
"600833",
"601968",
"600795",
"600353",
"600485",
"600026",
"600077",
"600673",
"600671",
"600183",
"600783",
"600080",
"600603",
"600265",
"603336",
"600776",
"600733",
"600654",
"600653",
"600736",
"600548",
"600880",
"600463",
"600146",
"601727",
"600643",
"600545",
"600890",
"600432",
"600010",
"600634",
"600917",
"600959",
"603699",
"603238",
"600460",
"600438",
"600462",
"601872",
"601717",
"600123",
"600318",
"600319",
"600609",
"600100",
"600136",
"600425",
"600145",
"600289",
"601001",
"600734",
"601890",
"601313",
"600277",
"600657",
"600170",
"601377",
"603609",
"600595",
"601919",
"603308",
"600857",
"600193",
"600481",
"603315",
"600725",
"601088",
"600490",
"600493",
"600502",
"600375",
"600248",
"600569",
"600568",
"601225",
"600556",
"600706",
"600227",
"603501",
"603016",
"600559",
"600519",
"600468",
"600806",
"600165",
"601880",
"603002",
"600602",
"600655",
"600987",
"601038",
"603608",
"600701",
"600037",
"603067",
"601211",
"600749",
"603729",
"603358",
"603108",
"600389",
"600638",
"601366",
"603997",
"600312",
"600969",
"600687",
"600834",
"600983",
"601555",
"603225",
"600894",
"600215",
"600978",
"600355",
"603556",
"600882",
"600723",
"603268",
"600172",
"600098",
"600778",
"600518",
"600835",
"600757",
"600754",
"600110",
"600645",
"600766",
"603345",
"600180",
"600895",
"600292",
"600565",
"600236",
"600715",
"601997",
"600117",
"600293",
"600064",
"601666",
"603828",
"600356",
"600208",
"601368",
"600982",
"601928",
"600525",
"600697",
"600815",
"603800",
"600200",
"600243",
"601228",
"600482",
"600075",
"601010",
"603639",
"600256",
"600335",
"600327",
"600998",
"600230",
"600841",
"600011",
"600251",
"600508",
"600729",
"600963",
"603416",
"603318",
"603039",
"601866",
"603360",
"603768",
"603166",
"600775",
"603306",
"603303",
"600272",
"600467",
"600808",
"600695",
"600495",
"600126",
"600219",
"600811",
"601595",
"600861",
"603086",
"600398",
"603626",
"600051",
"600240",
"601900",
"600229",
"601339",
"603806",
"601700",
"603139",
"600863",
"601888",
"603690",
"600166",
"600705",
"603900",
"600369",
"600979",
"603508",
"600379",
"600122",
"600035",
"600873",
"601177",
"601311",
"600691",
"600016",
"600433",
"600228",
"601777",
"600488",
"600891",
"600594",
"600106",
"600235",
"600052",
"600597",
"601789",
"603686",
"600461",
"600831",
"603158",
"603189",
"600371",
"603667",
"603389",
"600566",
"600273",
"603585",
"600059",
"600279",
"600792",
"603228",
"600985",
"600563",
"601218",
"600420",
"600189",
"603203",
"603599",
"603520",
"603128",
"603726",
"600313",
"600993",
"600936",
"601186",
"603822",
"600199",
"600103",
"600033",
"600275",
"603337",
"600596",
"600340",
"600449",
"603118",
"600976",
"601518",
"603708",
"600579",
"601798",
"600330",
"603589",
"603199",
"600970",
"600021",
"603779",
"600988",
"601388",
"600798",
"603630",
"600150",
"600829",
"603328",
"601929",
"600269",
"600767",
"600996",
"600526",
"600580",
"600958",
"600115",
"600109",
"603239",
"600668",
"600137",
"600238",
"600744",
"600020",
"600796",
"600506",
"601216",
"600858",
"603656",
"600512",
"603993",
"600221",
"603100",
"603223",
"601188",
"600626",
"600323",
"600128",
"603032",
"600875",
"603040",
"600693",
"600350",
"600499",
"600547",
"600287",
"600470",
"600306",
"600403",
"600649",
"600618",
"600898",
"601333",
"601999",
"600370",
"601021",
"603008",
"600069",
"600415",
"600726",
"603000",
"600531",
"600249",
"601198",
"600283",
"601003",
"600093",
"600529",
"603665",
"603566",
"603918",
"600336",
"600727",
"601015",
"601007",
"600575",
"600573",
"603111",
"600446",
"603658",
"603178",
"600139",
"603727",
"603025",
"600127",
"603866",
"603920",
"603309",
"600624",
"600614",
"603298",
"600079",
"601098",
"601179",
"600252",
"601099",
"600225",
"600561",
"600129",
"601000",
"600707",
"600692",
"603339",
"600067",
"600019",
"600515",
"600807",
"600510",
"600810",
"600396",
"600642",
"600426",
"603555",
"603960",
"600186",
"600843",
"603869",
"600601",
"600862",
"600797",
"600116",
"600543",
"603258",
"600157",
"600310",
"600120",
"600717",
"600567",
"601898",
"600977",
"600198",
"601212",
"600385",
"600893",
"601200",
"600368",
"600536",
"601118",
"600195",
"603311",
"601390",
"600789",
"603017",
"600814",
"600517",
"600986",
"600234",
"600728",
"600821",
"603669",
"600578",
"603444",
"603579",
"600483",
"600171",
"601969",
"603567",
"601375",
"600919",
"600337",
"601858",
"600583",
"600303",
"600354",
"603615",
"600222",
"600039",
"600661",
"600422",
"601566",
"601965",
"600885",
"600867",
"600097",
"603859",
"600616",
"600284",
"603385",
"603738",
"601258",
"600689",
"603577",
"600469",
"600724",
"600333",
"600939",
"601788",
"601908",
"603881",
"603988",
"600530",
"601881",
"600299",
"600864",
"601016",
"600489",
"603991",
"601126",
"600589",
"600203",
"600479",
"600850",
"603789",
"600520",
"603919",
"600825",
"603003",
"603977",
"600731",
"600812",
"603987",
"600233",
"600054",
"600455",
"600361",
"600581",
"600552",
"601801",
"600089",
"600721",
"600386",
"603858",
"600836",
"600851",
"600981",
"603826",
"600604",
"603668",
"603198",
"600155",
"601163",
"600779",
"600179",
"600008",
"600869",
"601718",
"600326",
"603019",
"601799",
"600696",
"600628",
"601689",
"600029",
"600819",
"600081",
"603222",
"601369",
"600647",
"600730",
"601158",
"600926",
"600108",
"603885",
"600676",
"603232",
"600738",
"600599",
"603031",
"600288",
"600611",
"600713",
"603926",
"600837",
"603588",
"600452",
"600990",
"600202",
"600053",
"603887",
"600818",
"600896",
"600881",
"601058",
"600630",
"603366",
"600223",
"601616",
"603985",
"600824",
"600211",
"603369",
"601633",
"600613",
"601113",
"603113",
"603029",
"600475",
"600584",
"603037",
"600617",
"600830",
"600822",
"601599",
"603519",
"603179",
"600763",
"600769",
"600550",
"600478",
"600500",
"601107",
"601579",
"603098",
"600650",
"600290",
"600621",
"600787",
"600528",
"600740",
"603005",
"601952",
"600803",
"601139",
"603898",
"603787",
"600962",
"601811",
"600846",
"603007",
"603011",
"601128",
"600372",
"603586",
"600679",
"601117",
"600268",
"600311",
"603496",
"603089",
"600641",
"600756",
"600651",
"600119",
"600838",
"603628",
"603168",
"601800",
"600418",
"600662",
"600587",
"603117",
"603601",
"603177",
"603528",
"600217",
"603398",
"603817",
"600429",
"603009",
"603138",
"600681",
"600113",
"601500",
"600675",
"603990",
"603603",
"600826",
"600639",
"603798",
"600405",
"600533",
"600871",
"603323",
"600444",
"603020",
"603633",
"601808",
"603580",
"603901",
"600141",
"600608",
"603368",
"603042",
"600629",
"600537",
"600339",
"603229",
"600241",
"603488",
"603383",
"603996",
"600387",
"603169",
"600652",
"603778",
"600588",
"600555",
"600908",
"601992",
"600892",
"603200",
"603606",
"600751",
"600635",
"603015",
"603728",
"600400",
"603269",
"600793",
"600406",
"603227",
"603196",
"600476",
"600590",
"603797",
"600619",
"603980",
"603616",
"603903",
"600156",
"603888",
"603855",
"603226",
"603006",
"603958",
"603767",
"600393",
"600848",
"300666",
"300665",
"300668",
"300667",
"300035",
"300629",
"300073",
"300421",
"300266",
"300040",
"300355",
"300662",
"300127",
"300112",
"300335",
"300455",
"300415",
"300626",
"300560",
"300114",
"300282",
"300230",
"300366",
"300603",
"300292",
"300513",
"300272",
"300401",
"300407",
"300628",
"300053",
"300473",
"300376",
"300499",
"300347",
"300593",
"300001",
"300274",
"300250",
"300482",
"300263",
"300578",
"300197",
"300124",
"300223",
"300031",
"300101",
"300219",
"300512",
"300146",
"300568",
"300308",
"300037",
"300009",
"300535",
"300136",
"300013",
"300343",
"300399",
"300618",
"300576",
"300128",
"300121",
"300323",
"300288",
"300357",
"300042",
"300557",
"300352",
"300311",
"300431",
"300591",
"300083",
"300156",
"300402",
"300336",
"300577",
"300316",
"300613",
"300056",
"300071",
"300607",
"300457",
"300218",
"300243",
"300244",
"300465",
"300505",
"300245",
"300216",
"300511",
"300342",
"300054",
"300008",
"300317",
"300300",
"300014",
"300509",
"300299",
"300383",
"300208",
"300094",
"300242",
"300203",
"300091",
"300207",
"300573",
"300588",
"300138",
"300205",
"300045",
"300489",
"300581",
"300353",
"300418",
"300487",
"300007",
"300430",
"300463",
"300362",
"300523",
"300261",
"300451",
"300002",
"300609",
"300215",
"300176",
"300069",
"300381",
"300005",
"300237",
"300552",
"300289",
"300147",
"300565",
"300406",
"300517",
"300408",
"300122",
"300572",
"300262",
"300222",
"300153",
"300616",
"300028",
"300501",
"300010",
"300538",
"300520",
"300123",
"300183",
"300004",
"300586",
"300605",
"300131",
"300539",
"300110",
"300541",
"300533",
"300527",
"300210",
"300498",
"300285",
"300553",
"300015",
"300115",
"300032",
"300082",
"300601",
"300488",
"300051",
"300120",
"300551",
"300309",
"300503",
"300254",
"300563",
"300036",
"300547",
"300249",
"300102",
"300200",
"300529",
"300206",
"300386",
"300072",
"300119",
"300281",
"300160",
"300570",
"300290",
"300145",
"300373",
"300314",
"300485",
"300606",
"300532",
"300086",
"300444",
"300166",
"300297",
"300304",
"300625",
"300220",
"300181",
"300003",
"300333",
"300238",
"300567",
"300058",
"300621",
"300155",
"300185",
"300020",
"300456",
"300174",
"300585",
"300475",
"300097",
"300079",
"300211",
"300515",
"300537",
"300310",
"300390",
"300229",
"300638",
"300554",
"300179",
"300050",
"300256",
"300448",
"300062",
"300545",
"300416",
"300061",
"300046",
"300349",
"300132",
"300583",
"300556",
"300025",
"300635",
"300070",
"300240",
"300391",
"300452",
"300369",
"300409",
"300546",
"300284",
"300437",
"300164",
"300247",
"300260",
"300318",
"300080",
"300598",
"300477",
"300286",
"300144",
"300648",
"300081",
"300312",
"300064",
"300507",
"300227",
"300453",
"300178",
"300493",
"300294",
"300550",
"300195",
"300392",
"300497",
"300495",
"300592",
"300125",
"300584",
"300268",
"300423",
"300375",
"300201",
"300429",
"300461",
"300414",
"300413",
"300404",
"300398",
"300171",
"300340",
"300367",
"300169",
"300486",
"300492",
"300467",
"300182",
"300462",
"300149",
"300325",
"300510",
"300518",
"300322",
"300320",
"300228",
"300536",
"300100",
"300396",
"300582",
"300267",
"300364",
"300595",
"300612",
"300016",
"300313",
"300022",
"300029",
"300030",
"300039",
"300063",
"300065",
"300074",
"300085",
"300087",
"300088",
"300301",
"300090",
"300092",
"300098",
"300543",
"300298",
"300108",
"300109",
"300134",
"300148",
"300500",
"300151",
"300152",
"300163",
"300291",
"300483",
"300170",
"300478",
"300177",
"300466",
"300184",
"300190",
"300192",
"300198",
"300440",
"300278",
"300411",
"300234",
"300252",
"300372",
"300370",
"300271",
"300104",
"300209",
"300019",
"300089",
"300168",
"300658",
"300587",
"300589",
"300434",
"300468",
"300233",
"300034",
"300590",
"300162",
"300106",
"300608",
"300661",
"300296",
"300639",
"300280",
"300165",
"300235",
"300232",
"300559",
"300354",
"300231",
"300077",
"300006",
"300351",
"300622",
"300187",
"300645",
"300133",
"300188",
"300650",
"300135",
"300617",
"300602",
"300387",
"300319",
"300026",
"300384",
"300055",
"300445",
"300338",
"300596",
"300476",
"300305",
"300443",
"300442",
"300339",
"300277",
"300378",
"300059",
"300175",
"300636",
"300024",
"300204",
"300111",
"300368",
"300217",
"300410",
"300358",
"300394",
"300525",
"300385",
"300113",
"300528",
"300350",
"300189",
"300610",
"300561",
"300459",
"300270",
"300213",
"300066",
"300380",
"300633",
"300052",
"300632",
"300579",
"300264",
"300150",
"300615",
"300597",
"300142",
"300283",
"300130",
"300033",
"300255",
"300346",
"300341",
"300159",
"300018",
"300359",
"300637",
"300330",
"300154",
"300047",
"300480",
"300464",
"300193",
"300067",
"300167",
"300226",
"300329",
"300199",
"300640",
"300382",
"300419",
"300129",
"300548",
"300139",
"300118",
"300580",
"300241",
"300469",
"300531",
"300450",
"300141",
"300540",
"300295",
"300393",
"300224",
"300221",
"300246",
"300236",
"300331",
"300180",
"300126",
"300631",
"300446",
"300027",
"300214",
"300248",
"300105",
"300239",
"300441",
"300623",
"300519",
"300212",
"300620",
"300257",
"300425",
"300103",
"300627",
"300365",
"300017",
"300096",
"300471",
"300395",
"300253",
"300494",
"300417",
"300363",
"300569",
"300327",
"300619",
"300202",
"300604",
"300447",
"300269",
"300075",
"300558",
"300043",
"300023",
"300251",
"300337",
"300356",
"300011",
"300012",
"300426",
"300502",
"300562",
"300530",
"300307",
"300403",
"300575",
"300506",
"300315",
"300076",
"300326",
"300258",
"300194",
"300374",
"300611",
"300514",
"300516",
"300460",
"300405",
"300566",
"300078",
"300095",
"300172",
"300571",
"300321",
"300225",
"300435",
"300044",
"300642",
"300265",
"300432",
"300388",
"300324",
"300422",
"300649",
"300049",
"300599",
"300433",
"300389",
"300641",
"300436",
"300302",
"300371",
"300542",
"300424",
"300360",
"300021",
"300306",
"300427",
"300303",
"300412",
"300439",
"300508",
"300420",
"300048",
"300287",
"300057",
"300259",
"300660",
"300379",
"300116",
"300656",
"300438",
"300273",
"300651",
"300481",
"300038",
"300600",
"300158",
"300630",
"300655",
"300652",
"300093",
"300107",
"300161",
"300479",
"300549",
"300099",
"300400",
"300458",
"300449",
"300293",
"300657",
"300068",
"300332",
"300397",
"300491",
"300470",
"300377",
"300041",
"300647",
"300143",
"300474",
"300534",
"300084",
"300653",
"300484",
"300196",
"300428",
"300276",
"300643",
"300526",
"300117",
"300173",
"300663",
"300348",
"300279",
"300555",
"300521",
"300334",
"300344",
"300140",
"300275",
"300345",
"300659",
"300191",
"300137",
"300328",
"300496",
"300157",
"300490",
"300472",
"300522",

        };

        #endregion

        private static StringBuilder sb = new StringBuilder(500);
        static void Main(string[] args)
        {



            Console.WriteLine("先输入start运行，直到看到over后，输入continue继续，直到看到over输入end结束！");
            List<string> One = SetpOne(arrayStock);
            // if (sb.Length > 0) EIIP.Helper.FileHelper.WriteLine(@"c:/IndividualStocksFullError1" + DateTime.Now.ToLongDateString() + ".txt", sb.ToString());
            sb.Length = 0;
            List<string> Two = SetpOne(One, 2);
             //if (sb.Length > 0) EIIP.Helper.FileHelper.WriteLine(@"c:/IndividualStocksFullError2" + DateTime.Now.ToLongDateString() + ".txt", sb.ToString());


        }

        private static string Reader(string url, string code, bool iscx)
        {
            while (true)
            {
                try
                {

                    HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
                    request.ContentType = "application/x-www-form-urlencoded";
                    request.Method = "get";
                    request.Headers.Set("Accept-Language", "utf-8");
                    request.Credentials = CredentialCache.DefaultCredentials;
                    request.Timeout = 1000 * 1;
                    request.ServicePoint.ConnectionLimit = 1000;
                    var response = (HttpWebResponse)request.GetResponse();
                    var reader = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding("gbk"));
                    return reader.ReadToEnd();

                }
                catch (WebException we)
                {
                    if (we.Status == WebExceptionStatus.ProtocolError && iscx)
                    {
                        sb.AppendFormat("{0}/r/n", code);
                        return null;
                    }
                    if (we.Status == WebExceptionStatus.Timeout)
                    {
                        System.Threading.Thread.Sleep(5);
                        continue;
                    }
                }
                finally
                {
                }
                return null;
            }
        }
        private static List<string> SetpOne(List<string> One, int n = 1)
        {
            List<string> list2000 = new List<string>();

            for (int i = 0; i < One.Count; i++)
            {
              // var code = One[i].Trim();
               var code = "600733";
                try
                {

                    var url = ConfigurationSettings.AppSettings["URL"];
                    string responseHTML = Reader(string.Format(url,code,n), code, true);
                     

                    List<decimal> listZ = new List<decimal>();
                    List<decimal> listM = new List<decimal>();
                    List<decimal> listM2 = new List<decimal>();
                    List<decimal> listM3 = new List<decimal>();
                    List<decimal> listS = new List<decimal>();
                    List<decimal> listC = new List<decimal>();

                    List<decimal> listR = new List<decimal>();

                    if (true)
                    {


                        Regex regexObj = new Regex(@"<tr[^>]*>[\s\S]*?</tr>");
                       
                        Match matchResult = regexObj.Match(responseHTML);
                        bool same = false;
                        if (matchResult.Success)
                        {

                            var dt2 =
                                matchResult.ToString()
                                    .Replace(
                                        "<tr><th class=\"tips-colname-Left\"><span>每股指标</span></th><th class=\"tips-fieldname-Right\"><span>",
                                        "")
                                    .Substring(0, 8);
                            var temp = Convert.ToDateTime(dt2).Month;
                            var dt = DateTime.Now;
                            DateTime startQuarter = dt.AddMonths(0 - (dt.Month - 1) % 3).AddDays(1 - dt.Day);  //本季度初
                            DateTime endQuarter = startQuarter.AddDays(-1);  //上季度末

                            if (temp == endQuarter.Month)
                            {
                                same = true;
                            }

                            //主营收入同比增长

                            Regex r = new Regex(@"(-)?(\d+).(\d+)");
                            Regex r2 = new Regex(@"(-)?(\d+).(\d+)([万|亿])");
                            var yysr =
                                matchResult.NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .ToString();
                            var YYSR = r.Matches(yysr.Replace("--","0.0"));
                            for (int j = 0; j < YYSR.Count; j++)
                            {

                                var val = ConvertToFloat(YYSR[j].Value.ToString());
                                
                                listZ.Add(val);
                            }

                            ListFix(listZ);

                            //归属于母公司所有者的净利润同比增长
                            var mgsjlr =
                                matchResult.NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .ToString();
                            var MGSJLR = r.Matches(mgsjlr.Replace("--", "0.0"));

                            for (int j = 0; j < MGSJLR.Count; j++)
                            {

                                var val = ConvertToFloat(MGSJLR[j].Value.ToString());
                                listM.Add(val);
                            }

                            ListFix(listM);
                     
                            //归属于母公司所有者的扣非净利润
                            var jlr =
                                matchResult.NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .ToString();
                          
                            var JLR = r2.Matches(jlr.Replace("--", "0.0"));
                          
                            for (int j = 0; j < JLR.Count; j++)
                            {
                                decimal val=0;
                                var post = JLR[j].Value.IndexOf('万') == -1 ? JLR[j].Value.IndexOf('亿') == -1 ? int.MaxValue : JLR[j].Value.IndexOf('亿') : JLR[j].Value.IndexOf('万');
                                 
                               var valx = ConvertToFloat(JLR[j].Value.Substring(0,post).ToString());
                                if (valx != 0)
                                {
                                    if (JLR[j].Value.Contains("万"))
                                    {
                                        val = (valx* 10000);
                                    }
                                    else if (JLR[j].Value.Contains("亿"))
                                    {
                                        val = (valx * 100000000);
                                       
                                    }

                                }
                                 


                                listM2.Add(val);
                            }

                           /// ListFix(listM2);


                            //归属于母公司所有者的净利润
                            var jlr2 =
                                matchResult.NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .ToString();
                            var JLR2 = r2.Matches(jlr2.Replace("--", "0.0"));

                            for (int j = 0; j < JLR2.Count; j++)
                            {
                                decimal val = 0;
                                var post = JLR2[j].Value.IndexOf('万') == -1 ? JLR2[j].Value.IndexOf('亿') == -1 ? int.MaxValue : JLR2[j].Value.IndexOf('亿') : JLR2[j].Value.IndexOf('万');

                                var valx = ConvertToFloat(JLR2[j].Value.Substring(0, post).ToString());
                                if (valx != 0)
                                {
                                    if (JLR2[j].Value.Contains("万"))
                                    {
                                        val = (valx * 10000);
                                    }
                                    else if (JLR2[j].Value.Contains("亿"))
                                    {
                                        val = (valx * 100000000);

                                    }

                                }
                                
                                listM3.Add(val);
                            }

                           // ListFix(listM2);

                            //现金流
                            var xjl =
                                matchResult.NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .ToString();
                            var XJL = r.Matches(xjl.Replace("--", "0.0"));

                            for (int j = 0; j < XJL.Count; j++)
                            {
                                var val = ConvertToFloat(XJL[j].Value.ToString());
                                listS.Add(val);
                            }
                            ListFix(listS);
                            //基本每股收益(元)

                            var mgsy = matchResult.NextMatch().ToString();
                            var MGSY = r.Matches(mgsy.Replace("--", "0.0"));

                            for (int j = 0; j < MGSY.Count; j++)
                            {

                                var val = ConvertToFloat(MGSY[j].Value.ToString());
                                listC.Add(val);
                            }


                            ListFix(listC);
                            //净资产收益率
                            var jzcsyl =
                                matchResult.NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                    .NextMatch()
                                     .NextMatch()
                                    .ToString();
                            var JZCSYL = r.Matches(jzcsyl.Replace("--", "0.0"));

                            for (int j = 0; j < JZCSYL.Count; j++)
                            {
                                var val = ConvertToFloat(JZCSYL[j].Value.ToString());
                                listR.Add(val);
                            }
                            ListFix(listR);
                        }

                        Addcode(new IndividualStocks
                        {
                            Code = code,
                            sq = same,
                            Z1 = listZ[0],
                            Z2 = listZ[1],
                            Z3 = listZ[2],
                            Z4 = listZ[3],

                            C1 = listC[0],
                            C2 = listC[1],
                            C3 = listC[2],
                            C4 = listC[3],
                            C10 = listC[4],
                            C20 = listC[5],
                            C30 = listC[6],
                            C40 = listC[7],

                            M1 = listM[0],
                            M2 = listM[1],
                            M3 = listM[2],
                            M4 = listM[3],
                            M5 = listM[4],

                            R1 = listR[0],
                            R2 = listR[1],
                            R3 = listR[2],
                            R4 = listR[3],

                            S1 = listS[0],
                            S2 = listS[1],
                            S3 = listS[2],
                            S4 = listS[3],

                            X1 =listM2[0] ,
                            X2 =listM2[1] ,
                            X3 =listM2[2] ,
                            X4 =listM2[3] ,
                            X5 =listM2[4] ,
                            X6 =listM2[5] ,
                            X7 =listM2[6] ,
                            X8 =listM2[7] ,

                            Y1 = listM3[0],
                            Y2 = listM3[1],
                            Y3 = listM3[2],
                            Y4 = listM3[3],
                            Y5 = listM3[4],
                            Y6 = listM3[5],
                            Y7 = listM3[6],
                            Y8 = listM3[7]

                        });




                    }


                }
                catch
                {
                    sb.AppendFormat("{0}\r\n", code);
                    list2000.Add(code);
                    continue;

                }
                finally
                {
                    Console.WriteLine(string.Concat(code, "=>", i));
                }
            }

            Console.WriteLine("Over!");
            Console.ReadLine();
            return list2000;
        }

        private static void ListFix(List<decimal> listM)
        {
            if (listM.Count < 8)
            {
                var num = listM.Count;
                for (int j = 8; j > num; j--)
                {
                    listM.Add(0);
                }
            }
        }

        public static decimal ConvertToFloat(string value)
        {
            decimal result;
            if (value == null || value.Length == 0 || !decimal.TryParse(value, out result))
                return 0;
            else
                return result;
        }


        public static int ConvertToInt(string value)
        {
            int result;
            if (value == null || value.Length == 0 || !Int32.TryParse(value, out result))
                return 0;
            else
                return result;
        }













        /// <summary>
        /// 财务数据
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static int Addcode(IndividualStocks data)
        {

            string sql = @"INSERT INTO [IndividualStocks] ( 
code,
sq,
M1,
M2,
M3,
M4,
M5,

Z1,
Z2,
Z3,
Z4,
 

C1,
C2,
C3,
C4,
C10,
C20,
C30,
C40,

R1,
R2,
R3,
R4,
 
S1,
S2,
S3,
S4,

X1,
X2,
X3,
X4,
X5,
X6,
X7,
X8,
 
Y1,
Y2,
Y3,
Y4,
Y5,
Y6,
Y7,
Y8




) VALUES (
@code,
@sq,
@M1,
@M2,
@M3,
@M4,
 @M5,

@Z1,
@Z2,
@Z3,
@Z4,
 


@C1,
@C2,
@C3,
@C4,
@C10,
@C20,
@C30,
@C40,

@R1,
@R2,
@R3,
@R4,
 
@S1,
@S2,
@S3,
@S4,

@X1,
@X2,
@X3,
@X4,
@X5,
@X6,
@X7,
@X8,
 
@Y1,
@Y2,
@Y3,
@Y4,
@Y5,
@Y6,
@Y7,
@Y8
 


)SELECT SCOPE_IDENTITY()";

            using (SqlConnection connection = new SqlConnection(ConnectionStr))
            {

                SqlCommand command = new SqlCommand(sql, connection) { CommandType = CommandType.Text };

                var paras = new SqlParameter[]
                {


                      new SqlParameter("@code", data.Code),
                      new SqlParameter("@sq", data.sq),
                    new SqlParameter("@M1", data.M1),
                    new SqlParameter("@M2", data.M2),
                    new SqlParameter("@M3", data.M3),
                    new SqlParameter("@M4", data.M4),
                      new SqlParameter("@M5", data.M5),


                    new SqlParameter("@Z1", data.Z1),
                    new SqlParameter("@Z2", data.Z2),
                    new SqlParameter("@Z3", data.Z3),
                    new SqlParameter("@Z4", data.Z4),
                    


                    new SqlParameter("@C1", data.C1),
                    new SqlParameter("@C2", data.C2),
                    new SqlParameter("@C3", data.C3),
                    new SqlParameter("@C4", data.C4),
       
                    new SqlParameter("@C10", data.C10),
                    new SqlParameter("@C20", data.C20),
                    new SqlParameter("@C30", data.C30),
                    new SqlParameter("@C40", data.C40),

                    new SqlParameter("@R1", data.R1),
                    new SqlParameter("@R2", data.R2),
                    new SqlParameter("@R3", data.R3),
                    new SqlParameter("@R4", data.R4),
                     


                    new SqlParameter("@S1", data.S1),
                    new SqlParameter("@S2", data.S2),
                    new SqlParameter("@S3", data.S3),
                    new SqlParameter("@S4", data.S4),
 
                    	 new SqlParameter("@X1", data.X1),
         new SqlParameter("@X2", data.X2),
         new SqlParameter("@X3", data.X3),
         new SqlParameter("@X4", data.X4),
         new SqlParameter("@X5", data.X5),
         new SqlParameter("@X6", data.X6),
         new SqlParameter("@X7", data.X7),
         new SqlParameter("@X8", data.X8),
         new SqlParameter("@Y1", data.Y1),
         new SqlParameter("@Y2", data.Y2),
         new SqlParameter("@Y3", data.Y3),
         new SqlParameter("@Y4", data.Y4),
         new SqlParameter("@Y5", data.Y5),
         new SqlParameter("@Y6", data.Y6),
         new SqlParameter("@Y7", data.Y7),
         new SqlParameter("@Y8", data.Y8),

                };

                command.Parameters.AddRange(paras);


                connection.Open();


                object obj = command.ExecuteScalar();


                if (obj == null || obj == DBNull.Value)
                {

                    return 0;

                }

                return (int)(decimal)obj;

            }
        }



    }


    internal class IndividualStocks
    {

        public string Code { get; set; }

        public bool sq { get; set; }
        public System.Decimal S1 { get; set; }
        public System.Decimal S2 { get; set; }
        public System.Decimal S3 { get; set; }
        public System.Decimal S4 { get; set; }
        public System.Decimal S5 { get; set; }
        public System.Decimal S6 { get; set; }
        public System.Decimal S7 { get; set; }
        public System.Decimal S8 { get; set; }
        public System.Decimal S9 { get; set; }
        public System.Decimal S10 { get; set; }
        public System.Decimal S11 { get; set; }
        public System.Decimal S12 { get; set; }
        public System.Decimal S13 { get; set; }
        public System.Decimal S14 { get; set; }
        public System.Decimal S15 { get; set; }
        public System.Decimal S16 { get; set; }
        public System.Decimal S17 { get; set; }
        public System.Decimal S18 { get; set; }
        public System.Decimal S19 { get; set; }
        public System.Decimal S20 { get; set; }
        public System.Decimal S21 { get; set; }
        public System.Decimal S22 { get; set; }
        public System.Decimal S23 { get; set; }
        public System.Decimal S24 { get; set; }
        public System.Decimal S25 { get; set; }
        public System.Decimal S26 { get; set; }
        public System.Decimal S27 { get; set; }
        public System.Decimal S28 { get; set; }
        public System.Decimal S29 { get; set; }
        public System.Decimal S30 { get; set; }
        public System.Decimal S31 { get; set; }
        public System.Decimal S32 { get; set; }
        public System.Decimal S33 { get; set; }
        public System.Decimal S34 { get; set; }
        public System.Decimal S35 { get; set; }
        public System.Decimal S36 { get; set; }
        public System.Decimal S37 { get; set; }
        public System.Decimal S38 { get; set; }
        public System.Decimal S39 { get; set; }
        public System.Decimal M1 { get; set; }
        public System.Decimal M2 { get; set; }
        public System.Decimal M3 { get; set; }
        public System.Decimal M4 { get; set; }
        public System.Decimal M5 { get; set; }
        public System.Decimal M6 { get; set; }
        public System.Decimal M7 { get; set; }
        public System.Decimal M8 { get; set; }
        public System.Decimal M9 { get; set; }
        public System.Decimal M10 { get; set; }
        public System.Decimal M11 { get; set; }
        public System.Decimal M12 { get; set; }
        public System.Decimal M13 { get; set; }
        public System.Decimal M14 { get; set; }
        public System.Decimal M15 { get; set; }
        public System.Decimal M16 { get; set; }
        public System.Decimal M17 { get; set; }
        public System.Decimal M18 { get; set; }
        public System.Decimal M19 { get; set; }
        public System.Decimal M20 { get; set; }
        public System.Decimal M21 { get; set; }
        public System.Decimal M22 { get; set; }
        public System.Decimal M23 { get; set; }
        public System.Decimal M24 { get; set; }
        public System.Decimal M25 { get; set; }
        public System.Decimal M26 { get; set; }
        public System.Decimal M27 { get; set; }
        public System.Decimal M28 { get; set; }
        public System.Decimal M29 { get; set; }
        public System.Decimal M30 { get; set; }
        public System.Decimal M31 { get; set; }
        public System.Decimal M32 { get; set; }
        public System.Decimal M33 { get; set; }
        public System.Decimal M34 { get; set; }
        public System.Decimal M35 { get; set; }
        public System.Decimal M36 { get; set; }
        public System.Decimal M37 { get; set; }
        public System.Decimal M38 { get; set; }
        public System.Decimal M39 { get; set; }
        public System.Decimal Z1 { get; set; }
        public System.Decimal Z2 { get; set; }
        public System.Decimal Z3 { get; set; }
        public System.Decimal Z4 { get; set; }
        public System.Decimal Z5 { get; set; }
        public System.Decimal Z6 { get; set; }
        public System.Decimal Z7 { get; set; }
        public System.Decimal Z8 { get; set; }
        public System.Decimal Z9 { get; set; }
        public System.Decimal Z10 { get; set; }
        public System.Decimal Z11 { get; set; }
        public System.Decimal Z12 { get; set; }
        public System.Decimal Z13 { get; set; }
        public System.Decimal Z14 { get; set; }
        public System.Decimal Z15 { get; set; }
        public System.Decimal Z16 { get; set; }
        public System.Decimal Z17 { get; set; }
        public System.Decimal Z18 { get; set; }
        public System.Decimal Z19 { get; set; }
        public System.Decimal Z20 { get; set; }
        public System.Decimal Z21 { get; set; }
        public System.Decimal Z22 { get; set; }
        public System.Decimal Z23 { get; set; }
        public System.Decimal Z24 { get; set; }
        public System.Decimal Z25 { get; set; }
        public System.Decimal Z26 { get; set; }
        public System.Decimal Z27 { get; set; }
        public System.Decimal Z28 { get; set; }
        public System.Decimal Z29 { get; set; }
        public System.Decimal Z30 { get; set; }
        public System.Decimal Z31 { get; set; }
        public System.Decimal Z32 { get; set; }
        public System.Decimal Z33 { get; set; }
        public System.Decimal Z34 { get; set; }
        public System.Decimal Z35 { get; set; }
        public System.Decimal Z36 { get; set; }
        public System.Decimal Z37 { get; set; }
        public System.Decimal Z38 { get; set; }
        public System.Decimal Z39 { get; set; }

        public System.Decimal C1 { get; set; }
        public System.Decimal C2 { get; set; }
        public System.Decimal C3 { get; set; }
        public System.Decimal C4 { get; set; }
        public System.Decimal C5 { get; set; }
        public System.Decimal C6 { get; set; }
        public System.Decimal C7 { get; set; }
        public System.Decimal C8 { get; set; }
        public System.Decimal C9 { get; set; }
        public System.Decimal C10 { get; set; }
        public System.Decimal C11 { get; set; }
        public System.Decimal C12 { get; set; }
        public System.Decimal C13 { get; set; }
        public System.Decimal C14 { get; set; }
        public System.Decimal C15 { get; set; }
        public System.Decimal C16 { get; set; }
        public System.Decimal C17 { get; set; }
        public System.Decimal C18 { get; set; }
        public System.Decimal C19 { get; set; }
        public System.Decimal C20 { get; set; }
        public System.Decimal C21 { get; set; }
        public System.Decimal C22 { get; set; }
        public System.Decimal C23 { get; set; }
        public System.Decimal C24 { get; set; }
        public System.Decimal C25 { get; set; }
        public System.Decimal C26 { get; set; }
        public System.Decimal C27 { get; set; }
        public System.Decimal C28 { get; set; }
        public System.Decimal C29 { get; set; }
        public System.Decimal C30 { get; set; }
        public System.Decimal C31 { get; set; }
        public System.Decimal C32 { get; set; }
        public System.Decimal C33 { get; set; }
        public System.Decimal C34 { get; set; }
        public System.Decimal C35 { get; set; }
        public System.Decimal C36 { get; set; }
        public System.Decimal C37 { get; set; }
        public System.Decimal C38 { get; set; }
        public System.Decimal C39 { get; set; }
        public System.Decimal C40 { get; set; }
        public System.Decimal R1 { get; set; }
        public System.Decimal R2 { get; set; }
        public System.Decimal R3 { get; set; }
        public System.Decimal R4 { get; set; }
        public System.Decimal R5 { get; set; }
        public System.Decimal R6 { get; set; }
        public System.Decimal R7 { get; set; }
        public System.Decimal R8 { get; set; }
        public System.Decimal R9 { get; set; }
        public System.Decimal R10 { get; set; }
        public System.Decimal R11 { get; set; }
        public System.Decimal R12 { get; set; }
        public System.Decimal R13 { get; set; }
        public System.Decimal R14 { get; set; }
        public System.Decimal R15 { get; set; }
        public System.Decimal R16 { get; set; }
        public System.Decimal R17 { get; set; }
        public System.Decimal R18 { get; set; }
        public System.Decimal R19 { get; set; }
        public System.Decimal R20 { get; set; }
        public System.Decimal R21 { get; set; }
        public System.Decimal R22 { get; set; }
        public System.Decimal R23 { get; set; }
        public System.Decimal R24 { get; set; }
        public System.Decimal R25 { get; set; }
        public System.Decimal R26 { get; set; }
        public System.Decimal R27 { get; set; }
        public System.Decimal R28 { get; set; }
        public System.Decimal R29 { get; set; }
        public System.Decimal R30 { get; set; }
        public System.Decimal R31 { get; set; }
        public System.Decimal R32 { get; set; }
        public System.Decimal R33 { get; set; }
        public System.Decimal R34 { get; set; }
        public System.Decimal R35 { get; set; }
        public System.Decimal R36 { get; set; }
        public System.Decimal R37 { get; set; }
        public System.Decimal R38 { get; set; }
        public System.Decimal R39 { get; set; }


        public System.Decimal X1 { get; set; }
        public System.Decimal X2 { get; set; }
        public System.Decimal X3 { get; set; }
        public System.Decimal X4 { get; set; }
        public System.Decimal X5 { get; set; }
        public System.Decimal X6 { get; set; }
        public System.Decimal X7 { get; set; }
        public System.Decimal X8 { get; set; }

        public System.Decimal Y1 { get; set; }
        public System.Decimal Y2 { get; set; }
        public System.Decimal Y3 { get; set; }
        public System.Decimal Y4 { get; set; }
        public System.Decimal Y5 { get; set; }
        public System.Decimal Y6 { get; set; }
        public System.Decimal Y7 { get; set; }
        public System.Decimal Y8 { get; set; }

    }



}
