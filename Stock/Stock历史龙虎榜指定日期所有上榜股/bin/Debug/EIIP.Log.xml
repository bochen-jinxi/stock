<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EIIP.Log</name>
    </assembly>
    <members>
        <member name="T:EIIP.Log.Util.PatternStringConverters.RandomStringPatternConverter">
            <summary>
            生成随机字符的模板转换器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternConverter">
            <summary>
            模板转换器基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.c_renderBufferSize">
            <summary>
            初始缓存大小
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.c_renderBufferMaxCapacity">
            <summary>
            最大缓存大小
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.SPACES">
            <summary>
            空格字串数组
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.m_next">
            <summary>
            下一模板转换器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.m_min">
            <summary>
            最小值
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.m_max">
            <summary>
            最大值
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.m_leftAlign">
            <summary>
            是否左对齐
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.m_option">
            <summary>
            转换器的选项
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternConverter.m_formatWriter">
            <summary>
            文本流
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.#ctor">
            <summary>
            实例化模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            转换模板至指定的文本流。应在继承类中实现。
            </summary>
            <param name="writer">存放格式化结果的文本流</param>
            <param name="state">模板转换器要执行的状态对象</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.SetNext(EIIP.Log.Util.PatternConverter)">
            <summary>
            将指定模板转换器设为下一模板转换器。返回该模板转换器。
            </summary>
            <param name="patternConverter">模板转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.Format(System.IO.TextWriter,System.Object)">
            <summary>
            以适当的格式将模板转换器写入文本流。
            </summary>
            <param name="writer">存放格式化结果的文本流</param>
            <param name="state">模板转换器要执行的状态对象</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.SpacePad(System.IO.TextWriter,System.Int32)">
            <summary>
            快速空格填充。
            </summary>
            <param name="writer">文本流</param>
            <param name="length">要填充的空格长度</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.WriteDictionary(System.IO.TextWriter,EIIP.Log.Repository.ILoggerRepository,System.Collections.IDictionary)">
            <summary>
            写入格式化后的字典。格式如{key1=value1, key2=value2, key3=value3}
            </summary>
            <param name="writer">文本流</param>
            <param name="repository">日志记录器池，规定写入格式；若未指定（null）则会调用 ToString 方法获取内容</param>
            <param name="value">要写入的字典</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternConverter.WriteObject(System.IO.TextWriter,EIIP.Log.Repository.ILoggerRepository,System.Object)">
            <summary>
            写入对象。
            </summary>
            <param name="writer">文本流</param>
            <param name="repository">日志记录器池，规定写入格式；若未指定（null）则会调用 ToString 方法获取内容</param>
            <param name="value">要写入的对象</param>
        </member>
        <member name="P:EIIP.Log.Util.PatternConverter.Next">
            <summary>
            获取下一模板转换器。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PatternConverter.FormattingInfo">
            <summary>
            获取或设置转换器的格式化信息。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PatternConverter.Option">
            <summary>
            获取或设置转换器选项。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.IOptionHandler">
            <summary>
            该接口被用于延迟激活一个配置对象。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.IOptionHandler.ActivateOptions">
            <summary>
            激活选项。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternStringConverters.RandomStringPatternConverter.s_random">
            <summary>
            共享的随机数发生器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternStringConverters.RandomStringPatternConverter.m_length">
            <summary>
            随机字串的长度，默认为4
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.RandomStringPatternConverter.ActivateOptions">
            <summary>
            初始化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.RandomStringPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            输出随机字串。
            </summary>
            <param name="writer">文本流</param>
            <param name="state">null, 不需设置</param>
        </member>
        <member name="T:EIIP.Log.Util.PatternParser">
            <summary>
            模板解析类。模板布局(PatternLayout)的大部分工作该类来完成。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternParser.ESCAPE_CHAR">
            <summary>
            关键字符
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternParser.m_head">
            <summary>
            链中头部模板解析器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternParser.m_tail">
            <summary>
            链中尾部模板解析器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternParser.m_pattern">
            <summary>
            模板
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternParser.m_patternConverters">
            <summary>
            模板类型转换池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.#ctor(System.String)">
            <summary>
            实例化模板解析类。
            </summary>
            <param name="pattern">要解析的模板。</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.Parse">
            <summary>
            解析模板至转换链，并返回转换链头。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.BuildCache">
            <summary>
            合并全局和实例中的转换器。返回所有转换器的名称列表。
            </summary>
            <returns>返回所有转换器的名称列表</returns>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.ParseInternal(System.String,System.String[])">
            <summary>
            解析指定模板。
            </summary>
            <param name="pattern">要解析的模板</param>
            <param name="matches">要适配模板的所有转换器名称。必须按字符串长度进行排序。</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.ProcessLiteral(System.String)">
            <summary>
            处理解析后文本。
            </summary>
            <param name="text">无格式文本</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.ProcessConverter(System.String,System.String,EIIP.Log.Util.FormattingInfo)">
            <summary>
            处理解析后的转换器模板。
            </summary>
            <param name="converterName">转换器名称</param>
            <param name="option">转换器选项</param>
            <param name="formattingInfo">转换器格式信息</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternParser.AddConverter(EIIP.Log.Util.PatternConverter)">
            <summary>
            重置解析器内部状态，并将指定的模板转换器加入转换链中。
            </summary>
            <param name="pc">要添加的模板转换器。</param>
        </member>
        <member name="P:EIIP.Log.Util.PatternParser.PatternConverters">
            <summary>
            获取解析器的模板转换器池。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternParser.StringLengthComparer">
            <summary>
            按字符串长库排序。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternParser.StringLengthComparer.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="T:EIIP.Log.ILog">
            <summary>
            定义应用实例记录信息的接口。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.ILoggerWrapper">
            <summary>
            所有包装器的基本接口。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.ILoggerWrapper.Logger">
            <summary>
            获取包装器的日志实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.ILog.Debug(System.Object)">
            <summary>
            调试级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.ILog.Debug(System.Object,System.Exception)">
            <summary>
            调试级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            调试级别记录格式。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            调试级别记录格式。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.Info(System.Object)">
            <summary>
            信息级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.ILog.Info(System.Object,System.Exception)">
            <summary>
            信息级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            信息级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            信息级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.Warn(System.Object)">
            <summary>
            警告级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.ILog.Warn(System.Object,System.Exception)">
            <summary>
            警告级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            警告级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            警告级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.Error(System.Object)">
            <summary>
            错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.ILog.Error(System.Object,System.Exception)">
            <summary>
            错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            错误级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            错误级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.Fatal(System.Object)">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.ILog.FatalFormat(System.String,System.Object[])">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.ILog.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="P:EIIP.Log.ILog.IsDebugEnabled">
            <summary>
            检查日志记录器是否允许调试级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.ILog.IsInfoEnabled">
            <summary>
            检查日志记录器是否允许信息级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.ILog.IsWarnEnabled">
            <summary>
            检查日志记录器是否允许警告级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.ILog.IsErrorEnabled">
            <summary>
            检查日志记录器是否允许错误级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.ILog.IsFatalEnabled">
            <summary>
            检查日志记录器是否允许严重错误级别。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Log.Core.LogException">
            <summary>
            日志异常基类（可序列化）。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LogException.#ctor">
            <summary>
            初始化 LogException 类的新实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LogException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化 LogException 类的新实例。
            </summary>
            <param name="message">错误信息</param>
        </member>
        <member name="M:EIIP.Log.Core.LogException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和嵌套异常初始化 LogException 类的新实例。
            </summary>
            <param name="message">错误信息</param>
            <param name="innerException">嵌套异常</param>
        </member>
        <member name="M:EIIP.Log.Core.LogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
            <param name="info">填充数据的SerializationInfo</param>
            <param name="context">被序列化的源</param>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.PatternStringConverter">
            <summary>
            EIIP.Log.Util.PatternString 类型转换器。(与 string 类型的双向转换)
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.IConvertTo">
            <summary>
            由类型转换器支持的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.IConvertTo.CanConvertTo(System.Type)">
            <summary>
            测试是否能转换为目标类型。
            </summary>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.IConvertTo.ConvertTo(System.Object,System.Type)">
            <summary>
            将对象转换为指定类型。
            </summary>
            <param name="source">要转换的对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.IConvertFrom">
            <summary>
            支持转换器的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.IConvertFrom.CanConvertFrom(System.Type)">
            <summary>
            测试是否能从源类型转换为目标对象类型。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.IConvertFrom.ConvertFrom(System.Object)">
            <summary>
            从指定源对象中转换
            </summary>
            <param name="source">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.PatternStringConverter.CanConvertTo(System.Type)">
            <summary>
            获取一个值，该值指示能否转换为目标类型（string）
            </summary>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.PatternStringConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            将对象转换为目标类型。
            </summary>
            <param name="source">要转换的对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.PatternStringConverter.CanConvertFrom(System.Type)">
            <summary>
            获取一个值，该值指示能否从源类型（string）进行转换。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.PatternStringConverter.ConvertFrom(System.Object)">
            <summary>
            转换源对象为 EIIP.Log.Util.PatternString 类型。
            </summary>
            <param name="source">要转换的源对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.ContextPropertiesBase">
            <summary>
            上下文属性基类。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ContextPropertiesBase.Item(System.String)">
            <summary>
            获取或设置属性。
            </summary>
        </member>
        <member name="T:EIIP.Log.LogManager">
            <summary>
            日志管理器。由客户端通过提供的静态方法（GetLogger）获取日志实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.LogManager.s_wrapperMap">
            <summary>
            LogImpl对象的包装池。
            </summary>
        </member>
        <member name="M:EIIP.Log.LogManager.Exists(System.String)">
            <summary>
            确定给定名称的记录器是否存在。存在就返回该记录器，不存在则返回null。
            </summary>
            <param name="name">要判定的记录器完全限定名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.Exists(System.String,System.String)">
            <summary>
            确定给定名称的记录器是否存在。存在就返回该记录器，不存在则返回null。
            </summary>
            <param name="repository">要查询的库</param>
            <param name="name">要判定的记录器完全限定名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            确定并返回指定名称的记录器，不存在则返回null。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="name">日志记录器的完全限定名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetCurrentLoggers">
            <summary>
            获取当前所有的日志记录器（并不含根记录器）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetCurrentLoggers(System.String)">
            <summary>
            获取指定库中所有的日志记录器（并不含根记录器）。
            </summary>
            <param name="repository">库</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            获取指定库中所有的日志记录器（并不含根记录器）。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetLogger(System.String)">
            <summary>
            获取指定名称的日志记录器。不存在则创建它。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetLogger(System.String,System.String)">
            <summary>
            获取指定名称的日志记录器。不存在则创建它。
            </summary>
            <param name="repository">所在库</param>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            获取指定名称的日志记录器。不存在则创建它。
            </summary>
            <param name="repositoryAssembly">库所在程序集</param>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetLogger(System.Type)">
            <summary>
             获取指定类型的日志记录器。不存在则创建它。
            </summary>
            <param name="type">日志记录器类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetLogger(System.String,System.Type)">
            <summary>
            获取指定类型的日志记录器。不存在则创建它。
            </summary>
            <param name="repository">所在库</param>
            <param name="type">日志记录器类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            获取指定类型的日志记录器。不存在则创建它。
            </summary>
            <param name="repositoryAssembly">库所在程序集</param>
            <param name="type">日志记录器类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.Shutdown">
            <summary>
            关闭日志系统
            </summary>
        </member>
        <member name="M:EIIP.Log.LogManager.ShutdownRepository">
            <summary>
            关闭缺省日志库。
            </summary>
        </member>
        <member name="M:EIIP.Log.LogManager.ShutdownRepository(System.String)">
            <summary>
            关闭指定名称日志库。
            </summary>
            <param name="repository">要关闭的库名称</param>
        </member>
        <member name="M:EIIP.Log.LogManager.ShutdownRepository(System.Reflection.Assembly)">
            <summary>
            关闭指定程序集日志库。
            </summary>
            <param name="repositoryAssembly">程序集</param>
        </member>
        <member name="M:EIIP.Log.LogManager.ResetConfiguration">
            <summary>
            重置配置。
            </summary>
        </member>
        <member name="M:EIIP.Log.LogManager.ResetConfiguration(System.String)">
            <summary>
            重置指定库配置。
            </summary>
            <param name="repository">库名称</param>
        </member>
        <member name="M:EIIP.Log.LogManager.ResetConfiguration(System.Reflection.Assembly)">
            <summary>
            重置指定程序集中库配置。
            </summary>
            <param name="repositoryAssembly">程序集</param>
        </member>
        <member name="M:EIIP.Log.LogManager.GetRepository">
            <summary>
            获取当前程序集的日志记录器库实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetRepository(System.String)">
            <summary>
            获取指定名称的日志记录器库实例。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetRepository(System.Reflection.Assembly)">
            <summary>
            获取指定程序集的日志记录器库实例。
            </summary>
            <returns></returns>
            <param name="repositoryAssembly">程序集</param>
        </member>
        <member name="M:EIIP.Log.LogManager.CreateRepository(System.Type)">
            <summary>
            创建指定类型的库。
            </summary>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.CreateRepository(System.String)">
            <summary>
            创建指定名称的库。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.CreateRepository(System.String,System.Type)">
            <summary>
            创建指定名称和类型的库。
            </summary>
            <param name="repository">库名称</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            创建指定程序集和类型的库。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.GetAllRepositories">
            <summary>
            获取所有库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.WrapLogger(EIIP.Log.Core.ILogger)">
            <summary>
            获取指定日志记录器的包装器。
            </summary>
            <param name="logger">日志记录器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.WrapLoggers(EIIP.Log.Core.ILogger[])">
            <summary>
            获取指定日志记录器的包装器。
            </summary>
            <param name="loggers">日志记录器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.LogManager.WrapperCreationHandler(EIIP.Log.Core.ILogger)">
            <summary>
            创建日志记录包装器对象。
            </summary>
            <param name="logger">要包装的日志记录器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.IdentityPatternConverter">
            <summary>
            帐号身份模板转换器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.PatternLayoutConverter">
            <summary>
            模板布局转换器基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.Pattern.PatternLayoutConverter.m_ignoresException">
            <summary>
            指示转换器是否忽略异常。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.PatternLayoutConverter.#ctor">
            <summary>
            实例化模板布局转换器
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            转换输出，需在继承类中实现。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.PatternLayoutConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            转换输出。
            </summary>
            <param name="writer">文本流</param>
            <param name="state">要处理的状态对象</param>
        </member>
        <member name="P:EIIP.Log.Layout.Pattern.PatternLayoutConverter.IgnoresException">
            <summary>
            获取或设置一个值，该值指示转换器是否忽略异常。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.IdentityPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出帐号身份。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Layout.Layout2RawLayoutAdapter">
            <summary>
            适配 ILayout 至 IRawLayout 的适配器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.IRawLayout">
            <summary>
            原始视图对象。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.IRawLayout.Format(EIIP.Log.Core.LoggingEvent)">
            <summary>
            格式化事件对象。
            </summary>
            <param name="loggingEvent">要格式化的事件对象</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.Log.Layout.Layout2RawLayoutAdapter.m_layout">
            <summary>
            要适配的视图
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Layout2RawLayoutAdapter.#ctor(EIIP.Log.Layout.ILayout)">
            <summary>
            实例化适配器。
            </summary>
            <param name="layout">要适配的视图</param>
            <remarks></remarks>
        </member>
        <member name="M:EIIP.Log.Layout.Layout2RawLayoutAdapter.Format(EIIP.Log.Core.LoggingEvent)">
            <summary>
            格式化事件对象。
            </summary>
            <param name="loggingEvent">要格式化的事件对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Core.LoggerManager">
            <summary>
            管理创建的日志记录器库的管理器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggerManager.s_repositorySelector">
            <summary>
            初始化的默认库选择器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.#cctor">
            <summary>
            实例构造器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.RegisterAppDomainEvents">
            <summary>
            登记退出进程和卸载应用程序域时触发的事件。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetRepository(System.String)">
            <summary>
            获取指定名称的日志记录器库实例。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetRepository(System.Reflection.Assembly)">
            <summary>
            获取指定含有库程序集的日志记录器库实例。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.Exists(System.String,System.String)">
            <summary>
            获取库中指定名称的日志记录器。未找到返回null。
            </summary>
            <param name="repository">库名称</param>
            <param name="name">日志记录器的完全限定名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.Exists(System.Reflection.Assembly,System.String)">
            <summary>
            获取指定名称的日志记录器。未找到返回null。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="name">日志记录器的完全限定名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetCurrentLoggers(System.String)">
            <summary>
            获取指定库中所有的日志记录器。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetCurrentLoggers(System.Reflection.Assembly)">
            <summary>
            获取指定程序集里库中所有的日志记录器。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetLogger(System.String,System.String)">
            <summary>
            获取库中指定名称的日志记录器，如不存在则创建它。
            </summary>
            <param name="repository">库名称</param>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.String)">
            <summary>
            获取指定名称的日志记录器，如不存在则创建它。
            </summary>
            <param name="repositoryAssembly">含库的程序集</param>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetLogger(System.String,System.Type)">
            <summary>
            获取库中指定类型的日志记录器。
            </summary>
            <param name="repository">库名称</param>
            <param name="type">日志记录器的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetLogger(System.Reflection.Assembly,System.Type)">
            <summary>
            获取指定类型的日志记录器。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="type">日志记录器的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.Shutdown">
            <summary>
            关闭日志系统。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.ShutdownRepository(System.String)">
            <summary>
            关闭指定库。
            </summary>
            <param name="repository">要关闭的库名</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.ShutdownRepository(System.Reflection.Assembly)">
            <summary>
            关闭指定库程序集中的库。
            </summary>
            <param name="repositoryAssembly">库所在程序集</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.ResetConfiguration(System.String)">
            <summary>
            重置指定库的配置。
            </summary>
            <param name="repository">库名称</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.ResetConfiguration(System.Reflection.Assembly)">
            <summary>
            重置指定库程序集中库的配置。
            </summary>
            <param name="repositoryAssembly">库程序集</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.CreateRepository(System.String)">
            <summary>
            创建指定名称的库。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.CreateRepository(System.String,System.Type)">
            <summary>
            创建指定名称和类型的库。
            </summary>
            <param name="repository">库名称</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            创建指定程序集和类型的库。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetAllRepositories">
            <summary>
            获取当前定义的所有的库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.GetVersionInfo">
            <summary>
            获取相关版本信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.OnDomainUnload(System.Object,System.EventArgs)">
            <summary>
            当默认应用程序域退出时，在默认应用程序域上发生的事件。
            </summary>
            <param name="sender">AppDomain 应用程序域，它是一个应用程序在其中执行的独立环境。</param>
            <param name="e">null</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggerManager.OnProcessExit(System.Object,System.EventArgs)">
            <summary>
            当默认应用程序域的父进程退出时，在默认应用程序域上发生的事件。
            </summary>
            <param name="sender">AppDomain 应用程序域，它是一个应用程序在其中执行的独立环境。</param>
            <param name="e">null</param>
        </member>
        <member name="P:EIIP.Log.Core.LoggerManager.RepositorySelector">
            <summary>
            获取或设置库选择器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.Level">
            <summary>
            定义级别集。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.m_levelValue">
            <summary>
            级别的值
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.m_levelName">
            <summary>
            级别的名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.m_levelDisplayName">
            <summary>
            级别的显示名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Off">
            <summary>
            指定比其它还高的级别。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Emergency">
            <summary>
            指定非常严重的系统级错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Fatal">
            <summary>
            指定非常严重的会导致应用中断的错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Alert">
            <summary>
            指定警告级错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Critical">
            <summary>
            指定临界级错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Severe">
            <summary>
            指定严重级错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Error">
            <summary>
            指定一般性错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Warn">
            <summary>
            指定警告级信息。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Notice">
            <summary>
            指定通知级信息。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Info">
            <summary>
            指定一般性信息。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Debug">
            <summary>
            指定调试级别。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.Trace">
            <summary>
            指定跟踪级别。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.Level.All">
            <summary>
            指定所有级别。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.Level.#ctor(System.Int32,System.String,System.String)">
            <summary>
            实例化级别类。
            </summary>
            <param name="level">级别代表的整型值，值越高表示更高的系统级别。</param>
            <param name="levelName">级别的名称</param>
            <param name="displayName">级别的显示名称</param>
        </member>
        <member name="M:EIIP.Log.Core.Level.#ctor(System.Int32,System.String)">
            <summary>
            实例化级别类。
            </summary>
            <param name="level">级别代表的整型值，值越高表示更高的系统级别。</param>
            <param name="levelName">级别的名称</param>
        </member>
        <member name="M:EIIP.Log.Core.Level.ToString">
            <summary>
            返回级别名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.Equals(System.Object)">
            <summary>
            比较级别。
            </summary>
            <param name="o">比较对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.GetHashCode">
            <summary>
            返回哈希码(级别值)。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.CompareTo(System.Object)">
            <summary>
            比较。
            </summary>
            <param name="r">级别实例或null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.op_GreaterThan(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            大于比较符
            </summary>
            <param name="l">左值</param>
            <param name="r">右值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.op_LessThan(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            小于比较符
            </summary>
            <param name="l">左值</param>
            <param name="r">右值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.op_GreaterThanOrEqual(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            大于等于比较符
            </summary>
            <param name="l">左值</param>
            <param name="r">右值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.op_LessThanOrEqual(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            小于等于比较符
            </summary>
            <param name="l">左值</param>
            <param name="r">右值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.op_Equality(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            等于比较符
            </summary>
            <param name="l">左值</param>
            <param name="r">右值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.op_Inequality(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            不等于比较符
            </summary>
            <param name="l">左值</param>
            <param name="r">右值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.Level.Compare(EIIP.Log.Core.Level,EIIP.Log.Core.Level)">
            <summary>
            比较两个指定 Level 实例。
            </summary>
            <param name="l">Level 实例</param>
            <param name="r">Level 实例</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.Level.Name">
            <summary>
            获取级别的名称
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.Level.Value">
            <summary>
            获取级别的值。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.Level.DisplayName">
            <summary>
            获取级别的显示名称
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.SystemInfo">
            <summary>
            系统特殊信息实用工具类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.SystemInfo.EmptyTypes">
            <summary>
            获取一个空的类型数组。(.NET Compact Framework 1.0, 不支持 Type.EmptyTypes)
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.SystemInfo.s_hostName">
            <summary>
            缓存的当前计算机的主机名或机器名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.SystemInfo.s_appFriendlyName">
            <summary>
            缓存的当前应用程序的友好名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.SystemInfo.s_processStartTime">
            <summary>
            进程启动的时间
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.AssemblyLocationInfo(System.Reflection.Assembly)">
            <summary>
            获取指定程序集位置。
            </summary>
            <param name="myAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.AssemblyQualifiedName(System.Type)">
            <summary>
            获取指定类型的完全限定名及程序集的显示名称。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.AssemblyShortName(System.Reflection.Assembly)">
            <summary>
            获取程序集的缩写名称。
            </summary>
            <param name="myAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.AssemblyFileName(System.Reflection.Assembly)">
            <summary>
            获取程序集文件名。
            </summary>
            <param name="myAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.GetTypeFromString(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            从关联指定类型的程序集中加载由类型字串指定的类型。
            </summary>
            <param name="relativeType">关联程序集的类型</param>
            <param name="typeName">类型名称</param>
            <param name="throwOnError">设置一个值，该值指示当类型不能被加载时是否抛出异常</param>
            <param name="ignoreCase">是否忽略类型名称大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.GetTypeFromString(System.String,System.Boolean,System.Boolean)">
            <summary>
            从当前程序集中加载由类型字串指定的类型。
            </summary>
            <param name="typeName">类型名称</param>
            <param name="throwOnError">设置一个值，该值指示当类型不能被加载时是否抛出异常</param>
            <param name="ignoreCase">是否忽略类型名称大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.GetTypeFromString(System.Reflection.Assembly,System.String,System.Boolean,System.Boolean)">
            <summary>
            加载由类型字串指定的类型。失败返回null。
            </summary>
            <param name="relativeAssembly">类型关联的程序集</param>
            <param name="typeName">类型名称</param>
            <param name="throwOnError">设置一个值，该值指示当类型不能被加载时是否抛出异常</param>
            <param name="ignoreCase">是否忽略类型名称大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.NewGuid">
            <summary>
            生成一个 Guid 类的新实例。  
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.CreateArgumentOutOfRangeException(System.String,System.Object,System.String)">
            <summary>
            创建 ArgumentOutOfRangeException 异常。
            </summary>
            <param name="parameterName">导致异常的参数的名称。</param>
            <param name="actualValue">导致此异常的参数值。</param>
            <param name="message">描述错误的消息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.TryParse(System.String,System.Int32@)">
            <summary>
            获取一个值，该值指示是否能解析指定的字符串为整型类型。
            </summary>
            <param name="s">要解析的字符串</param>
            <param name="val">解析的输出结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.TryParse(System.String,System.Int64@)">
            <summary>
            获取一个值，该值指示是否能解析指定的字符串为长整型类型。
            </summary>
            <param name="s">要解析的字符串</param>
            <param name="val">解析的输出结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.SystemInfo.ConvertToFullPath(System.String)">
            <summary>
            返回指定路径字符串的绝对路径。  
            </summary>
            <param name="path">要转换的本地路径</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.NewLine">
            <summary>
            获取为此环境定义的换行字符串。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.ApplicationBaseDirectory">
            <summary>
            获取基目录，它由程序集冲突解决程序用来探测程序集。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.ConfigurationFileLocation">
            <summary>
            获取或设置应用程序域的配置文件的名称。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.EntryAssemblyLocation">
            <summary>
            获取默认应用程序域中的进程可执行文件位置。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.CurrentThreadId">
            <summary>
            获取当前线程标识符ID。  
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.HostName">
            <summary>
            获取当前计算机的主机名或机器名。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.ApplicationFriendlyName">
            <summary>
            获取此应用程序域的友好名称。  
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.SystemInfo.ProcessStartTime">
            <summary>
            获取关联进程启动的时间。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.ReaderWriterLock">
            <summary>
            读写锁类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReaderWriterLock.#ctor">
            <summary>
            实例化读写锁类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReaderWriterLock.AcquireReaderLock">
            <summary>
            获取读线程锁。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReaderWriterLock.ReleaseReaderLock">
            <summary>
            减少锁计数。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReaderWriterLock.AcquireWriterLock">
            <summary>
            获取写线程锁。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReaderWriterLock.ReleaseWriterLock">
            <summary>
             减少写线程锁上的锁计数。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.NullDictionaryEnumerator">
            <summary>
            空字典枚举数。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.NullDictionaryEnumerator.s_instance">
            <summary>
            空字典枚举数实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.NullDictionaryEnumerator.#ctor">
            <summary>
            实例化空字典枚举数。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.NullDictionaryEnumerator.MoveNext">
            <summary>
            移至下一枚举数。总是返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.NullDictionaryEnumerator.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NullDictionaryEnumerator.Instance">
            <summary>
            获取空字典枚举数实例。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.NullDictionaryEnumerator.Current">
            <summary>
            获取当前枚举数。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NullDictionaryEnumerator.Key">
            <summary>
            获取当前键。总是会抛出异常。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NullDictionaryEnumerator.Value">
            <summary>
            获取当前值。总是会抛出异常。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NullDictionaryEnumerator.Entry">
            <summary>
            获取当前实体。总是会抛出异常。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.LevelMappingEntry">
            <summary>
            级别映射实体。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LevelMappingEntry.#ctor">
            <summary>
            实例化级别映射实体。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LevelMappingEntry.ActivateOptions">
            <summary>
            初始化
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.LevelMappingEntry.Level">
            <summary>
            获取或设置级别。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.LevelMapping">
            <summary>
            管理级别映射实体类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LevelMapping.#ctor">
            <summary>
            实例化管理级别映射实体类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LevelMapping.Add(EIIP.Log.Util.LevelMappingEntry)">
            <summary>
            添加实体。
            </summary>
            <param name="entry">实体</param>
        </member>
        <member name="M:EIIP.Log.Util.LevelMapping.Lookup(EIIP.Log.Core.Level)">
            <summary>
            查询指定级别实体。没找到返回null。
            </summary>
            <param name="level">级别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.LevelMapping.ActivateOptions">
            <summary>
            初始化选项。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.GlobalContextProperties">
            <summary>
            全局上下文属性类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.GlobalContextProperties.m_readOnlyProperties">
            <summary>
            属性的只读副本。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.GlobalContextProperties.m_syncRoot">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.GlobalContextProperties.#ctor">
            <summary>
            实例化全局上下文属性类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.GlobalContextProperties.Remove(System.String)">
            <summary>
            移除指定属性。
            </summary>
            <param name="key">属性</param>
        </member>
        <member name="M:EIIP.Log.Util.GlobalContextProperties.Clear">
            <summary>
            清除所有属性
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.GlobalContextProperties.GetReadOnlyProperties">
            <summary>
            获取所有属性的只读副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.GlobalContextProperties.Item(System.String)">
            <summary>
            获取或设置属性
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator">
            <summary>
            XML DOM 配置器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.INHERITED">
            <summary>
            使用在级别元素中的标志
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.m_appenderBag">
            <summary>
            key: 附加器名称, value: 附加器
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.m_hierarchy">
            <summary>
            已配置完成的层级结构（只读）
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.#ctor(EIIP.Log.Repository.Hierarchy.Hierarchy)">
            <summary>
            以指定的层级结构实例化配置器。
            </summary>
            <param name="hierarchy">层级结构</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            通过解析DOM树的XML元素来配置层级结构。
            </summary>
            <param name="element">DOM树的XML元素</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.FindAppenderByReference(System.Xml.XmlElement)">
            <summary>
            由 IDREF 解析附着器。
            </summary>
            <param name="appenderRef">附着器引用元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ParseAppender(System.Xml.XmlElement)">
            <summary>
            解析附着器元素。失败返回null。
            </summary>
            <param name="appenderElement">附着器元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLogger(System.Xml.XmlElement)">
            <summary>
            解析日志记录器的元素。
            从&lt;logger&gt;元素中创建新 EIIP.Log.Logger 实例对象。
            </summary>
            <param name="loggerElement">日志记录器的元素</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRoot(System.Xml.XmlElement)">
            <summary>
            解析根日志记录器元素。
            </summary>
            <param name="rootElement">根日志记录器元素</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ParseChildrenOfLoggerElement(System.Xml.XmlElement,EIIP.Log.Repository.Hierarchy.Logger,System.Boolean)">
            <summary>
            解析 &lt;logger&gt; 元素的子元素。
            </summary>
            <param name="catElement">类元素</param>
            <param name="log">日志记录器实例</param>
            <param name="isRoot">指示设置的日志记录器是否为根记录器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ParseRenderer(System.Xml.XmlElement)">
            <summary>
            解析呈现器元素。
            </summary>
            <param name="element">呈现器元素</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ParseLevel(System.Xml.XmlElement,EIIP.Log.Repository.Hierarchy.Logger,System.Boolean)">
            <summary>
            解析级别元素
            </summary>
            <param name="element">级别元素</param>
            <param name="log">设置级别的日志记录器</param>
            <param name="isRoot">指示日志记录器是否为根记录器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.SetParameter(System.Xml.XmlElement,System.Object)">
            <summary>
            设置对象的参数。
            </summary>
            <param name="element">参数元素</param>
            <param name="target">要设置参数的目标对象</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.FindMethodInfo(System.Type,System.String)">
            <summary>
            从目标类型中获取有指定名称的方法。
            该方法必须是目标类型的公开实例方法；必须按指定名称或 (Add + 名称) 的方式命名；必须带一个唯一参数。
            </summary>
            <param name="targetType">拥有方法的目标类型</param>
            <param name="name">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ConvertStringTo(System.Type,System.String)">
            <summary>
            将字符串值转换为目标类型。
            </summary>
            <param name="type">目标类型</param>
            <param name="value">要转换的类型字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.CreateObjectFromXml(System.Xml.XmlElement,System.Type,System.Type)">
            <summary>
            从指定的 XML 中创建对象。失败返回null。
            </summary>
            <param name="element">包含对象定义的XML元素</param>
            <param name="defaultTargetType">缺省的目标类型</param>
            <param name="typeConstraint">设置一种返回的类型,要求新类型实例必须是该类型或是该类型的继承类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ConfigUpdateMode">
            <summary>
            配置更新模式
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ConfigUpdateMode.Merge">
            <summary>
            合并
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.XmlHierarchyConfigurator.ConfigUpdateMode.Overwrite">
            <summary>
            覆写
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.IFixingRequired">
            <summary>
            修复请求接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.IFixingRequired.GetFixedObject">
            <summary>
            获取修复后的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException">
            <summary>
            发生类型转换错误时引发的异常。 
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException.#ctor">
            <summary>
            初始化 ConversionNotSupportedException 类的新实例。 
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String)">
            <summary>
            使用指定错误信息初始化 ConversionNotSupportedException 类的新实例。  
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误信息和对导致此异常的内部异常的引用来初始化 ConversionNotSupportedException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
            <param name="innerException">导致当前异常的异常。如果 innerException 参数不为空引用，则在处理内部异常的 catch 块中引发当前异常。</param>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用序列化数据初始化 ConversionNotSupportedException 类的新实例。  
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object)">
            <summary>
            创建 ConversionNotSupportedException 类的新实例。
            </summary>
            <param name="destinationType">目标类型</param>
            <param name="sourceValue">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConversionNotSupportedException.Create(System.Type,System.Object,System.Exception)">
            <summary>
            创建 ConversionNotSupportedException 类的新实例。
            </summary>
            <param name="destinationType">目标类型</param>
            <param name="sourceValue">要转换的对象</param>
            <param name="innerException">导致当前异常的异常。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.QuietTextWriter">
            <summary>
            不抛出异常的文本流。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.TextWriterAdapter">
            <summary>
            文本流适配器基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.TextWriterAdapter.m_writer">
            <summary>
            文本流
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.#ctor(System.IO.TextWriter)">
            <summary>
            实例化文本流适配器
            </summary>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.Close">
            <summary>
            关闭当前编写器并释放任何与该编写器关联的系统资源。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.Dispose(System.Boolean)">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.Flush">
            <summary>
            清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.Write(System.Char)">
            <summary>
            将字符写入文本流。
            </summary>
            <param name="value">要写入文本流中的字符。</param>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            将字符的子数组写入文本流。  
            </summary>
            <param name="buffer">要从中写出数据的字符数组。</param>
            <param name="index">在缓冲区中开始索引。</param>
            <param name="count">要写入的字符数。</param>
        </member>
        <member name="M:EIIP.Log.Util.TextWriterAdapter.Write(System.String)">
            <summary>
             将字符串写入文本流。
            </summary>
            <param name="value">要写入的字符串。</param>
        </member>
        <member name="P:EIIP.Log.Util.TextWriterAdapter.Encoding">
            <summary>
            获取文本编码。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.TextWriterAdapter.FormatProvider">
            <summary>
            获取控制格式设置的对象。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.TextWriterAdapter.NewLine">
            <summary>
            获取或设置由当前 TextWriter 使用的行结束符字符串。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.TextWriterAdapter.Writer">
            <summary>
            获取或设置由当前 TextWriter。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.QuietTextWriter.m_errorHandler">
            <summary>
            附着器的错误处理器接口。处理所有异常。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.QuietTextWriter.m_closed">
            <summary>
            指示文本流是否已被关闭。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.QuietTextWriter.#ctor(System.IO.TextWriter,EIIP.Log.Core.IErrorHandler)">
            <summary>
            实例化不抛出异常的文本流。
            </summary>
            <param name="writer">文本流</param>
            <param name="errorHandler">t附着器的错误处理器接口。处理所有异常。</param>
        </member>
        <member name="M:EIIP.Log.Util.QuietTextWriter.Write(System.Char)">
            <summary>
            将字符写入文本流。
            </summary>
            <param name="value">要写入文本流中的字符。</param>
        </member>
        <member name="M:EIIP.Log.Util.QuietTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            将字符的子数组写入文本流。  
            </summary>
            <param name="buffer">要从中写出数据的字符数组。</param>
            <param name="index">在缓冲区中开始索引。</param>
            <param name="count">要写入的字符数。</param>
        </member>
        <member name="M:EIIP.Log.Util.QuietTextWriter.Write(System.String)">
            <summary>
             将字符串写入文本流。
            </summary>
            <param name="value">要写入的字符串。</param>
        </member>
        <member name="M:EIIP.Log.Util.QuietTextWriter.Close">
            <summary>
            关闭当前编写器并释放任何与该编写器关联的系统资源。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.QuietTextWriter.ErrorHandler">
            <summary>
            获取或设置附着器的错误处理器接口。处理所有异常。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.QuietTextWriter.Closed">
            <summary>
            获取一个值，该值指示文本流是否已关闭。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.LiteralPatternConverter">
            <summary>
            文本字串模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.LiteralPatternConverter.SetNext(EIIP.Log.Util.PatternConverter)">
            <summary>
            设置指定的模板转换器为下一模板转换器，并返回该模板转换器。
            </summary>
            <param name="pc">模板转换器</param>
            <returns>下一模板转换器</returns>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.LiteralPatternConverter.Format(System.IO.TextWriter,System.Object)">
            <summary>
            将文本模板写入文本流。
            </summary>
            <param name="writer">存放结果的文本流</param>
            <param name="state">状态对象，这里可设为null。无需设置该参数。</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.LiteralPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            转换(呈现)该模板。只为重写，所以不要调用该方法。
            </summary>
            <param name="writer">存放结果的文本流</param>
            <param name="state">状态对象，这里可设为null。无需设置该参数。</param>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.IdentityPatternConverter">
            <summary>
            帐户模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.IdentityPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            输出当前帐户信息。
            </summary>
            <param name="writer">文本流</param>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Log.Util.LogicalThreadContextProperties">
            <summary>
            逻辑线程上下文属性集。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LogicalThreadContextProperties.#ctor">
            <summary>
            实例化逻辑线程上下文属性集。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LogicalThreadContextProperties.Remove(System.String)">
            <summary>
            移除指定属性
            </summary>
            <param name="key">属性</param>
        </member>
        <member name="M:EIIP.Log.Util.LogicalThreadContextProperties.Clear">
            <summary>
            清除所有属性
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LogicalThreadContextProperties.GetProperties(System.Boolean)">
            <summary>
            获取属性字典。
            </summary>
            <param name="create">如字典不存在是否需要创建</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.LogicalThreadContextProperties.Item(System.String)">
            <summary>
            获取或设置属性
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.CountingQuietTextWriter">
            <summary>
            包含写入字节数量和不抛出异常的文本流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CountingQuietTextWriter.m_countBytes">
            <summary>
            写入的字节总数。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.CountingQuietTextWriter.#ctor(System.IO.TextWriter,EIIP.Log.Core.IErrorHandler)">
            <summary>
            实例化包含写入字节数量和不抛出异常的文本流。
            </summary>
            <param name="writer">文本流</param>
            <param name="errorHandler">错误处理器</param>
        </member>
        <member name="M:EIIP.Log.Util.CountingQuietTextWriter.Write(System.String)">
            <summary>
             将字符串写入文本流。
            </summary>
            <param name="str">要写入的字符串。</param>
        </member>
        <member name="P:EIIP.Log.Util.CountingQuietTextWriter.Count">
            <summary>
            获取或设置写入的字节总数。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.LoggerCreationEventHandler">
            <summary>
            表示处理 日志记录器创建 事件的方法。
            </summary>
            <param name="sender">日志记录器创建所在层级</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.LoggerCreationEventArgs">
            <summary>
            提供日志记录器创建事件的参数。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.LoggerCreationEventArgs.m_log">
            <summary>
            创建的日志记录器
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.LoggerCreationEventArgs.#ctor(EIIP.Log.Repository.Hierarchy.Logger)">
            <summary>
            实例化日志创建事件参数。
            </summary>
            <param name="log">创建的日志记录器</param>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.LoggerCreationEventArgs.Logger">
            <summary>
            获取创建的日志记录器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.Hierarchy">
            <summary>
            日志记录器层级组织结构。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.LoggerRepositorySkeleton">
            <summary>
            日志记录器库架构基类。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.ILoggerRepository">
            <summary>
            定义日志记录器库的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.Exists(System.String)">
            <summary>
            检测指定名称的日志记录器是否在库中存在。存在返回该日志记录器，不存在返回null。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.GetCurrentLoggers">
            <summary>
            获取当前所有的日志记录器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.GetLogger(System.String)">
            <summary>
            获取指定名称的日志记录器。如不存在则创建它。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.Shutdown">
            <summary>
            关闭库。当应用程序结束时调用。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.ResetConfiguration">
            <summary>
            重置库配置于缺省状态。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.Log(EIIP.Log.Core.LoggingEvent)">
            <summary>
            记录事件。
            </summary>
            <param name="logEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Repository.ILoggerRepository.GetAppenders">
            <summary>
            获取所有配置过的附着器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.Name">
            <summary>
            获取或设置日志记录器库的名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.RendererMap">
            <summary>
            获取库中存取呈现器的呈现器池。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.PluginMap">
            <summary>
            获取库中插件池。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.LevelMap">
            <summary>
            获取库中级别对象池。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.Threshold">
            <summary>
            获取或设置库中所有事件的起始级别。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.Configured">
            <summary>
            获取或设置一个值，该值指示该库是否已完成配置。
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.ILoggerRepository.ShutdownEvent">
            <summary>
            库关闭时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.ILoggerRepository.ConfigurationReset">
            <summary>
            库配置重置时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.ILoggerRepository.ConfigurationChanged">
            <summary>
            配置更改时事件成员
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.ILoggerRepository.Properties">
            <summary>
            获取库的属性。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_name">
            <summary>
            日志记录器库名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_rendererMap">
            <summary>
            呈现器池
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_pluginMap">
            <summary>
            插件池
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_levelMap">
            <summary>
            级别池
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_threshold">
            <summary>
            开始级别
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_configured">
            <summary>
            指示是否已经配置。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.LoggerRepositorySkeleton.m_properties">
            <summary>
            属性集
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.#ctor(EIIP.Log.Util.PropertiesDictionary)">
            <summary>
            以指定属性实例化。
            </summary>
            <param name="properties">库的属性</param>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.Exists(System.String)">
            <summary>
            检测指定名称的日志记录器是否在库中存在。存在返回该日志记录器，不存在返回null。由继承类实现。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.GetCurrentLoggers">
            <summary>
            获取当前所有的日志记录器。由继承类实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.GetLogger(System.String)">
            <summary>
            获取指定名称的日志记录器。如不存在则创建它。由继承类实现。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.Shutdown">
            <summary>
            关闭库。当应用程序结束时调用。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.ResetConfiguration">
            <summary>
            重置库配置于缺省状态。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.Log(EIIP.Log.Core.LoggingEvent)">
            <summary>
            记录事件。由继承类实现。
            </summary>
            <param name="logEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.GetAppenders">
            <summary>
            获取所有配置过的附着器。由继承类实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.AddBuiltinLevels">
            <summary>
            添加预定级别
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.AddRenderer(System.Type,EIIP.Log.ObjectRenderer.IObjectRenderer)">
            <summary>
            为指定类型添加呈现器。
            </summary>
            <param name="typeToRender">呈现器支持的类型</param>
            <param name="rendererInstance">呈现器实例</param>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.OnShutdown(System.EventArgs)">
            <summary>
            当库关闭时，处理关闭事件。
            </summary>
            <param name="e">空参数</param>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.OnConfigurationReset(System.EventArgs)">
            <summary>
            处理重置库配置时触发的事件
            </summary>
            <param name="e">空参数</param>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.OnConfigurationChanged(System.EventArgs)">
            <summary>
            处理库配置更改时触发的事件
            </summary>
            <param name="e">空参数</param>
        </member>
        <member name="M:EIIP.Log.Repository.LoggerRepositorySkeleton.RaiseConfigurationChanged(System.EventArgs)">
            <summary>
            触发库配置更改事件
            </summary>
            <param name="e">空参数</param>
        </member>
        <member name="E:EIIP.Log.Repository.LoggerRepositorySkeleton.m_shutdownEvent">
            <summary>
            库关闭事件
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.LoggerRepositorySkeleton.m_configurationResetEvent">
            <summary>
            库配置重置事件
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.LoggerRepositorySkeleton.m_configurationChangedEvent">
            <summary>
            库配置更改事件
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.Name">
            <summary>
            获取或设置日志记录器库的名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.Threshold">
            <summary>
            获取或设置库中所有事件的起始级别。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.RendererMap">
            <summary>
            获取库中存取呈现器的呈现器池。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.PluginMap">
            <summary>
            获取库中插件池。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.LevelMap">
            <summary>
            获取库中级别对象池。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.Configured">
            <summary>
            获取或设置一个值，该值指示该库是否已完成配置。
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.LoggerRepositorySkeleton.ShutdownEvent">
            <summary>
            库关闭时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.LoggerRepositorySkeleton.ConfigurationReset">
            <summary>
            库配置重置时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.LoggerRepositorySkeleton.ConfigurationChanged">
            <summary>
            配置更改时事件成员
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.LoggerRepositorySkeleton.Properties">
            <summary>
            获取库的属性。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.IBasicRepositoryConfigurator">
            <summary>
            简单库配置器接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.IBasicRepositoryConfigurator.Configure(EIIP.Log.Appender.IAppender)">
            <summary>
            使用指定附着器初始化库。
            </summary>
            <param name="appender">附着器</param>
        </member>
        <member name="T:EIIP.Log.Repository.IXmlRepositoryConfigurator">
            <summary>
            使用 XML 配置库。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.IXmlRepositoryConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            以指定配置初始化库。
            </summary>
            <param name="element">XML 配置数据</param>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Hierarchy.m_defaultFactory">
            <summary>
            缺省日志记录器工厂。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Hierarchy.m_ht">
            <summary>
            日志记录器缓存池。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Hierarchy.m_root">
            <summary>
            根日志记录器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Hierarchy.m_emittedNoAppenderWarning">
            <summary>
            指示是否发出没有附着器警告信息。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.#ctor">
            <summary>
            实例化日志记录器层级组织结构。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.#ctor(EIIP.Log.Util.PropertiesDictionary)">
            <summary>
            以指定属性实例化日志记录器层级组织结构。
            </summary>
            <param name="properties">要传给库的属性</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.#ctor(EIIP.Log.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            以指定工厂实例化日志记录器层级组织结构。
            </summary>
            <param name="loggerFactory">日志记录器工厂</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.#ctor(EIIP.Log.Util.PropertiesDictionary,EIIP.Log.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            以指定属性和工厂实例化日志记录器层级组织结构。
            </summary>
            <param name="properties">要传给库的属性</param>
            <param name="loggerFactory">日志记录器工厂</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.Exists(System.String)">
            <summary>
            检测指定名称的日志记录器是否在库中存在。存在返回该日志记录器，不存在返回null。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.GetCurrentLoggers">
            <summary>
            获取当前所有的日志记录器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.GetLogger(System.String)">
            <summary>
            获取指定名称的日志记录器。如不存在则创建它。由继承类实现。
            </summary>
            <param name="name">日志记录器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.Shutdown">
            <summary>
            安全关闭层级结构，移除所有日志记录器的附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.ResetConfiguration">
            <summary>
            重置配置。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.Log(EIIP.Log.Core.LoggingEvent)">
            <summary>
            日志登记。
            </summary>
            <param name="logEvent">要登记的事件</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.GetAppenders">
            <summary>
            获取当前配置的所有附着器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.CollectAppender(System.Collections.ArrayList,EIIP.Log.Appender.IAppender)">
            <summary>
            由指定附着器获取所有附着器（通过附着器附加至对象的接口）
            </summary>
            <param name="appenderList">收集附着器的集合</param>
            <param name="appender">指定一个附着器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.CollectAppenders(System.Collections.ArrayList,EIIP.Log.Core.IAppenderAttachable)">
            <summary>
            由指定附着器附加至对象的接口容器获取所有附着器
            </summary>
            <param name="appenderList">收集附着器的集合</param>
            <param name="container">附着器附加至对象的接口容器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.EIIP#Log#Repository#IBasicRepositoryConfigurator#Configure(EIIP.Log.Appender.IAppender)">
            <summary>
            使用指定附着器初始化日志系统。
            </summary>
            <param name="appender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.BasicRepositoryConfigure(EIIP.Log.Appender.IAppender)">
            <summary>
            使用指定附着器初始化日志系统。
            </summary>
            <param name="appender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.EIIP#Log#Repository#IXmlRepositoryConfigurator#Configure(System.Xml.XmlElement)">
            <summary>
            以指定配置初始化日志系统。
            </summary>
            <param name="element">XML 配置数据</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.XmlRepositoryConfigure(System.Xml.XmlElement)">
            <summary>
            以指定配置初始化日志系统。
            </summary>
            <param name="element">XML 配置数据</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.IsDisabled(EIIP.Log.Core.Level)">
            <summary>
            测试树层级是否对指定级别不可用。
            </summary>
            <param name="level">测试的级别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.Clear">
            <summary>
            清除缓存池中所有的日志记录器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.GetLogger(System.String,EIIP.Log.Repository.Hierarchy.ILoggerFactory)">
            <summary>
            使用指定的工厂创建新的指定名称的日志记录器实例。
            </summary>
            <param name="name">要返回的日志记录器名称</param>
            <param name="factory">工厂</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.OnLoggerCreationEvent(EIIP.Log.Repository.Hierarchy.Logger)">
            <summary>
            触发日志记录器创建事件。
            </summary>
            <param name="logger">新创建的日志记录器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.UpdateParents(EIIP.Log.Repository.Hierarchy.Logger)">
            <summary>
            更新指定日志记录器的所有上级记录器。
            </summary>
            <param name="log">日志记录器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.UpdateChildren(EIIP.Log.Repository.Hierarchy.ProvisionNode,EIIP.Log.Repository.Hierarchy.Logger)">
            <summary>
            用在层级结构中的记录器更新指定的记录器节点实体。
            更新完成后，指定的记录器将是实体所有子记录器的上级。
            </summary>
            <param name="pn">节点实体</param>
            <param name="log">记录器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.AddLevel(EIIP.Log.Repository.Hierarchy.Hierarchy.LevelEntry)">
            <summary>
            添加级别。
            </summary>
            <param name="levelEntry">级别实体</param>
        </member>
        <member name="E:EIIP.Log.Repository.Hierarchy.Hierarchy.m_loggerCreatedEvent">
            <summary>
            日志记录器创建事件成员。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Hierarchy.EmittedNoAppenderWarning">
            <summary>
            获取或设置一个值，该值指示是否发出没有附着器警告信息。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Hierarchy.Root">
            <summary>
            获取树的根记录器。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Hierarchy.LoggerFactory">
            <summary>
            获取或设置日志记录器工厂实例。
            </summary>
        </member>
        <member name="E:EIIP.Log.Repository.Hierarchy.Hierarchy.LoggerCreatedEvent">
            <summary>
            日志创建事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.Hierarchy.LevelEntry">
            <summary>
            级别实体类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Hierarchy.LevelEntry.ToString">
            <summary>
            重载 <c>Object.ToString</c> 以返回调试信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Hierarchy.LevelEntry.Value">
            <summary>
            获取或设置级别值
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Hierarchy.LevelEntry.Name">
            <summary>
            获取或设置级别名称
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Hierarchy.LevelEntry.DisplayName">
            <summary>
            获取或设置级别显示名称
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.TypeNamePatternConverter">
            <summary>
            类型名称模板转换器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.NamedPatternConverter">
            <summary>
            命名空间模板转换器基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.Pattern.NamedPatternConverter.m_precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.NamedPatternConverter.ActivateOptions">
            <summary>
            初始化转换器。 
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.NamedPatternConverter.GetFullyQualifiedName(EIIP.Log.Core.LoggingEvent)">
            <summary>
            获取完全限定名称。
            </summary>
            <param name="loggingEvent">记录事件</param>
            <returns>完全限定名称</returns>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.NamedPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            呈现数据。
            </summary>
            <param name="writer">存放结果的文本流</param>
            <param name="loggingEvent">将被记录的事件</param>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.TypeNamePatternConverter.GetFullyQualifiedName(EIIP.Log.Core.LoggingEvent)">
            <summary>
            获取类的完全限定名称。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.LoggerPatternConverter">
            <summary>
            转换日志记录器名称。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.LoggerPatternConverter.GetFullyQualifiedName(EIIP.Log.Core.LoggingEvent)">
            <summary>
            获取日志记录器的完全限定名称。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.FullLocationPatternConverter">
            <summary>
            调用者完整定位模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.FullLocationPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出调用者完整定位。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Core.WrapperCreationHandler">
            <summary>
            日志记录包装器创建的处理事件。
            </summary>
            <param name="logger">要包装的日志记录器</param>
        </member>
        <member name="T:EIIP.Log.Core.WrapperMap">
            <summary>
            日志记录包装器池类。映射日志记录器及其日志记录包装器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.WrapperMap.m_repositories">
            <summary>
            以库为键的,包装器池为值的哈希表。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.WrapperMap.m_createWrapperHandler">
            <summary>
            处理日志记录包装器创建事件的方法。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.WrapperMap.m_shutdownHandler">
            <summary>
            处理日志记录器库关闭事件的方法。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.WrapperMap.#ctor(EIIP.Log.Core.WrapperCreationHandler)">
            <summary>
            实例化日志记录包装器池类。
            </summary>
            <param name="createWrapperHandler">处理日志记录包装器创建事件的方法</param>
        </member>
        <member name="M:EIIP.Log.Core.WrapperMap.GetWrapper(EIIP.Log.Core.ILogger)">
            <summary>
            获取指定日志记录器的包装器。如日志记录器为null，则返回null。
            </summary>
            <param name="logger">日志记录器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.WrapperMap.CreateNewWrapperObject(EIIP.Log.Core.ILogger)">
            <summary>
            创建指定日志记录器的包装器对象。
            </summary>
            <param name="logger">日志记录器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.WrapperMap.RepositoryShutdown(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            当监视到库被关闭时，要调用的方法。
            </summary>
            <param name="repository">要关闭的库</param>
        </member>
        <member name="M:EIIP.Log.Core.WrapperMap.ILoggerRepository_Shutdown(System.Object,System.EventArgs)">
            <summary>
            当库关闭时的事件处理方法。
            </summary>
            <param name="sender">被关闭的 ILoggerRepository 库</param>
            <param name="e">事件参数</param>
        </member>
        <member name="P:EIIP.Log.Core.WrapperMap.Repositories">
            <summary>
            获取日志记录器的库池。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.SecurityContextProvider">
            <summary>
            安全上下文提供者。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.SecurityContextProvider.s_defaultProvider">
            <summary>
            默认安全上下文提供者。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.SecurityContextProvider.#ctor">
            <summary>
            实例化安全上下文提供者。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.SecurityContextProvider.CreateSecurityContext(System.Object)">
            <summary>
            创建安全上下文实例。继承类应重载该方法。
            </summary>
            <param name="consumer">请求者</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.SecurityContextProvider.DefaultProvider">
            <summary>
            获取或设置默认安全上下文提供者。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LoggingEventData">
            <summary>
            日志事件数据。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.LoggerName">
            <summary>
            日志记录器名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.Level">
            <summary>
            日志事件级别。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.Message">
            <summary>
            日志消息。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.ThreadName">
            <summary>
            线程名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.TimeStamp">
            <summary>
            事件记录时间。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.LocationInfo">
            <summary>
            调用者位置信息。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.UserName">
            <summary>
            用户帐号名称。windows帐号名称，如 DOMAIN\username
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.Identity">
            <summary>
            用户帐号身份。Principal Identity
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.ExceptionString">
            <summary>
            异常字串。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.Domain">
            <summary>
            AppDomain名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEventData.Properties">
            <summary>
            附加的事件属性。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.FixFlags">
            <summary>
            指定某一修复标志。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.Message">
            <summary>
            修复呈现消息
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.ThreadName">
            <summary>
            修复线程名
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.LocationInfo">
            <summary>
            修复调用者位置信息(较慢生成)
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.UserName">
            <summary>
            修复调用者用户帐号名称(较慢生成)
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.Domain">
            <summary>
            修复域的友好名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.Identity">
            <summary>
            修复调用者用户帐号身份(较慢生成)
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.Exception">
            <summary>
            修复异常文本
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.Properties">
            <summary>
            修复事件属性
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.None">
            <summary>
            都不处理
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.All">
            <summary>
            都处理
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.FixFlags.Partial">
            <summary>
            部分处理
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LoggingEvent">
            <summary>
            日志记录事件（可序列化）。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.HostNameProperty">
            <summary>
            主机名称属性
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.IdentityProperty">
            <summary>
            线程身份属性
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.UserNameProperty">
            <summary>
            用户帐号属性
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_data">
            <summary>
            日志事件数据。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_compositeProperties">
            <summary>
            日志事件复合属性。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_eventProperties">
            <summary>
            日志事件属性。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_callerStackBoundaryDeclaringType">
            <summary>
            在堆栈中调用日志类的方法的全完限定名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_message">
            <summary>
            应用提供的事件消息。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_thrownException">
            <summary>
            抛出的异常
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_repository">
            <summary>
            生成日志事件的库。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggingEvent.m_fixFlags">
            <summary>
            事件修复状态。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.EnsureRepository(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            确认库已被设置。
            </summary>
            <param name="repository">库</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.WriteRenderedMessage(System.IO.TextWriter)">
            <summary>
            输出呈现的信息。
            </summary>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.#ctor(System.Type,EIIP.Log.Repository.ILoggerRepository,System.String,EIIP.Log.Core.Level,System.Object,System.Exception)">
            <summary>
            实例化日志记录事件。
            </summary>
            <param name="callerStackBoundaryDeclaringType">进入日志系统的（堆栈调用边界）方法的声明类型</param>
            <param name="repository">登记事件的库</param>
            <param name="loggerName">日志记录器名</param>
            <param name="level">日志事件消息级别</param>
            <param name="message">日志事件消息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。设置 null 不进行异常登记。</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.#ctor(System.Type,EIIP.Log.Repository.ILoggerRepository,EIIP.Log.Core.LoggingEventData)">
            <summary>
            实例化日志记录事件。
            </summary>
            <param name="callerStackBoundaryDeclaringType">进入日志系统的（堆栈调用边界）方法的声明类型</param>
            <param name="repository">登记事件的库</param>
            <param name="data">日志事件数据</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.#ctor(EIIP.Log.Core.LoggingEventData)">
            <summary>
            实例化日志记录事件。
            </summary>
            <param name="data">日志事件数据</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
            <param name="info">填充数据的SerializationInfo</param>
            <param name="context">被序列化的源</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
            <param name="info">填充数据的SerializationInfo</param>
            <param name="context">序列化的目标</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.GetLoggingEventData">
            <summary>
            获取日志事件数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.GetLoggingEventData(EIIP.Log.Core.FixFlags)">
            <summary>
            获取日志事件数据。
            </summary>
            <param name="fixFlags">指定修复标志</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.GetExceptionString">
            <summary>
            获取事件异常呈现信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.FixVolatileData(EIIP.Log.Core.FixFlags)">
            <summary>
            用指定的标志修复数据。
            </summary>
            <param name="flags">修复标志</param>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.CreateCompositeProperties">
            <summary>
            创建复合属性。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.CacheProperties">
            <summary>
            缓存属性。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.LookupProperty(System.String)">
            <summary>
            从事件复合属性中查询属性。
            </summary>
            <param name="key">属性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.LoggingEvent.GetProperties">
            <summary>
            获取事件所有复合属性。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.StartTime">
            <summary>
            获取当前进程启动时间。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.Level">
            <summary>
            获取日志事件的级别。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.TimeStamp">
            <summary>
            获取日志记录时间。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.LoggerName">
            <summary>
            获取日志记录事件的记录器名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.LocationInformation">
            <summary>
            获取日志事件的定位信息。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.MessageObject">
            <summary>
            获取事件初始化的信息对象。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.ExceptionObject">
            <summary>
            获取事件初始化的异常对象。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.Repository">
            <summary>
            获取该日志事件创建的库。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.RenderedMessage">
            <summary>
            获取呈现的信息。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.ThreadName">
            <summary>
            获取当前线程的名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.UserName">
            <summary>
            获取当前帐号用户名。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.Identity">
            <summary>
            获取当前用户身份。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.Domain">
            <summary>
            获取此应用程序域的友好名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.Properties">
            <summary>
            获取附加于事件上的特定属性。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LoggingEvent.Fix">
            <summary>
            获取事件中的修复标志。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.ITriggeringEventEvaluator">
            <summary>
            触发事件监测器接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.ITriggeringEventEvaluator.IsTriggeringEvent(EIIP.Log.Core.LoggingEvent)">
            <summary>
            测试日志事件是否已触发。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.ThreadContextStacks">
            <summary>
            线程上下文堆栈集。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStacks.#ctor(EIIP.Log.Util.ContextPropertiesBase)">
            <summary>
            实例化线程上下文堆栈集。
            </summary>
            <param name="properties">上下文属性</param>
        </member>
        <member name="P:EIIP.Log.Util.ThreadContextStacks.Item(System.String)">
            <summary>
            获取指定名称的堆栈。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.FormattingInfo">
            <summary>
            格式化信息类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.FormattingInfo.#ctor">
            <summary>
            实例化格式化信息类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.FormattingInfo.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            实例化指定格式化信息类。
            </summary>
            <param name="min">最小值</param>
            <param name="max">最大值</param>
            <param name="leftAlign">是否进行左对齐排列</param>
        </member>
        <member name="P:EIIP.Log.Util.FormattingInfo.Min">
            <summary>
            获取或设置最小值。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.FormattingInfo.Max">
            <summary>
            获取或设置最大值。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.FormattingInfo.LeftAlign">
            <summary>
            获取或设置一个值，该值指示是否进行左对齐排列。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.LoggerRepositoryShutdownEventHandler">
            <summary>
            处理日志记录器库关闭时事件委托。
            </summary>
            <param name="sender">被关闭的 ILoggerRepository 库对象</param>
            <param name="e">Empty</param>
        </member>
        <member name="T:EIIP.Log.Repository.LoggerRepositoryConfigurationResetEventHandler">
            <summary>
            处理日志记录器库配置重置时事件委托。
            </summary>
            <param name="sender">配置重置的 ILoggerRepository 库对象</param>
            <param name="e">Empty</param>
        </member>
        <member name="T:EIIP.Log.Repository.LoggerRepositoryConfigurationChangedEventHandler">
            <summary>
            处理日志记录器库配置更改时事件委托。
            </summary>
            <param name="sender">配置更改的 ILoggerRepository 库对象</param>
            <param name="e">Empty</param>
        </member>
        <member name="T:EIIP.Log.Plugin.IPluginFactory">
            <summary>
            插件工厂接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.IPluginFactory.CreatePlugin">
            <summary>
            创建插件对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Layout.ILayout">
            <summary>
            布局对象接口。该接口被使用于将 LoggingEvent 以文本形式格式化。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.ILayout.Format(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            实现自定义的布局格式。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
            <remarks>
            <code lang="C#">
            StringWriter writer = new StringWriter();
            Layout.Format(writer, loggingEvent);
            string formattedEvent = writer.ToString();
            </code>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Layout.ILayout.ContentType">
            <summary>
            获取输出布局的内容类型。这是一种 MIME 类型，如"text/plain"。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.ILayout.Header">
            <summary>
            获取布局的开始文本。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.ILayout.Footer">
            <summary>
            获取布局的结尾文本。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.ILayout.IgnoresException">
            <summary>
            获取一个值，该值指示布局是否忽略异常。
            </summary>
        </member>
        <member name="T:EIIP.Log.Filter.FilterDecision">
            <summary>
            指示过滤器的某一判定值。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.FilterDecision.Deny">
            <summary>
            否决。不需处理日志事件。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.FilterDecision.Neutral">
            <summary>
            不确定。是否处理日志事件可由过滤链中其它过滤器来进一步判定。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.FilterDecision.Accept">
            <summary>
            确认。日志事件应立即被记录。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.SecurityContext">
            <summary>
            安全上下文接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.SecurityContext.Impersonate(System.Object)">
            <summary>
            模拟安全上下文
            </summary>
            <param name="state">状态对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Appender.AdoNetAppender">
            <summary>
            记录日志至数据库的附着器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.BufferingAppenderSkeleton">
            <summary>
            以固定大小缓存事件的附着器基类。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.AppenderSkeleton">
            <summary>
            实现 IAppender 接口的基类。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.IAppender">
            <summary>
            自定义打印状态的输出策略接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.IAppender.Close">
            <summary>
            关闭附着器及释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.IAppender.DoAppend(EIIP.Log.Core.LoggingEvent)">
            <summary>
            以附着器特有的方式记录事件。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="P:EIIP.Log.Appender.IAppender.Name">
            <summary>
            获取或设置附着器名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.c_renderBufferSize">
            <summary>
            初始缓存尺寸。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.c_renderBufferMaxCapacity">
            <summary>
            最大缓存尺寸。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_layout">
            <summary>
            附着器的布局
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_name">
            <summary>
            附着器的名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_threshold">
            <summary>
            附着器的起始级别。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_errorHandler">
            <summary>
            缺省的错误处理器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_headFilter">
            <summary>
            过滤链的第一个过滤器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_tailFilter">
            <summary>
            过滤链的最后一个过滤器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_closed">
            <summary>
            该值指示附着器是否已被关闭。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_recursiveGuard">
            <summary>
            该值指示是否设置为避免递归调用。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderSkeleton.m_renderWriter">
            <summary>
            呈现事件的文本流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.Finalize">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.ActivateOptions">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.Close">
            <summary>
            关闭附着器及释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.DoAppend(EIIP.Log.Core.LoggingEvent)">
            <summary>
            以附着器特有的方式记录事件。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.AddFilter(EIIP.Log.Filter.IFilter)">
            <summary>
            添加过滤器。
            </summary>
            <param name="filter">过滤器</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.ClearFilters">
            <summary>
            清除附着器内的所有过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.IsAsSevereAsThreshold(EIIP.Log.Core.Level)">
            <summary>
            检测消息级别是否不低于附着器的初始级别。若未设置初始级别，则总是返回true。
            </summary>
            <param name="level">要测试的级别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.OnClose">
            <summary>
            当附着器关闭时被触发。若有资源需释放时，继承类应重载该方法。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            追加事件。由继承类来实现。
            </summary>
            <param name="loggingEvent">要追加的事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.PreAppendCheck">
            <summary>
            附加前预处理。失败返回false
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.RenderLoggingEvent(EIIP.Log.Core.LoggingEvent)">
            <summary>
            呈现事件。
            </summary>
            <param name="loggingEvent">要呈现的日志事件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderSkeleton.RenderLoggingEvent(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            呈现事件。
            </summary>
            <param name="loggingEvent">要呈现的日志事件</param>
            <param name="writer">文本流</param>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderSkeleton.Threshold">
            <summary>
            获取或设置附着器的起始级别。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderSkeleton.ErrorHandler">
            <summary>
            获取或设置附着器的错误处理器。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderSkeleton.FilterHead">
            <summary>
            获取过滤链的第一个过滤器。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderSkeleton.Layout">
            <summary>
            获取或设置附着器的布局。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderSkeleton.Name">
            <summary>
            获取或设置附着器名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderSkeleton.RequiresLayout">
            <summary>
            获取一个值，该值指示附着器是否需要设置一个布局。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.DEFAULT_BUFFER_SIZE">
            <summary>
            缺省的缓存大小。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_bufferSize">
            <summary>
            缓存大小。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_cb">
            <summary>
            日志事件缓存。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_evaluator">
            <summary>
            触发事件监测器
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_lossy">
            <summary>
            指示附着器是否是有损耗的。
            若有损耗的应重写循环缓存事件，以处理当缓存已满或缓存应当被清空时要实现的方法。
            若设为true时，必须同时设置 m_evaluator 。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_lossyEvaluator">
            <summary>
            触发丢弃事件监测器
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_fixFlags">
            <summary>
            指示事件的修复状态。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingAppenderSkeleton.m_eventMustBeFixed">
            <summary>
            指示移转的事件是否必须被修复。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.#ctor">
            <summary>
            实例化以固定大小缓存事件的附着器基类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.#ctor(System.Boolean)">
            <summary>
            实例化以固定大小缓存事件的附着器基类。
            </summary>
            <param name="eventMustBeFixed">指示移转的事件是否必须被修复。</param>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.ActivateOptions">
            <summary>
            用选择设置初始化附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.OnClose">
            <summary>
            当附着器关闭时被触发。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            追加事件。由继承类来实现。
            </summary>
            <param name="loggingEvent">要追加的事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.SendBuffer(EIIP.Log.Util.CyclicBuffer)">
            <summary>
            发送缓存中的事件。继承类必须重载本方法的某一版本。
            </summary>
            <param name="buffer">事件缓存</param>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingAppenderSkeleton.SendBuffer(EIIP.Log.Core.LoggingEvent[])">
            <summary>
            发送缓存中的事件。继承类必须重载本方法的某一版本。
            </summary>
            <param name="events">缓存中的事件。</param>
        </member>
        <member name="P:EIIP.Log.Appender.BufferingAppenderSkeleton.Lossy">
            <summary>
            获取或设置一个值，该值指示是否附着器是有损耗的。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.BufferingAppenderSkeleton.BufferSize">
            <summary>
            获取或设置缓存大小。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.BufferingAppenderSkeleton.Evaluator">
            <summary>
            获取或设置引发缓存被立即发送的事件监测器
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.BufferingAppenderSkeleton.LossyEvaluator">
            <summary>
            获取或设置当有缓存事件丢弃时引发的事件监测器
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.BufferingAppenderSkeleton.Fix">
            <summary>
            获取或设置事件的修复状态。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_securityContext">
            <summary>
            安全上下文。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_dbConnection">
            <summary>
            数据库连接。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_dbCommand">
            <summary>
            数据库命令。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_connectionString">
            <summary>
            数据库连接字串。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_connectionType">
            <summary>
            数据库连接类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_commandText">
            <summary>
            数据库命令行。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_commandType">
            <summary>
            数据库命令类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_useTransactions">
            <summary>
            指示写入数据库时是否使用事务。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_reconnectOnError">
            <summary>
            指示当发生错误时，是否重新连接。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_usePreparedCommand">
            <summary>
            指示是否使用一个准备好的命令对象。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppender.m_parameters">
            <summary>
            ADO命令参数集。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.#ctor">
            <summary> 
            实例化记录日志至数据库的附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.ActivateOptions">
            <summary>
            按选项初始化附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.OnClose">
            <summary>
            当附着器关闭时被触发。关闭数据库。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.SendBuffer(EIIP.Log.Core.LoggingEvent[])">
            <summary>
            发送缓存中的事件至数据库。
            </summary>
            <param name="events">事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.AddParameter(EIIP.Log.Appender.AdoNetAppenderParameter)">
            <summary>
            添加命令参数。
            </summary>
            <param name="parameter">要添加的参数</param>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.SendBuffer(System.Data.IDbTransaction,EIIP.Log.Core.LoggingEvent[])">
            <summary>
            发送缓存中的事件至数据库。
            </summary>
            <param name="dbTran">事务，可设为null</param>
            <param name="events">缓存中的事件。</param>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.GetLogStatement(EIIP.Log.Core.LoggingEvent)">
            <summary>
            格式化输出至数据库的事件文本。
            </summary>
            <param name="logEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.InitializeDatabaseConnection">
            <summary>
            连接数据库。
            </summary>		
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.ResolveConnectionType">
            <summary>
            返回 ADO.NET 提供者的连接类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppender.InitializeDatabaseCommand">
            <summary>
            初始化数据库命令。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.Connection">
            <summary>
            获取或设置数据库连接。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.ConnectionString">
            <summary>
            获取或设置数据库连接字串。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.ConnectionType">
            <summary>
            获取或设置数据库连接类型。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.CommandText">
            <summary>
            获取或设置数据库命令文本。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.CommandType">
            <summary>
            获取或设置数据库命令类型。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.UseTransactions">
            <summary>
            获取或设置一个值，该值指示是否使用事务。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.SecurityContext">
            <summary>
            获取或设置安全上下文。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppender.ReconnectOnError">
            <summary>
            获取或设置一个值，该值指示当发生错误时，是否重新连接。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.AdoNetAppenderParameter">
            <summary>
            ADONET附着器使用的参数类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_parameterName">
            <summary>
            参数名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_dbType">
            <summary>
            参数类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_inferType">
            <summary>
            指示是否推断参数类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_precision">
            <summary>
            精度
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_scale">
            <summary>
            小数位。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AdoNetAppenderParameter.m_layout">
            <summary>
            原始视图
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppenderParameter.#ctor">
            <summary>
            实例化默认的参数类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppenderParameter.Prepare(System.Data.IDbCommand)">
            <summary>
            预处理数据库命令对象。
            </summary>
            <param name="command">数据库命令对象</param>
        </member>
        <member name="M:EIIP.Log.Appender.AdoNetAppenderParameter.FormatValue(System.Data.IDbCommand,EIIP.Log.Core.LoggingEvent)">
            <summary>
            呈现日志事件，格格化命令参数。
            </summary>
            <param name="command">含有参数的命令</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppenderParameter.ParameterName">
            <summary>
            获取或设置参数名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppenderParameter.DbType">
            <summary>
            获取或设置参数类型。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppenderParameter.Precision">
            <summary>
            获取或设置参数精度。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppenderParameter.Scale">
            <summary>
            获取或设置参数小数位。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppenderParameter.Size">
            <summary>
            获取或设置参数尺寸。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AdoNetAppenderParameter.Layout">
            <summary>
            获取或设置原始视图。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.WindowsSecurityContext">
            <summary>
            Impersonate a Windows Account
            </summary>
            <remarks>
            <para>
            This <see cref="T:EIIP.Log.Core.SecurityContext"/> impersonates a Windows account.
            </para>
            <para>
            How the impersonation is done depends on the value of <see cref="M:EIIP.Log.Util.WindowsSecurityContext.Impersonate(System.Object)"/>.
            This allows the context to either impersonate a set of user credentials specified 
            using username, domain name and password or to revert to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.WindowsSecurityContext.#ctor">
            <summary>
            实例化
            </summary>
            <remarks>
            <para>
            实例化
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.WindowsSecurityContext.ActivateOptions">
            <summary>
            Initialize the SecurityContext based on the options set.
            </summary>
            <remarks>
            <para>
            This is part of the <see cref="T:EIIP.Log.Core.IOptionHandler"/> delayed object
            activation scheme. The <see cref="M:EIIP.Log.Util.WindowsSecurityContext.ActivateOptions"/> method must 
            be called on this object after the configuration properties have
            been set. Until <see cref="M:EIIP.Log.Util.WindowsSecurityContext.ActivateOptions"/> is called this
            object is in an undefined state and must not be used. 
            </para>
            <para>
            If any of the configuration properties are modified then 
            <see cref="M:EIIP.Log.Util.WindowsSecurityContext.ActivateOptions"/> must be called again.
            </para>
            <para>
            The security context will try to Logon the specified user account and
            capture a primary token for impersonation.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The required <see cref="P:EIIP.Log.Util.WindowsSecurityContext.UserName"/>, 
            <see cref="P:EIIP.Log.Util.WindowsSecurityContext.DomainName"/> or <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Password"/> properties were not specified.</exception>
        </member>
        <member name="M:EIIP.Log.Util.WindowsSecurityContext.Impersonate(System.Object)">
            <summary>
            Impersonate the Windows account specified by the <see cref="P:EIIP.Log.Util.WindowsSecurityContext.UserName"/> and <see cref="P:EIIP.Log.Util.WindowsSecurityContext.DomainName"/> properties.
            </summary>
            <param name="state">caller provided state</param>
            <returns>
            An <see cref="T:System.IDisposable"/> instance that will revoke the impersonation of this SecurityContext
            </returns>
            <remarks>
            <para>
            Depending on the <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Credentials"/> property either
            impersonate a user using credentials supplied or revert 
            to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.WindowsSecurityContext.LogonUser(System.String,System.String,System.String)">
            <summary>
            Create a <see cref="T:System.Security.Principal.WindowsIdentity"/> given the userName, domainName and password.
            </summary>
            <param name="userName">the user name</param>
            <param name="domainName">the domain name</param>
            <param name="password">the password</param>
            <returns>the <see cref="T:System.Security.Principal.WindowsIdentity"/> for the account specified</returns>
            <remarks>
            <para>
            Uses the Windows API call LogonUser to get a principal token for the account. This
            token is used to initialize the WindowsIdentity.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.WindowsSecurityContext.Credentials">
            <summary>
            Gets or sets the impersonation mode for this security context
            </summary>
            <value>
            The impersonation mode for this security context
            </value>
            <remarks>
            <para>
            Impersonate either a user with user credentials or
            revert this thread to the credentials of the process.
            The value is one of the <see cref="T:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode"/>
            enum.
            </para>
            <para>
            The default value is <see cref="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.User"/>
            </para>
            <para>
            When the mode is set to <see cref="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.User"/>
            the user's credentials are established using the
            <see cref="P:EIIP.Log.Util.WindowsSecurityContext.UserName"/>, <see cref="P:EIIP.Log.Util.WindowsSecurityContext.DomainName"/> and <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Password"/>
            values.
            </para>
            <para>
            When the mode is set to <see cref="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.Process"/>
            no other properties need to be set. If the calling thread is 
            impersonating then it will be reverted back to the process credentials.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.WindowsSecurityContext.UserName">
            <summary>
            Gets or sets the Windows username for this security context
            </summary>
            <value>
            The Windows username for this security context
            </value>
            <remarks>
            <para>
            This property must be set if <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Credentials"/>
            is set to <see cref="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.User"/> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.WindowsSecurityContext.DomainName">
            <summary>
            Gets or sets the Windows domain name for this security context
            </summary>
            <value>
            The Windows domain name for this security context
            </value>
            <remarks>
            <para>
            The default value for <see cref="P:EIIP.Log.Util.WindowsSecurityContext.DomainName"/> is the local machine name
            taken from the <see cref="P:System.Environment.MachineName"/> property.
            </para>
            <para>
            This property must be set if <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Credentials"/>
            is set to <see cref="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.User"/> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.WindowsSecurityContext.Password">
            <summary>
            Sets the password for the Windows account specified by the <see cref="P:EIIP.Log.Util.WindowsSecurityContext.UserName"/> and <see cref="P:EIIP.Log.Util.WindowsSecurityContext.DomainName"/> properties.
            </summary>
            <value>
            The password for the Windows account specified by the <see cref="P:EIIP.Log.Util.WindowsSecurityContext.UserName"/> and <see cref="P:EIIP.Log.Util.WindowsSecurityContext.DomainName"/> properties.
            </value>
            <remarks>
            <para>
            This property must be set if <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Credentials"/>
            is set to <see cref="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.User"/> (the default setting).
            </para>
            </remarks>
        </member>
        <member name="T:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode">
            <summary>
            The impersonation modes for the <see cref="T:EIIP.Log.Util.WindowsSecurityContext"/>
            </summary>
            <remarks>
            <para>
            See the <see cref="P:EIIP.Log.Util.WindowsSecurityContext.Credentials"/> property for
            details.
            </para>
            </remarks>
        </member>
        <member name="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.User">
            <summary>
            Impersonate a user using the credentials supplied
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.WindowsSecurityContext.ImpersonationMode.Process">
            <summary>
            Revert this the thread to the credentials of the process
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.WindowsSecurityContext.DisposableImpersonationContext">
            <summary>
            Adds <see cref="T:System.IDisposable"/> to <see cref="T:System.Security.Principal.WindowsImpersonationContext"/>
            </summary>
            <remarks>
            <para>
            Helper class to expose the <see cref="T:System.Security.Principal.WindowsImpersonationContext"/>
            through the <see cref="T:System.IDisposable"/> interface.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.WindowsSecurityContext.DisposableImpersonationContext.#ctor(System.Security.Principal.WindowsImpersonationContext)">
            <summary>
            Constructor
            </summary>
            <param name="impersonationContext">the impersonation context being wrapped</param>
            <remarks>
            <para>
            Constructor
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.WindowsSecurityContext.DisposableImpersonationContext.Dispose">
            <summary>
            Revert the impersonation
            </summary>
            <remarks>
            <para>
            Revert the impersonation
            </para>
            </remarks>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.PatternLayoutConverter">
            <summary>
            EIIP.Log.Layout.PatternLayout 类型转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.PatternLayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            获取一个值，该值指示能否从源类型（string）进行转换。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.PatternLayoutConverter.ConvertFrom(System.Object)">
            <summary>
            转换源对象为 EIIP.Log.Layout.PatternLayout 类型。
            </summary>
            <param name="source">要转换的源对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.Transform">
            <summary>
            字串转换类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.Transform.WriteEscapedXmlString(System.Xml.XmlWriter,System.String)">
            <summary>
            写入关闭的xml数据。
            </summary>
            <param name="writer">xml文本流</param>
            <param name="stringData">要写入的数据</param>
        </member>
        <member name="M:EIIP.Log.Util.Transform.CountSubstrings(System.String,System.String)">
            <summary>
            匹配计数。
            </summary>
            <param name="text">要查询的文本</param>
            <param name="substring">要搜索的子串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.OptionConverter">
            <summary>
            转换工具类。该类可将属性值转换为指定的类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.OptionConverter.DELIM_START">
            <summary>
            临时界线开始符
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.OptionConverter.DELIM_STOP">
            <summary>
            临时界线结束符
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.OptionConverter.DELIM_START_LEN">
            <summary>
            临时界线开始符长度
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.OptionConverter.DELIM_STOP_LEN">
            <summary>
            临时界线结束符长度
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ConcatenateArrays(System.String[],System.String[])">
            <summary>
            连接两字串数组。
            </summary>
            <param name="l">连接在前的数组</param>
            <param name="r">连接在后的数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ConcatenateArrays(System.Array,System.Array)">
            <summary>
            连接两数组。
            </summary>
            <param name="l">连接在前的数组</param>
            <param name="r">连接在后的数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ConvertSpecialChars(System.String)">
            <summary>
            转换字符串中特殊字符为转义字符。
            </summary>
            <param name="s">字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ToBoolean(System.String,System.Boolean)">
            <summary>
            转换字符串至 bool 类型。
            </summary>
            <param name="argValue">要转换的字符串</param>
            <param name="defaultValue">转换失败后的缺省返回值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ToInt(System.String,System.Int32)">
            <summary>
            转换指定字符串为整型类型。
            </summary>
            <param name="argValue">要转换的字符串</param>
            <param name="defaultValue">转换失败后的缺省返回值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ToFileSize(System.String,System.Int64)">
            <summary>
            解析文件大小。
            </summary>
            <param name="argValue">要转换的字符串(格式：number[KB|MB|GB])</param>
            <param name="defaultValue">转换失败后的缺省返回值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ConvertStringTo(System.Type,System.String)">
            <summary>
            转换指定字符串为对象。转换失败返回null。
            </summary>
            <param name="target">目标类型</param>
            <param name="txt">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.CanConvertTypeTo(System.Type,System.Type)">
            <summary>
            测试源类型是否能转换为目标类型
            </summary>
            <param name="sourceType">源类型</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ConvertTypeTo(System.Object,System.Type)">
            <summary>
            转换指定对象为目标类型。
            </summary>
            <param name="sourceInstance">要转换的源实例。</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.InstantiateByClassName(System.String,System.Type,System.Object)">
            <summary>
            按指定的类名实例化。
            </summary>
            <param name="className">要实例化对象的完全限定名</param>
            <param name="superClass">指定实例化后的对象应继承的类型</param>
            <param name="defaultValue">按要求实例化失败后，应返回的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.SubstituteVariables(System.String,System.Collections.IDictionary)">
            <summary>
            变量替换。
            </summary>
            <param name="value">要处理的字符串，其中可能包含以“${变量}”形式包含的变量。</param>
            <param name="props">变量字典，将变量以实际的值替换。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.OptionConverter.ParseEnum(System.Type,System.String,System.Boolean)">
            <summary>
            解析枚举值
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="value">枚举的字符串值</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.NullSecurityContext">
            <summary>
            空的安全上下文。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.NullSecurityContext.Instance">
            <summary>
            单点实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.NullSecurityContext.Impersonate(System.Object)">
            <summary>
            模拟安全上下文，返回null。
            </summary>
            <param name="state">状态对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.NativeError">
            <summary>
            描述本地错误代码和信息类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.NativeError.#ctor(System.Int32,System.String)">
            <summary>
            实例化描述本地错误代码和信息类。
            </summary>
            <param name="number">错误代码</param>
            <param name="message">错误信息</param>
        </member>
        <member name="M:EIIP.Log.Util.NativeError.GetLastError">
            <summary>
            获取最近的Windows错误信息实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.NativeError.GetError(System.Int32)">
            <summary>
            获取指定错误代码的Windows错误信息实例。
            </summary>
            <param name="number">错误代码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.NativeError.GetErrorMessage(System.Int32)">
            <summary>
            获取指定Win32错误标识的消息。
            </summary>
            <param name="messageId">Win32错误标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.NativeError.ToString">
            <summary>
            返回错误信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.NativeError.FormatMessage(System.Int32,System.IntPtr@,System.Int32,System.Int32,System.String@,System.Int32,System.IntPtr)">
            <summary>
            格式信息字串。
            </summary>
            <param name="dwFlags">Formatting options, and how to interpret the <paramref name="lpSource" /> parameter.</param>
            <param name="lpSource">Location of the message definition.</param>
            <param name="dwMessageId">Message identifier for the requested message.</param>
            <param name="dwLanguageId">Language identifier for the requested message.</param>
            <param name="lpBuffer">If <paramref name="dwFlags" /> includes FORMAT_MESSAGE_ALLOCATE_BUFFER, the function allocates a buffer using the <c>LocalAlloc</c> function, and places the pointer to the buffer at the address specified in <paramref name="lpBuffer" />.</param>
            <param name="nSize">If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag is not set, this parameter specifies the maximum number of TCHARs that can be stored in the output buffer. If FORMAT_MESSAGE_ALLOCATE_BUFFER is set, this parameter specifies the minimum number of TCHARs to allocate for an output buffer.</param>
            <param name="Arguments">Pointer to an array of values that are used as insert values in the formatted message.</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.NativeError.Number">
            <summary>
            获取错误代码。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NativeError.Message">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="T:EIIP.Log.ThreadContext">
            <summary>
            日志系统线程上下文。
            </summary>
        </member>
        <member name="F:EIIP.Log.ThreadContext.s_properties">
            <summary>
            线程上下文属性实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.ThreadContext.s_stacks">
            <summary>
            线程上下文堆栈实例。
            </summary>
        </member>
        <member name="P:EIIP.Log.ThreadContext.Properties">
            <summary>
            获取线程上下文属性。
            </summary>
        </member>
        <member name="P:EIIP.Log.ThreadContext.Stacks">
            <summary>
            获取线程上下文堆栈。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.XmlLayout">
            <summary>
            格式化日志事件为XML元素的布局。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.XmlLayoutBase">
            <summary>
            格式化日志事件为XML元素的布局基类。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.LayoutSkeleton">
            <summary>
            布局基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.LayoutSkeleton.m_header">
            <summary>
            头部文本
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.LayoutSkeleton.m_footer">
            <summary>
            尾部文本
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.LayoutSkeleton.m_ignoresException">
            <summary>
            设置一个值，该值指示该布局是否会忽略异常。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.LayoutSkeleton.#ctor">
            <summary>
            实例化布局基类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.LayoutSkeleton.ActivateOptions">
            <summary>
            激活布局选项。需在继承类中实现。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.LayoutSkeleton.Format(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            设置指定的 LoggingEvent 的布局。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
        </member>
        <member name="P:EIIP.Log.Layout.LayoutSkeleton.ContentType">
            <summary>
            获取输出布局的内容类型。这是一种 MIME 类型，默认为"text/plain"。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.LayoutSkeleton.Header">
            <summary>
            获取或设置布局的开始文本。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.LayoutSkeleton.Footer">
            <summary>
            获取或设置布局的结尾文本。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.LayoutSkeleton.IgnoresException">
            <summary>
            获取或设置一个值，该值指示布局是否忽略异常。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.XmlLayoutBase.m_locationInfo">
            <summary>
            指示是否位置信息应被XML事件包含。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.XmlLayoutBase.m_protectCloseTextWriter">
            <summary>
            不会被关闭的文本流实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayoutBase.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayoutBase.#ctor(System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="locationInfo">指示是否位置信息应被XML事件包含。</param>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayoutBase.ActivateOptions">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayoutBase.Format(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            设置指定的 LoggingEvent 的布局。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayoutBase.FormatXml(System.Xml.XmlWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            写入格式化 XML 内容。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
        </member>
        <member name="P:EIIP.Log.Layout.XmlLayoutBase.LocationInfo">
            <summary>
            获取或设置一个值，该值指示是否位置信息应被XML事件包含。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.XmlLayoutBase.ContentType">
            <summary>
            获取输出布局的内容类型。这是一种 MIME 类型，该值总是为"text/xml"。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.XmlLayout.m_prefix">
            <summary>
            前缀
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayout.#ctor">
            <summary>
            实例化布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayout.#ctor(System.Boolean)">
            <summary>
            实例化
            </summary>
            <param name="locationInfo">指示是否位置信息应被XML事件包含。</param>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayout.ActivateOptions">
            <summary>
            初始化视图选项。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.XmlLayout.FormatXml(System.Xml.XmlWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            写入格式化 XML 内容。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
        </member>
        <member name="P:EIIP.Log.Layout.XmlLayout.Prefix">
            <summary>
            获取或设置所有元素的前缀。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.AppDomainPatternConverter">
            <summary>
            应用程序域的友好名称模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.AppDomainPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出应用程序域的友好名称。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Core.LoggerWrapperImpl">
            <summary>
            用户包装器实体。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggerWrapperImpl.m_logger">
            <summary>
            包装的日志记录器
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggerWrapperImpl.#ctor(EIIP.Log.Core.ILogger)">
            <summary>
            以指定的日志记录器实例化包装器实体。
            </summary>
            <param name="logger">包装的日志记录器</param>
        </member>
        <member name="P:EIIP.Log.Core.LoggerWrapperImpl.Logger">
            <summary>
            获取包装器的日志实例。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.TextWriterAppender">
            <summary>
            文本流附着器类，发送日志事件至文本流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.TextWriterAppender.m_qtw">
            <summary>
            不会抛出异常的文本流
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.TextWriterAppender.m_immediateFlush">
            <summary>
            指示是否立即清理当前文本流的所有缓冲区。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.#ctor">
            <summary>
            实例化文本流附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.PreAppendCheck">
            <summary>
            附加前预处理。失败返回false
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            附加日志事件。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.OnClose">
            <summary>
            关闭附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.WriteFooterAndCloseWriter">
            <summary>
            写入页脚并关闭文本流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.CloseWriter">
            <summary>
            关闭文本流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.Reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.WriteFooter">
            <summary>
            写入页脚。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.WriteHeader">
            <summary>
            写入页头。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.TextWriterAppender.PrepareWriter">
            <summary>
            预处理文本流
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.TextWriterAppender.QuietWriter">
            <summary>
            获取或设置不会抛出异常的文本流
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.TextWriterAppender.ImmediateFlush">
            <summary>
            获取或设置一个值，该值指示是否立即清理当前文本流的所有缓冲区。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.TextWriterAppender.Writer">
            <summary>
            获取或设置文本流
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.TextWriterAppender.ErrorHandler">
            <summary>
            获取或设置附着器错误处理器。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.TextWriterAppender.RequiresLayout">
            <summary>
            获取一个值，该值指示附着器是否需要布局。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.ReadOnlyPropertiesDictionary">
            <summary>
            只读属性字典（可序列化）。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.ReadOnlyPropertiesDictionary.m_hashtable">
            <summary>
            存储属性数据的哈希表
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.GetKeys">
            <summary>
            获取所有键名
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.#ctor">
            <summary>
            实例化只读属性字典。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.#ctor(EIIP.Log.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            以指定只读属性字典实例化。
            </summary>
            <param name="propertiesDictionary">只读属性字典</param>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.Contains(System.String)">
            <summary>
            确定是否包含特定键。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化构造器
            </summary>
            <param name="info">包含序列化数据的 SerializationInfo 对象</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化数据
            </summary>
            <param name="info"></param>
            <param name="context">上下文</param>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IDictionary.GetEnumerator"/>
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.Clear">
            <summary>
            Remove all properties from the properties collection
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.InnerHashtable">
            <summary>
            获取存储属性数据的哈希表。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.Item(System.String)">
            <summary>
            获取属性。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsReadOnly"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Item(System.Object)"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Values">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Values"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#Keys">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Keys"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsFixedSize"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.Count">
            <summary>
            The number of properties in this collection
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ReadOnlyPropertiesDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.RelativeTimePatternConverter">
            <summary>
            相对时间模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.RelativeTimePatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出相对时间。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.RelativeTimePatternConverter.TimeDifferenceInMillis(System.DateTime,System.DateTime)">
            <summary>
            获取两时间类型的毫秒级差异。
            </summary>
            <param name="start">开始时间</param>
            <param name="end">结束时间</param>
            <returns>毫秒级差异</returns>
        </member>
        <member name="T:EIIP.Log.Filter.IFilter">
            <summary>
            提供自定义日志事件过滤器接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.IFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.IFilter.Next">
            <summary>
            获取或设置过滤链的下一过滤器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Config.PluginAttribute">
            <summary>
            指定附加至库的插件特性。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.PluginAttribute.m_type">
            <summary>
            插件的类型名称。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.PluginAttribute.#ctor(System.String)">
            <summary>
            实例化指定类型的插件特性。
            </summary>
            <param name="type">插件的类型名称</param>
        </member>
        <member name="M:EIIP.Log.Config.PluginAttribute.CreatePlugin">
            <summary>
            创建插件对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Config.PluginAttribute.ToString">
            <summary>
            返回 System.String 的此实例，格式为 PluginAttribute[Type=类型]
            </summary>
        </member>
        <member name="P:EIIP.Log.Config.PluginAttribute.Type">
            <summary>
            获取或设置插件的类型名称。
            </summary>
        </member>
        <member name="T:EIIP.Log.Config.BasicConfigurator">
            <summary>
            简单配置器类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.BasicConfigurator.#ctor">
            <summary>
            实例化简单配置器类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.BasicConfigurator.Configure">
            <summary>
            用默认的配置初始化日志系统。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.BasicConfigurator.Configure(EIIP.Log.Appender.IAppender)">
            <summary>
            用指定的附着器初始化日志系统。
            </summary>
            <param name="appender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Config.BasicConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            用默认的配置初始化日志记录库。
            </summary>
            <param name="repository">库</param>
        </member>
        <member name="M:EIIP.Log.Config.BasicConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository,EIIP.Log.Appender.IAppender)">
            <summary>
            使用指定附着器初始化日志记录库。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="appender">附着器</param>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.TypeConverter">
            <summary>
            System.Type 类型转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.TypeConverter.CanConvertFrom(System.Type)">
            <summary>
            获取一个值，该值指示能否从源类型（string）进行转换。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.TypeConverter.ConvertFrom(System.Object)">
            <summary>
            转换源对象为 System.Type 类型。
            </summary>
            <param name="source">要转换的源对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.CyclicBuffer">
            <summary>
            日志事件的固定大小的可循环缓存。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CyclicBuffer.m_events">
            <summary>
            日志事件数组
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CyclicBuffer.m_first">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CyclicBuffer.m_last">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CyclicBuffer.m_numElems">
            <summary>
            元素个数
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CyclicBuffer.m_maxSize">
            <summary>
            最大尺寸
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.CyclicBuffer.#ctor(System.Int32)">
            <summary>
            实例化日志事件的固定大小的可循环缓存。
            </summary>
            <param name="maxSize">缓存中最大容量</param>
        </member>
        <member name="M:EIIP.Log.Util.CyclicBuffer.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            追加日志事件。如果缓存已满，返回丢弃的日志事件；否则返回null。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.CyclicBuffer.PopOldest">
            <summary>
            释放最旧的日志事件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.CyclicBuffer.PopAll">
            <summary>
            释放所有的日志事件。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.CyclicBuffer.Item(System.Int32)">
            <summary>
            获取指定发生顺序的日志事件。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.CyclicBuffer.MaxSize">
            <summary>
            获取缓存的最大尺寸。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.CyclicBuffer.Length">
            <summary>
            获取缓存中的事件数。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.RawTimeStampLayout">
            <summary>
            解析日志事件原始时间布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.RawTimeStampLayout.#ctor">
            <summary>
            实例化解析日志事件原始时间布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.RawTimeStampLayout.Format(EIIP.Log.Core.LoggingEvent)">
            <summary>
            获取日志记录时间。
            </summary>
            <param name="loggingEvent">事件对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Filter.LoggerMatchFilter">
            <summary>
            日志记录器匹配过滤器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Filter.FilterSkeleton">
            <summary>
            过滤器架构基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.FilterSkeleton.m_next">
            <summary>
            过滤链的下一过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.FilterSkeleton.ActivateOptions">
            <summary>
            初始化过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.FilterSkeleton.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.FilterSkeleton.Next">
            <summary>
            获取或设置过滤链的下一过滤器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LoggerMatchFilter.m_acceptOnMatch">
            <summary>
            指示过滤器在有匹配时，是否应为FilterDecision.Accept
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LoggerMatchFilter.m_loggerToMatch">
            <summary>
            要匹配的记录器名。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.LoggerMatchFilter.#ctor">
            <summary>
            实例化日志记录器匹配过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.LoggerMatchFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.LoggerMatchFilter.AcceptOnMatch">
            <summary>
            获取或设置一个值，该值指示过滤器在有匹配时，是否应为FilterDecision.Accept
            </summary>
        </member>
        <member name="P:EIIP.Log.Filter.LoggerMatchFilter.LoggerToMatch">
            <summary>
            获取或设置要匹配的记录器名。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LevelEvaluator">
            <summary>
            级别计算器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LevelEvaluator.m_threshold">
            <summary>
            触发的开始级别。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelEvaluator.#ctor">
            <summary>
            以 Level.Off 实例化级别计算器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelEvaluator.#ctor(EIIP.Log.Core.Level)">
            <summary>
            以指定起始级别实例化级别计算器。
            </summary>
            <param name="threshold">起始级别</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelEvaluator.IsTriggeringEvent(EIIP.Log.Core.LoggingEvent)">
            <summary>
            测试日志事件是否已触发。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.LevelEvaluator.Threshold">
            <summary>
            获取或设置触发的起始级别。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LevelCollection">
            <summary>
            级别集。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.ReadOnly(EIIP.Log.Core.LevelCollection)">
            <summary>
            Creates a read-only wrapper for a <c>LevelCollection</c> instance.
            </summary>
            <param name="list">list to create a readonly wrapper arround</param>
            <returns>
            A <c>LevelCollection</c> wrapper that is read-only.
            </returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.#ctor">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that has the specified initial capacity.
            </summary>
            <param name="capacity">
            The number of elements that the new <c>LevelCollection</c> is initially capable of storing.
            </param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.#ctor(EIIP.Log.Core.LevelCollection)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <c>LevelCollection</c>.
            </summary>
            <param name="c">The <c>LevelCollection</c> whose elements are copied to the new collection.</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.#ctor(EIIP.Log.Core.Level[])">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:EIIP.Log.Core.Level"/> array.
            </summary>
            <param name="a">The <see cref="T:EIIP.Log.Core.Level"/> array whose elements are copied to the new list.</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Initializes a new instance of the <c>LevelCollection</c> class
            that contains elements copied from the specified <see cref="T:EIIP.Log.Core.Level"/> collection.
            </summary>
            <param name="col">The <see cref="T:EIIP.Log.Core.Level"/> collection whose elements are copied to the new list.</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.#ctor(EIIP.Log.Core.LevelCollection.Tag)">
            <summary>
            Allow subclasses to avoid our default constructors
            </summary>
            <param name="tag"></param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.CopyTo(EIIP.Log.Core.Level[])">
            <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:EIIP.Log.Core.Level"/> array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:EIIP.Log.Core.Level"/> array to copy to.</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.CopyTo(EIIP.Log.Core.Level[],System.Int32)">
            <summary>
            Copies the entire <c>LevelCollection</c> to a one-dimensional
            <see cref="T:EIIP.Log.Core.Level"/> array, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional <see cref="T:EIIP.Log.Core.Level"/> array to copy to.</param>
            <param name="start">array中的起始索引</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Add(EIIP.Log.Core.Level)">
            <summary>
            Adds a <see cref="T:EIIP.Log.Core.Level"/> to the end of the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:EIIP.Log.Core.Level"/> to be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Clear">
            <summary>
            Removes all elements from the <c>LevelCollection</c>.
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:EIIP.Log.Core.LevelCollection"/>.
            </summary>
            <returns>A new <see cref="T:EIIP.Log.Core.LevelCollection"/> with a shallow copy of the collection data.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Contains(EIIP.Log.Core.Level)">
            <summary>
            Determines whether a given <see cref="T:EIIP.Log.Core.Level"/> is in the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:EIIP.Log.Core.Level"/> to check for.</param>
            <returns><c>true</c> if <paramref name="item"/> is found in the <c>LevelCollection</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.IndexOf(EIIP.Log.Core.Level)">
            <summary>
            Returns the zero-based index of the first occurrence of a <see cref="T:EIIP.Log.Core.Level"/>
            in the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:EIIP.Log.Core.Level"/> to locate in the <c>LevelCollection</c>.</param>
            <returns>
            The zero-based index of the first occurrence of <paramref name="item"/> 
            in the entire <c>LevelCollection</c>, if found; otherwise, -1.
            </returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Insert(System.Int32,EIIP.Log.Core.Level)">
            <summary>
            Inserts an element into the <c>LevelCollection</c> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The <see cref="T:EIIP.Log.Core.Level"/> to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:EIIP.Log.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Remove(EIIP.Log.Core.Level)">
            <summary>
            Removes the first occurrence of a specific <see cref="T:EIIP.Log.Core.Level"/> from the <c>LevelCollection</c>.
            </summary>
            <param name="item">The <see cref="T:EIIP.Log.Core.Level"/> to remove from the <c>LevelCollection</c>.</param>
            <exception cref="T:System.ArgumentException">
            The specified <see cref="T:EIIP.Log.Core.Level"/> was not found in the <c>LevelCollection</c>.
            </exception>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <c>LevelCollection</c>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:EIIP.Log.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the <c>LevelCollection</c>.
            </summary>
            <returns>An <see cref="T:EIIP.Log.Core.LevelCollection.Enumerator"/> for the entire <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.AddRange(EIIP.Log.Core.LevelCollection)">
            <summary>
            Adds the elements of another <c>LevelCollection</c> to the current <c>LevelCollection</c>.
            </summary>
            <param name="x">The <c>LevelCollection</c> whose elements should be added to the end of the current <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:EIIP.Log.Core.LevelCollection.Count"/> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.AddRange(EIIP.Log.Core.Level[])">
            <summary>
            Adds the elements of a <see cref="T:EIIP.Log.Core.Level"/> array to the current <c>LevelCollection</c>.
            </summary>
            <param name="x">The <see cref="T:EIIP.Log.Core.Level"/> array whose elements should be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:EIIP.Log.Core.LevelCollection.Count"/> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the elements of a <see cref="T:EIIP.Log.Core.Level"/> collection to the current <c>LevelCollection</c>.
            </summary>
            <param name="col">The <see cref="T:EIIP.Log.Core.Level"/> collection whose elements should be added to the end of the <c>LevelCollection</c>.</param>
            <returns>The new <see cref="P:EIIP.Log.Core.LevelCollection.Count"/> of the <c>LevelCollection</c>.</returns>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.TrimToSize">
            <summary>
            Sets the capacity to the actual number of elements.
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.ValidateIndex(System.Int32)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:EIIP.Log.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.ValidateIndex(System.Int32,System.Boolean)">
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:EIIP.Log.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.Count">
            <summary>
            Gets the number of elements actually contained in the <c>LevelCollection</c>.
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <value>true if access to the ICollection is synchronized (thread-safe); otherwise, false.</value>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:EIIP.Log.Core.Level"/> at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <para><paramref name="index"/> is less than zero</para>
            <para>-or-</para>
            <para><paramref name="index"/> is equal to or greater than <see cref="P:EIIP.Log.Core.LevelCollection.Count"/>.</para>
            </exception>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
            <value>true if the collection has a fixed size; otherwise, false. The default is false</value>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IList is read-only.
            </summary>
            <value>true if the collection is read-only; otherwise, false. The default is false</value>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.Capacity">
            <summary>
            Gets or sets the number of elements the <c>LevelCollection</c> can contain.
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LevelCollection.ILevelCollectionEnumerator">
            <summary>
            Supports type-safe iteration over a <see cref="T:EIIP.Log.Core.LevelCollection"/>.
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.ILevelCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.ILevelCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.ILevelCollectionEnumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LevelCollection.Tag">
            <summary>
            Type visible only to our subclasses
            Used to access protected constructor
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LevelCollection.Tag.Default">
            <summary>
            A value
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LevelCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:EIIP.Log.Core.LevelCollection"/>.
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Enumerator.#ctor(EIIP.Log.Core.LevelCollection)">
            <summary>
            Initializes a new instance of the <c>Enumerator</c> class.
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:EIIP.Log.Core.LevelCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LevelCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:EIIP.Log.Config.SecurityContextProviderAttribute">
            <summary>
            安全上下文提供者特性。
            </summary>
        </member>
        <member name="T:EIIP.Log.Config.ConfiguratorAttribute">
            <summary>
            日志配置属性的基类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.ConfiguratorAttribute.m_priority">
            <summary>
            配置器的优先级
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.ConfiguratorAttribute.#ctor(System.Int32)">
            <summary>
            以指定优先级别实例化。
            </summary>
            <param name="priority">配置器的优先级</param>
        </member>
        <member name="M:EIIP.Log.Config.ConfiguratorAttribute.Configure(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            为指定程序集配置日志记录器库。在继承类中实现。
            </summary>
            <param name="sourceAssembly">程序集</param>
            <param name="targetRepository">日志记录器库</param>
        </member>
        <member name="M:EIIP.Log.Config.ConfiguratorAttribute.CompareTo(System.Object)">
            <summary>
            与另一日志配置属性实例进行比较。
            </summary>
            <param name="obj">日志配置属性对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Config.SecurityContextProviderAttribute.#ctor(System.Type)">
            <summary>
            以指定提供者类型实例化安全上下文提供者特性。
            </summary>
            <param name="providerType">提供者类型</param>
        </member>
        <member name="M:EIIP.Log.Config.SecurityContextProviderAttribute.Configure(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            配置安全上下文提供者
            </summary>
            <param name="sourceAssembly">程序集</param>
            <param name="targetRepository">目标库</param>
        </member>
        <member name="P:EIIP.Log.Config.SecurityContextProviderAttribute.ProviderType">
            <summary>
            获取或设置提供者类型。
            </summary>
        </member>
        <member name="T:EIIP.Log.Config.RepositoryAttribute">
            <summary>
            库特性。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.RepositoryAttribute.#ctor">
            <summary>
            实例化库特性。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.RepositoryAttribute.#ctor(System.String)">
            <summary>
            实例化库特性。
            </summary>
            <param name="name">库名称</param>
        </member>
        <member name="P:EIIP.Log.Config.RepositoryAttribute.Name">
            <summary>
            获取或设置库名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Config.RepositoryAttribute.RepositoryType">
            <summary>
            获取或设置库类型。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.ForwardingAppender">
            <summary>
            日志事件的推进附着器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.IAppenderAttachable">
            <summary>
            附着器附加至对象的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.IAppenderAttachable.AddAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            添加附着器。
            </summary>
            <param name="appender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Core.IAppenderAttachable.GetAppender(System.String)">
            <summary>
            获取指定名称的附着器。未找到则返回null。
            </summary>
            <param name="name">附着器的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IAppenderAttachable.RemoveAllAppenders">
            <summary>
            移除所有附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.IAppenderAttachable.RemoveAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            移除指定附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="appender">要移除的附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IAppenderAttachable.RemoveAppender(System.String)">
            <summary>
            移除指定名称的附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="name">要移除的附着器名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.IAppenderAttachable.Appenders">
            <summary>
            获取所有附着器。
            </summary>
            <value></value>
        </member>
        <member name="F:EIIP.Log.Appender.ForwardingAppender.m_appenderAttachedImpl">
            <summary>
            附着器附加至对象实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.#ctor">
            <summary>
            实例化日志事件的推进附着器
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.OnClose">
            <summary>
            关闭附着器，并释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            附加日志事件。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.AddAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            添加附着器。
            </summary>
            <param name="newAppender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.GetAppender(System.String)">
            <summary>
            获取指定名称的附着器。未找到则返回null。
            </summary>
            <param name="name">附着器的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.RemoveAllAppenders">
            <summary>
            移除所有附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.RemoveAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            移除指定附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="appender">要移除的附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.ForwardingAppender.RemoveAppender(System.String)">
            <summary>
            移除指定名称的附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="name">要移除的附着器名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Appender.ForwardingAppender.Appenders">
            <summary>
            获取所有附着器。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.IPAddressConverter">
            <summary>
            System.Net.IPAddress 类型转换器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.TypeConverters.IPAddressConverter.validIpAddressChars">
            <summary>
            IPv4 或 IPv6 地址字串的合法字符。（不支持子网）
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.IPAddressConverter.CanConvertFrom(System.Type)">
            <summary>
            获取一个值，该值指示能否从源类型（string）进行转换。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.IPAddressConverter.ConvertFrom(System.Object)">
            <summary>
            转换源对象为 System.Net.IPAddress 类型。
            </summary>
            <param name="source">要转换的源对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.PropertiesDictionary">
            <summary>
            可序列化的属性字典类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.#ctor">
            <summary>
            实例化属性字典类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.#ctor(EIIP.Log.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            以指定的属性字典实例化属性字典类。
            </summary>
            <param name="propertiesDictionary">属性字典</param>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化构造器
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.Remove(System.String)">
            <summary>
            移除指定属性
            </summary>
            <param name="key">属性</param>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IDictionary.GetEnumerator"/>
            </summary>
            <returns>an enumerator</returns>
            <remarks>
            <para>
            Returns a <see cref="T:System.Collections.IDictionaryEnumerator"/> over the contest of this collection.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Remove(System.Object)"/>
            </summary>
            <param name="key">the key to remove</param>
            <remarks>
            <para>
            Remove the entry with the specified key from this dictionary
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Contains(System.Object)"/>
            </summary>
            <param name="key">the key to lookup in the collection</param>
            <returns><c>true</c> if the collection contains the specified key</returns>
            <remarks>
            <para>
            Test if this collection contains a specified key.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.Clear">
            <summary>
            Remove all properties from the properties collection
            </summary>
            <remarks>
            <para>
            Remove all properties from the properties collection
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            See <see cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)"/>
            </summary>
            <param name="key">the key</param>
            <param name="value">the value to store for the key</param>
            <remarks>
            <para>
            Store a value for the specified <see cref="T:System.String"/> <paramref name="key"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="key"/> is not a string</exception>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            See <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)"/>
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:EIIP.Log.Util.PropertiesDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            See <see cref="M:System.Collections.IEnumerable.GetEnumerator"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.Item(System.String)">
            <summary>
            获取或设置属性
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#IsReadOnly">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsReadOnly"/>
            </summary>
            <value>
            <c>false</c>
            </value>
            <remarks>
            <para>
            This collection is modifiable. This property always
            returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Item(System.Object)"/>
            </summary>
            <value>
            The value for the key specified.
            </value>
            <remarks>
            <para>
            Get or set a value for the specified <see cref="T:System.String"/> <paramref name="key"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="key"/> is not a string</exception>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#Values">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Values"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#Keys">
            <summary>
            See <see cref="P:System.Collections.IDictionary.Keys"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#IDictionary#IsFixedSize">
            <summary>
            See <see cref="P:System.Collections.IDictionary.IsFixedSize"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#ICollection#IsSynchronized">
            <summary>
            See <see cref="P:System.Collections.ICollection.IsSynchronized"/>
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PropertiesDictionary.System#Collections#ICollection#SyncRoot">
            <summary>
            See <see cref="P:System.Collections.ICollection.SyncRoot"/>
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.OnlyOnceErrorHandler">
            <summary>
            错误处理器，忽略其它并发发生的错误。
            该错误消息输出至标准输出设备。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.IErrorHandler">
            <summary>
            附着器的错误处理器接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.IErrorHandler.Error(System.String,System.Exception,EIIP.Log.Core.ErrorCode)">
            <summary>
            处理错误。
            </summary>
            <param name="message">错误消息</param>
            <param name="e">发生错误时抛出的异常</param>
            <param name="errorCode">错误的指定代码</param>
        </member>
        <member name="M:EIIP.Log.Core.IErrorHandler.Error(System.String,System.Exception)">
            <summary>
            处理错误。
            </summary>
            <param name="message">错误消息</param>
            <param name="e">发生错误时抛出的异常</param>
        </member>
        <member name="M:EIIP.Log.Core.IErrorHandler.Error(System.String)">
            <summary>
            处理错误。
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="F:EIIP.Log.Util.OnlyOnceErrorHandler.m_firstTime">
            <summary>
            指示是否是第一个错误。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.OnlyOnceErrorHandler.m_prefix">
            <summary>
            每条消息的前缀。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.OnlyOnceErrorHandler.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.OnlyOnceErrorHandler.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="prefix">每条消息的前缀</param>
        </member>
        <member name="M:EIIP.Log.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception,EIIP.Log.Core.ErrorCode)">
            <summary>
            记录错误日志。
            </summary>
            <param name="message">错误消息</param>
            <param name="e">发生错误时抛出的异常</param>
            <param name="errorCode">错误代码</param>
        </member>
        <member name="M:EIIP.Log.Util.OnlyOnceErrorHandler.Error(System.String,System.Exception)">
            <summary>
            记录错误日志。
            </summary>
            <param name="message">错误消息</param>
            <param name="e">发生错误时抛出的异常</param>
        </member>
        <member name="M:EIIP.Log.Util.OnlyOnceErrorHandler.Error(System.String)">
            <summary>
            记录错误日志。
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="P:EIIP.Log.Util.OnlyOnceErrorHandler.IsEnabled">
            <summary>
            获取一个值，该值指示是否允许错误日志。
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.IPlugin">
            <summary>
            日志记录器库的插件要实现的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.IPlugin.Attach(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            附加至指定库。
            </summary>
            <param name="repository">库</param>
        </member>
        <member name="M:EIIP.Log.Plugin.IPlugin.Shutdown">
            <summary>
            当插件关闭时调用。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.IPlugin.Name">
            <summary>
            获取插件名称
            </summary>
        </member>
        <member name="T:EIIP.Log.ObjectRenderer.DefaultRenderer">
            <summary>
            默认对象呈现器。
            </summary>
        </member>
        <member name="T:EIIP.Log.ObjectRenderer.IObjectRenderer">
            <summary>
            将对象以字符串形式呈现的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.IObjectRenderer.RenderObject(EIIP.Log.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            以字符串形式呈现对象
            </summary>
            <param name="rendererMap">映射呈现器池</param>
            <param name="obj">要呈现的对象</param>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.DefaultRenderer.#ctor">
            <summary>
            实例化默认对象呈现器。
            </summary>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.DefaultRenderer.RenderObject(EIIP.Log.ObjectRenderer.RendererMap,System.Object,System.IO.TextWriter)">
            <summary>
            以字符串形式呈现对象
            </summary>
            <param name="rendererMap">映射呈现器池</param>
            <param name="obj">要呈现的对象</param>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.DefaultRenderer.RenderArray(EIIP.Log.ObjectRenderer.RendererMap,System.Array,System.IO.TextWriter)">
            <summary>
            呈现数组。
            </summary>
            <param name="rendererMap">映射呈现器池</param>
            <param name="array">要呈现的数组</param>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.DefaultRenderer.RenderCollection(EIIP.Log.ObjectRenderer.RendererMap,System.Collections.ICollection,System.IO.TextWriter)">
            <summary>
            呈现集合。
            </summary>
            <param name="rendererMap">映射呈现器池</param>
            <param name="collection">要呈现的集合</param>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.DefaultRenderer.RenderDictionaryEntry(EIIP.Log.ObjectRenderer.RendererMap,System.Collections.DictionaryEntry,System.IO.TextWriter)">
            <summary>
            呈现字典。
            </summary>
            <param name="rendererMap">映射呈现器池</param>
            <param name="entry">要呈现的字典</param>
            <param name="writer">文本流</param>
        </member>
        <member name="T:EIIP.Log.Layout.PatternLayout">
            <summary>
            配置模板布局。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.PatternLayout.DefaultConversionPattern">
            <summary>
            缺省日志输出字串模板。 
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.PatternLayout.DetailConversionPattern">
            <summary>
            详细日志输出字串模板。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.PatternLayout.s_globalRulesRegistry">
            <summary>
            全局类型转换器池。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.PatternLayout.m_pattern">
            <summary>
            模板
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.PatternLayout.m_head">
            <summary>
            模板转换链头。
            </summary>
        </member>
        <member name="F:EIIP.Log.Layout.PatternLayout.m_instanceRulesRegistry">
            <summary>
            本实例中的类型转换器池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.#cctor">
            <summary>
            初始化全局类型转换器池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.#ctor">
            <summary>
            实例化配置模板布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.#ctor(System.String)">
            <summary>
            以指定模板字串实例化配置模板布局。
            </summary>
            <param name="pattern">模板字串</param>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.CreatePatternParser(System.String)">
            <summary>
            创建模板解析实例。
            </summary>
            <param name="pattern">模板字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.ActivateOptions">
            <summary>
            初始化布局选项。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.Format(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            生成由指定转模板格式化后的内容。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.AddConverter(EIIP.Log.Layout.PatternLayout.ConverterInfo)">
            <summary>
            添加模板转换器。
            </summary>
            <param name="converterInfo">转换器信息</param>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.AddConverter(System.String,System.Type)">
            <summary>
            添加模板转换器。
            </summary>
            <param name="name">模板转换器名称。</param>
            <param name="type">转换器类型。</param>
        </member>
        <member name="P:EIIP.Log.Layout.PatternLayout.ConversionPattern">
            <summary>
            获取或设置模板字串。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.PatternLayout.Header">
            <summary>
            获取或设置布局的开始文本。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.PatternLayout.Footer">
            <summary>
            获取或设置布局的结尾文本。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.PatternLayout.ConverterInfo">
            <summary>
            映射转换器名称至类型的包装类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.PatternLayout.ConverterInfo.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.PatternLayout.ConverterInfo.Name">
            <summary>
            获取或设置模板转换器名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Layout.PatternLayout.ConverterInfo.Type">
            <summary>
            获取或设置转换器类型。
            </summary>
        </member>
        <member name="T:EIIP.Log.GlobalContext">
            <summary>
            日志系统全局上下文。提供全局调试信息存储的场所。
            </summary>
        </member>
        <member name="F:EIIP.Log.GlobalContext.s_properties">
            <summary>
            全局上下文属性实例。
            </summary>
        </member>
        <member name="P:EIIP.Log.GlobalContext.Properties">
            <summary>
            获取全局属性。
            </summary>
        </member>
        <member name="T:EIIP.Log.Filter.LevelMatchFilter">
            <summary>
            级别匹配过滤器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LevelMatchFilter.m_acceptOnMatch">
            <summary>
            指示过滤器在有匹配时，是否应为FilterDecision.Accept
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LevelMatchFilter.m_levelToMatch">
            <summary>
            匹配的目标级别。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.LevelMatchFilter.#ctor">
            <summary>
            实例化级别匹配过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.LevelMatchFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.LevelMatchFilter.AcceptOnMatch">
            <summary>
            获取或设置一个值，该值指示过滤器在有匹配时，是否应为FilterDecision.Accept
            </summary>
        </member>
        <member name="P:EIIP.Log.Filter.LevelMatchFilter.LevelToMatch">
            <summary>
            获取或设置匹配的目标级别。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LocationInfo">
            <summary>
            调用者位置信息类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LocationInfo.NA">
            <summary>
            当位置信息不可用时，返回NA型字串
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LocationInfo.m_className">
            <summary>
            调用者类的完全限定名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LocationInfo.m_fileName">
            <summary>
            调用者的文件名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LocationInfo.m_lineNumber">
            <summary>
            调用者的行号。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LocationInfo.m_methodName">
            <summary>
            调用者的方法名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LocationInfo.m_fullInfo">
            <summary>
            所有调用者信息变量。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LocationInfo.#ctor(System.Type)">
            <summary>
            实例化位置信息类。
            </summary>
            <param name="callerStackBoundaryDeclaringType">调用者堆栈上类型</param>
        </member>
        <member name="M:EIIP.Log.Core.LocationInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            实例化位置信息类。
            </summary>
            <param name="className">完全限定类名称</param>
            <param name="methodName">方法名称</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">文件内方法定位行号</param>
        </member>
        <member name="P:EIIP.Log.Core.LocationInfo.ClassName">
            <summary>
            获取记录日志的调用者类的完全限定名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LocationInfo.FileName">
            <summary>
            获取调用者的文件名。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LocationInfo.LineNumber">
            <summary>
            获取调用者的行号。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LocationInfo.MethodName">
            <summary>
            获取调用者的方法名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LocationInfo.FullInfo">
            <summary>
            获取所有调用者信息变量。
            </summary>
        </member>
        <member name="T:EIIP.Log.Config.XmlConfigurator">
            <summary>
            XML配置器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure">
            <summary>
            基于应用配置设置自动配置日志系统。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            用配置文件中的配置初始化日志记录库。
            </summary>
            <param name="repository">库</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(System.Xml.XmlElement)">
            <summary>
            使用 EIIP_LOG 元素配置日志系统。
            </summary>
            <param name="element">要解析的元素</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            使用指定XML元素配置库
            </summary>
            <param name="repository">要配置的库</param>
            <param name="element">要解析的元素</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(System.IO.FileInfo)">
            <summary>
            使用指定配置文件配置日志系统。
            </summary>
            <param name="configFile">XML 配置文件</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(System.Uri)">
            <summary>
            使用指定配置URI配置日志系统。
            </summary>
            <param name="configUri">能加载配置的 URI</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(System.IO.Stream)">
            <summary>
            使用指定的文件流配置日志系统。
            </summary>
            <param name="configStream">加载XML配置的文件流</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            使用指定的文件配置库。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="configFile">XML 配置文件</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository,System.Uri)">
            <summary>
            使用指定的URI配置库。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="configUri">能加载XML配置的 URI</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.Configure(EIIP.Log.Repository.ILoggerRepository,System.IO.Stream)">
            <summary>
            使用指定的文件配置库。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="configStream">XML 配置文件流</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatch(System.String)">
            <summary>
            以指定的文件进行配置，并监视该文件的更改。
            </summary>
            <param name="configFileName">XML 配置文件的完全限定名或相对文件名。</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatch(System.IO.FileInfo)">
            <summary>
            以指定的文件进行配置，并监视该文件的更改。
            </summary>
            <param name="configFile">XML 配置文件</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatch(EIIP.Log.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            以指定的文件配置库，并监视该文件的更改。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="configFile">XML 配置文件</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureFromXml(EIIP.Log.Repository.ILoggerRepository,System.Xml.XmlElement)">
            <summary>
            使用日志配置顶级元素配置库。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="element">要解析的元素</param>
        </member>
        <member name="T:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler">
            <summary>
            监视配置文件类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.TimeoutMillis">
            <summary>
            计时器工作延时。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.StartWatching(EIIP.Log.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            开始监视用于配置库的指定的配置文件。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="configFile">要监视的配置文件</param>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.m_configFile">
            <summary>
            配置文件信息实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.m_repository">
            <summary>
            被配置的库实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.m_timer">
            <summary>
            记时器实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.#ctor(EIIP.Log.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            实例化监视配置文件类。
            </summary>
            <param name="repository">要配置的库</param>
            <param name="configFile">要监视的配置文件</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            处理配置更改事件。
            </summary>
            <param name="source">引发事件的 FileSystemWatcher 对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            处理配置更名事件。
            </summary>
            <param name="source">引发事件的 FileSystemWatcher 对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfigurator.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
            <summary>
            当配置被更改时由计时器调用。
            </summary>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.EncodingConverter">
            <summary>
            System.Text.Encoding 类型转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.EncodingConverter.CanConvertFrom(System.Type)">
            <summary>
            获取一个值，该值指示能否从源类型（string）进行转换。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.EncodingConverter.ConvertFrom(System.Object)">
            <summary>
            转换源对象为 System.Text.Encoding 类型。
            </summary>
            <param name="source">要转换的源对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.ReusableStringWriter">
            <summary>
            可重置和复用的文本流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ReusableStringWriter.#ctor(System.IFormatProvider)">
            <summary>
            使用指定的格式控制初始化 ReusableStringWriter 类的新实例。。
            </summary>
            <param name="formatProvider">控制格式设置的 System.IFormatProvider 对象。</param>
        </member>
        <member name="M:EIIP.Log.Util.ReusableStringWriter.Dispose(System.Boolean)">
            <summary>
            重写该方法以防止释放由 ReusableStringWriter 使用的资源。
            </summary>
            <param name="disposing">标记</param>
        </member>
        <member name="M:EIIP.Log.Util.ReusableStringWriter.Reset(System.Int32,System.Int32)">
            <summary>
            重置文本流，以便于复用。
            </summary>
            <param name="maxCapacity">设置可包含在当前实例所分配的内存中的最大字符数。</param>
            <param name="defaultSize">默认的分配大小</param>
        </member>
        <member name="T:EIIP.Log.Util.CompositeProperties">
            <summary>
            复合属性类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.CompositeProperties.m_nestedProperties">
            <summary>
            嵌套的属性集
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.CompositeProperties.#ctor">
            <summary>
            实例化合成属性类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.CompositeProperties.Add(EIIP.Log.Util.ReadOnlyPropertiesDictionary)">
            <summary>
            添加指定的只读属性字典。
            </summary>
            <param name="properties">只读属性字典</param>
        </member>
        <member name="M:EIIP.Log.Util.CompositeProperties.Flatten">
            <summary>
            展开复合属性集。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.CompositeProperties.Item(System.String)">
            <summary>
            获取或设置属性。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.SimpleLayout">
            <summary>
            简单布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.SimpleLayout.#ctor">
            <summary>
            实例化简单布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.SimpleLayout.ActivateOptions">
            <summary>
            激活组件布局。(不处理)
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.SimpleLayout.Format(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            设置指定的 LoggingEvent 的布局。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
        </member>
        <member name="T:EIIP.Log.Layout.ExceptionLayout">
            <summary>
            日志事件的异常布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.ExceptionLayout.#ctor">
            <summary>
            实例化日志事件的异常布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.ExceptionLayout.ActivateOptions">
            <summary>
            激活组件布局。(不处理)
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.ExceptionLayout.Format(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            设置指定的 LoggingEvent 的异常布局。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">要格式化的 LoggingEvent 对象</param>
        </member>
        <member name="T:EIIP.Log.Config.XmlConfiguratorAttribute">
            <summary>
            XML配置器特性。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfiguratorAttribute.m_configFile">
            <summary>
            配置文件名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfiguratorAttribute.m_configFileExtension">
            <summary>
            配置文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Config.XmlConfiguratorAttribute.m_configureAndWatch">
            <summary>
            指示是否监测配置文件。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfiguratorAttribute.#ctor">
            <summary>
            实例化XML配置器特性。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfiguratorAttribute.Configure(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            为指定程序集配置日志记录器库。
            </summary>
            <param name="sourceAssembly">程序集</param>
            <param name="targetRepository">日志记录器库</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfiguratorAttribute.ConfigureFromFile(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            从本地文件加载配置。
            </summary>
            <param name="sourceAssembly">程序集</param>
            <param name="targetRepository">日志记录器库</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfiguratorAttribute.ConfigureFromFile(EIIP.Log.Repository.ILoggerRepository,System.IO.FileInfo)">
            <summary>
            从本地文件加载配置。
            </summary>
            <param name="targetRepository">要配置的目标库</param>
            <param name="configFile">配置文件信息</param>
        </member>
        <member name="M:EIIP.Log.Config.XmlConfiguratorAttribute.ConfigureFromUri(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            从URI中加载配置。
            </summary>
            <param name="sourceAssembly">程序集</param>
            <param name="targetRepository">日志记录器库</param>
        </member>
        <member name="P:EIIP.Log.Config.XmlConfiguratorAttribute.ConfigFile">
            <summary>
            获取或设置配置文件名。
            </summary>
        </member>
        <member name="P:EIIP.Log.Config.XmlConfiguratorAttribute.ConfigFileExtension">
            <summary>
            获取或设置配置文件扩展名。
            </summary>
        </member>
        <member name="P:EIIP.Log.Config.XmlConfiguratorAttribute.Watch">
            <summary>
            获取或设置一个值，该值指示是否监测配置文件。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.BufferingForwardingAppender">
            <summary>
            缓存事件并以向前的方式将其附加在附着器上。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.BufferingForwardingAppender.m_appenderAttachedImpl">
            <summary>
            附着器附加至对象实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.OnClose">
            <summary>
            关闭附着器，并释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.SendBuffer(EIIP.Log.Core.LoggingEvent[])">
            <summary>
            发送事件。
            </summary>
            <param name="events">要发送的事件列表</param>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.AddAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            添加附着器。
            </summary>
            <param name="newAppender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.GetAppender(System.String)">
            <summary>
            获取指定名称的附着器。未找到则返回null。
            </summary>
            <param name="name">附着器的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.RemoveAllAppenders">
            <summary>
            移除所有附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.RemoveAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            移除指定附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="appender">要移除的附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.BufferingForwardingAppender.RemoveAppender(System.String)">
            <summary>
            移除指定名称的附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="name">要移除的附着器名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Appender.BufferingForwardingAppender.Appenders">
            <summary>
            获取所有附着器。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.ProcessIdPatternConverter">
            <summary>
            进程ID模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.ProcessIdPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            输出当前进程ID
            </summary>
            <param name="writer">文本流</param>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.NewLinePatternConverter">
            <summary>
            输出新行。
            </summary>
            <remarks>
            <list type="definition">
              <listheader>
                <term>Option Value</term>
                <description>Output</description>
              </listheader>
              <item>
                <term>DOS</term>
                <description>DOS 或 Windows 行结束符 <c>"\r\n"</c></description>
              </item>
              <item>
                <term>UNIX</term>
                <description>UNIX 行结束符 <c>"\n"</c></description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.NewLinePatternConverter.ActivateOptions">
            <summary>
            初始化转换器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.PropertyPatternConverter">
            <summary>
            属性模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.PropertyPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出属性值。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.ExceptionPatternConverter">
            <summary>
            异常模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.ExceptionPatternConverter.#ctor">
            <summary>
            实例化异常模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.ExceptionPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出异常。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.DatePatternConverter">
            <summary>
            日期模板转换器，使用 IDateFormatter 格式化 LoggingEvent 日期。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.DatePatternConverter.ActivateOptions">
            <summary>
            初始化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.DatePatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            转换数据。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.ConverterRegistry">
            <summary>
            指定类型转换器库。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.TypeConverters.ConverterRegistry.s_type2converter">
            <summary>
            类型转换器库。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.#cctor">
            <summary>
            静态构造器。定义内置类型转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Object)">
            <summary>
            添加指定类型的类型转换器。
            </summary>
            <param name="destinationType">目标类型</param>
            <param name="converter">类型转换器实例对象</param>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.AddConverter(System.Type,System.Type)">
            <summary>
            添加指定类型的类型转换器。
            </summary>
            <param name="destinationType">目标类型</param>
            <param name="converterType">类型转换器的类型</param>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.GetConvertTo(System.Type)">
            <summary>
            获取指定的类型转换器。不存在则返回 null 。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.GetConvertFrom(System.Type)">
            <summary>
            获取指定类型的类型转换器。不存在则返回 null 。
            </summary>
            <param name="destinationType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.GetConverterFromAttribute(System.Type)">
            <summary>
            从类型中的属性特性中获取类型转换器。不存在则返回 null 。
            </summary>
            <param name="destinationType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.ConverterRegistry.CreateConverterInstance(System.Type)">
            <summary>
            创建类型转换器的实例。失败返回null。
            </summary>
            <param name="converterType">类型转换器的类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Util.ThreadContextStack">
            <summary>
            线程上下文堆栈类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.ThreadContextStack.m_stack">
            <summary>
            堆栈
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.#ctor">
            <summary>
            实例化线程上下文堆栈类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.Clear">
            <summary>
            从堆栈中移除所有上下文对象。 
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.Pop">
            <summary>
            移除并返回位于堆栈顶部的上下文消息。 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.Push(System.String)">
            <summary>
            将上下文消息插入堆栈的顶部。并返回可清理的堆栈接口。
            </summary>
            <param name="message">上下文消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.GetFullMessage">
            <summary>
            获取堆栈中完整的上下文消息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.ToString">
            <summary>
            获取堆栈中完整的上下文消息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.EIIP#Log#Core#IFixingRequired#GetFixedObject">
            <summary>
            获取堆栈中完整的上下文消息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.ThreadContextStack.Count">
            <summary>
            堆栈中的消息数量。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ThreadContextStack.InternalStack">
            <summary>
            获取或设置内部堆栈。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.ThreadContextStack.StackFrame">
            <summary>
            提供单一上下文的堆栈帧。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.StackFrame.#ctor(System.String,EIIP.Log.Util.ThreadContextStack.StackFrame)">
            <summary>
            实例化提供单一上下文的堆栈帧。
            </summary>
            <param name="message">该帧的消息</param>
            <param name="parent">父帧</param>
        </member>
        <member name="P:EIIP.Log.Util.ThreadContextStack.StackFrame.Message">
            <summary>
            获取消息。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.ThreadContextStack.StackFrame.FullMessage">
            <summary>
            获取完整消息。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.ThreadContextStack.AutoPopStackFrame">
            <summary>
            自动清理堆栈帧结构。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.ThreadContextStack.AutoPopStackFrame.m_frameStack">
            <summary>
            帧堆栈
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.ThreadContextStack.AutoPopStackFrame.m_frameDepth">
            <summary>
            帧深度
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.AutoPopStackFrame.#ctor(System.Collections.Stack,System.Int32)">
            <summary>
            实例化自动清理堆栈帧结构。
            </summary>
            <param name="frameStack">帧堆栈</param>
            <param name="frameDepth">帧深度</param>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextStack.AutoPopStackFrame.Dispose">
            <summary>
            释放帧，并退出堆栈至正确的深度。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.ThreadContextProperties">
            <summary>
            线程上下文属性集。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.ThreadContextProperties.s_threadLocalSlot">
            <summary>
            在所有的线程上分配未命名的数据槽。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextProperties.#ctor">
            <summary>
            实例化线程上下文属性集。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextProperties.Remove(System.String)">
            <summary>
            移除指定属性
            </summary>
            <param name="key">属性</param>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextProperties.Clear">
            <summary>
            清除所有属性
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ThreadContextProperties.GetProperties(System.Boolean)">
            <summary>
            获取属性字典。
            </summary>
            <param name="create">如字典不存在是否需要创建</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.ThreadContextProperties.Item(System.String)">
            <summary>
            获取或设置属性
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginCollection">
            <summary>
            类型安全的插件对象集合。
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginCollection.DEFAULT_CAPACITY">
            <summary>
            默认容量。
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginCollection.m_array">
            <summary>
            插件数组
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginCollection.m_count">
            <summary>
            计数
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginCollection.m_version">
            <summary>
            版本
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.#ctor">
            <summary>
            以默认大小实例化插件对象集合。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.#ctor(System.Int32)">
            <summary>
            以指定容量大小实例化插件对象集合。
            </summary>
            <param name="capacity">容量大小</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.#ctor(EIIP.Log.Plugin.PluginCollection)">
            <summary>
            以指定插件对象集合实例化插件对象集合。
            </summary>
            <param name="c">插件对象集合</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.#ctor(EIIP.Log.Plugin.IPlugin[])">
            <summary>
            以指定插件对象数组实例化插件对象集合。
            </summary>
            <param name="a">插件对象数组</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.#ctor(System.Collections.ICollection)">
            <summary>
            以指定插件对象集合实例化插件对象集合。
            </summary>
            <param name="col">插件对象集合</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.#ctor(EIIP.Log.Plugin.PluginCollection.Tag)">
            <summary>
            允许继承类避免执行默认构造器。
            </summary>
            <param name="tag">标志</param>
            <exclude/>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnly(EIIP.Log.Plugin.PluginCollection)">
            <summary>
            创建一个只读的 PluginCollection 实例包装。
            </summary>
            <param name="list">要包装的PluginCollection 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.CopyTo(EIIP.Log.Plugin.IPlugin[])">
            <summary>
            将所有插件复制至指定数组中。
            </summary>
            <param name="array">接受插件的数组</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.CopyTo(EIIP.Log.Plugin.IPlugin[],System.Int32)">
            <summary>
            将所有插件复制至指定数组中。
            </summary>
            <param name="array">接受插件的数组</param>
            <param name="start">开始接受复制插件的索引</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            复制集合中的所有插件至一数组中。
            </summary>
            <param name="array">一维插件数组</param>
            <param name="start">一维插件数组接受插件的索引</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Add(EIIP.Log.Plugin.IPlugin)">
            <summary>
            追加指定插件。
            </summary>
            <param name="item">插件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Clear">
            <summary>
            移除所有插件。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Clone">
            <summary>
            深层克隆一份副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Contains(EIIP.Log.Plugin.IPlugin)">
            <summary>
            测试插件是否已存在。
            </summary>
            <param name="item">插件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.IndexOf(EIIP.Log.Plugin.IPlugin)">
            <summary>
            返回指定插件索引。
            </summary>
            <param name="item">插件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Insert(System.Int32,EIIP.Log.Plugin.IPlugin)">
            <summary>
            在指定索引位置插入插件。
            </summary>
            <param name="index">索引</param>
            <param name="item">插件</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Remove(EIIP.Log.Plugin.IPlugin)">
            <summary>
            移除指定插件。
            </summary>
            <param name="item">插件</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定位置插件。
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.GetEnumerator">
            <summary>
            获取插件枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.AddRange(EIIP.Log.Plugin.PluginCollection)">
            <summary>
            将另一集合所有插件对象加至当前集合。
            </summary>
            <param name="x">提供插件对象的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.AddRange(EIIP.Log.Plugin.IPlugin[])">
            <summary>
            附加插件数组内的插件。
            </summary>
            <param name="x">插件数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.AddRange(System.Collections.ICollection)">
            <summary>
            附加插件集合内的插件。
            </summary>
            <param name="col">插件集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.TrimToSize">
            <summary>
            设置容量为集合实际大小。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ValidateIndex(System.Int32)">
            <summary>
            检验索引是否合法。不合法则抛出错误。
            </summary>
            <param name="i">索引</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ValidateIndex(System.Int32,System.Boolean)">
            <summary>
            检验索引是否合法。不合法则抛出错误。
            </summary>
            <param name="i">索引</param>
            <param name="allowEqualEnd">设置索引是否允许大于等于集合总数</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.EnsureCapacity(System.Int32)">
            <summary>
            确认最小容量。
            </summary>
            <param name="min"></param>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.Count">
            <summary>
            获取插件数量。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 System.Array 的访问（线程安全）。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.SyncRoot">
            <summary>
            获取可用于同步对 System.Array 的访问的对象。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引的插件。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.IsFixedSize">
            <summary>
            获取一个值，该值指示集合是否有一个固定尺寸。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.IsReadOnly">
            <summary>
            获取一个值，该值指示集合是否是只读的。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.Capacity">
            <summary>
            获取或设置集合容量。
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginCollection.IPluginCollectionEnumerator">
            <summary>
            类型安全的插件对象枚举接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.IPluginCollectionEnumerator.MoveNext">
            <summary>
            移至集合的下一元素。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.IPluginCollectionEnumerator.Reset">
            <summary>
            重置枚举指针。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.IPluginCollectionEnumerator.Current">
            <summary>
            获取当前元素。
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginCollection.Tag">
            <summary>
            标志枚举
            </summary>
            <exclude/>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginCollection.Tag.Default">
            <summary>
            值
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginCollection.Enumerator">
            <summary>
            枚举数
            </summary>
            <exclude/>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Enumerator.#ctor(EIIP.Log.Plugin.PluginCollection)">
            <summary>
            实例化
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Enumerator.MoveNext">
            <summary>
            移至下一元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.Enumerator.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.Enumerator.Current">
            <summary>
            获取当前元素。
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection">
            <summary>
            只读插件集合。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.#ctor(EIIP.Log.Plugin.PluginCollection)">
            <summary>
            实例化只读插件集合。
            </summary>
            <param name="list">插件集合</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.CopyTo(EIIP.Log.Plugin.IPlugin[])">
            <summary>
            将所有插件复制至指定数组中。
            </summary>
            <param name="array">接受插件的数组</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.CopyTo(EIIP.Log.Plugin.IPlugin[],System.Int32)">
            <summary>
            将所有插件复制至指定数组中。
            </summary>
            <param name="array">接受插件的数组</param>
            <param name="start">开始接受复制插件的索引</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Add(EIIP.Log.Plugin.IPlugin)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Contains(EIIP.Log.Plugin.IPlugin)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.IndexOf(EIIP.Log.Plugin.IPlugin)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Insert(System.Int32,EIIP.Log.Plugin.IPlugin)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="x"></param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Remove(EIIP.Log.Plugin.IPlugin)">
            <summary>
            
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="pos"></param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.AddRange(EIIP.Log.Plugin.PluginCollection)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.AddRange(EIIP.Log.Plugin.IPlugin[])">
            <summary>
            
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Count">
            <summary>
            获取插件数量。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 System.Array 的访问（线程安全）。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.SyncRoot">
            <summary>
            获取可用于同步对 System.Array 的访问的对象。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginCollection.ReadOnlyPluginCollection.Capacity">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.FileLocationPatternConverter">
            <summary>
            文件位置模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.FileLocationPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出调用者文件位置。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Filter.PropertyFilter">
            <summary>
            事件属性匹配过滤器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Filter.StringMatchFilter">
            <summary>
            字符串匹配过滤器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.StringMatchFilter.m_acceptOnMatch">
            <summary>
            该值指示当存在匹配时，是否判定确认。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.StringMatchFilter.m_stringToMatch">
            <summary>
            要匹配的字符串。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.StringMatchFilter.m_stringRegexToMatch">
            <summary>
            正则表达式
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.StringMatchFilter.m_regexToMatch">
            <summary>
            正则表达式对象
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.StringMatchFilter.#ctor">
            <summary>
            实例化字符串匹配过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.StringMatchFilter.ActivateOptions">
            <summary>
            预编译正则表达式。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.StringMatchFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.StringMatchFilter.AcceptOnMatch">
            <summary>
            获取或设置一个值，该值指示当存在匹配时，是否判定确认。
            </summary>
        </member>
        <member name="P:EIIP.Log.Filter.StringMatchFilter.StringToMatch">
            <summary>
            获取或设置要匹配的字符串。
            </summary>
        </member>
        <member name="P:EIIP.Log.Filter.StringMatchFilter.RegexToMatch">
            <summary>
            获取或设置正则表达式
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.PropertyFilter.m_key">
            <summary>
            要匹配的事件属性
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.PropertyFilter.#ctor">
            <summary>
            实例化事件属性匹配过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.PropertyFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.PropertyFilter.Key">
            <summary>
            获取或设置要匹配的事件属性
            </summary>
        </member>
        <member name="T:EIIP.Log.Filter.DenyAllFilter">
            <summary>
            拒绝所有事件的过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.DenyAllFilter.#ctor">
            <summary>
            实例化拒绝所有事件的过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.DenyAllFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。总是返回 FilterDecision.Deny。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Core.ILogger">
            <summary>
            所有日志记录器要实现的接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.ILogger.Log(System.Type,EIIP.Log.Core.Level,System.Object,System.Exception)">
            <summary>
            日志登记。
            </summary>
            <param name="callerStackBoundaryDeclaringType">进入日志系统的（堆栈调用边界）方法的声明类型</param>
            <param name="level">日志信息级别</param>
            <param name="message">日志信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。设置 null 不进行异常登记。</param>
        </member>
        <member name="M:EIIP.Log.Core.ILogger.Log(EIIP.Log.Core.LoggingEvent)">
            <summary>
            日志登记。
            </summary>
            <param name="logEvent">要登记的事件</param>
        </member>
        <member name="M:EIIP.Log.Core.ILogger.IsEnabledFor(EIIP.Log.Core.Level)">
            <summary>
            检查日志记录器是否启用了指定级别的日志记录。
            </summary>
            <param name="level">级别</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.ILogger.Name">
            <summary>
            获取日志记录器的名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.ILogger.Repository">
            <summary>
            获取附加在日志记录器实例上的日志库。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.PropertyPatternConverter">
            <summary>
            属性模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.PropertyPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            写入属性值
            </summary>
            <param name="writer">文本流</param>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.EnvironmentPatternConverter">
            <summary>
            输出环境变量。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.EnvironmentPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            输出环境变量。
            </summary>
            <param name="writer">文本流</param>
            <param name="state">设为null，无需设置值</param>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.RootLogger">
            <summary>
            日志记录器树的根记录器类。
            </summary>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.Logger">
            <summary>
            日志记录器类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.ThisDeclaringType">
            <summary>
            日志记录器的声明类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_name">
            <summary>
            日志记录器的名称。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_level">
            <summary>
            日志记录器分配的级别。该级别未分配时，会从树中继承获取。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_parent">
            <summary>
            上级日志记录器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_hierarchy">
            <summary>
            日志记录器的树。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_appenderAttachedImpl">
            <summary>
            附着器附加至对象助手实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_additive">
            <summary>
            该值指示子记录器是否继承所有上级的附着器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Repository.Hierarchy.Logger.m_appenderLock">
            <summary>
            保护变量 m_appenderAttachedImpl 的锁。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.#ctor(System.String)">
            <summary>
            按指定名称实例化日志记录器。
            </summary>
            <param name="name">日志记录器名称。</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.AddAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            添加附着器。
            </summary>
            <param name="newAppender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.GetAppender(System.String)">
            <summary>
            获取指定名称的附着器。未找到则返回null。
            </summary>
            <param name="name">附着器的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.RemoveAllAppenders">
            <summary>
            移除所有附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.RemoveAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            移除指定附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="appender">要移除的附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.RemoveAppender(System.String)">
            <summary>
            移除指定名称的附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="name">要移除的附着器名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.Log(System.Type,EIIP.Log.Core.Level,System.Object,System.Exception)">
            <summary>
            日志登记。
            </summary>
            <param name="callerStackBoundaryDeclaringType">进入日志系统的（堆栈调用边界）方法的声明类型</param>
            <param name="level">日志信息级别</param>
            <param name="message">日志信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。设置 null 不进行异常登记。</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.Log(EIIP.Log.Core.LoggingEvent)">
            <summary>
            日志登记。
            </summary>
            <param name="logEvent">要登记的事件</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.IsEnabledFor(EIIP.Log.Core.Level)">
            <summary>
            检查指定级别的日志记录器是否可用。
            </summary>
            <param name="level">级别</param>
            <returns> </returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.CallAppenders(EIIP.Log.Core.LoggingEvent)">
            <summary>
            用附加的附着器解释指定日志事件。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.CloseNestedAppenders">
            <summary>
            关闭所有的附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.Log(EIIP.Log.Core.Level,System.Object,System.Exception)">
            <summary>
            记录日志的方法。
            </summary>
            <param name="level">日志级别</param>
            <param name="message">日志信息</param>
            <param name="exception">要记录的异常</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.ForcedLog(System.Type,EIIP.Log.Core.Level,System.Object,System.Exception)">
            <summary>
            创建一新日志事件，并无需任何测试地记录该事件。
            </summary>
            <param name="callerStackBoundaryDeclaringType">进入日志系统的（堆栈调用边界）方法的声明类型</param>
            <param name="level">日志信息级别</param>
            <param name="message">日志信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。设置 null 不进行异常登记。</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.Logger.ForcedLog(EIIP.Log.Core.LoggingEvent)">
            <summary>
            创建一新日志事件，并无需任何测试地记录该事件。
            </summary>
            <param name="logEvent">要记录的事件</param>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Parent">
            <summary>
            获取或设置上级记录器
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Additivity">
            <summary>
            获取或设置一个值，该值指示子记录器是否继承所有上级记录器的附着器。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.EffectiveLevel">
            <summary>
            获取日志记录器的有效级别。有可能为null。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Hierarchy">
            <summary>
            获取或设置日志记录器树。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Level">
            <summary>
            获取或设置分配的级别。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Appenders">
            <summary>
            获取所有附着器。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Name">
            <summary>
            获取日志记录器的名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.Logger.Repository">
            <summary>
            获取日志记录器实例附加的库。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.RootLogger.#ctor(EIIP.Log.Core.Level)">
            <summary>
            实例化指定级别的根记录器。根记录器的名称为"root"，但该记录器却不能通过名称来获取。
            </summary>
            <param name="level">级别</param>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.RootLogger.EffectiveLevel">
            <summary>
            获取有效级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Repository.Hierarchy.RootLogger.Level">
            <summary>
            获取或设置根记录器分配的级别。
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginSkeleton">
            <summary>
            插件架构类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginSkeleton.m_name">
            <summary>
            插件名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginSkeleton.m_repository">
            <summary>
            插件附加的库
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginSkeleton.#ctor(System.String)">
            <summary>
            以指定插件名称实例化插件架构类。
            </summary>
            <param name="name">插件名称</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginSkeleton.Attach(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            附加至指定库。
            </summary>
            <param name="repository">库</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginSkeleton.Shutdown">
            <summary>
            当插件关闭时调用。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginSkeleton.LoggerRepository">
            <summary>
            获取或设置插件附加的库
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginSkeleton.Name">
            <summary>
            获取或设置插件名称
            </summary>
        </member>
        <member name="T:EIIP.Log.Plugin.PluginMap">
            <summary>
            库的映射池插件。
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginMap.m_mapName2Plugin">
            <summary>
            插件对象集。
            </summary>
        </member>
        <member name="F:EIIP.Log.Plugin.PluginMap.m_repository">
            <summary>
            日志记录器库。
            </summary>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginMap.#ctor(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            实例化插件池。
            </summary>
            <param name="repository">附加插件的日志记录器库</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginMap.Add(EIIP.Log.Plugin.IPlugin)">
            <summary>
            添加指定插件。
            </summary>
            <param name="plugin">插件</param>
        </member>
        <member name="M:EIIP.Log.Plugin.PluginMap.Remove(EIIP.Log.Plugin.IPlugin)">
            <summary>
            移除指定插件。
            </summary>
            <param name="plugin">插件</param>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginMap.Item(System.String)">
            <summary>
            获取指定名称的插件。
            </summary>
        </member>
        <member name="P:EIIP.Log.Plugin.PluginMap.AllPlugins">
            <summary>
            获取所有插件对象集合。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.RawLayoutConverter">
            <summary>
            原始视图对象转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.RawLayoutConverter.CanConvertFrom(System.Type)">
            <summary>
            测试是否能从源类型转换为IRawLayout类型。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Layout.RawLayoutConverter.ConvertFrom(System.Object)">
            <summary>
            从指定源对象中转换
            </summary>
            <param name="source">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.MethodLocationPatternConverter">
            <summary>
            调用者方法名称模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.MethodLocationPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出调用者方法名称
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Config.AliasRepositoryAttribute">
            <summary>
            指定库的别名的特性。
            </summary>
        </member>
        <member name="M:EIIP.Log.Config.AliasRepositoryAttribute.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="name">程序集中库的别名</param>
        </member>
        <member name="P:EIIP.Log.Config.AliasRepositoryAttribute.Name">
            <summary>
            获取或设置程序集中库的别名。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.AppenderCollection">
            <summary>
            强类型的附着器集合
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderCollection.EmptyCollection">
            <summary>
            空的只读附着器集合。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.ReadOnly(EIIP.Log.Appender.AppenderCollection)">
            <summary>
            创建一只读附着器集合。
            </summary>
            <param name="list">源附着器集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.#ctor">
            <summary>
            实例化附着器集合。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.#ctor(System.Int32)">
            <summary>
            以指定容量大小实例化附着器集合。
            </summary>
            <param name="capacity">容量大小</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.#ctor(EIIP.Log.Appender.AppenderCollection)">
            <summary>
            以指定附着器集合实例化附着器集合。
            </summary>
            <param name="c">附着器集合</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.#ctor(EIIP.Log.Appender.IAppender[])">
            <summary>
            以指定附着器数组实例化附着器集合。
            </summary>
            <param name="a">附着器数组</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.#ctor(System.Collections.ICollection)">
            <summary>
            以指定集合对象实例化附着器集合。
            </summary>
            <param name="col">集合对象</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.#ctor(EIIP.Log.Appender.AppenderCollection.Tag)">
            <summary>
            允许继承类避开实例化无参构造器。
            </summary>
            <param name="tag">标志</param>
            <exclude/>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.CopyTo(EIIP.Log.Appender.IAppender[])">
            <summary>
            复制集合中元素至一维数组中。
            </summary>
            <param name="array">一维数组</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.CopyTo(EIIP.Log.Appender.IAppender[],System.Int32)">
            <summary>
            复制集合中元素至一维数组中。
            </summary>
            <param name="array">一维数组</param>
            <param name="start">array中的起始索引</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Add(EIIP.Log.Appender.IAppender)">
            <summary>
            追加附着器。
            </summary>
            <param name="item">附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Clear">
            <summary>
            从集合中移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Clone">
            <summary>
            获取集合的一浅层副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Contains(EIIP.Log.Appender.IAppender)">
            <summary>
            判断是否包含指定的附着器。
            </summary>
            <param name="item">附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.IndexOf(EIIP.Log.Appender.IAppender)">
            <summary>
            获取指定附着器的索引。
            </summary>
            <param name="item">附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Insert(System.Int32,EIIP.Log.Appender.IAppender)">
            <summary>
            在指定索引位置插入附着器。
            </summary>
            <param name="index">索引</param>
            <param name="item">附着器</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Remove(EIIP.Log.Appender.IAppender)">
            <summary>
            移除指定附着器。
            </summary>
            <param name="item">附着器</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的附着器。
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.GetEnumerator">
            <summary>
            获取集合枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.AddRange(EIIP.Log.Appender.AppenderCollection)">
            <summary>
            添加元素。
            </summary>
            <param name="x">要添加的元素所在集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.AddRange(EIIP.Log.Appender.IAppender[])">
            <summary>
            添加元素。
            </summary>
            <param name="x">要添加的元素所在数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.AddRange(System.Collections.ICollection)">
            <summary>
            添加元素。
            </summary>
            <param name="col">要添加的元素所在集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.TrimToSize">
            <summary>
            设置容量为元素实际数量。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.ToArray">
            <summary>
            获取集合所有元素的元素数组。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.Count">
            <summary>
            获取集合中元素数
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对集合的访问（线程安全）。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.SyncRoot">
            <summary>
            获取可用于同步对集合的访问的对象。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引的 IAppender
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.IsFixedSize">
            <summary>
            获取一个值，该值指示集合是否是固定尺寸的（总是返回false）。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.IsReadOnly">
            <summary>
            获取一个值，该值指示 IList 是否是只读的（总是返回false）。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.Capacity">
            <summary>
            获取或设置集合容量。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.AppenderCollection.IAppenderCollectionEnumerator">
            <summary>
            附着器集合的枚举数。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.IAppenderCollectionEnumerator.MoveNext">
            <summary>
            移至下一附着器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.IAppenderCollectionEnumerator.Reset">
            <summary>
            重置指针。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.IAppenderCollectionEnumerator.Current">
            <summary>
            获取当前附着器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.AppenderCollection.Tag">
            <summary>
            仅供继承类访问标志。
            </summary>
            <exclude/>
        </member>
        <member name="F:EIIP.Log.Appender.AppenderCollection.Tag.Default">
            <summary>
            值
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.AppenderCollection.Enumerator">
            <summary>
            Supports simple iteration over a <see cref="T:EIIP.Log.Appender.AppenderCollection"/>.
            </summary>
            <exclude/>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Enumerator.#ctor(EIIP.Log.Appender.AppenderCollection)">
            <summary>
            实例化枚举数。
            </summary>
            <param name="tc"></param>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element in the collection.
            </summary>
            <returns>
            <c>true</c> if the enumerator was successfully advanced to the next element; 
            <c>false</c> if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:EIIP.Log.Appender.AppenderCollection.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, before the first element in the collection.
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.AppenderCollection.Enumerator.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.DatePatternConverter">
            <summary>
            输出当前日期。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.DatePatternConverter.ActivateOptions">
            <summary>
            初始化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.DatePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            输出当前日期。
            </summary>
            <param name="writer">文本流</param>
            <param name="state">设为null，无需传入值</param>
        </member>
        <member name="T:EIIP.Log.Util.EmptyCollection">
            <summary>
            空集合。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.EmptyCollection.s_instance">
            <summary>
            空集合实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.EmptyCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an 
            <see cref="T:System.Array"/>, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based 
            indexing.</param>
            <param name="index">The zero-based index in array at which 
            copying begins.</param>
            <remarks>
            <para>
            As the collection is empty no values are copied into the array.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.EmptyCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
        </member>
        <member name="P:EIIP.Log.Util.EmptyCollection.Instance">
            <summary>
            获取空集合实例。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.EmptyCollection.IsSynchronized">
            <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
            <value>
            <b>true</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>
            For the <see cref="T:EIIP.Log.Util.EmptyCollection"/> this property is always <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty the <see cref="P:EIIP.Log.Util.EmptyCollection.Count"/> is always <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:EIIP.Log.Util.EmptyCollection.SyncRoot"/> object.
            </para>
            </remarks>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.LineLocationPatternConverter">
            <summary>
            调用者行号模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.LineLocationPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出调用者行号。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Core.LogImpl">
            <summary>
            日志实体。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LogImpl.ThisDeclaringType">
            <summary>
            日志实体的声明类型。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.#ctor(EIIP.Log.Core.ILogger)">
            <summary>
            实例化日志实体。
            </summary>
            <param name="logger">日志记录器</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.ReloadLevels(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            重新加载级别。当库的配置更改时调用。
            </summary>
            <param name="repository">库</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Debug(System.Object)">
            <summary>
            调试级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Debug(System.Object,System.Exception)">
            <summary>
            调试级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.DebugFormat(System.String,System.Object[])">
            <summary>
            调试级别记录格式。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            调试级别记录格式。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Info(System.Object)">
            <summary>
            信息级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Info(System.Object,System.Exception)">
            <summary>
            信息级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.InfoFormat(System.String,System.Object[])">
            <summary>
            信息级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            信息级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Warn(System.Object)">
            <summary>
            警告级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Warn(System.Object,System.Exception)">
            <summary>
            警告级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.WarnFormat(System.String,System.Object[])">
            <summary>
            警告级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            警告级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Error(System.Object)">
            <summary>
            错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Error(System.Object,System.Exception)">
            <summary>
            错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.ErrorFormat(System.String,System.Object[])">
            <summary>
            错误级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            错误级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Fatal(System.Object)">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.Fatal(System.Object,System.Exception)">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="message">要记录的信息</param>
            <param name="exception">要登记的异常,包括它的堆栈跟踪。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.FatalFormat(System.String,System.Object[])">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            致命错误级别记录。
            </summary>
            <param name="provider">一个 System.IFormatProvider，它提供区域性特定的格式设置信息。</param>
            <param name="format">System.String，包含零个或多个格式项。</param>
            <param name="args">包含零个或多个要格式化的对象的 System.Object 数组。</param>
        </member>
        <member name="M:EIIP.Log.Core.LogImpl.LoggerRepositoryConfigurationChanged(System.Object,System.EventArgs)">
            <summary>
            处理日志记录器库配置更改事件的方法
            </summary>
            <param name="sender">库对象</param>
            <param name="e">null</param>
        </member>
        <member name="P:EIIP.Log.Core.LogImpl.IsDebugEnabled">
            <summary>
            检查日志记录器是否允许调试级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Core.LogImpl.IsInfoEnabled">
            <summary>
            检查日志记录器是否允许信息级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Core.LogImpl.IsWarnEnabled">
            <summary>
            检查日志记录器是否允许警告级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Core.LogImpl.IsErrorEnabled">
            <summary>
            检查日志记录器是否允许错误级别。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Log.Core.LogImpl.IsFatalEnabled">
            <summary>
            检查日志记录器是否允许严重错误级别。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Log.Core.LevelMap">
            <summary>
            级别对象池。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LevelMap.m_mapName2Level">
            <summary>
            级别对象池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelMap.#ctor">
            <summary>
            实例化级别对象池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelMap.Clear">
            <summary>
            移除所有级别对象。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LevelMap.Add(System.String,System.Int32)">
            <summary>
            添加指定级别对象。
            </summary>
            <param name="name">级别名称</param>
            <param name="value">级别对象</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelMap.Add(System.String,System.Int32,System.String)">
            <summary>
            添加指定级别对象。
            </summary>
            <param name="name">级别名称</param>
            <param name="value">级别对象</param>
            <param name="displayName">级别的显示名称</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelMap.Add(EIIP.Log.Core.Level)">
            <summary>
            添加指定级别对象。
            </summary>
            <param name="level">级别对象。</param>
        </member>
        <member name="M:EIIP.Log.Core.LevelMap.LookupWithDefault(EIIP.Log.Core.Level)">
            <summary>
            从池中查询指定级别对象，如未找到，则在池中创建该对象。返回该级别对象。
            </summary>
        </member>
        <member name="P:EIIP.Log.Core.LevelMap.Item(System.String)">
            <summary>
            按指定名称查询级别。未找到返回null。
            </summary>
            <param name="name">级别名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Core.LevelMap.AllLevels">
            <summary>
            获取所有级别对象。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.LoggerRepositoryCreationEventHandler">
            <summary>
            当日志记录器库创建时的处理通知。
            </summary>
            <param name="sender">创建库的库选择器 IRepositorySelector</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Log.Core.LoggerRepositoryCreationEventArgs">
            <summary>
            提供 IRepositorySelector.LoggerRepositoryCreatedEvent 事件的参数。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.LoggerRepositoryCreationEventArgs.m_repository">
            <summary>
            被创建的库
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.LoggerRepositoryCreationEventArgs.#ctor(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            以指定库实例化参数。
            </summary>
            <param name="repository">被创建的库</param>
        </member>
        <member name="P:EIIP.Log.Core.LoggerRepositoryCreationEventArgs.LoggerRepository">
            <summary>
            获取被创建的库
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.IRepositorySelector">
            <summary>
            库选择器接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.IRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            获取指定程序集的日志记录库。
            </summary>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IRepositorySelector.GetRepository(System.String)">
            <summary>
            获取指定名称的日志记录库。
            </summary>
            <param name="repositoryName">日志记录库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            创建指定程序集的特定库的新实例。
            </summary>
            <param name="assembly">程序集</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            创建指定名称的特定库的新实例。
            </summary>
            <param name="repositoryName">日志记录库名称</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IRepositorySelector.ExistsRepository(System.String)">
            <summary>
            测试指定名称库的存在性。
            </summary>
            <param name="repositoryName">日志记录库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.IRepositorySelector.GetAllRepositories">
            <summary>
            获取所有库。
            </summary>
            <returns></returns>
        </member>
        <member name="E:EIIP.Log.Core.IRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            日志记录器库被创建时的事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.TypeConverterAttribute">
            <summary>
            用于关联转换器的属性。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.TypeConverters.TypeConverterAttribute.m_typeName">
            <summary>
            类型转换器的名称。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.TypeConverterAttribute.#ctor">
            <summary>
            实例化关联转换器的属性
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.TypeConverterAttribute.#ctor(System.String)">
            <summary>
            以指定的类型名称实例化关联转换器的属性
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.TypeConverterAttribute.#ctor(System.Type)">
            <summary>
            以指定的类型实例化关联转换器的属性
            </summary>
            <param name="converterType">类型转换器的类型</param>
        </member>
        <member name="P:EIIP.Log.Util.TypeConverters.TypeConverterAttribute.ConverterTypeName">
            <summary>
            获取或设置类型转换器的类型名称
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.ProtectCloseTextWriter">
            <summary>
            防止被关闭的文本流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.ProtectCloseTextWriter.Attach(System.IO.TextWriter)">
            <summary>
            附加指定文本流。
            </summary>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.Util.ProtectCloseTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            实例化防止被关闭的文本流。
            </summary>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.Util.ProtectCloseTextWriter.Close">
            <summary>
            不关闭文本流。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.AppDomainPatternConverter">
            <summary>
            域名转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.AppDomainPatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            输出当前应用程序域
            </summary>
            <param name="writer">文本流</param>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Log.Util.AppenderAttachedImpl">
            <summary>
            附着器附加至对象类。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.AppenderAttachedImpl.m_appenderList">
            <summary>
            附着器集合。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.AppenderAttachedImpl.m_appenderArray">
            <summary>
            附着集数组。用于缓存集合。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.#ctor">
            <summary>
            实例化附着器附加至对象类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.AppendLoopOnAppenders(EIIP.Log.Core.LoggingEvent)">
            <summary>
            遍历所有附着器，以记录事件。返回附着器数量。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.AddAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            添加附着器。
            </summary>
            <param name="newAppender">附着器</param>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.GetAppender(System.String)">
            <summary>
            获取指定名称的附着器。未找到则返回null。
            </summary>
            <param name="name">附着器的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.RemoveAllAppenders">
            <summary>
            移除所有附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.RemoveAppender(EIIP.Log.Appender.IAppender)">
            <summary>
            移除指定附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="appender">要移除的附着器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.AppenderAttachedImpl.RemoveAppender(System.String)">
            <summary>
            移除指定名称的附着器。返回已移除的附着器（注意未关闭）。
            </summary>
            <param name="name">要移除的附着器名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Util.AppenderAttachedImpl.Appenders">
            <summary>
            获取所有附着器（只读）。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Log.Layout.RawPropertyLayout">
            <summary>
            解析日志事件的原始属性值的布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.RawPropertyLayout.#ctor">
            <summary>
            实例化解析日志事件的原始属性值的布局。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.RawPropertyLayout.Format(EIIP.Log.Core.LoggingEvent)">
            <summary>
            获取属性值。
            </summary>
            <param name="loggingEvent">事件对象</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Layout.RawPropertyLayout.Key">
            <summary>
            获取或设置属性。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.ThreadPatternConverter">
            <summary>
            事件线程模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.ThreadPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出线程名称。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.MessagePatternConverter">
            <summary>
            事件信息模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.MessagePatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出事件信息。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.LevelPatternConverter">
            <summary>
            事件级别模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.LevelPatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出事件级别
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Filter.LevelRangeFilter">
            <summary>
            级别范围过滤器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LevelRangeFilter.m_acceptOnMatch">
            <summary>
            指示过滤器在有匹配时，是否应为FilterDecision.Accept
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LevelRangeFilter.m_levelMin">
            <summary>
            要匹配的最低级别。
            </summary>
        </member>
        <member name="F:EIIP.Log.Filter.LevelRangeFilter.m_levelMax">
            <summary>
            要匹配的最高级别。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.LevelRangeFilter.#ctor">
            <summary>
            实例化级别范围过滤器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Filter.LevelRangeFilter.Decide(EIIP.Log.Core.LoggingEvent)">
            <summary>
            判定日志事件是否应该被附着器所记录。返回过滤器的判定结果。
            </summary>
            <param name="loggingEvent">日志事件</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Filter.LevelRangeFilter.AcceptOnMatch">
            <summary>
            获取或设置一个值，该值指示过滤器在有匹配时，是否应为FilterDecision.Accept
            </summary>
        </member>
        <member name="P:EIIP.Log.Filter.LevelRangeFilter.LevelMin">
            <summary>
            获取或设置要匹配的最低级别。
            </summary>
        </member>
        <member name="P:EIIP.Log.Filter.LevelRangeFilter.LevelMax">
            <summary>
            获取或设置要匹配的最高级别。
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.ErrorCode">
            <summary>
            指定错误的某一代码。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.GenericFailure">
            <summary>
            一般性错误
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.WriteFailure">
            <summary>
            写错误
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.FlushFailure">
            <summary>
            未能释放文件
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.CloseFailure">
            <summary>
            未能关闭文件
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.FileOpenFailure">
            <summary>
            不能打开文件
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.MissingLayout">
            <summary>
            未指定布局
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.ErrorCode.AddressParseFailure">
            <summary>
            未能解析地址
            </summary>
        </member>
        <member name="T:EIIP.Log.Core.DefaultRepositorySelector">
            <summary>
            库选择器的缺省实现。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.DefaultRepositorySelector.DefaultRepositoryName">
            <summary>
            缺省库名称
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.DefaultRepositorySelector.m_name2repositoryMap">
            <summary>
            库的名称池，包含以名称为键的库对象。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.DefaultRepositorySelector.m_assembly2repositoryMap">
            <summary>
            库的程序集池，包含以程序集为键的库对象。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.DefaultRepositorySelector.m_alias2repositoryMap">
            <summary>
            库的别名池，包含以别名为键的库对象。
            </summary>
        </member>
        <member name="F:EIIP.Log.Core.DefaultRepositorySelector.m_defaultRepositoryType">
            <summary>
            缺省库类型
            </summary>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.#ctor(System.Type)">
            <summary>
            创建新的库选择器实例。
            </summary>
            <param name="defaultRepositoryType">库的类型</param>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.GetRepository(System.Reflection.Assembly)">
            <summary>
            获取指定程序集的日志记录库。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.GetRepository(System.String)">
            <summary>
            获取指定名称的日志记录库。
            </summary>
            <param name="repositoryName">日志记录库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type)">
            <summary>
            创建指定程序集的特定库的新实例。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="repositoryType">库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.CreateRepository(System.Reflection.Assembly,System.Type,System.String,System.Boolean)">
            <summary>
            创建指定程序集的特定库的新实例。
            </summary>
            <param name="repositoryAssembly">程序集</param>
            <param name="repositoryType">库类型</param>
            <param name="repositoryName">库名称</param>
            <param name="readAssemblyAttributes">设为true时，读取并应用程序集属性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.CreateRepository(System.String,System.Type)">
            <summary>
            创建指定名称的特定库的新实例。
            </summary>
            <param name="repositoryName">日志记录库名称</param>
            <param name="repositoryType">库类型，如为null，则使用缺省类型。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.ExistsRepository(System.String)">
            <summary>
            确定是否存在指定名称的库。
            </summary>
            <param name="repositoryName">库的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.GetAllRepositories">
            <summary>
            获取所有库对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.AliasRepository(System.String,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            为指定的库取别名。
            </summary>
            <param name="repositoryAlias">别名</param>
            <param name="repositoryTarget">目标库</param>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.OnLoggerRepositoryCreatedEvent(EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            当库被创建时进行事件通知。
            </summary>
            <param name="repository">被创建的库</param>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.GetInfoForAssembly(System.Reflection.Assembly,System.String@,System.Type@)">
            <summary>
            获取指定程序集的库名称和库类型。
            </summary>
            <param name="assembly">含有 EIIP.Log.Config.RepositoryAttribute 类型的程序集</param>
            <param name="repositoryName">库名称</param>
            <param name="repositoryType">库类型</param>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.ConfigureRepository(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
             <summary>
            使用指定程序集中相关信息配置目标库。
             </summary>
             <param name="assembly">含有如何配置库的 EIIP.Log.Config.ConfiguratorAttribute 属性的程序集</param>
             <param name="repository">要配置的库</param>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.LoadPlugins(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            加载程序集中定义的插件。
            </summary>
            <param name="assembly">程序集</param>
            <param name="repository">要附加插件的库</param>
        </member>
        <member name="M:EIIP.Log.Core.DefaultRepositorySelector.LoadAliases(System.Reflection.Assembly,EIIP.Log.Repository.ILoggerRepository)">
            <summary>
            加载程序集中定义的别名属性。
            </summary>
            <param name="assembly">程序集</param>
            <param name="repository">别名的库</param>
        </member>
        <member name="E:EIIP.Log.Core.DefaultRepositorySelector.m_loggerRepositoryCreatedEvent">
            <summary>
            日志记录器库创建事件成员
            </summary>
        </member>
        <member name="E:EIIP.Log.Core.DefaultRepositorySelector.LoggerRepositoryCreatedEvent">
            <summary>
            当日志记录器库创建时的事件处理。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.RollingFileAppender">
            <summary>
            基于文件尺寸或日期的一组文件的附着器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.FileAppender">
            <summary>
            输出日志至文件。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.m_appendToFile">
            <summary>
            指示采用何种方式（追加或覆写）输出至文件。默认是追加方式。 
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.m_fileName">
            <summary>
            日志文件名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.m_encoding">
            <summary>
            文件流的编码方式。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.m_securityContext">
            <summary>
            安全上下文。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.m_stream">
            <summary>
            记录日志的写锁定文件流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.m_lockingModel">
            <summary>
            锁定模式实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.#ctor">
            <summary>
            实例化文件附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.ActivateOptions">
            <summary>
            激活文件附着器选项。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.Reset">
            <summary>
            重置文件名及文件流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.PrepareWriter">
            <summary>
            准备文件流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            追加事件日志。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.WriteFooter">
            <summary>
            写入消息尾。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.WriteHeader">
            <summary>
            写入消息头。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.CloseWriter">
            <summary>
            关闭输出流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.CloseFile">
            <summary>
            关闭文件流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.SafeOpenFile(System.String,System.Boolean)">
            <summary>
            打开指定文件流。不抛出异常。
            </summary>
            <param name="fileName">文件名</param>
            <param name="append">设置是否追加方式记录日志</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            打开指定文件流。
            </summary>
            <param name="fileName">文件名</param>
            <param name="append">设置是否追加方式记录日志</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.SetQWForFiles(System.IO.Stream)">
            <summary>
            设置安静写入的文件流。
            </summary>
            <param name="fileStream">文件流</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            设置安静写入的文本流。
            </summary>
            <param name="writer">文本流。</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.ConvertToFullPath(System.String)">
            <summary>
            返回指定路径字符串的绝对路径。  
            </summary>
            <param name="path">要转换的本地路径</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Appender.FileAppender.File">
            <summary>
            获取或设置文件名。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.FileAppender.AppendToFile">
            <summary>
            获取或设置一个值，该值指示是否以追加的方式记录日志。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.FileAppender.Encoding">
            <summary>
            获取或设置日志文件编码。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.FileAppender.SecurityContext">
            <summary>
            获取或设置安全上下文。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.FileAppender.LockingModel">
            <summary>
            获取或设置文件流锁定实例。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.FileAppender.LockingStream">
            <summary>
            只写锁定流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.LockingStream.m_realStream">
            <summary>
            文件流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.LockingStream.m_lockingModel">
            <summary>
            锁定模式实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.LockingStream.m_lockLevel">
            <summary>
            锁定数。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingStream.#ctor(EIIP.Log.Appender.FileAppender.LockingModelBase)">
            <summary>
            实例化写锁定文件流。
            </summary>
            <param name="locking">锁定模式实例</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            开始异步写操作。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingStream.AcquireLock">
            <summary>
            请求锁定。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingStream.ReleaseLock">
            <summary>
            释放锁定。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.FileAppender.LockingStream.LockStateException">
            <summary>
            锁定异常。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingStream.LockStateException.#ctor(System.String)">
            <summary>
            实例化锁定异常。
            </summary>
            <param name="message">消息</param>
        </member>
        <member name="T:EIIP.Log.Appender.FileAppender.LockingModelBase">
            <summary>
            锁定模式基类
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.LockingModelBase.m_appender">
            <summary>
            文件附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingModelBase.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            打开输出文件。
            </summary>
            <param name="filename">文件名</param>
            <param name="append">是否追加日志，否则重写日志。</param>
            <param name="encoding">使用的编码</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingModelBase.CloseFile">
            <summary>
            关闭文件。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingModelBase.AcquireLock">
            <summary>
            获取锁定的文件流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.LockingModelBase.ReleaseLock">
            <summary>
            释放文件流锁定。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.FileAppender.LockingModelBase.CurrentAppender">
            <summary>
            获取或设置当前锁定模式下的文件附着器。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.FileAppender.ExclusiveLock">
            <summary>
            对输出文件保持独占性锁定。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.ExclusiveLock.m_stream">
            <summary>
            文件流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.ExclusiveLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            打开指定文件，并准备日志记录。
            </summary>
            <param name="filename">文件名</param>
            <param name="append">是否追加日志，否则重写日志。</param>
            <param name="encoding">使用的编码</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.ExclusiveLock.CloseFile">
            <summary>
            关闭文件流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.ExclusiveLock.AcquireLock">
            <summary>
            获取写锁定的文件流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.ExclusiveLock.ReleaseLock">
            <summary>
            释放锁定。这里没有任何操作。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.FileAppender.MinimalLock">
            <summary>
            仅在写文件时，对文件流进行锁定。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.MinimalLock.m_filename">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.MinimalLock.m_append">
            <summary>
            指示是否追加方式。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.FileAppender.MinimalLock.m_stream">
            <summary>
            文件流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.MinimalLock.OpenFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            准备打开文件。
            </summary>
            <param name="filename">文件名</param>
            <param name="append">是否追加日志，否则重写日志。</param>
            <param name="encoding">使用的编码</param>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.MinimalLock.CloseFile">
            <summary>
            关闭文件。这里没有任何操作。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.MinimalLock.AcquireLock">
            <summary>
            请求文件锁定，返回锁定的文件流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.FileAppender.MinimalLock.ReleaseLock">
            <summary>
            释放文件锁定。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.s_date1970">
            <summary>
            日期为 1970-01-01
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_dateTime">
            <summary>
            提供当前时间的对象。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_datePattern">
            <summary>
            日期模板。默认 <c>".yyyy-MM-dd"</c> 表示按天滚动。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_scheduledFilename">
            <summary>
            实际格式化后的文件名。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_nextCheck">
            <summary>
            下次重新生成文件名的时间。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_now">
            <summary>
            存储最近一次文件滚动的时间。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_rollPoint">
            <summary>
            滚动行为类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_maxFileSize">
            <summary>
            日志文件的最大尺寸，默认为 10MB
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_maxSizeRollBackups">
            <summary>
            最大备份数量。默认为0 。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_curSizeRollBackups">
            <summary>
            当前备份的位置。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_countDirection">
            <summary>
            滚动文件计数的方向。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_rollingStyle">
            <summary>
            附着器使用的滚动模式。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_rollDate">
            <summary>
            指示是否按日期滚动。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_rollSize">
            <summary>
            指示是否按文件大小滚动。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_staticLogFileName">
            <summary>
            指示是否使用同一文件进行日志记录。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.m_baseFileName">
            <summary>
            由配置提供的文件名。通常被用于生成正确的滚动文件。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.#ctor">
            <summary>
            实例化基于文件尺寸或日期的一组文件的附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.SetQWForFiles(System.IO.TextWriter)">
            <summary>
            设置安静写入的文本流。
            </summary>
            <param name="writer">文本流。</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            追加事件日志。
            </summary>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.OpenFile(System.String,System.Boolean)">
            <summary>
            打开指定文件。
            </summary>
            <param name="fileName">文件名</param>
            <param name="append">指示是否追加方式写入内容</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.GetNextOutputFileName(System.String)">
            <summary>
            获取当前输出文件名。
            </summary>
            <param name="fileName">基准文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.DetermineCurSizeRollBackups">
            <summary>
            确定当前备份位置。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.GetWildcardPatternForFile(System.String)">
            <summary>
            获取文件名通配符模板。
            </summary>
            <param name="baseFileName">基准文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.GetExistingFiles(System.String)">
            <summary>
            获取适配含通配符的文件集。
            </summary>
            <param name="baseFilePath">含通配符的基准文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.RollOverIfDateBoundaryCrossing">
            <summary>
            如果日期变化，就初始化滚动。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.ExistingInit">
            <summary>
            以存在的条件初始化。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.InitializeFromOneFile(System.String,System.String)">
            <summary>
            指指定文件名初始化。
            </summary>
            <param name="baseFile">基准文件</param>
            <param name="curFileName">当前文件名</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.InitializeRollBackups(System.String,System.Collections.ArrayList)">
            <summary>
            初始化备份的日志文件。
            </summary>
            <param name="baseFile"></param>
            <param name="arrayFiles"></param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.ComputeCheckPeriod(System.String)">
            <summary>
            计算日期模板支持的滚动点。
            </summary>
            <param name="datePattern">日期模板</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.ActivateOptions">
            <summary>
            以设置的选项初始化附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.RollOverTime(System.Boolean)">
            <summary>
            基于时间滚动日志文件。
            </summary>
            <param name="fileIsOpen">指示要被滚动的是否是当前已找开的文件。</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.RollFile(System.String,System.String)">
            <summary>
            将已存在的文件名重命名为新的文件名
            </summary>
            <param name="fromFile">已存在的文件名</param>
            <param name="toFile">新的文件名</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.FileExists(System.String)">
            <summary>
            测试指定的文件路径是否存在。
            </summary>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.DeleteFile(System.String)">
            <summary>
            删除指定的文件。
            </summary>
            <param name="fileName">文件</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.RollOverSize">
            <summary>
            基于文件尺寸的滚动实现。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.RollOverRenameFiles(System.String)">
            <summary>
            实现文件滚动。
            </summary>
            <param name="baseFileName">基准文件名</param>
        </member>
        <member name="M:EIIP.Log.Appender.RollingFileAppender.NextCheckDate(System.DateTime,EIIP.Log.Appender.RollingFileAppender.RollPoint)">
            <summary>
            按日期基数及滚动方式产生下一刻时间。
            </summary>
            <param name="currentDateTime">当前基准日期</param>
            <param name="rollPoint">滚动时间的方式</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.DatePattern">
            <summary>
            获取或设置滚动的日期模板。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            获取或设置最大备份数量。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.MaxFileSize">
            <summary>
            获取或设置日志文件的最大尺寸
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.MaximumFileSize">
            <summary>
            获取或设置日志文件的最大尺寸（单位为"KB"、"MB" 或 "GB"，如"10KB"
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.CountDirection">
            <summary>
            获取或设置滚动文件计数的方向。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.RollingStyle">
            <summary>
            获取或设置附着器使用的滚动模式。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.StaticLogFileName">
            <summary>
            获取或设置一个值，该值指示是否使用同一文件进行日志记录。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.RollingFileAppender.RollingMode">
            <summary>
            指示滚动的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollingMode.Once">
            <summary>
            每次程序执行时，仅一次。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollingMode.Size">
            <summary>
            基于文件大小。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollingMode.Date">
            <summary>
            基于日期。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollingMode.Composite">
            <summary>
            基于文件大小和日期。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.RollingFileAppender.RollPoint">
            <summary>
            指示滚动按时间增加的某一方式。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.InvalidRollPoint">
            <summary>
            并不基于日期。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.TopOfMinute">
            <summary>
            基于分钟。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.TopOfHour">
            <summary>
            基于小时。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.HalfDay">
            <summary>
            基于半天（12时和24时）。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.TopOfDay">
            <summary>
            基于全天（24时）。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.TopOfWeek">
            <summary>
            基于周。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.RollingFileAppender.RollPoint.TopOfMonth">
            <summary>
            基于月。
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.RollingFileAppender.IDateTime">
            <summary>
            DateTime 接口
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.IDateTime.Now">
            <summary>
            获取当前时间
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.RollingFileAppender.DefaultDateTime">
            <summary>
            能返回当前时间的默认时间类。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.RollingFileAppender.DefaultDateTime.Now">
            <summary>
            获取当前时间
            </summary>
        </member>
        <member name="T:EIIP.Log.Appender.ConsoleAppender">
            <summary>
            控制台附着器。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.ConsoleAppender.ConsoleOut">
            <summary>
            标准输出流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.ConsoleAppender.ConsoleError">
            <summary>
            标准错误流。
            </summary>
        </member>
        <member name="F:EIIP.Log.Appender.ConsoleAppender.m_writeToErrorStream">
            <summary>
            指示是否写入标准错误流。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.ConsoleAppender.#ctor">
            <summary>
            实例化控制台附着器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Appender.ConsoleAppender.Append(EIIP.Log.Core.LoggingEvent)">
            <summary>
            追加事件。
            </summary>
            <param name="loggingEvent">要追加的事件</param>
        </member>
        <member name="P:EIIP.Log.Appender.ConsoleAppender.Target">
            <summary>
            获取或设置控制台输出流。
            </summary>
        </member>
        <member name="P:EIIP.Log.Appender.ConsoleAppender.RequiresLayout">
            <summary>
            获取一个值，该值指示附着器是否需要设置一个布局。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.TypeConverters.BooleanConverter">
            <summary>
            布尔量转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.BooleanConverter.CanConvertFrom(System.Type)">
            <summary>
            获取一个值，该值指示能否从源类型（string）进行转换。
            </summary>
            <param name="sourceType">源类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.TypeConverters.BooleanConverter.ConvertFrom(System.Object)">
            <summary>
            转换源对象为 bool 类型。
            </summary>
            <param name="source">要转换的源对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.LogicalThreadContext">
            <summary>
            日志系统逻辑线程上下文。
            </summary>
        </member>
        <member name="F:EIIP.Log.LogicalThreadContext.s_properties">
            <summary>
            线程上下文属性实例。
            </summary>
        </member>
        <member name="F:EIIP.Log.LogicalThreadContext.s_stacks">
            <summary>
            线程上下文堆栈实例。
            </summary>
        </member>
        <member name="P:EIIP.Log.LogicalThreadContext.Properties">
            <summary>
            获取线程上下文属性。
            </summary>
        </member>
        <member name="P:EIIP.Log.LogicalThreadContext.Stacks">
            <summary>
            获取线程上下文堆栈。
            </summary>
        </member>
        <member name="T:EIIP.Log.Layout.Pattern.UserNamePatternConverter">
            <summary>
            帐号用户名模板转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Layout.Pattern.UserNamePatternConverter.Convert(System.IO.TextWriter,EIIP.Log.Core.LoggingEvent)">
            <summary>
            输出帐号用户名。
            </summary>
            <param name="writer">文本流</param>
            <param name="loggingEvent">日志事件</param>
        </member>
        <member name="T:EIIP.Log.Util.PatternStringConverters.UserNamePatternConverter">
            <summary>
            当前帐号用户名转换器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternStringConverters.UserNamePatternConverter.Convert(System.IO.TextWriter,System.Object)">
            <summary>
            转换模板至指定的文本流。应在继承类中实现。
            </summary>
            <param name="writer">存放格式化结果的文本流</param>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Log.Util.PatternString">
            <summary>
            模板字串。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternString.s_globalRulesRegistry">
            <summary>
            全局类型转换器池。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternString.m_pattern">
            <summary>
            模板
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternString.m_head">
            <summary>
            模板转换链头。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.PatternString.m_instanceRulesRegistry">
            <summary>
            实例类型转换器池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.#cctor">
            <summary>
            初始化全局类型转换器池。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.#ctor">
            <summary>
            实例化模板字串实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.#ctor(System.String)">
            <summary>
            实例化指定模板字串实例。
            </summary>
            <param name="pattern">模板字串</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.ActivateOptions">
            <summary>
            初始化选项。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.CreatePatternParser(System.String)">
            <summary>
            创建指定模板解析器。
            </summary>
            <param name="pattern">要解析的模板</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.Format(System.IO.TextWriter)">
            <summary>
            呈现转换后的格式化字串。
            </summary>
            <param name="writer">文本流</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.Format">
            <summary>
            呈现转换后的格式化字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.AddConverter(EIIP.Log.Util.PatternString.ConverterInfo)">
            <summary>
            添加转换器。
            </summary>
            <param name="converterInfo">转换器信息实例。</param>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.AddConverter(System.String,System.Type)">
            <summary>
            添加转换器。
            </summary>
            <param name="name">转换器名称</param>
            <param name="type">转换器类型</param>
        </member>
        <member name="P:EIIP.Log.Util.PatternString.ConversionPattern">
            <summary>
            获取或设置转换模板。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.PatternString.ConverterInfo">
            <summary>
            转换信息类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.PatternString.ConverterInfo.#ctor">
            <summary>
            实例化转换信息类。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PatternString.ConverterInfo.Name">
            <summary>
            获取或设置转换器名称。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.PatternString.ConverterInfo.Type">
            <summary>
            获取或设置转换器类型。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.NullEnumerator">
            <summary>
            空枚举数。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.NullEnumerator.s_instance">
            <summary>
            空枚举数实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.NullEnumerator.#ctor">
            <summary>
            实例化空枚举数。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.NullEnumerator.MoveNext">
            <summary>
            移至下一枚举数。总是返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Util.NullEnumerator.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NullEnumerator.Instance">
            <summary>
            获取空枚举数实例。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.NullEnumerator.Current">
            <summary>
            获取当前枚举数。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.LogLog">
            <summary>
            在本 Assembly 中输出日志状态。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.LogLog.PREFIX">
            <summary>
            信息前缀
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.LogLog.ERR_PREFIX">
            <summary>
            错误信息前缀
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.LogLog.WARN_PREFIX">
            <summary>
            警告信息前缀
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.#cctor">
            <summary>
            静态构造器。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.Debug(System.String)">
            <summary>
            输出调试信息至标准输出流
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.Debug(System.String,System.Exception)">
            <summary>
            输出调试信息至标准输出流
            </summary>
            <param name="message">信息</param>
            <param name="exception">要记录的异常</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.Warn(System.String)">
            <summary>
            输出警告信息至标准输出流
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.Warn(System.String,System.Exception)">
            <summary>
            输出警告信息至标准输出流
            </summary>
            <param name="message">信息</param>
            <param name="exception">要记录的异常</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.Error(System.String)">
            <summary>
            输出错误信息至标准输出流。
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.Error(System.String,System.Exception)">
            <summary>
            输出错误信息至标准输出流
            </summary>
            <param name="message">信息</param>
            <param name="exception">要记录的异常</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.EmitOutLine(System.String)">
            <summary>
            输出至标准输出流。
            </summary>
            <param name="message">信息字串</param>
        </member>
        <member name="M:EIIP.Log.Util.LogLog.EmitErrorLine(System.String)">
            <summary>
            输出至标准输出流。
            </summary>
            <param name="message">信息字串</param>
        </member>
        <member name="F:EIIP.Log.Util.LogLog.s_debugEnabled">
            <summary>
            设置一个值，该值指示是否允许调试
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.LogLog.s_quietMode">
            <summary>
            设置一个值，该值指示当有错误发生时是否采用安静模式（无任何输出）。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.LogLog.InternalDebugging">
            <summary>
            获取或设置一个值，该值指示是否允许日志记录器内部调试日志记录功能。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.LogLog.QuietMode">
            <summary>
            获取或设置一个值，该值指示是否使用静态调试模式。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.LogLog.IsDebugEnabled">
            <summary>
            获取一个值，该值指示是否允许 LogLog.Debug 级别的输出。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.LogLog.IsWarnEnabled">
            <summary>
            获取一个值，该值指示是否允许 LogLog.Warn 级别的输出。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.LogLog.IsErrorEnabled">
            <summary>
            获取一个值，该值指示是否允许 LogLog.Error 级别的输出。
            </summary>
        </member>
        <member name="T:EIIP.Log.Util.EmptyDictionary">
            <summary>
            空字典。
            </summary>
        </member>
        <member name="F:EIIP.Log.Util.EmptyDictionary.s_instance">
            <summary>
            空字典实例。
            </summary>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an 
            <see cref="T:System.Array"/>, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> 
            that is the destination of the elements copied from 
            <see cref="T:System.Collections.ICollection"/>. The Array must have zero-based 
            indexing.</param>
            <param name="index">The zero-based index in array at which 
            copying begins.</param>
            <remarks>
            <para>
            As the collection is empty no values are copied into the array.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:EIIP.Log.Util.NullEnumerator"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the 
            <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add.</param>
            <remarks>
            <para>
            As the collection is empty no new values can be added. A <see cref="T:System.InvalidOperationException"/>
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.Clear">
            <summary>
            Removes all elements from the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.
            </summary>
            <remarks>
            <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException"/>
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:EIIP.Log.Util.EmptyDictionary"/> contains an element 
            with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.</param>
            <returns><c>false</c></returns>
            <remarks>
            <para>
            As the collection is empty the <see cref="M:EIIP.Log.Util.EmptyDictionary.Contains(System.Object)"/> method always returns <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> that can be used to 
            iterate through the collection.
            </returns>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:EIIP.Log.Util.NullEnumerator"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="M:EIIP.Log.Util.EmptyDictionary.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <remarks>
            <para>
            As the collection is empty no values can be removed. A <see cref="T:System.InvalidOperationException"/>
            is thrown if this method is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.Instance">
            <summary>
            获取空字典实例。
            </summary>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.IsSynchronized">
            <summary>
            Gets a value indicating if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe).
            </summary>
            <value>
            <b>true</b> if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread-safe); otherwise, <b>false</b>.
            </value>
            <remarks>
            <para>
            For the <see cref="T:EIIP.Log.Util.EmptyCollection"/> this property is always <b>true</b>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"/>
            </summary>
            <value>
            The number of elements contained in the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty the <see cref="P:EIIP.Log.Util.EmptyDictionary.Count"/> is always <c>0</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </value>
            <remarks>
            <para>
            As the collection is empty and thread safe and synchronized this instance is also
            the <see cref="P:EIIP.Log.Util.EmptyDictionary.SyncRoot"/> object.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:EIIP.Log.Util.EmptyDictionary"/> has a fixed size.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            As the collection is empty <see cref="P:EIIP.Log.Util.EmptyDictionary.IsFixedSize"/> always returns <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:EIIP.Log.Util.EmptyDictionary"/> is read-only.
            </summary>
            <value><c>true</c></value>
            <remarks>
            <para>
            As the collection is empty <see cref="P:EIIP.Log.Util.EmptyDictionary.IsReadOnly"/> always returns <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the keys of the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the keys of the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.</value>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:EIIP.Log.Util.EmptyCollection"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"/> containing the values of the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.
            </summary>
            <value>An <see cref="T:System.Collections.ICollection"/> containing the values of the <see cref="T:EIIP.Log.Util.EmptyDictionary"/>.</value>
            <remarks>
            <para>
            As the collection is empty a <see cref="T:EIIP.Log.Util.EmptyCollection"/> is returned.
            </para>
            </remarks>
        </member>
        <member name="P:EIIP.Log.Util.EmptyDictionary.Item(System.Object)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <param name="key">The key of the element to get or set.</param>
            <value><c>null</c></value>
            <remarks>
            <para>
            As the collection is empty no values can be looked up or stored. 
            If the index getter is called then <c>null</c> is returned.
            A <see cref="T:System.InvalidOperationException"/> is thrown if the setter is called.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">This dictionary is always empty and cannot be modified.</exception>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.ProvisionNode">
            <summary>
            节点实体类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.ProvisionNode.#ctor(EIIP.Log.Repository.Hierarchy.Logger)">
            <summary>
            创建一个含指定子节点的节点实体实例。
            </summary>
            <param name="log">加入该节点的子日志记录器</param>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.LoggerKey">
            <summary>
            日志记录器键类，用于加速哈希表搜索。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.LoggerKey.#ctor(System.String)">
            <summary>
            实例化日志记录器键
            </summary>
            <param name="name">日志记录器的名称</param>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.LoggerKey.GetHashCode">
            <summary>
            返回当前实例的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.LoggerKey.Equals(System.Object)">
            <summary>
            比较两实例是否相等。
            </summary>
            <param name="obj">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.ILoggerFactory">
            <summary>
            创建日志记录器工厂接口。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.ILoggerFactory.CreateLogger(System.String)">
            <summary>
            创建指定名称的日志记录器。
            </summary>
            <param name="name">日志记录器的名称。如为null,则返回根记录器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.DefaultLoggerFactory">
            <summary>
            缺省日志记录器工厂。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.DefaultLoggerFactory.#ctor">
            <summary>
            实例化日志记录器工厂。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.DefaultLoggerFactory.CreateLogger(System.String)">
            <summary>
            创建指定名称的日志记录器。
            </summary>
            <param name="name">日志记录器的名称。如为null,则返回根记录器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Log.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl">
            <summary>
            日志记录器节点类。
            </summary>
        </member>
        <member name="M:EIIP.Log.Repository.Hierarchy.DefaultLoggerFactory.LoggerImpl.#ctor(System.String)">
            <summary>
            以指定的名称实例化日志记录器节点。
            </summary>
            <param name="name">日志记录器名称</param>
        </member>
        <member name="T:EIIP.Log.ObjectRenderer.RendererMap">
            <summary>
            对象映射呈现器池。
            </summary>
        </member>
        <member name="F:EIIP.Log.ObjectRenderer.RendererMap.m_map">
            <summary>
            呈现器池
            </summary>
        </member>
        <member name="F:EIIP.Log.ObjectRenderer.RendererMap.m_cache">
            <summary>
            缓存呈现器池
            </summary>
        </member>
        <member name="F:EIIP.Log.ObjectRenderer.RendererMap.s_defaultRenderer">
            <summary>
            默认显现器。
            </summary>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.#ctor">
            <summary>
            实例化对象映射呈现器池。
            </summary>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.FindAndRender(System.Object)">
            <summary>
            使用适当的呈现器呈现对象。返回对象的映射字符串。
            </summary>
            <param name="obj">要呈现为字符串的对象</param>
            <returns>返回对象的映射字符串</returns>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.FindAndRender(System.Object,System.IO.TextWriter)">
            <summary>
            使用适当的呈现器呈现对象。返回对象的映射字符串。
            </summary>
            <param name="obj">要呈现为字符串的对象</param>
            <param name="writer">结果输出容器</param>
            <returns>返回对象的映射字符串</returns>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.Get(System.Object)">
            <summary>
            获取特殊对象类型的呈现器。
            </summary>
            <param name="obj">要查询呈现器的对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.Get(System.Type)">
            <summary>
            获取特殊对象类型的呈现器。
            </summary>
            <param name="type">呈现器的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.SearchTypeAndInterfaces(System.Type)">
            <summary>
            递归查询类型的呈现器。
            </summary>
            <param name="type">要查询呈现器的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.Clear">
            <summary>
            移除所有呈现器(并不移除默认呈现器)。
            </summary>
        </member>
        <member name="M:EIIP.Log.ObjectRenderer.RendererMap.Put(System.Type,EIIP.Log.ObjectRenderer.IObjectRenderer)">
            <summary>
            登记呈现器。
            </summary>
            <param name="typeToRender">要被呈现的类型</param>
            <param name="renderer">呈现器</param>
        </member>
        <member name="P:EIIP.Log.ObjectRenderer.RendererMap.DefaultRenderer">
            <summary>
            获取默认呈现实例。
            </summary>
        </member>
    </members>
</doc>
