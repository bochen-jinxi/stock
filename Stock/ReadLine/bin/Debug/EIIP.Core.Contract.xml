<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EIIP.Core.Contract</name>
    </assembly>
    <members>
        <member name="T:EIIP.Extensions.ArrayExtensions">
            <summary>
            数组扩展。
            </summary>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>
            转换为指定类型元素的数组。
            </summary>
            <typeparam name="T">源数组元素类型</typeparam>
            <typeparam name="U">目标数组元素类型</typeparam>
            <param name="array">数组</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.SkipWhile``1(``0[],System.Predicate{``0})">
            <summary>
            只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <param name="match">用于测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Take``1(``0[],System.Int32)">
            <summary>
            从序列的开头返回指定数量的连续元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <param name="count">要返回的元素数量。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.TakeWhile``1(``0[],System.Predicate{``0})">
            <summary>
            只要满足指定的条件，就会返回序列的元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <param name="match">用于测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Skip``1(``0[],System.Int32)">
            <summary>
            跳过序列中指定数量的元素，然后返回剩余的元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <param name="count">返回剩余元素前要跳过的元素数量。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Repeat``1(``0,System.Int32)">
            <summary>
            生成包含一个重复值的序列。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="element">要重复的值。</param>
            <param name="count">在生成序列中重复该值的次数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Concat``1(``0[],``0[])">
            <summary>
            连接两个序列。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="first">要连接的第一个序列。</param>
            <param name="second">要与第一个序列连接的序列。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Reverse``1(``0[])">
            <summary>
            反转序列中元素的顺序。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Union``1(``0[],``0[])">
            <summary>
            通过使用默认的相等比较器生成两个序列的并集。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array1">第一个数组</param>
            <param name="array2">第二个数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Complement``1(``0[],``0[])">
            <summary>
            返回第一个数组中的元素不在第二个数组中的元素数组。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array1">第一个数组</param>
            <param name="array2">第二个数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Except``1(``0[],``0[])">
            <summary>
            通过使用默认的相等比较器对值进行比较生成两个序列的差集。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array1">第一个数组</param>
            <param name="array2">第二个数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Intersect``1(``0[],``0[])">
            <summary>
            通过使用默认的相等比较器对值进行比较生成两个序列的交集。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array1">第一个数组</param>
            <param name="array2">第二个数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Distinct``1(``0[])">
            <summary>
            通过使用默认的相等比较器对值进行比较返回序列中的非重复元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Sort``1(``0[])">
            <summary>
            排序。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.ArrayExtensions.Where``1(``0[],System.Predicate{``0})">
            <summary>
            基于谓词筛选值序列。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="array">数组</param>
            <param name="match">用于测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Extensions.Collection">
            <summary>
            集合扩展
            </summary>
        </member>
        <member name="M:EIIP.Extensions.Collection.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            只要满足指定的条件，就跳过序列中的元素，然后返回剩余元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="collection">集合</param>
            <param name="match">用于测试每个元素是否满足条件的函数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            从序列的开头返回指定数量的连续元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="collection">集合</param>
            <param name="count">要返回的元素数量。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取元素集合，直到匹配指定条件方法的元素为止。只要满足指定的条件，就会返回序列的元素。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="collection">集合</param>
            <param name="match">匹配停止元素的条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            比较两个集合是否相等。按顺序比较对应的元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="first">第一个集合</param>
            <param name="second">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            获取跳过指定数量的元素集合。
            </summary>
            <typeparam name="T">元素类型。</typeparam>
            <param name="collection">集合</param>
            <param name="count">要忽略的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Repeat``1(``0,System.Int32)">
            <summary>
            获取指定数量指定元素的集合。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="element">指定元素</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            获取指定索引位置的元素。不存在则抛出异常。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            获取指定索引位置的元素。不存在则返回默认类型值。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            连接两个集合。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="first">第一个集合</param>
            <param name="second">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            测试集合是否包含指定元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="item">要测试的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            将集合转换为指定元素类型的集合。
            </summary>
            <typeparam name="T">原集合元素类型</typeparam>
            <typeparam name="U">新集合元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="converter">类型转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Any``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            测试任一匹配。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">要匹配的方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            测试集合中是否有任一元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取仅有一个元素的集合中的该元素。若有多个匹配则抛出异常。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Single``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取仅有一个匹配元素的集合中的该元素。若有多个匹配则抛出异常。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取仅有一个元素的集合中的该元素。若有多个匹配则返回类型默认值。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取仅有一个匹配元素的集合中的该元素。若有多个匹配则返回类型默认值。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中首个元素。不存在则抛出异常。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中首个元素。不存在则返回类型默认值。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.First``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取集合中首个匹配条件的元素。不存在则抛出异常。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取集合中匹配条件的元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Complement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回不在第二个集合中的第一个集合内的元素集合。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回两个集合的补集。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回集合不重复的元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.FindIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            查找指定元素的索引位置。不存在则返回－1。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="value">要查找的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取交集。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取集合中匹配条件的最后一个元素。不存在则返回类型默认值。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中最后一个元素。不存在则返回类型默认值。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中最后一个元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Last``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取集合中匹配条件的最后一个元素。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.FindLastIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            获取匹配指定值的最后一个匹配索引。不存在则返回-1。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="value">要匹配的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            合并。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合执行指定方法。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="action">方法</param>
        </member>
        <member name="M:EIIP.Extensions.Collection.Count``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            获取匹配的数量。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中元素数量。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取反转的集合。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合排序。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ToArray``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="iterator">枚举数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="capacity">新列表最初可以存储的元素数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ToArray``1(System.Collections.Generic.IEnumerator{``0},System.Int32)">
            <summary>
            转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="iterator">枚举数</param>
            <param name="capacity">新列表最初可以存储的元素数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            转换为泛型列表。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.All``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            测试是否完全满足匹配条件。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">枚举数</param>
            <param name="match">条件方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.UnsafeToArray``2(System.Collections.IEnumerable,System.Converter{``0,``1})">
            <summary>
            转换为指定类型元素的数组。
            </summary>
            <typeparam name="T">源集合元素类型</typeparam>
            <typeparam name="U">目标集合元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.UnsafeToArray``2(System.Collections.IEnumerator,System.Converter{``0,``1})">
            <summary>
            转换为指定类型元素的数组。
            </summary>
            <typeparam name="T">源集合元素类型</typeparam>
            <typeparam name="U">目标集合元素类型</typeparam>
            <param name="iterator">枚举数</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.UnsafeToArray``1(System.Collections.IEnumerable)">
            <summary>
            将集合转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.UnsafeToArray``1(System.Collections.IEnumerator)">
            <summary>
            转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="iterator">枚举数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.UnsafeConvertAll``2(System.Collections.IEnumerable,System.Converter{``0,``1})">
            <summary>
            转换为指定类型元素的集合。
            </summary>
            <typeparam name="T">源集合元素类型</typeparam>
            <typeparam name="U">目标集合元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.Collection.UnsafeConvertAll``2(System.Collections.IEnumerator,System.Converter{``0,``1})">
            <summary>
            转换为指定类型元素的集合。
            </summary>
            <typeparam name="T">源集合元素类型</typeparam>
            <typeparam name="U">目标集合元素类型</typeparam>
            <param name="iterator">枚举数</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Extensions.CollectionExtensions">
            <summary>
            集合
            </summary>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            遍历集合执行指定方法。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="collection">集合</param>
            <param name="action">方法</param>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            遍历集合执行指定转换。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <typeparam name="U">目标元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.Complement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回第一个集合中的元素不在第二个集合中的元素集合。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回两个集合的补集。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合排序。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.FindIndex``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            在集合中查询指定值的索引。不存在则返回－1。
            </summary>
            <typeparam name="T">集合类型</typeparam>
            <param name="collection">集合</param>
            <param name="value">要查询的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.UnsafeToArray``2(System.Collections.IEnumerable,System.Converter{``0,``1})">
            <summary>
            将集合转换为指定类型的数组。
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <typeparam name="U">数组元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Extensions.CollectionExtensions.UnsafeToArray``1(System.Collections.IEnumerable)">
            <summary>
            将集合转换为数组。
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Core.Contract.KeyValuePair">
            <summary>
            定义可设置或检索的键/值对。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.KeyValuePair.Key">
            <summary>
            键。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.KeyValuePair.Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.KeyValuePair.#ctor(System.String,System.String)">
            <summary>
            实例化键/值对。,
            </summary>
            <param name="key">键。</param>
            <param name="value">值。</param>
        </member>
        <member name="T:EIIP.Core.Contract.Security.AuthenticationTicket">
            <summary>
            提供对身份验证票证的属性和值的访问，这些票证用于身份验证对用户进行标识。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.Security.AuthenticationTicket.#ctor">
            <summary>
            初始化默认身份验证票的新实例。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.Security.AuthenticationTicket.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            初始化身份验证票的新实例。
            </summary>
            <param name="name">与票证关联的用户名。</param>
            <param name="isPersistent">如果票证将存储在持久性存储中（跨会话保存），则为 true；否则为 false。</param>
            <param name="timeout">身份验证票证的有效时间（以分钟为单位）。</param>
        </member>
        <member name="M:EIIP.Core.Contract.Security.AuthenticationTicket.#ctor(System.Int32,System.String,System.DateTime,System.DateTime,System.Boolean,System.String)">
            <summary>
            初始化身份验证票的新实例。
            </summary>
            <param name="version">票证的版本号。</param>
            <param name="name">与票证关联的用户名。</param>
            <param name="issueDate">票证发出时的本地日期和时间。</param>
            <param name="expiration">票证过期时的本地日期和时间。</param>
            <param name="isPersistent">如果票证将存储在持久性存储中（跨会话保存），则为 true；否则为 false。</param>
            <param name="userData">存储在票证中的用户特定的数据。</param>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.Expiration">
            <summary>
            获取身份验证票证过期时的本地日期和时间。
            </summary>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.Expired">
            <summary>
            获取一个值，它指示身份验证票证是否已过期。
            </summary>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.IsPersistent">
            <summary>
            获取一个值，该值指示包含身份验证票证信息的存储是否为持久性的。
            </summary>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.IssueDate">
            <summary>
            获取最初发出身份验证票证时的本地日期和时间。
            </summary>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.Name">
            <summary>
            获取与身份验证票相关联的用户名。
            </summary>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.UserData">
            <summary>
            一个存储在票证中的用户特定的字符串。默认值为空字符串 ("")。
            </summary>
        </member>
        <member name="P:EIIP.Core.Contract.Security.AuthenticationTicket.Version">
            <summary>
            获取票证的版本号。默认值为 0。
            </summary>
        </member>
        <member name="T:EIIP.Core.Contract.IdentityBase">
            <summary>
            登录身份信息基类。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityBase.GUID">
            <summary>
            全局唯一标识(GUID)。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityBase.AccountID">
            <summary>
            登录帐套ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityBase.ProductValue">
            <summary>
            产品数据。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityBase.Passport">
            <summary>
            获取通行证。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityBase.Addition">
            <summary>
            附加内容。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityBase.Propertys">
            <summary>
            信息。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityBase.#ctor">
            <summary>
            实例化默认登录身份信息基类。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityBase.CopyAuthenticationFrom(EIIP.Core.Contract.IdentityBase)">
            <summary>
            复制认证信息。
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityBase.ToString">
            <summary>
            获取登录身份字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityBase.Parse(System.String)">
            <summary>
            解析 IdentityBase 对象。解析失败返回null。
            </summary>
            <param name="identityBaseString">由 IdentityBase.ToString() 生成的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityBase.IsSilverlightSecurityWay">
            <summary>
            测试是否是适用于 Silverlight 无安全绑定的安全验证模式。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Core.Contract.IdentityInfo">
            <summary>
            登录身份信息。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.PerName">
            <summary>
            获取真实姓名。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.PerID">
            <summary>
            获取个人ID
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.PerId">
            <summary>
            获取个人GUID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.PerTypeID">
            <summary>
            获取个人类型ID
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.UserID">
            <summary>
            获取用户ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.Name">
            <summary>
            获取用户登录名称。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.MemTypeID">
            <summary>
            获取会员类型ID
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.IdentityInfo.MemRank">
            <summary>
            获取会员级别
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityInfo.#ctor">
            <summary>
            实例化登录用户信息。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.IdentityInfo.#ctor(System.Guid)">
            <summary>
            实例化登录用户信息。
            </summary>
            <param name="activityId">用户活动GUID</param>
        </member>
        <member name="T:EIIP.Core.Contract.Security.IAuthentication">
            <summary>
            定义登录服务的接口契约。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.Security.IAuthentication.GetPassport(System.String)">
            <summary>
            获取通行证。
            </summary>
            <param name="addInfo">附加信息</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Core.Contract.LoginUser2">
            <summary>
            登录用户信息。
            </summary>
        </member>
        <member name="T:EIIP.Core.Contract.LoginUser">
            <summary>
            登录用户信息。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.PerID">
            <summary>
            个人ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.PerId">
            <summary>
            个人GUID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.PerName">
            <summary>
            个人姓名。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.UserID">
            <summary>
            用户ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.UserName">
            <summary>
            用户帐户名称
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.PerTypeID">
            <summary>
            个人类型ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.MemTypeID">
            <summary>
            会员类型ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser.MemRank">
            <summary>
            会员级别ID
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.LoginUser.#ctor">
            <summary>
            实例化来宾账户。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser2.Version">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.LoginUser2.Now">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Framework.UserNamePasswordValidateDetail">
            <summary>
            关于登录细节的类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.SilverlightFlag">
            <summary>
            Silverlight 标志。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.SEPARATOR">
            <summary>
            分隔符。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.USERNAME_PWD">
            <summary>
            使用用户名密码登录。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.SL_UNPWD">
            <summary>
            Silverlight 使用用户名密码登录。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.USERNAME_IdentityBase">
            <summary>
            使用 EIIP.Core.Contract.IdentityBase 登录身份基础信息。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.USERNAME_Passport">
            <summary>
            使用 EIIP.Core.Contract.IdentityBase.Passport 登录通行证。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.USERNAME_Anonymous">
            <summary>
            使用匿名登录。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.USERNAME_Serial">
            <summary>
            使用串号登录。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.IsLogon">
            <summary>
            指示是否是在登录。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.UserName">
            <summary>
            用户名。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.Password">
            <summary>
            密码。
            </summary>
        </member>
        <member name="F:EIIP.Framework.UserNamePasswordValidateDetail.IdentityBase">
            <summary>
            登录身份基础信息。
            </summary>
        </member>
        <member name="M:EIIP.Framework.UserNamePasswordValidateDetail.#ctor(System.String,System.String)">
            <summary>
            初始化登录细节。
            </summary>
            <param name="userName"></param>
            <param name="password"></param>
        </member>
        <member name="T:EIIP.Core.Contract.Workflow.ColumnPropertys">
            <summary>
            定义工作流表单列属性信息。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.DefaultValue">
            <summary>
            列默认值。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.ValueDataType">
            <summary>
            列值数据类型。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.Appros">
            <summary>
            附加的列许可集。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.FlagID">
            <summary>
            列标志ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.TagID">
            <summary>
            列标识ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.Tooltip">
            <summary>
            列提示文本。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.SourceID">
            <summary>
            列源ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.TargetID">
            <summary>
            列目标ID。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.IsExpression">
            <summary>
            指示是否是表达式列。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.Expression">
            <summary>
            指示是否是表达式列。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.RoleIDs">
            <summary>
            角色ID集。
            </summary>
        </member>
        <member name="F:EIIP.Core.Contract.Workflow.ColumnPropertys.JScript">
            <summary>
            列脚本。
            </summary>
        </member>
        <member name="M:EIIP.Core.Contract.Workflow.ColumnPropertys.#ctor">
            <summary>
            实例化工作流表单列属性。
            </summary>
        </member>
    </members>
</doc>
