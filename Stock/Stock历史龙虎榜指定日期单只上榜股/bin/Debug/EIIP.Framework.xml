<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EIIP.Framework</name>
    </assembly>
    <members>
        <member name="T:EIIP.Ajax.AjaxServerCacheAttribute">
            <summary>
            AJAX服务缓存特性类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxServerCacheAttribute.#ctor">
            <summary>
            实例化AJAX服务缓存特性。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxServerCacheAttribute.#ctor(System.Int32)">
            <summary>
            实例化AJAX服务缓存特性。
            </summary>
            <param name="seconds">缓存时间。设置为0则不缓存</param>
        </member>
        <member name="P:EIIP.Ajax.AjaxServerCacheAttribute.IsCacheEnabled">
            <summary>
            获取一个值，该值指示是否允许缓存。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxServerCacheAttribute.CacheDuration">
            <summary>
            获取缓存时间。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxMethodAttribute">
            <summary>
            标识Ajax方法的特性类。
            </summary>
            <remarks>
            <code>
            public class Test
            {
            	[EIIP.Ajax.AjaxMethod]
            	public string HelloWorld(string username)
            	{
            		return "Hello " + username;
            	}
            	
            	[EIIP.Ajax.AjaxMethod(EIIP.Ajax.HttpSessionStateRequirement.ReadWrite)]
            	public bool SessionValueIsSet(string key)
            	{
            		return System.Web.HttpContext.Current.Session[key] != null;
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="M:EIIP.Ajax.AjaxMethodAttribute.#ctor">
            <summary>
            实例化Ajax方法的特性。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxMethodAttribute.#ctor(EIIP.Ajax.HttpSessionStateRequirement)">
            <summary>
            实例化Ajax方法的特性。
            </summary>
            <param name="requireSessionState">请求的Session状态设置。</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxMethodAttribute.#ctor(System.Boolean)">
            <summary>
            实例化Ajax方法特性。
            </summary>
            <param name="useAsyncProcessing">设置是否使用异步处理。</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxMethodAttribute.#ctor(EIIP.Ajax.HttpSessionStateRequirement,System.Boolean)">
            <summary>
            实例化Ajax方法特性。
            </summary>
            <param name="requireSessionState">请求的Session状态设置。</param>
            <param name="useAsyncProcessing">设置是否使用异步处理。</param>
        </member>
        <member name="P:EIIP.Ajax.AjaxMethodAttribute.RequireSessionState">
            <summary>
            获取请求的Session状态设置。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxMethodAttribute.UseAsyncProcessing">
            <summary>
            获取一个值，该值指示是否使用异步处理。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxNamespaceAttribute">
            <summary>
            Ajax命名空间特性类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxNamespaceAttribute.#ctor(System.String)">
            <summary>
            指定客户端命名空间。
            </summary>
            <param name="clientNS">客户端命名空间。</param>
        </member>
        <member name="P:EIIP.Ajax.AjaxNamespaceAttribute.ClientNamespace">
            <summary>
            获取客户端命名空间字串。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxNonSerializableAttribute">
            <summary>
            AJAX不序列化特性类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxNonSerializableAttribute.#ctor">
            <summary>
            实例化AJAX不序列化特性类。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxNoTypeUsageAttribute">
            <summary>
            AJAX无类型特性类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxNoTypeUsageAttribute.#ctor">
            <summary>
            实例化AJAX无类型特性类。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxPropertyAttribute">
            <summary>
            AJAX属性特性类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxPropertyAttribute.#ctor">
            <summary>
            实例化AJAX属性特性。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.HttpSessionStateRequirement">
            <summary>
            指示请求的某一Session状态。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.HttpSessionStateRequirement.ReadWrite">
            <summary>
            允许读写SessionState
            </summary>
        </member>
        <member name="F:EIIP.Ajax.HttpSessionStateRequirement.Read">
            <summary>
            允许读SessionState.
            </summary>
        </member>
        <member name="F:EIIP.Ajax.HttpSessionStateRequirement.None">
            <summary>
            不使用 SessionState
            </summary>
        </member>
        <member name="F:EIIP.Ajax.HttpSessionStateRequirement.UseDefault">
            <summary>
            使用默认SessionState设置(web.config)
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptConverterAttribute">
            <summary>
            标记一个类能被特定的 JavaScriptConverter 转换器转译的特性。
            </summary>
            <remarks>
            使用该特性，要将特定的 JavaScriptConverter 转换器添加至 ajaxSettings/jsonConverters
            </remarks>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverterAttribute.#ctor(System.Type)">
            <summary>
            实例化标记一个类能被特定的 JavaScriptConverter 转换器转译的特性。
            </summary>
            <param name="type">转换器类型</param>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptConverterAttribute.Converter">
            <summary>
            获取转换器。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxSettingsSectionHandler">
            <summary>
            配置处理器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSettingsSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            创建配置节处理程序。
            </summary>
            <param name="parent">父对象</param>
            <param name="configContext">配置上下文对象。</param>
            <param name="section">节 XML 节点。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.AsyncAjaxProcDelegate">
            <summary>
            Ajax异步处理委托。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxAsyncHttpHandler">
            <summary>
            Ajax异步处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxAsyncHttpHandler.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化Ajax异步处理者。
            </summary>
            <param name="p">Ajax处理器</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxAsyncHttpHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)">
            <summary>
            启动对 HTTP 处理程序的异步调用。
            </summary>
            <param name="context">System.Web.HttpContext 对象</param>
            <param name="cb">异步方法调用完成时要调用的 System.AsyncCallback。如果 cb 为 null，则不调用委托。</param>
            <param name="extraData">处理该请求所需的所有额外数据。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxAsyncHttpHandler.EndProcessRequest(System.IAsyncResult)">
            <summary>
            进程结束时提供异步处理 End 方法。
            </summary>
            <param name="ar">包含有关进程状态信息的 System.IAsyncResult。</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxAsyncHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            通过实现 System.Web.IHttpHandler 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。
            </summary>
            <param name="context">System.Web.HttpContext 对象</param>
        </member>
        <member name="P:EIIP.Ajax.AjaxAsyncHttpHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxAsyncHttpHandlerSession">
            <summary>
            含Session的Ajax异步处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxAsyncHttpHandlerSession.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化含Session的Ajax异步处理者。
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:EIIP.Ajax.AjaxAsyncHttpHandlerSessionReadOnly">
            <summary>
            含只读Session的Ajax异步处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxAsyncHttpHandlerSessionReadOnly.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化含只读Session的Ajax异步处理者。
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:EIIP.Ajax.AjaxHandlerFactory">
            <summary>
            Ajax处理者工厂。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            使工厂可以重用现有的处理程序实例。
            </summary>
            <param name="handler">要重用的 System.Web.IHttpHandler 对象。</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            返回实现 System.Web.IHttpHandler 接口的类的实例。
            </summary>
            <param name="context"> System.Web.HttpContext 类的实例</param>
            <param name="requestType">客户端使用的 HTTP 数据传输方法（GET 或 POST）。</param>
            <param name="url">所请求资源的 System.Web.HttpRequest.RawUrl。</param>
            <param name="pathTranslated">所请求资源的 System.Web.HttpRequest.PhysicalApplicationPath。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.AjaxProcessor">
            <summary>
            Ajax处理器基类。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxProcessor.m_Context">
            <summary>
            上下文。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxProcessor.m_Type">
            <summary>
            类型。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxProcessor.m_Method">
            <summary>
            方法。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxProcessor.m_methodAttributes">
            <summary>
            方法特性。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxProcessor.m_namespaceAttributes">
            <summary>
            命名空间特性。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxProcessor.m_serverCacheAttributes">
            <summary>
            服务器缓存特性。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcessor.#ctor(System.Web.HttpContext,System.Type)">
            <summary>
            实例化Ajax处理器。
            </summary>
            <param name="context">上下文</param>
            <param name="type">类型</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcessor.GetMethodInfo(System.String)">
            <summary>
            获取指定方法信息。
            </summary>
            <param name="methodName">方法名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcessor.IsValidAjaxToken">
            <summary>
            检测是否是合法的Ajax凭证。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcessor.RetrieveParameters">
            <summary>
            获取参数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcessor.GetHashCode">
            <summary>
            获取哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcessor.SerializeObject(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="o">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.Context">
            <summary>
            获取上下文。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.Type">
            <summary>
            获取类型。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.CanHandleRequest">
            <summary>
            获取一个值，该值指示是否可以处理请求。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.IsEncryptionAble">
            <summary>
            获取一个值，该值指示是否已加密。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.AjaxMethod">
            <summary>
            获取方法。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.MethodAttributes">
            <summary>
            获取方法特性。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.NamespaceAttributes">
            <summary>
            获取命名空间特性。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.ServerCacheAttributes">
            <summary>
            获取服务器缓存特性。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxProcessor.ContentType">
            <summary>
            获取内容类型。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.IFrameProcessor">
            <summary>
            帧处理器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IFrameProcessor.#ctor(System.Web.HttpContext,System.Type)">
            <summary>
            实例化帧处理器。
            </summary>
            <param name="context">上下文</param>
            <param name="type">类型</param>
        </member>
        <member name="M:EIIP.Ajax.IFrameProcessor.RetrieveParameters">
            <summary>
            获取检索参数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IFrameProcessor.SerializeObject(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="o">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.IFrameProcessor.CanHandleRequest">
            <summary>
            获取一个值，该值指示是否可以处理请求。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.IFrameProcessor.AjaxMethod">
            <summary>
            获取方法。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.IFrameProcessor.IsEncryptionAble">
            <summary>
            获取一个值，该值指示是否已加密。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.IFrameProcessor.ContentType">
            <summary>
            获取内容类型。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.XmlHttpRequestProcessor">
            <summary>
            XmlHttpRequest处理器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.XmlHttpRequestProcessor.#ctor(System.Web.HttpContext,System.Type)">
            <summary>
            实例化XmlHttpRequest处理器。
            </summary>
            <param name="context">上下文</param>
            <param name="type">类型</param>
        </member>
        <member name="M:EIIP.Ajax.XmlHttpRequestProcessor.RetrieveParameters">
            <summary>
            获取参数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.XmlHttpRequestProcessor.SerializeObject(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="o">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.XmlHttpRequestProcessor.GetHashCode">
            <summary>
            获取哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.XmlHttpRequestProcessor.CanHandleRequest">
            <summary>
            获取一个值，该值指示是否可以处理请求。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.XmlHttpRequestProcessor.AjaxMethod">
            <summary>
            获取方法。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.XmlHttpRequestProcessor.IsEncryptionAble">
            <summary>
            获取一个值，该值指示是否已加密。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxProcHelper">
            <summary>
            Ajax处理器辅助类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcHelper.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化Ajax处理器辅助类。
            </summary>
            <param name="p">Ajax处理器</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcHelper.#ctor(EIIP.Ajax.AjaxProcessor,System.IntPtr)">
            <summary>
            实例化Ajax处理器辅助类。
            </summary>
            <param name="p">Ajax处理器</param>
            <param name="token">凭证</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxProcHelper.Run">
            <summary>
            运行。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxSyncHttpHandler">
            <summary>
            Ajax同步处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSyncHttpHandler.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化Ajax同步处理者。
            </summary>
            <param name="p">Ajax处理器</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxSyncHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            启动对 HTTP 处理程序的同步调用。
            </summary>
            <param name="context">System.Web.HttpContext 对象</param>
        </member>
        <member name="P:EIIP.Ajax.AjaxSyncHttpHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxSyncHttpHandlerSession">
            <summary>
            含Session的Ajax同步处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSyncHttpHandlerSession.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化含Session的Ajax同步处理者。
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:EIIP.Ajax.AjaxSyncHttpHandlerSessionReadOnly">
            <summary>
            含只读Session的Ajax同步处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSyncHttpHandlerSessionReadOnly.#ctor(EIIP.Ajax.AjaxProcessor)">
            <summary>
            实例化含只读Session的Ajax同步处理者。
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:EIIP.Ajax.ConverterJavaScriptHandler">
            <summary>
            转换JS的页面处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.ConverterJavaScriptHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            启用 HTTP Web 请求的处理。
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:EIIP.Ajax.ConverterJavaScriptHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.HttpCompressionModule">
            <summary>
            Http压缩模块。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.HttpCompressionModule.#ctor">
            <summary>
            实例化Http压缩模块。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxSecurity">
            <summary>
            Ajax安全类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSecurity.#ctor(System.String)">
            <summary>
            实例化Ajax安全。
            </summary>
            <param name="securityProviderType">安全提供者类型</param>
        </member>
        <member name="M:EIIP.Ajax.AjaxSecurity.Init">
            <summary>
            初始化实例。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.AjaxSecurity.SecurityProvider">
            <summary>
            获取Ajax安全提供者实例。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxSecurityProvider">
            <summary>
            Ajax安全提供者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSecurityProvider.Encrypt(System.String)">
            <summary>
            加密指定JSON。
            </summary>
            <param name="json">JSON文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxSecurityProvider.Decrypt(System.String)">
            <summary>
            解密指定JSON密文。
            </summary>
            <param name="jsoncrypt">JSON密文。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxSecurityProvider.IsValidAjaxToken(System.String,System.String)">
            <summary>
            检查合法的Ajax凭证。
            </summary>
            <param name="token">Ajax请求凭证</param>
            <param name="sitePassword">站点密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.AjaxSecurityProvider.GetAjaxToken(System.String)">
            <summary>
            获取新的Ajax凭证。
            </summary>
            <param name="sitePassword">站点密码</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.AjaxSecurityProvider.ClientScript">
            <summary>
            获取客户端脚本。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSecurityProvider.AjaxTokenEnabled">
            <summary>
            获取一个值，该值指示是否允许Ajax凭证。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.TypeJavaScriptHandler">
            <summary>
            客户端JS类型页面处理者。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptHandler.#ctor(System.Type)">
            <summary>
            实例化客户端JS类型页面处理者。
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            启用 HTTP Web 请求的处理。
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:EIIP.Ajax.TypeJavaScriptHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.TypeJavaScriptProvider">
            <summary>
            JS类型提供者。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.TypeJavaScriptProvider.m_Type">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.TypeJavaScriptProvider.m_URL">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.TypeJavaScriptProvider.sb">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.#ctor(System.Type,System.String,System.Text.StringBuilder)">
            <summary>
            实例化JS类型提供者。
            </summary>
            <param name="type">类型</param>
            <param name="url">url地址</param>
            <param name="sb">缓存</param>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.GetClientNamespace">
            <summary>
            获取客户端命名空间。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.GetClientMethodName(System.Reflection.MethodInfo)">
            <summary>
            获取客户端方法名称。
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.RenderNamespace">
            <summary>
            呈现命名空间。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.RenderClassBegin">
            <summary>
            呈现JS类起始信息。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.RenderClassEnd">
            <summary>
            呈现JS类结束信息。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TypeJavaScriptProvider.RenderMethods(System.Collections.Generic.List{System.Reflection.MethodInfo})">
            <summary>
            呈现方法。
            </summary>
            <param name="methods"></param>
        </member>
        <member name="T:EIIP.Ajax.IContextInitializer">
            <summary>
            定义Ajax方法初始化上下文的接口。
            </summary>
            <example>
            public class AjaxMethods : IContextInitializer
            {
            	private HttpContext context = null;
            	public void InitializeContext(HttpContext context)
            	{
            		this.context = context;
            	}
            	
            	[AjaxMethod]
            	public string GetRootPath()
            	{
            		return context.Server.MapPath("~");
            	}
            }
            </example>
        </member>
        <member name="M:EIIP.Ajax.IContextInitializer.InitializeContext(System.Web.HttpContext)">
            <summary>
            初始化上下文。
            </summary>
            <param name="context">HttpContext对象</param>
        </member>
        <member name="T:EIIP.Ajax.TokenProvider">
            <summary>
            凭证提供者基类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TokenProvider.#ctor">
            <summary>
            实例化凭证提供者基类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.TokenProvider.GetToken">
            <summary>
            获取凭证。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.TokenProvider.Parse(System.String)">
            <summary>
            解析指定凭证。
            </summary>
            <param name="token">凭证</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.BitmapConverter">
            <summary>
            图像转换器。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptConverter">
            <summary>
            JS转换器基类。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JavaScriptConverter.m_AllowInheritance">
            <summary>
            指示是否允许继承。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JavaScriptConverter.m_serializableTypes">
            <summary>
            可序列化类型。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JavaScriptConverter.m_deserializableTypes">
            <summary>
            可反序列化类型。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.Initialize(System.Collections.Specialized.StringDictionary)">
            <summary>
            初始化转换器。
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为 .NET 对象。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">.Net对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.TrySerializeValue(System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            转换 .NET 对象为 JSON 字符串格式。一个指示操作是否成功的返回值。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="t">要转换的对象类型</param>
            <param name="sb">JSON输出器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptConverter.TryDeserializeValue(EIIP.Ajax.IJavaScriptObject,System.Type,System.Object@)">
            <summary>
            将对象的JSON字符串表示形式转换为它的等效类型对象。一个指示操作是否成功的返回值。
            </summary>
            <param name="jso">要解析的JSON提供者</param>
            <param name="t">结果的对象类型</param>
            <param name="o">返回结果对象</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptConverter.SerializableTypes">
            <summary>
            获取可序列化类型。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptConverter.DeserializableTypes">
            <summary>
            获取可反序列化类型。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptConverter.ConverterName">
            <summary>
            获取转换器名称。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.BitmapConverter.#ctor">
            <summary>
            实例化图像转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.BitmapConverter.Initialize(System.Collections.Specialized.StringDictionary)">
            <summary>
            初始化转换器。
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:EIIP.Ajax.BitmapConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.BitmapConverter.Serialize(System.Object)">
            <summary>
            转换 .NET 对象为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.BitmapConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换 .NET 对象为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.BitmapConverter.RemoveBitmapFromCache(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            从缓存中解析图像。
            </summary>
            <param name="key">键</param>
            <param name="o"></param>
            <param name="reason"></param>
        </member>
        <member name="T:EIIP.Ajax.AjaxBitmap">
            <summary>
            Ajax图像类。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxBitmap.bmp">
            <summary>
            图像实例。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxBitmap.mimeType">
            <summary>
            MIME类型。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxBitmap.quality">
            <summary>
            图像质量。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.AjaxBitmapHttpHandler">
            <summary>
            Ajax图像处理器类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxBitmapHttpHandler.#ctor">
            <summary>
            实例化Ajax图像处理器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxBitmapHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:EIIP.Ajax.AjaxBitmapHttpHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.DataRowConverter">
            <summary>
            数据行转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataRowConverter.#ctor">
            <summary>
            实例化数据行转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataRowConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataRowConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.DataRowViewConverter">
            <summary>
            数据行视图转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataRowViewConverter.#ctor">
            <summary>
            实例化数据行视图转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataRowViewConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataRowViewConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.DataSetConverter">
            <summary>
            数据集转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataSetConverter.#ctor">
            <summary>
            实例化数据集转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataSetConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataSetConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为数据集。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">数据集类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataSetConverter.Serialize(System.Object)">
            <summary>
            转换数据集为JSON格式。
            </summary>
            <param name="o">数据集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataSetConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换数据集为JSON格式。
            </summary>
            <param name="o">数据集</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.DataTableConverter">
            <summary>
            数据表转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataTableConverter.#ctor">
            <summary>
            实例化数据表转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataTableConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataTableConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为数据表。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">数据表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataTableConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的数据表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataTableConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的数据表</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.DataViewConverter">
            <summary>
            数据视图转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataViewConverter.#ctor">
            <summary>
            实例化数据视图转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DataViewConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的数据视图</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DataViewConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的数据视图</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.DateTimeConverter">
            <summary>
            日期时间转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DateTimeConverter.#ctor">
            <summary>
            实例化日期时间转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DateTimeConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为日期时间。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">.Net对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DateTimeConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DateTimeConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的日期时间</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.DecimalConverter">
            <summary>
            Decimal转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DecimalConverter.#ctor">
            <summary>
            实例化Decimal转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.DecimalConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的Decimal</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.DecimalConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的Decimal</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.DecimalConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为Decimal。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">Decimal类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.EnumConverter">
            <summary>
            枚举转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.EnumConverter.#ctor">
            <summary>
            实例化枚举转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.EnumConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的枚举</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.EnumConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的枚举</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.EnumConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为枚举。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.EnumConverter.TrySerializeValue(System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            转换枚举为 JSON 字符串格式。一个指示操作是否成功的返回值。
            </summary>
            <param name="o">要转换的枚举</param>
            <param name="t">要转换的枚举类型</param>
            <param name="sb">JSON输出器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.EnumConverter.TryDeserializeValue(EIIP.Ajax.IJavaScriptObject,System.Type,System.Object@)">
            <summary>
            将对象的JSON字符串表示形式转换为它的等效枚举类型。一个指示操作是否成功的返回值。
            </summary>
            <param name="jso">要解析的JSON提供者</param>
            <param name="t">结果的枚举类型</param>
            <param name="o">返回枚举对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.ExceptionConverter">
            <summary>
            异常转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.ExceptionConverter.#ctor">
            <summary>
            实例化异常转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.ExceptionConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的异常</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.ExceptionConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的异常</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.ExceptionConverter.TrySerializeValue(System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            转换异常为 JSON 字符串格式。一个指示操作是否成功的返回值。
            </summary>
            <param name="o">要转换的异常</param>
            <param name="t">要转换的异常类型</param>
            <param name="sb">JSON输出器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.GuidConverter">
            <summary>
            Guid转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.GuidConverter.#ctor">
            <summary>
            实例化Guid转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.GuidConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.GuidConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的Guid</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.GuidConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为Guid。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">Guid类型，设置为null</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.HashtableConverter">
            <summary>
            字典转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.HashtableConverter.#ctor">
            <summary>
            实例化字典转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.HashtableConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为字典。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">字典</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HashtableConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的字典</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HashtableConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的字典</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.HtmlControlConverter">
            <summary>
            HtmlControl转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.#ctor">
            <summary>
            实例化HtmlControl转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为HtmlControl。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">HtmlControl类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的HtmlControl</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的HtmlControl</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.CorrectAttributes(System.String)">
            <summary>
            转换合理的属性。
            </summary>
            <param name="input">输入</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.HtmlControlToString(System.Web.UI.HtmlControls.HtmlControl)">
            <summary>
            转换HtmlControl为HTML字符串。
            </summary>
            <param name="control">HtmlControl控件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.HtmlControlFromString(System.String,System.Type)">
            <summary>
            从HTML字串符解析HtmlControl控件。
            </summary>
            <param name="html">HTML字串符</param>
            <param name="type">HtmlControl控件类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverter.AddRunAtServer(System.String,System.String)">
            <summary>
            添加 'runat="server"'。
            </summary>
            <param name="input">输入</param>
            <param name="tagName">TAG标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.HtmlControlConverterHelper.Parse(System.String)">
            <summary>
            解析控件。
            </summary>
            <param name="controlString"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.IDictionaryConverter">
            <summary>
            IDictionary转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.#ctor">
            <summary>
            实例化IDictionary转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为IDictionary。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">IDictionary类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的IDictionary</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的IDictionary</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.TrySerializeValue(System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            转换IDictionary对象为 JSON 字符串格式。一个指示操作是否成功的返回值。
            </summary>
            <param name="o">要转换的IDictionary</param>
            <param name="t">要转换的IDictionary类型</param>
            <param name="sb">JSON输出器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IDictionaryConverter.IsInterfaceImplemented(System.Object,System.Type)">
            <summary>
            测试是否实现了指定接口。
            </summary>
            <param name="obj">测试对象</param>
            <param name="interfaceType">接口类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.IEnumerableConverter">
            <summary>
            IEnumerable转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IEnumerableConverter.#ctor">
            <summary>
            实例化IEnumerable转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IEnumerableConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的IEnumerable对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IEnumerableConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的IEnumerable对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.IEnumerableConverter.TrySerializeValue(System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            转换IEnumerable为 JSON 字符串格式。一个指示操作是否成功的返回值。
            </summary>
            <param name="o">要转换的IEnumerable对象</param>
            <param name="t">要转换的IEnumerable对象类型</param>
            <param name="sb">JSON输出器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IEnumerableConverter.TryDeserializeValue(EIIP.Ajax.IJavaScriptObject,System.Type,System.Object@)">
            <summary>
            将对象的JSON字符串表示形式转换为它的等效IEnumerable类型对象。一个指示操作是否成功的返回值。
            </summary>
            <param name="jso">要解析的JSON提供者</param>
            <param name="t">结果的对象类型</param>
            <param name="o">返回结果对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.IListConverter">
            <summary>
            IList转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IListConverter.#ctor">
            <summary>
            实例化IList转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IListConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IListConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.IListConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为IList对象。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">IList对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IListConverter.TrySerializeValue(System.Object,System.Type,System.Text.StringBuilder)">
            <summary>
            转换IList对象为 JSON 字符串格式。一个指示操作是否成功的返回值。
            </summary>
            <param name="o">要转换的IList对象</param>
            <param name="t">要转换的IList对象类型</param>
            <param name="sb">JSON输出器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.IJavaScriptObjectConverter">
            <summary>
            IJavaScriptObject对象转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IJavaScriptObjectConverter.#ctor">
            <summary>
            实例化IJavaScriptObject对象转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.IJavaScriptObjectConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            返回 IJavaScriptObject 对象。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">不设置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IJavaScriptObjectConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的IJavaScriptObject对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.IJavaScriptObjectConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的IJavaScriptObject对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.NameValueCollectionConverter">
            <summary>
            NameValueCollection转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.NameValueCollectionConverter.#ctor">
            <summary>
            实例化NameValueCollection转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.NameValueCollectionConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.NameValueCollectionConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为NameValueCollection对象。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">NameValueCollection类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.NameValueCollectionConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的NameValueCollection对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.NameValueCollectionConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的NameValueCollection对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.PrimitiveConverter">
            <summary>
            元数据转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.PrimitiveConverter.#ctor">
            <summary>
            实例化元数据转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.PrimitiveConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的元数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.PrimitiveConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的元数据</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.PrimitiveConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为元数据。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">元数据类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.ProfileBaseConverter">
            <summary>
            ProfileBase转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.ProfileBaseConverter.#ctor">
            <summary>
            实例化ProfileBase转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.ProfileBaseConverter.GetClientScript">
            <summary>
            获取呈现的JS代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.ProfileBaseConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的ProfileBase对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.ProfileBaseConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的ProfileBase对象</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="T:EIIP.Ajax.StringConverter">
            <summary>
            字符串转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.StringConverter.#ctor">
            <summary>
            实例化字符串转换器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.StringConverter.Serialize(System.Object)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.StringConverter.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换为 JSON 字符串格式。
            </summary>
            <param name="o">要转换的字符串</param>
            <param name="sb">文本写入器</param>
        </member>
        <member name="M:EIIP.Ajax.StringConverter.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            转换 IJavaScriptObject 对象为 .NET 对象。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <param name="t">字符串类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.StringConverter.TryDeserializeValue(EIIP.Ajax.IJavaScriptObject,System.Type,System.Object@)">
            <summary>
            </summary>
            <param name="jso"></param>
            <param name="t"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptDeserializer">
            <summary>
            JS反序列化类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptDeserializer.DeserializeFromJson(System.String,System.Type)">
            <summary>
            反序列化JSON字串。
            </summary>
            <param name="json">JSON格式字串</param>
            <param name="type">要反序列化的类型</param>
            <returns></returns>
            <example>
            string json = "[1,2,3,4,5,6]";
            object o = JavaScriptDeserializer.Deserialize(json, typeof(int[]);
            if(o != null)	foreach(int i in (int[])o) ...
            </example>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptDeserializer.Deserialize``1(EIIP.Ajax.IJavaScriptObject)">
            <summary>
            反序列化JSON字串。
            </summary>
            <typeparam name="T">要反序列化的类型</typeparam>
            <param name="o">JS对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptDeserializer.DeserializeFromJson``1(System.String)">
            <summary>
            反序列化JSON字串。
            </summary>
            <typeparam name="T">要反序列化的类型</typeparam>
            <param name="json">JSON字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptDeserializer.Deserialize(EIIP.Ajax.IJavaScriptObject,System.Type)">
            <summary>
            反序列化JSON字串。
            </summary>
            <param name="o">JS对象</param>
            <param name="type">要反序列化的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptDeserializer.DeserializeCustomObject(EIIP.Ajax.JavaScriptObject,System.Type)">
            <summary>
            反序列化自定义类型。
            </summary>
            <param name="o">JS对象</param>
            <param name="type">要反序列化的类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.IJavaScriptObject">
            <summary>
            定义JavaScript ECMA 类型接口。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.IJavaScriptObject.Value">
            <summary>
            获取对象的字符串格式。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptArray">
            <summary>
            JS数组类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptArray.#ctor">
            <summary>
            实例化JS数组。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptArray.#ctor(EIIP.Ajax.IJavaScriptObject[])">
            <summary>
            实例化JS数组。
            </summary>
            <param name="items">JS对象数组</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptArray.Add(System.Object)">
            <summary>
            添加指定IJavaScriptObject对象。
            </summary>
            <param name="value">JS对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptArray.ToString">
            <summary>
            获取JSON格式字串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptArray.Value">
            <summary>
            获取数组JSON格式。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptArray.Item(System.Int32)">
            <summary>
            获取指定索引的JS对象。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptBoolean">
            <summary>
            JS布尔量类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptBoolean.#ctor">
            <summary>
            实例化JS布尔量。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptBoolean.#ctor(System.Boolean)">
            <summary>
            实例化JS布尔量。
            </summary>
            <param name="value">初始化值</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptBoolean.ToString">
            <summary>
            获取JSON格式字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptBoolean.op_Implicit(EIIP.Ajax.JavaScriptBoolean)~System.Boolean">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptBoolean.op_Implicit(EIIP.Ajax.JavaScriptBoolean)~System.String">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptBoolean.Value">
            <summary>
            获取JSON格式字串。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptNumber">
            <summary>
            JS数字。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.#ctor">
            <summary>
            实例化JS数字。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.#ctor(System.Int16)">
            <summary>
            实例化JS数字。
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.#ctor(System.Int32)">
            <summary>
            实例化JS数字。
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.#ctor(System.Int64)">
            <summary>
            实例化JS数字。
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.#ctor(System.Double)">
            <summary>
            实例化JS数字。
            </summary>
            <param name="d"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.#ctor(System.Single)">
            <summary>
            实例化JS数字。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.Append(System.String)">
            <summary>
            追加字符串。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.Append(System.Char)">
            <summary>
            追加字符
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.IndexOf(System.String)">
            <summary>
            获取指定字符串的索引位置。不存在则返回-1。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.ToString">
            <summary>
            获取JSON格式字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Implicit(EIIP.Ajax.JavaScriptNumber)~System.String">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Implicit(EIIP.Ajax.JavaScriptNumber)~System.Int16">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Implicit(EIIP.Ajax.JavaScriptNumber)~System.Int32">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Implicit(EIIP.Ajax.JavaScriptNumber)~System.Int64">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Implicit(EIIP.Ajax.JavaScriptNumber)~System.Double">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Implicit(EIIP.Ajax.JavaScriptNumber)~System.Single">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Addition(EIIP.Ajax.JavaScriptNumber,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptNumber.op_Addition(EIIP.Ajax.JavaScriptNumber,System.Char)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptNumber.Value">
            <summary>
            获取JSON格式字串。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptObject">
            <summary>
            呈现 JavaScript ECMA 对象类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptObject.#ctor">
            <summary>
            实例化呈现 JavaScript ECMA 对象实例
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptObject.ToString">
            <summary>
            获取对象JSON字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptObject.Contains(System.String)">
            <summary>
            测试是否包含指定键的JS对象。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptObject.Add(System.String,EIIP.Ajax.IJavaScriptObject)">
            <summary>
            添加指定键及JS对象。
            </summary>
            <param name="key">键名</param>
            <param name="value">JS对象</param>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptObject.Value">
            <summary>
            获取对象JSON字符串。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptObject.Item(System.String)">
            <summary>
            获取或设置指定键对象。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptObject.Keys">
            <summary>
            获取所有键。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptObject.IsFixedSize">
            <summary>
            获取一个值，该值指示集合是否是固定尺寸。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptSource">
            <summary>
            JS数据源类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSource.#ctor">
            <summary>
            实例化JS数据源。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSource.#ctor(System.String)">
            <summary>
            实例化JS数据源。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSource.Append(System.String)">
            <summary>
            追加指定字符串。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSource.ToString">
            <summary>
            输出JSON格式字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSource.op_Implicit(EIIP.Ajax.JavaScriptSource)~System.String">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSource.op_Addition(EIIP.Ajax.JavaScriptSource,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptSource.Value">
            <summary>
            获取JSON格式字串。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptString">
            <summary>
            JS字符串。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.#ctor">
            <summary>
            实例化JS字符串。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.#ctor(System.String)">
            <summary>
            实例化JS字符串。
            </summary>
            <param name="s">字符串。</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.#ctor(System.Char)">
            <summary>
            实例化JS字符串。
            </summary>
            <param name="c">字符</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.Append(System.String)">
            <summary>
            追加字符串。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.Append(System.Char)">
            <summary>
            追加字符。
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.ToString">
            <summary>
            获取JSON格式字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.op_Implicit(EIIP.Ajax.JavaScriptString)~System.String">
            <summary>
            
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.op_Addition(EIIP.Ajax.JavaScriptString,System.String)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptString.op_Addition(EIIP.Ajax.JavaScriptString,System.Char)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.JavaScriptString.Value">
            <summary>
            获取JSON格式字串。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptSerializer">
            <summary>
            提供序列化.NET对象为JSON字符串方法的类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSerializer.Serialize(System.Object)">
            <summary>
            转换.NET对象为JSON字符串。
            </summary>
            <param name="o">要转换的对象</param>
            <returns></returns>
            <example>
            string json = JavaScriptSerializer.Serialize(DateTime.Now);
            // json = "new Date(...)";
            </example>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSerializer.Serialize(System.Object,System.Text.StringBuilder)">
            <summary>
            转换.NET对象为JSON字符串。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">输出器</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptSerializer.SerializeCustomObject(System.Object,System.Text.StringBuilder)">
            <summary>
            序列化用户定义对象。
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="sb">输出器</param>
        </member>
        <member name="T:EIIP.Ajax.JavaScriptUtil">
            <summary>
            JavaScript辅助类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.GetClientNamespaceRepresentation(System.String,System.Text.StringBuilder)">
            <summary>
            获取JS命名空间的客户端创建代码。
            </summary>
            <param name="ns">含有"."的完整 JavaScript 命名空间</param>
            <param name="writer">写入器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.QuoteString(System.String,System.Char)">
            <summary>
            为指定字符串添加引号字符。
            </summary>
            <param name="s">要添加引号字符的字符串</param>
            <param name="quoteChar">引号字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.QuoteString(System.String,System.Char,System.Text.StringBuilder)">
            <summary>
            为指定字符串添加引号字符。
            </summary>
            <param name="s">要添加引号字符的字符串</param>
            <param name="quoteChar">引号字符</param>
            <param name="sb">输出器</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.QuoteString(System.String)">
            <summary>
            为指定字符串添加双引号。
            </summary>
            <param name="s">要添加双引号的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.QuoteString(System.String,System.Text.StringBuilder)">
            <summary>
            为指定字符串添加双引号。
            </summary>
            <param name="s">要添加双引号的字符串</param>
            <param name="sb">输出器</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.QuoteHtmlAttribute(System.String)">
            <summary>
            为HTML属性添加引号。
            </summary>
            <param name="s">要添加引号字符的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.GetEnumRepresentation(System.Type)">
            <summary>
            获取枚举类型的JS表达式代码。
            </summary>
            <param name="type">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.ConvertIJavaScriptObjectToXml(EIIP.Ajax.IJavaScriptObject)">
            <summary>
            转换指定 IJavaScriptObject 为 XML 文档。
            </summary>
            <param name="o">要转换的 IJavaScriptObject 对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.SerializeToAjaxXml(System.Xml.XmlNode,EIIP.Ajax.IJavaScriptObject)">
            <summary>
            序列化为 Ajax XML。
            </summary>
            <param name="n">XML父节点</param>
            <param name="o">要序列化的对象</param>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.ConvertXmlToIJavaScriptObject(System.Xml.XmlDocument)">
            <summary>
            从Ajax XML反序列化。
            </summary>
            <param name="doc">XML JSON 文档</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.DeserialzeFromAjaxXml(System.Xml.XmlNode)">
            <summary>
            从Ajax XML反序列化。
            </summary>
            <param name="n">XML节点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JavaScriptUtil.GetIJavaScriptObjectFromXmlNode(System.Xml.XmlNode)">
            <summary>
            将 XML document 转换为 IJavaScriptObject (JSON)。
            </summary>
            <param name="n">Xml节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.JSONParser">
            <summary>
            JSON解析器。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_OBJECT_BEGIN">
            <summary>
            OBJECT起始字符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_OBJECT_END">
            <summary>
            OBJECT结束字符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_ARRAY_BEGIN">
            <summary>
            ARRAY起始字符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_ARRAY_END">
            <summary>
            ARRAY结束字符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_PROPERTY_SEPARATOR">
            <summary>
            属性分隔符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_STRING_SINGLE_QUOTE">
            <summary>
            字符串单引号。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_STRING_DOUBLE_QUOTE">
            <summary>
            字符串双引号。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_ITEMS_SEPARATOR">
            <summary>
            项分隔符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.JSON_DECIMAL_SEPARATOR">
            <summary>
            小数点。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.END_OF_STRING">
            <summary>
            字符串结束符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.NEW_LINE">
            <summary>
            新行符。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.JSONParser.RETURN">
            <summary>
            回车符。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.#ctor">
            <summary>
            实例化JOSN解析器。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadWhiteSpaces">
            <summary>
            读取字符，直到一个空白字符。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadNext">
            <summary>
            从JSON字符串读取一字符。成功返回true(当为JSON结束符时，返回false)。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.CompareNext(System.String)">
            <summary>
            比较下一指定字串。
            </summary>
            <param name="s">要比较的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadPrev">
            <summary>
            读取JSON字符串当前位置的上一字符。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadString">
            <summary>
            从JSON字串读取一字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadJavaScriptSource">
            <summary>
            读取JS数据源。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadJavaScriptObject">
            <summary>
            读取JS对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadNumber">
            <summary>
            从JSON中读取数字。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadWord">
            <summary>
            从JSON中读取关键字。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadArray">
            <summary>
            从JSON中读取数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.ReadObject">
            <summary>
            从JSON中读取下一JS对象（哈希表）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.GetObject">
            <summary>
            获取 Hashtable, ArrayList 或 string 的JS对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.JSONParser.GetJSONObject(System.String)">
            <summary>
            读取JSON对象。
            </summary>
            <param name="json">JSON格式字串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.Services.Cart">
            <summary>
            服务项基类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.Services.Cart.AddItem(System.String,System.Object)">
            <summary>
            添加项。
            </summary>
            <param name="cartName">项名称</param>
            <param name="item">对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.Services.Cart.GetItems(System.String)">
            <summary>
            获取项。
            </summary>
            <param name="cartName">项名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.Services.Chat">
            <summary>
            服务消息基类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.Services.Chat.SendMessage(System.String,System.String)">
            <summary>
            发送消息。
            </summary>
            <param name="room">地址</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.Services.Chat.RetrieveNew(System.String,System.DateTime)">
            <summary>
            接收消息。
            </summary>
            <param name="room">地址</param>
            <param name="lastRetreived">上次接收时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.Services.Chat.RetrieveLast(System.String,System.Int32)">
            <summary>
            接收最近消息。
            </summary>
            <param name="room">地址</param>
            <param name="count">接收数量</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.Services.Profile">
            <summary>
            服务器描述类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.Services.Profile.GetProfile">
            <summary>
            获取服务器描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.Services.Profile.GetProfileProperty(System.String)">
            <summary>
            获取服务器描述属性。
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.Services.Profile.SetProfile(EIIP.Ajax.JavaScriptObject)">
            <summary>
            设置描述。
            </summary>
            <param name="o">JS对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.AjaxSettings">
            <summary>
            Ajax设置类。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.AjaxSettings.AllowAjaxNamespaceAttribute">
            <summary>
            指示是否允许启用Ajax命名空间特性。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.AjaxSettings.#ctor">
            <summary>
            实例化设置。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSettings.UrlNamespaceMappings">
            <summary>
            获取或设置URL命名空间映射。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSettings.OnlyAllowTypesInList">
            <summary>
            获取或设置一个值，该值指示是否仅允许在列表中的类型。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSettings.DebugEnabled">
            <summary>
            获取或设置一个值，该值指示是否允许调试信息。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSettings.UseAssemblyQualifiedName">
            <summary>
            获取或设置一个值，该值指示是否使用完全限定名来使用GAC内的程序集。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSettings.IncludeTypeProperty">
            <summary>
            获取或设置一个值，该值指示是否包含类型属性。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.AjaxSettings.TokenSitePassword">
            <summary>
            获取或设置站点凭证密码。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.CacheInfo">
            <summary>
            缓存信息类。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.CacheInfo.#ctor(System.String,System.DateTime)">
            <summary>
            实例化缓存信息。
            </summary>
            <param name="etag">标签</param>
            <param name="lastMod">最近一次修改时间</param>
        </member>
        <member name="P:EIIP.Ajax.CacheInfo.ETag">
            <summary>
            获取标签。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.CacheInfo.LastModified">
            <summary>
            获取最近一次修改时间
            </summary>
        </member>
        <member name="T:EIIP.Ajax.GetDataHandler">
            <summary>
            数据处理委托。
            </summary>
            <param name="input"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.ClientMethod">
            <summary>
            客户端方法。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.ClientMethod.ClassName">
            <summary>
            JS客户端类名称。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.ClientMethod.MethodName">
            <summary>
            JS客户端方法名称。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.ClientMethod.FromMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            获取客户端方法。不存在则返回null。
            </summary>
            <param name="method">方法信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.ClientMethod.FromDelegate(System.Delegate)">
            <summary>
            获取客户端方法。不存在则返回null。
            </summary>
            <param name="d">委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.ClientMethod.ToString">
            <summary>
            获取信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Ajax.Constant">
            <summary>
            常量。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxID">
            <summary>
            Ajax字典前缀。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxTokenID">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxMethodID">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxCacheID">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxInitKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxConverterKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxJSONKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxPageKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxJSKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxPageJSKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxCoreKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxIDot">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxEnumKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AjaxScriptKey">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Constant.AssemblyName">
            <summary>
            内嵌资源的程序集。
            </summary>
        </member>
        <member name="T:EIIP.Ajax.Utility">
            <summary>
            用于注册Ajax方法的工具类。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Utility.HandlerExtension">
            <summary>
            处理器的扩展名。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Utility.HandlerPath">
            <summary>
            处理器路径。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Utility.HandlerPathWithSep">
            <summary>
            以/结尾的处理器路径。
            </summary>
        </member>
        <member name="F:EIIP.Ajax.Utility.HandlerRootPath">
            <summary>
            处理器虚拟应用程序根路径。，以"/"结尾。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.Utility.GetSessionUri">
            <summary>
            获取URI中的Session标识。不为空串的话，以“/”结尾。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.Utility.GetSessionUri(System.Text.StringBuilder)">
            <summary>
            输出URI中的Session标识。不为空串的话，以“/”结尾。
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:EIIP.Ajax.Utility.GetSessionUri(System.Web.UI.HtmlTextWriter)">
            <summary>
            输出URI中的Session标识。不为空串的话，以“/”结尾。
            </summary>
            <param name="writer">写入器</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterEnumForAjax(System.Type)">
            <summary>
            为当前处理页注册枚举类型客户端脚本。
            </summary>
            <param name="type">枚举类型</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterEnumForAjax(System.Type,System.Web.UI.Page)">
            <summary>
            为指定处理页注册枚举类型客户端脚本。
            </summary>
            <param name="type">枚举类型</param>
            <param name="page">要注册脚本所在页</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterTypeForAjax(System.Type)">
            <summary>
            为当前处理页注册指定类型客户端脚本。
            </summary>
            <param name="type">要注册的类型</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterTypeForAjax(System.Type,System.Web.UI.Page)">
            <summary>
            为指定处理页注册指定类型客户端脚本。
            </summary>
            <param name="type">要注册的类型</param>
            <param name="page">要注册脚本所在页</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterTypeForAjax(System.Type,System.Web.UI.HtmlTextWriter)">
            <summary>
            为指定处理页注册指定类型客户端脚本。
            </summary>
            <param name="type">要注册的类型</param>
            <param name="writer">写入器</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.AddDefaultConverter(EIIP.Ajax.AjaxSettings)">
            <summary>
            添加默认JS转换器。
            </summary>
            <param name="settings">Ajax设置实例</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RemoveConverter(EIIP.Ajax.AjaxSettings,System.Type)">
            <summary>
            移除指定转换器。
            </summary>
            <param name="settings">Ajax设置实例</param>
            <param name="t">转换器类型</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.AddConverter(EIIP.Ajax.AjaxSettings,EIIP.Ajax.JavaScriptConverter)">
            <summary>
            添加指定转换器。
            </summary>
            <param name="settings">Ajax设置实例</param>
            <param name="converter">JS转换器实例</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.AddConverter(EIIP.Ajax.AjaxSettings,EIIP.Ajax.JavaScriptConverter,System.Boolean)">
            <summary>
            添加指定转换器。
            </summary>
            <param name="settings">Ajax设置实例</param>
            <param name="converter">JS转换器实例</param>
            <param name="replace">设置是否替换</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterCommonAjax">
            <summary>
            为当前页注册通用脚本。
            </summary>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterCommonAjax(System.Web.UI.HtmlTextWriter)">
            <summary>
            输出Ajax类型转换引用脚本。
            </summary>
            <param name="writer">输出缓存</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterCommonAjax(System.Web.UI.Page)">
            <summary>
            为指定页注册通用脚本。
            </summary>
            <param name="page">要注册脚本所在页</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.GetScripts">
            <summary>
            获取页面脚本列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Ajax.Utility.RegisterClientScriptBlock(System.Web.UI.Page,System.String,System.String)">
            <summary>
            注册客户端脚本块。
            </summary>
            <param name="page">要注册脚本所在页</param>
            <param name="key">键名</param>
            <param name="script">客户端脚本块</param>
        </member>
        <member name="M:EIIP.Ajax.Utility.page_PreRender(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Ajax.Utility.GetConvertJavaScriptString">
            <summary>
            获取Convert.js脚本内容
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Ajax.Utility.Settings">
            <summary>
            获取或设置在 web.config 中的 Ajax 配置。
            </summary>
        </member>
        <member name="P:EIIP.Ajax.Utility.CurrentAjaxToken">
            <summary>
            获取Ajax凭证。
            </summary>
        </member>
        <member name="T:EIIP.Collections.BitSet">
            <summary>
            管理位值的压缩数组，该值表示为布尔值，其中 true 表示位是打开的 (1)，false 表示位是关闭的 (0)。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BitSet.#ctor">
            <summary>
            实例化缺省位集。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BitSet.#ctor(System.Int32)">
            <summary>
            实例化指定尺寸的位集。
            </summary>
            <param name="size">位集中位值的数目。</param>
        </member>
        <member name="M:EIIP.Collections.BitSet.Set(System.Int32)">
            <summary>
            将位集中特定位置处的位设置为true。若指定的索引位置不存在，则自动扩展位集。
            </summary>
            <param name="index">位的索引</param>
        </member>
        <member name="M:EIIP.Collections.BitSet.Cardinality">
            <summary>
            获取位集中，设置为true的位的个数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BitSet.NextSetBit(System.Int32)">
            <summary>
            获取下一个设置为true的位的索引位置。不存在则返回-1。
            </summary>
            <param name="index">要测试的起始索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BitSet.NextSetBit(System.Collections.BitArray,System.Int32)">
            <summary>
            获取下一个设置为true的位的索引位置。不存在则返回-1。
            </summary>
            <param name="bitArray">（.Net框架内置）管理位值的压缩数组</param>
            <param name="index">要测试的起始索引位置</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.WeakHashTable">
            <summary>
            使用弱引用键的哈希表，即在引用对象的同时仍然允许垃圾回收来回收该对象。
            </summary>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.KeyEquals(System.Object,System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.GetHash(System.Object)">
            <summary>
            获取键的哈希码。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.Add(System.Object,System.Object)">
            <summary>
            添加键值对。
            </summary>
            <param name="key">要包装的键</param>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.CopyTo(System.Array,System.Int32)">
            <summary>
            复制键值对实体至指定数组。
            </summary>
            <param name="array">要接收键值对实体的数组</param>
            <param name="index">数组的起始索引</param>
        </member>
        <member name="P:EIIP.Collections.WeakHashTable.Keys">
            <summary>
            获取键集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.WeakHashTable.Item(System.Object)">
            <summary>
            获取或设置键值对。
            </summary>
        </member>
        <member name="P:EIIP.Collections.WeakHashTable.Count">
            <summary>
            获取数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.WeakHashTable.WeakKey">
            <summary>
            弱引用键类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.WeakKey.#ctor(System.Object)">
            <summary>
            实例化弱引用键。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:EIIP.Collections.WeakHashTable.WeakKey.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.WeakHashTable.WeakDictionaryEnumerator">
            <summary>
            弱引用的字典枚举数类。
            </summary>
        </member>
        <member name="T:EIIP.Compression.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
        </member>
        <member name="T:EIIP.Compression.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:EIIP.Compression.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:EIIP.Compression.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:EIIP.Compression.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:EIIP.Compression.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:EIIP.Compression.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:EIIP.Compression.Adler32.#ctor">
            <summary>
            Creates a new instance of the <code>Adler32</code> class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:EIIP.Compression.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:EIIP.Compression.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:EIIP.Compression.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:EIIP.Compression.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:EIIP.Compression.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:EIIP.Compression.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:EIIP.Compression.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:EIIP.Compression.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:EIIP.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:EIIP.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:EIIP.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:EIIP.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:EIIP.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:EIIP.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:EIIP.Compression.Deflater.SetStrategy(EIIP.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:EIIP.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:EIIP.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:EIIP.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:EIIP.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:EIIP.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="T:EIIP.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:EIIP.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.#ctor(EIIP.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
        </member>
        <member name="M:EIIP.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed <see cref="M:EIIP.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> via SetInput</see>
            </summary>		
        </member>
        <member name="P:EIIP.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:EIIP.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:EIIP.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:EIIP.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:EIIP.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.#ctor(EIIP.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:EIIP.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:EIIP.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.#ctor(EIIP.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:System.Exception">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.CalcBLFreq(EIIP.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterHuffman.Tree.WriteTree(EIIP.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:EIIP.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="T:EIIP.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:EIIP.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:EIIP.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:EIIP.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:EIIP.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="M:EIIP.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:EIIP.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>setInput()</code>, then inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>needsInput() returns true because the input buffer is empty.
             You have to provide more input with <code>setInput()</code>.
             NOTE: needsInput() also returns true when, the stream is finished.
             </li>
             <li>needsDictionary() returns true, you have to provide a preset
                dictionary with <code>setDictionary()</code>.</li>
             <li>finished() returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:EIIP.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:EIIP.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:EIIP.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:EIIP.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:System.Exception">
            The header is invalid.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:EIIP.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:System.Exception">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:System.Exception">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:System.Exception">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:EIIP.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:System.Exception">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
        </member>
        <member name="M:EIIP.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:EIIP.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:EIIP.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:EIIP.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:EIIP.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:EIIP.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:EIIP.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:EIIP.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:EIIP.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:EIIP.Compression.InflaterHuffmanTree.GetSymbol(EIIP.Compression.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:EIIP.Compression.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the GZipInputStream
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterInputStream.buf">
            <summary>
            Byte array used for buffering input.
            </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterInputStream.len">
            <summary>
            Size of buffer <see cref="F:EIIP.Compression.InflaterInputStream.buf"></see>
            </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:EIIP.Compression.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.#ctor(System.IO.Stream,EIIP.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.#ctor(System.IO.Stream,EIIP.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:EIIP.Compression.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.FillInputBuffer">
            <summary>
            Fill input buffer with a chunk of data.
            </summary>		
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:System.Exception">
            Stream ends early
            </exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.ReadByte">
             <summary>
             Reads one byte of decompressed data.
            
             The byte is baseInputStream the lower 8 bits of the int.
             </summary>
             <returns>
             The byte read cast to an int, or -1 on end of stream.
             </returns>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name="b">
            The array to read and decompress data into
            </param>
            <param name="off">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:System.Exception">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="n">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is zero or less
            </exception>
        </member>
        <member name="F:EIIP.Compression.InflaterInputStream.cryptbuffer">
            <summary>
            A buffer used for decrypting data.  Used to hold Zip crypto header.
            </summary>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.DecryptByte">
            <summary>
            Decrypt a single byte
            </summary>
            <returns>plain text byte value</returns>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.DecryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypt cipher text block, updating keys
            </summary>
            <param name="buf">Data to decrypt</param>
            <param name="off">Offset of first byte to process</param>
            <param name="len">Number of bytes to process</param>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.InitializePassword(System.String)">
            <summary>
            Initialise the decryption keys
            </summary>
            <param name="password">The password used to initialise the keys</param>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.UpdateKeys(System.Byte)">
            <summary>
            Update the decryption keys
            </summary>
            <param name="ch">Character to update the keys with</param>
        </member>
        <member name="M:EIIP.Compression.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:EIIP.Compression.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:EIIP.Compression.InflaterInputStream.BufferReadSize">
            <summary>
            Sets the size of chunks to read from the input stream
            0 means as larger as possible.
            </summary>
            <remarks>
            Used to handle decryption where the length of stream is unknown.
            </remarks>
        </member>
        <member name="T:EIIP.Compression.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.CopyStored(EIIP.Compression.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:EIIP.Compression.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:EIIP.Compression.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:EIIP.Compression.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:EIIP.Compression.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:EIIP.Compression.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:EIIP.Compression.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:EIIP.Compression.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:EIIP.Exceptions.NoticeException">
            <summary>
            通知类型的异常。
            </summary>
        </member>
        <member name="M:EIIP.Exceptions.NoticeException.#ctor">
            <summary>
            初始化 NoticeException 类的新实例。
            </summary>
        </member>
        <member name="M:EIIP.Exceptions.NoticeException.#ctor(System.String)">
            <summary>
            使用通知初始化 NoticeException 类的新实例。
            </summary>
            <param name="notice">通知消息</param>
        </member>
        <member name="M:EIIP.Exceptions.NoticeException.#ctor(System.String,System.Exception)">
            <summary>
            使用通知初始化 NoticeException 类的新实例。
            </summary>
            <param name="notice">通知消息</param>
            <param name="innerException">导致当前异常的异常</param>
        </member>
        <member name="T:EIIP.Helper.AppSettings">
            <summary>
            提供应用程序设置的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Set(System.String,System.Int32)">
            <summary>
            设置应用程序设置中某个项的值。
            </summary>
            <param name="key">要向其添加新值的项的键。</param>
            <param name="defValue">要添加到指定项的新值。</param>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Set(System.String,System.Int64)">
            <summary>
            设置应用程序设置中某个项的值。
            </summary>
            <param name="key">要向其添加新值的项的键。</param>
            <param name="defValue">要添加到指定项的新值。</param>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Set(System.String,System.String)">
            <summary>
            设置应用程序设置中某个项的值。
            </summary>
            <param name="key">要向其添加新值的项的键。</param>
            <param name="defValue">要添加到指定项的新值。</param>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Set(System.String,System.Boolean)">
            <summary>
            设置应用程序设置中某个项的值。
            </summary>
            <param name="key">要向其添加新值的项的键。</param>
            <param name="defValue">要添加到指定项的新值。</param>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Get(System.String,System.Int32)">
            <summary>
            获取与应用程序设置中的指定键关联的值。
            </summary>
            <param name="key">键</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Get(System.String,System.Int64)">
            <summary>
            获取与应用程序设置中的指定键关联的值。
            </summary>
            <param name="key">键</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Get(System.String,System.String)">
            <summary>
            获取与应用程序设置中的指定键关联的值。
            </summary>
            <param name="key">键</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.AppSettings.Get(System.String,System.Boolean)">
            <summary>
            获取与应用程序设置中的指定键关联的值。
            </summary>
            <param name="key">键</param>
            <param name="defValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.BitHelper">
            <summary>
            高效率的位运算工具类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.BitHelper.POP(System.Int64)">
            <summary>
            获取设置了位的数量。
            </summary>
            <param name="x">要测试的长整型值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.POPArray(System.Int64[],System.Int32,System.Int32)">
            <summary>
            获取长整型数组中设置了位的数量。
            </summary>
            <param name="A">长整型数组</param>
            <param name="wordOffset">数组A的偏移量</param>
            <param name="numWords">长整型数的个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.POPIntersect(System.Int64[],System.Int64[],System.Int32,System.Int32)">
            <summary>
            获取两个长整型数组中同时设置了位的数量。
            </summary>
            <param name="A">长整型数组</param>
            <param name="B">长整型数组</param>
            <param name="wordOffset">数组的偏移量</param>
            <param name="numWords">长整型数的个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.POPUnion(System.Int64[],System.Int64[],System.Int32,System.Int32)">
            <summary>
            获取两个长整型数组中设置了位的数量。 A | B
            </summary>
            <param name="A">长整型数组</param>
            <param name="B">长整型数组</param>
            <param name="wordOffset">数组的偏移量</param>
            <param name="numWords">长整型数的个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.POPAndNot(System.Int64[],System.Int64[],System.Int32,System.Int32)">
            <summary>
            获取两个长整型数组中设置了位的数量。 A ＆ ~B
            </summary>
            <param name="A">长整型数组</param>
            <param name="B">长整型数组</param>
            <param name="wordOffset">数组的偏移量</param>
            <param name="numWords">长整型数的个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.POPXor(System.Int64[],System.Int64[],System.Int32,System.Int32)">
            <summary>
            获取两个长整型数组中设置了位的数量。 A ^ B
            </summary>
            <param name="A">长整型数组</param>
            <param name="B">长整型数组</param>
            <param name="wordOffset">数组的偏移量</param>
            <param name="numWords">长整型数的个数</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.Helper.BitHelper.ntzTable">
            <summary>
            字节中的尾随零数量表。
            </summary>
        </member>
        <member name="M:EIIP.Helper.BitHelper.ntz(System.Int64)">
            <summary>
            获取64位长整型数值中的尾随零数量。
            </summary>
            <param name="val">64位长整型数值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.ntz2(System.Int64)">
            <summary>
            获取64位长整型数值中的尾随零数量。
            </summary>
            <param name="x">64位长整型数值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.ntz3(System.Int64)">
            <summary>
            获取64位长整型数值中的尾随零数量。
            </summary>
            <param name="x">64位长整型数值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.IsPowerOfTwo(System.Int32)">
            <summary>
            测试指定值是否是2的幂或零。
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.IsPowerOfTwo(System.Int64)">
            <summary>
            测试指定值是否是2的幂或零。
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.NextHighestPowerOfTwo(System.Int32)">
            <summary>
            获取最近一个不小于指定值的2的幂值。若指定值是2的幂或零，则直接返回该值。
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.BitHelper.NextHighestPowerOfTwo(System.Int64)">
            <summary>
            获取最近一个不小于指定值的2的幂值。若指定值是2的幂或零，则直接返回该值。
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.CacheHelper">
            <summary>
            用于非Web场景的缓存助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.CacheHelper.NoAbsoluteExpiration">
            <summary>
            指示项从不到期。
            </summary>
        </member>
        <member name="F:EIIP.Helper.CacheHelper.NoSlidingExpiration">
            <summary>
            禁用可调到期。
            </summary>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTag(System.String,System.String,System.Object,System.DateTime)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="expiresAt">缓存项的过期时间</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTag(System.String,System.String,System.Object,System.TimeSpan)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="validFor">缓存项失效的时间间隔</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTag(EIIP.Type.CacheTag,System.String,System.Object,System.DateTime)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="expiresAt">缓存项的过期时间</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTag(EIIP.Type.CacheTag,System.String,System.Object,System.TimeSpan)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="validFor">缓存项失效的时间间隔</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTag(EIIP.Type.CacheTag,System.String,System.Object)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTag(System.String,System.String,System.Object)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.GetTag(System.String,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.GetTag``1(System.String,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.GetTag(EIIP.Type.CacheTag,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.GetTag``1(EIIP.Type.CacheTag,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.RemoveTag(System.String,System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.RemoveTag(System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.RemoveTag(EIIP.Type.CacheTag,System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.RemoveTag(EIIP.Type.CacheTag)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTagGBL(System.String,System.Object,System.DateTime)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="expiresAt">缓存项的过期时间</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTagGBL(System.String,System.Object,System.TimeSpan)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="validFor">缓存项失效的时间间隔</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddTagGBL(System.String,System.Object)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.GetTagGBL(System.String)">
            <summary>
            从分布式缓存中获取指定缓存项(全局标签)。未找到返回null。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.GetTagGBL``1(System.String)">
            <summary>
            从分布式缓存中获取指定缓存项(全局标签)。未找到返回null或该类型缺省值。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.RemoveTagGBL(System.String)">
            <summary>
            从分布式缓存中移除指定缓存项(全局标签)。成功返回true。
            </summary>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.RemoveGBL">
            <summary>
            从分布式缓存中移除所有(全局标签)缓存项。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="F:EIIP.Helper.CacheHelper.m_MemcachedClient">
            <summary>
            分布式缓存客户端。
            </summary>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.AddLoginUserGuest(EIIP.Framework.User.UserSkeleton)">
            <summary>
            向缓存池中插入来宾登录帐户对象。
            </summary>
            <param name="user">要插入缓存中的来宾登录帐户对象。</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.Get(EIIP.Framework.User.UserSkeleton,System.Type)">
            <summary>
            从缓存池中检索缓存项。返回检索到的缓存项，未找到则返回null。
            </summary>
            <param name="user">登录用户实例</param>
            <param name="t">关联类型</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.Get``1(EIIP.Framework.User.UserSkeleton,System.Type)">
            <summary>
            从缓存池中检索缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="user">登录用户实例</param>
            <param name="t">关联类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.Get(System.String)">
            <summary>
            从缓存池中检索缓存项。返回检索到的缓存项，未找到则返回null。
            </summary>
            <param name="cacheKey">要检索的缓存项的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.Get``1(System.String)">
            <summary>
            从缓存池中检索缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.Remove(EIIP.Framework.User.UserSkeleton,System.Type)">
            <summary>
            从缓存池中移除缓存项。
            </summary>
            <param name="user">登录用户实例</param>
            <param name="t">关联类型</param>
        </member>
        <member name="M:EIIP.Helper.CacheHelper.Remove(System.String)">
            <summary>
            从缓存池中移除缓存项。
            </summary>
            <param name="cacheKey">要检索的缓存项的键。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.CacheHelper.MemcachedClient">
            <summary>
            获取分布式缓存客户端。
            </summary>
        </member>
        <member name="P:EIIP.Helper.CacheHelper.MemcachedEnable">
            <summary>
            获取一个值，该值指示分布式缓存是否启用。
            </summary>
        </member>
        <member name="T:EIIP.Helper.SecurityHelper">
            <summary>
            提供关于安全与验证的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.SecurityHelper.LoginUserEncode(EIIP.Core.Contract.LoginUser)">
            <summary>
            加密个人信息。
            </summary>
            <param name="user">个人信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SecurityHelper.LoginUserDecode(System.String,System.Boolean,System.String@)">
            <summary>
            解密个人信息。失败返回null。
            </summary>
            <param name="encodeString">个人信息加密字串</param>
            <param name="verifyDS">是否验证签名</param>
            <param name="error">当无法解密时，返回错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SecurityHelper.LoginUserDecode(System.String,System.String@)">
            <summary>
            解密个人信息。失败返回null。
            </summary>
            <param name="encodeStringWithDS">带签名的个人信息加密字串</param>
            <param name="error">当无法解密时，返回错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SecurityHelper.IdentityEncode(System.String,System.String)">
            <summary>
            加密身份信息。
            </summary>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SecurityHelper.IdentityDecode(System.String,System.String@,System.String@)">
            <summary>
            解密身份信息。
            </summary>
            <param name="enc">加密字串</param>
            <param name="userName">返回用户名</param>
            <param name="password">返回密码</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.WebHelper">
            <summary>
            Web助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WebHelper.FILE_CACHEPOOL_SIZE">
            <summary>
            缓存池默认大小（10K）
            </summary>
        </member>
        <member name="F:EIIP.Helper.WebHelper.USER_GLOBAL_GUID_COOKIE_KEY">
            <summary>
            基于Cookie的特定用户的全局缓存键。
            </summary>
        </member>
        <member name="M:EIIP.Helper.WebHelper.UrlPathEncode(System.String)">
            <summary>
            对URL地址(包含路径及查询信息)进行编码。
            </summary>
            <param name="url">URL地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.UrlPathEncode(System.String,System.Boolean)">
            <summary>
            对URL地址进行编码。
            </summary>
            <param name="str">URL地址</param>
            <param name="includeQuery">设置编码范围是否包含查询信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.Base64UrlEncoding(System.String)">
            <summary>
            将Base64字串进行一次URL编码。
            </summary>
            <param name="str">Base64字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.Export2ExcelFile(System.Web.HttpResponse,System.Data.DataTable)">
            <summary>
            导出数据表为Excel文件。
            </summary>
            <param name="response">ASP.NET页面响应</param>
            <param name="tbl">数据表</param>
        </member>
        <member name="M:EIIP.Helper.WebHelper.Export2ExcelFile(System.Web.HttpResponse,System.Data.DataTable,System.String)">
            <summary>
            导出数据表为Excel文件。
            </summary>
            <param name="response">ASP.NET页面响应</param>
            <param name="tbl">数据表</param>
            <param name="fileName">文件名，未设置则会自动生成一个文件名</param>
        </member>
        <member name="M:EIIP.Helper.WebHelper.Export2Html(System.Data.DataTable)">
            <summary>
            导出数据表为HTML格式表格。
            </summary>
            <param name="tbl">数据表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.DownloadFile(System.Web.HttpResponse,System.Web.HttpRequest,System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            处理下载操作。
            </summary>
            <param name="response">ASP.NET页面响应</param>
            <param name="request">ASP.NET页面请求</param>
            <param name="fileName">文件名</param>
            <param name="contentType">文件内容类型</param>
            <param name="content">文件内容</param>
            <param name="boxSize">装箱尺寸,装箱数据位置文件头</param>
            <param name="fileLen">实际文件内容长度</param>
        </member>
        <member name="M:EIIP.Helper.WebHelper.DownloadFile(System.Web.HttpResponse,System.Web.HttpRequest,System.String,System.String,System.Int64)">
            <summary>
            下载（输出）硬盘文件，支持大文件、续传、速度限制。成功返回true。
            </summary>
            <param name="response">ASP.NET页面响应</param>
            <param name="request">ASP.NET页面请求</param>
            <param name="fileName">下载文件名</param>
            <param name="physicalFilePath">物理文件路径，可先使用 EIIP.Helper.FileHelper.MapPath() 方法预处理</param>
            <param name="speed">每秒允许下载的字节数，设置为0表示不限速</param>
            <returns></returns>
            <remarks>Page.ResponseFile(this.Request, this.Response, "temp.dat", fullPhyPath, 100);</remarks>
        </member>
        <member name="M:EIIP.Helper.WebHelper.DownloadFile(System.Web.HttpResponse,System.String)">
            <summary>
            下载（输出）硬盘文件，支持大文件，不支持续传。
            </summary>
            <param name="response">ASP.NET页面响应</param>
            <param name="physicalFilePath">物理文件路径，可先使用 EIIP.Helper.FileHelper.MapPath() 方法预处理</param>
        </member>
        <member name="M:EIIP.Helper.WebHelper.GetUserGlobalGUID(System.Web.UI.Page)">
            <summary>
            获取用户全局GUID。（基于浏览器的用户唯一GUID）
            </summary>
            <param name="page">页面对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.GetUserGlobalGUID(System.Web.UI.Page,System.String)">
            <summary>
            获取用户特定cookie缓存键的GUID。（基于浏览器的用户唯一GUID）
            </summary>
            <param name="page">页面对象</param>
            <param name="cookieKey">cookie缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.GetUserGlobalGUID(System.Web.HttpRequest,System.Web.HttpResponse)">
            <summary>
            获取用户全局GUID。（基于浏览器的用户唯一GUID）
            </summary>
            <param name="request">页面请求对象</param>
            <param name="response">页面响应对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebHelper.GetUserGlobalGUID(System.Web.HttpRequest,System.Web.HttpResponse,System.String)">
            <summary>
            获取用户特定cookie缓存键的GUID。（基于浏览器的用户唯一GUID）
            </summary>
            <param name="request">页面请求对象</param>
            <param name="response">页面响应对象</param>
            <param name="cookieKey">cookie缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Runtime">
            <summary>
            运行时环境。
            </summary>
        </member>
        <member name="F:EIIP.Runtime.Current">
            <summary>
            当前运行时环境。
            </summary>
        </member>
        <member name="M:EIIP.Runtime.ReDetect">
            <summary>
            重新探测运行环境。仅在非正常状态下调用。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Runtime.IsASPX">
            <summary>
            获取一个值，该值指示是否工作在ASP.Net环境中。
            </summary>
        </member>
        <member name="P:EIIP.Runtime.IsWCF">
            <summary>
            获取一个值，该值指示是否工作在WCF环境中。
            </summary>
        </member>
        <member name="P:EIIP.Runtime.IsForms">
            <summary>
            获取一个值，该值指示是否工作在窗体应用环境中。
            </summary>
        </member>
        <member name="P:EIIP.Runtime.AppPath">
            <summary>
            获取应用程序根目录（以"\"结尾）。
            </summary>
        </member>
        <member name="T:EIIP.Framework.AccountInfo">
            <summary>
            登录SQL Server服务器使用的帐套信息。
            </summary>
        </member>
        <member name="T:EIIP.IOptionHandler">
            <summary>
            该接口被用于按属性值初始化实例。
            </summary>
        </member>
        <member name="M:EIIP.IOptionHandler.ActivateOptions">
            <summary>
            激活选项。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_AccountID">
            <summary>
            帐套标识。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_HashCode">
            <summary>
            帐套哈希码。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_Name">
            <summary>
            帐套名称。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_AliasName">
            <summary>
            帐套别名。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_LoginSecure">
            <summary>
            身份验证安全性(集成模式:true,混合模式:false)
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_Server">
            <summary>
            SQL服务器名称
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_DBName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_ConnectTimeout">
            <summary>
            数据库连接超时时间(秒)。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_UserName">
            <summary>
            登录用户
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_Password">
            <summary>
            登录用户密码
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.SortPRI">
            <summary>
            排序优先级
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.Visible">
            <summary>
            指示是否隐藏。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_PollInterval">
            <summary>
            消息轮询时间间隔（秒）
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_ProductTypeID">
            <summary>
            适用产品类型ID
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_ConnString">
            <summary>
            连接字串。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.Data">
            <summary>
            扩展数据。版本升级该值不能为空。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_UserRepository">
            <summary>
            登录用户库。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_Owner">
            <summary>
            当前登录帐套集。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_RemovedUserInfoCollection">
            <summary>
            已删除用户信息集合
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.m_SqlHelper">
            <summary>
            Sql助手类
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfo.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.#ctor(System.String,System.String)">
            <summary>
            以集成身份验证模式实例化登录信息
            </summary>
            <param name="server">SQL服务器</param>
            <param name="dbName">数据库名称</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            以SQL登录验证模式实例化登录信息
            </summary>
            <param name="server">SQL服务器</param>
            <param name="dbName">数据库名称</param>
            <param name="userName">登录用户</param>
            <param name="password">登录用户密码</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            以SQL登录验证模式实例化登录信息
            </summary>
            <param name="server">SQL服务器</param>
            <param name="dbName">数据库名称</param>
            <param name="userName">登录用户</param>
            <param name="password">登录用户密码</param>
            <param name="secure">指示是否采用Windows集成验证</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            以SQL登录验证模式实例化登录信息
            </summary>
            <param name="server">SQL服务器</param>
            <param name="dbName">数据库名称</param>
            <param name="userName">登录用户</param>
            <param name="password">登录用户密码</param>
            <param name="secure">指示是否采用Windows集成验证</param>
            <param name="connTimeout">数据库连接超时时间</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.ToString">
            <summary>
            获取帐套名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.UpdateFrom(EIIP.Framework.AccountInfo)">
            <summary>
            从指定登录帐套信息中更新当前帐套数据。
            </summary>
            <param name="info">登录帐套信息</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.Equals(System.Object)">
            <summary>
            比较两实例是否相等。
            </summary>
            <param name="obj">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.GetHashCode">
            <summary>
            返回当前帐套实例的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用需要将目标序列化所需的数据填充
            </summary>
            <param name="info">要填充数据的SerializationInfo</param>
            <param name="context">此序列化的目标</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
            <param name="info">填充数据的SerializationInfo</param>
            <param name="context">被序列化的源</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.ActivateOptions">
            <summary>
            激活选项
            </summary>
        </member>
        <member name="M:EIIP.Framework.AccountInfo.CompareTo(System.Object)">
            <summary>
            与另一实例进行比较。
            </summary>
            <param name="obj">数据库信息对象</param>
            <returns></returns>
            <remarks>按优先级排序 Array.Sort(aryDataBaseInfos)</remarks>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.AccountID">
            <summary>
            获取帐套标识。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.Name">
            <summary>
            获取或设置帐套名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.AliasName">
            <summary>
            获取或设置帐套别名。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.LoginSecure">
            <summary>
            获取或设置身份验证安全性(集成模式:true,混合模式:false)
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.Server">
            <summary>
            获取或设置SQL服务器名称
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.DBName">
            <summary>
            获取或设置数据库名称
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.ConnectTimeout">
            <summary>
            获取或设置数据库连接超时时间(秒)。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.UserName">
            <summary>
            获取或设置登录用户
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.Password">
            <summary>
            获取或设置登录用户密码
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.PollInterval">
            <summary>
            获取或设置消息轮询时间间隔（秒）
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.ProductTypeID">
            <summary>
            获取或设置适用产品类型ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.ConnectString">
            <summary>
            获取连接字串。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.UserRepository">
            <summary>
            获取或设置登录用户库。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.Owner">
            <summary>
            获取或设置当前登录帐套集。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.RemovedUserInfoCollection">
            <summary>
            获取已删除用户信息集合。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfo.SqlHelper">
            <summary>
            获取Sql助手类。
            </summary>
        </member>
        <member name="T:EIIP.Framework.AccountInfoCollection">
            <summary>
            登录帐套信息集合。
            </summary>
        </member>
        <member name="F:EIIP.Framework.AccountInfoCollection.dictionary">
            <summary>
            按键排序的字典
            </summary>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.#ctor">
            <summary>
            实例化登录帐套信息集合。
            </summary>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.#ctor(EIIP.Framework.AccountInfoCollection)">
            <summary>
            实例化指定登录帐套信息集合。
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.GetAccountInfo(System.String)">
            <summary>
            获取指定帐套标识的登录帐套信息。不存在返回null。
            </summary>
            <param name="accountID">帐套标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Add(System.Object)">
            <summary>
            添加登录帐套信息。(支持XML序列化）
            </summary>
            <param name="item">登录帐套信息对象。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Add(EIIP.Framework.AccountInfo)">
            <summary>
            添加登录帐套信息。
            </summary>
            <param name="item">登录帐套信息对象。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Insert(System.Int32,EIIP.Framework.AccountInfo)">
            <summary>
            在指定索引位置插入登录帐套信息。
            </summary>
            <param name="index">索引</param>
            <param name="item">登录帐套信息</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Remove(System.String)">
            <summary>
            从集合中移除指定帐套标识的登录帐套信息。
            </summary>
            <param name="accountID">帐套标识</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Remove(EIIP.Framework.AccountInfo)">
            <summary>
            从集合中移除指定登录帐套信息。
            </summary>
            <param name="item">登录帐套信息</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.IndexOf(EIIP.Framework.AccountInfo)">
            <summary>
            确定集合中特定登录帐套信息项的索引。 
            </summary>
            <param name="item">登录帐套信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Contains(EIIP.Framework.AccountInfo)">
            <summary>
            确定集合中是否包含特定的值。
            </summary>
            <param name="item">登录帐套信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Contains(System.String)">
            <summary>
            确定集合中是否包含特定的值。
            </summary>
            <param name="accontID">登录帐套标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.CopyTo(EIIP.Framework.AccountInfo[],System.Int32)">
            <summary>
            从特定索引处开始将集合的元素复制到数组中。 
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维数组。</param>
            <param name="index">数组中的从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.Set(EIIP.Framework.AccountInfo)">
            <summary>
            设置登录帐套信息。
            </summary>
            <param name="item">登录帐套信息</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnClear">
            <summary>
            清除集合成员引用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnClearComplete">
            <summary>
            移除所有成员。
            </summary>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            在向集合实例中插入新登录帐套信息之前，进行存在性检查。若已存在则抛出错误。
            </summary>
            <param name="index">从零开始的索引，在该处插入 value。</param>
            <param name="value">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            在向集合实例中插入新登录帐套信息之后，进行元素与集合之间的引用设置。若已存在则抛出错误。
            </summary>
            <param name="index">从零开始的索引，在该处插入 value。</param>
            <param name="value">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            在向集合实例中移除元素之后，进行元素与集合之间的引用取消操作。
            </summary>
            <param name="index">value 在集合中从零开始的索引。</param>
            <param name="value">在 index 处的集合中元素。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnValidate(System.Object)">
            <summary>
            当验证值时执行类型判定。
            </summary>
            <param name="value">要添加的登录帐套信息对象</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            当在集合实例中设置值后，用新值更新集合中的字典。 
            </summary>
            <param name="index">从零开始的索引，可在该位置找到 oldValue。</param>
            <param name="oldValue">要用 newValue 替换的值。</param>
            <param name="newValue">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.AccountInfoCollection.RemoveItem(EIIP.Framework.AccountInfo)">
            <summary>
            移除指定登录帐套信息。
            </summary>
            <param name="olditem">移除的登录帐套信息</param>
        </member>
        <member name="P:EIIP.Framework.AccountInfoCollection.Item(System.Int32)">
            <summary>
            获取指定索引的登录帐套信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.AccountInfoCollection.Item(System.String)">
            <summary>
            获取或设置指定登录帐套。不存在返回null。
            </summary>
        </member>
        <member name="T:EIIP.Type.BitVector">
            <summary>
            以位存储的向量类。提供一个以指定数量的位内存存储布尔值和字节数据的类。
            </summary>
        </member>
        <member name="F:EIIP.Type.BitVector.bits">
            <summary>
            存储的位数据。
            </summary>
        </member>
        <member name="F:EIIP.Type.BitVector.size">
            <summary>
            向量中位的数量。
            </summary>
        </member>
        <member name="F:EIIP.Type.BitVector.count">
            <summary>
            设置为1的位的数量。
            </summary>
        </member>
        <member name="F:EIIP.Type.BitVector.BYTE_COUNTS">
            <summary>
            缓存字节中设置为1的位的数量。
            </summary>
        </member>
        <member name="M:EIIP.Type.BitVector.#ctor">
            <summary>
            仅供继承类调用，并由继继承类负责初始化 size 及 bits 数据。
            </summary>
        </member>
        <member name="M:EIIP.Type.BitVector.#ctor(System.Int32)">
            <summary>
            实例化以位存储的向量。
            </summary>
            <param name="n">要使用的位的最大数量</param>
        </member>
        <member name="M:EIIP.Type.BitVector.GetAndSet(System.Int32)">
            <summary>
            设置指定位。返回值指示该位是否早已设置。
            </summary>
            <param name="bit">要设置的位</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.BitVector.Size">
            <summary> 
            获取向量中位的数量。
            </summary>
        </member>
        <member name="P:EIIP.Type.BitVector.Count">
            <summary>
            获取设置为1的位的数量。
            </summary>
        </member>
        <member name="P:EIIP.Type.BitVector.Item(System.Int32)">
            <summary>
            获取或设置位。
            </summary>
        </member>
        <member name="T:EIIP.Type.CacheTag">
            <summary>
            指示缓存某一标签。
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.Base">
            <summary>
            基础数据
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.Common">
            <summary>
            通用数据
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.Workflow">
            <summary>
            工作流
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.AD">
            <summary>
            广告
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.Site">
            <summary>
            子站
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="F:EIIP.Type.CacheTag.Chart">
            <summary>
            图表
            </summary>
        </member>
        <member name="T:EIIP.Type.LogonWay">
            <summary>
            指示某一登录方式。
            </summary>
        </member>
        <member name="F:EIIP.Type.LogonWay.UserName">
            <summary>
            用户帐户(默认)。
            </summary>
        </member>
        <member name="F:EIIP.Type.LogonWay.Mobile">
            <summary>
            手机号
            </summary>
        </member>
        <member name="F:EIIP.Type.LogonWay.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="F:EIIP.Type.LogonWay.IDCard">
            <summary>
            身份证
            </summary>
        </member>
        <member name="F:EIIP.Type.LogonWay.Serial">
            <summary>
            串号
            </summary>
        </member>
        <member name="F:EIIP.Type.LogonWay.Other">
            <summary>
            其它方式
            </summary>
        </member>
        <member name="T:EIIP.Type.ReliableSkeleton">
            <summary>
            可靠性基础类。
            </summary>
        </member>
        <member name="F:EIIP.Type.ReliableSkeleton.VEMSG">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Type.ReliableSkeleton.VEMSGDS">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Type.ReliableSkeleton.VEMTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Type.ReliableSkeleton.VEMVer">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Type.WebSite.SkinSettings">
            <summary>
            网站皮肤设置集类。
            </summary>
        </member>
        <member name="M:EIIP.Type.WebSite.SkinSettings.#ctor">
            <summary>
            实例化网站皮肤设置集。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.SkinSettings.Settings">
            <summary>
            获取或设置皮肤设置集。
            </summary>
        </member>
        <member name="T:EIIP.Type.WebSite.Skin">
            <summary>
            网站皮肤设置类。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.TempletIndex">
            <summary>
            获取或设置模板索引。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.MinMemberRankIndex">
            <summary>
            获取或设置能使用的最低会员级别索引。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.Name">
            <summary>
            获取或设置皮肤名称。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.Remark">
            <summary>
            获取或设置皮肤简介。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.BasePath">
            <summary>
            模板路径(相对根目录)
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.CreateTime">
            <summary>
            获取或设置创建时间。
            </summary>
        </member>
        <member name="P:EIIP.Type.WebSite.Skin.TypeID">
            <summary>
            获取或设置皮肤类型。
            </summary>
        </member>
        <member name="T:EIIP.Type.PluginInfo">
            <summary>
            插件信息基类。
            </summary>
        </member>
        <member name="T:EIIP.Type.PluginInfoBase">
            <summary>
            插件信息基类。
            </summary>
        </member>
        <member name="M:EIIP.Type.PluginInfoBase.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化插件信息基类。
            </summary>
            <param name="key">键名</param>
            <param name="name">插件名称。</param>
            <param name="classTypeName">
            要获取的类型的程序集限定名称。请参见 System.Type.AssemblyQualifiedName。
            如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。
            </param>
        </member>
        <member name="P:EIIP.Type.PluginInfoBase.Key">
            <summary>
            插件键名。
            </summary>
        </member>
        <member name="P:EIIP.Type.PluginInfoBase.Name">
            <summary>
            插件名称。
            </summary>
        </member>
        <member name="P:EIIP.Type.PluginInfoBase.ClassTypeName">
            <summary>
            要获取的类型的程序集限定名称。请参见 System.Type.AssemblyQualifiedName。
            如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。
            </summary>
        </member>
        <member name="M:EIIP.Type.PluginInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化插件信息基类。
            </summary>
            <param name="key">键名</param>
            <param name="name">插件名称。</param>
            <param name="classTypeName">
            要获取的类型的程序集限定名称。请参见 System.Type.AssemblyQualifiedName。
            如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。
            </param>
        </member>
        <member name="M:EIIP.Type.PluginInfo.#ctor(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            实例化插件信息基类。
            </summary>
            <param name="key">键名</param>
            <param name="name">插件名称。</param>
            <param name="reusable">设置是否可以重用插件实例</param>
            <param name="plugin">插件实例</param>
        </member>
        <member name="M:EIIP.Type.PluginInfo.LoadPlugin">
            <summary>
            加载插件实例。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.PluginInfo.Plugin">
            <summary>
            获取插件实例。
            </summary>
        </member>
        <member name="P:EIIP.Type.PluginInfo.IsReusable">
            <summary>
            获取一个值，该值指示是否可以重用插件实例。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.HTMLFilterStream">
            <summary>
            静态网页过滤器流。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.#ctor(System.IO.Stream,System.String)">
            <summary>
            实例化静态网页过滤器流。
            </summary>
            <param name="respStream">输出响应流</param>
            <param name="filePath">静态文件路径</param>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。返回读入缓冲区中的总字节数。
            </summary>
            <param name="buffer">
            字节数组。此方法返回时，该缓冲区包含指定的字符数组，
            该数组的 offset 和 (offset + count -1) 之间的值由从当前源中读取的字节替换。</param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。返回当前流中的新位置。
            </summary>
            <param name="offset">相对于 origin 参数的字节偏移量。</param>
            <param name="origin">System.IO.SeekOrigin 类型的值，指示用于获取新位置的参考点。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="value">所需的当前流的长度（以字节表示）。</param>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 count 个字节从 buffer 复制到当前流。</param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.Flush">
            <summary>
            将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.HTMLFilterStream.Dispose(System.Boolean)">
            <summary>
            释放由 System.IO.Stream 使用的所有资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:EIIP.URLRewriter.HTMLFilterStream.CanRead">
            <summary>
            获取指示当前流是否支持读取的值。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.HTMLFilterStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.HTMLFilterStream.CanWrite">
            <summary>
            获取指示当前流是否支持写入功能的值。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.HTMLFilterStream.Length">
            <summary>
            获取用字节表示的流长度。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.HTMLFilterStream.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.HtmlHandler">
            <summary>
            HTML文件的Http处理器。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.HtmlHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            获取物理路径，判断文件夹中有没有存在这个文件。
            不存在的话，就会调用FilterStream类进行创建，并写入内容；存在的话，就直接显示页面。
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:EIIP.URLRewriter.HtmlHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。总是返回false。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Web.HtmlPageBase">
            <summary>
            可静态化（HTML）的Web窗体基类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Web.HtmlPageBase.ProcessRequest(System.Web.HttpContext)">
            <summary>
            获取物理路径，判断文件夹中有没有存在这个文件。
            不存在的话，就会调用FilterStream类进行创建,并写入内容；存在的话，就直接显示页面
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:EIIP.Framework.Web.HtmlPageBase.HTMLPageLifeCycle">
            <summary>
            获取HTML页面的生存期。单位为秒。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.ConfigurationHelper">
            <summary>
            配置助手类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.ConfigurationHelper.CheckForInterface(System.Type,System.Type)">
            <summary>
            检查指定类型是否实现了指定接口类型。
            </summary>
            <param name="type">要检查的类型</param>
            <param name="interfaceType">接口类型。</param>
        </member>
        <member name="T:EIIP.Caching.Configuration.EndPointElement">
            <summary>
            提供一个包含Memcached网络端点的配置元素类。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.EndPointElement.Address">
            <summary>
            获取或设置节点IP地址。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.EndPointElement.Port">
            <summary>
            获取或设置节点端口。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.EndPointElement.EndPoint">
            <summary>
            获取当前网络端点实例。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.EndPointElement.IPAddressValidator">
            <summary>
            IP地址验证器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.EndPointElement.IPAddressValidator.CanValidate(System.Type)">
            <summary>
            根据类型确定对象是否可验证。
            </summary>
            <param name="type">对象类型。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Configuration.EndPointElement.IPAddressValidator.Validate(System.Object)">
            <summary>
            确定对象的值是否有效。
            </summary>
            <param name="value">对象值。</param>
        </member>
        <member name="T:EIIP.Caching.Configuration.EndPointElementCollection">
            <summary>
            网络端点元素集合类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.EndPointElementCollection.CreateNewElement">
            <summary>
            创建一个新的包含Memcached网络端点的配置元素的实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Configuration.EndPointElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            获取指定配置元素的元素键。
            </summary>
            <param name="element">要为其返回键的Memcached网络端点的配置元素。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Configuration.EndPointElementCollection.ToIPEndPointCollection">
            <summary>
            将集合转换为网络端点列表实例。辅助方法。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Configuration.IMemcachedClientConfiguration">
            <summary>
            定义Memcached客户端的配置接口。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.IMemcachedClientConfiguration.Servers">
            <summary>
            获取Memcached服务器列表。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.IMemcachedClientConfiguration.SocketPool">
            <summary>
            获取Socket池的配置实例。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.IMemcachedClientConfiguration.KeyTransformer">
            <summary>
            获取或设置缓存项键的转译器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.IMemcachedClientConfiguration.NodeLocator">
            <summary>
            获取或设置用于将缓存项对应至Memcached节点的定位器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.IMemcachedClientConfiguration.Transcoder">
            <summary>
            获取或设置序列化转换器的类型。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.InterfaceValidator">
            <summary>
            接口验证器类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.InterfaceValidator.#ctor(System.Type)">
            <summary>
            实例化指定类型的接口验证器。
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:EIIP.Caching.Configuration.InterfaceValidator.CanValidate(System.Type)">
            <summary>
            根据类型确定对象是否可验证。
            </summary>
            <param name="type">对象类型。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Configuration.InterfaceValidator.Validate(System.Object)">
            <summary>
            确定对象的值是否有效。
            </summary>
            <param name="value">对象值。</param>
        </member>
        <member name="T:EIIP.Caching.Configuration.InterfaceValidatorAttribute">
            <summary>
            接口验证器特性类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.InterfaceValidatorAttribute.#ctor(System.Type)">
            <summary>
            实例化指定类型的接口验证器特性。
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="P:EIIP.Caching.Configuration.InterfaceValidatorAttribute.ValidatorInstance">
            <summary>
            获取接口验证程序属性实例。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.ISocketPoolConfiguration">
            <summary>
            为Memcached客户端定义一个Sochet池的配置接口。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.ISocketPoolConfiguration.MinPoolSize">
            <summary>
            获取或设置每服务器Sochet池中的最小数量。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.ISocketPoolConfiguration.MaxPoolSize">
            <summary>
            获取或设置每服务器Sochet池中的最大数量。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.ISocketPoolConfiguration.ConnectionTimeout">
            <summary>
            获取或设置连接超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.ISocketPoolConfiguration.ReceiveTimeout">
            <summary>
            获取或设置接收超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.ISocketPoolConfiguration.DeadTimeout">
            <summary>
            获取或设置检查一个服务器是否当机的超时时间。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.MemcachedClientConfiguration">
            <summary>
            Memcached客户端配置类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.MemcachedClientConfiguration.#ctor">
            <summary>
            实例化Memcached客户端配置。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.Servers">
            <summary>
            获取Memcached服务器网络端口列表
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.SocketPool">
            <summary>
            获取Socket池配置接口实例。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.KeyTransformer">
            <summary>
            获取或设置缓存项键的转译器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.NodeLocator">
            <summary>
            获取或设置用于将缓存项对应至Memcached节点的定位器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.Transcoder">
            <summary>
            获取或设置序列化转换器的类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.EIIP#Caching#Configuration#IMemcachedClientConfiguration#Servers">
            <summary>
            获取池中Memcached服务器列表。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.EIIP#Caching#Configuration#IMemcachedClientConfiguration#SocketPool">
            <summary>
            获取Socket池的配置实例。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.EIIP#Caching#Configuration#IMemcachedClientConfiguration#KeyTransformer">
            <summary>
            获取或设置缓存项键的转译器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.EIIP#Caching#Configuration#IMemcachedClientConfiguration#NodeLocator">
            <summary>
            获取或设置用于将缓存项对应至Memcached节点的定位器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration.EIIP#Caching#Configuration#IMemcachedClientConfiguration#Transcoder">
            <summary>
            获取或设置序列化转换器的类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration._SocketPoolConfig.EIIP#Caching#Configuration#ISocketPoolConfiguration#MinPoolSize">
            <summary>
            获取或设置Socket池的最小尺寸。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration._SocketPoolConfig.EIIP#Caching#Configuration#ISocketPoolConfiguration#MaxPoolSize">
            <summary>
            获取或设置Socket池的最大尺寸。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration._SocketPoolConfig.EIIP#Caching#Configuration#ISocketPoolConfiguration#ConnectionTimeout">
            <summary>
            获取或设置连接超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration._SocketPoolConfig.EIIP#Caching#Configuration#ISocketPoolConfiguration#ReceiveTimeout">
            <summary>
            获取或设置接收超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientConfiguration._SocketPoolConfig.EIIP#Caching#Configuration#ISocketPoolConfiguration#DeadTimeout">
            <summary>
            获取或设置检查一个服务器是否当机的超时时间。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.MemcachedClientSection">
            <summary>
            Memcached客户端配置节类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.MemcachedClientSection.PostDeserialize">
            <summary>
            反序列化后调用。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.Servers">
            <summary>
            获取Memcached服务器列表。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.SocketPool">
            <summary>
            获取或设置Socket池的配置实例。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.KeyTransformer">
            <summary>
            获取或设置缓存项键的转译器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.NodeLocator">
            <summary>
            获取或设置用于将缓存项对应至Memcached节点的定位器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.Transcoder">
            <summary>
            获取或设置序列化转换器的类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.EIIP#Caching#Configuration#IMemcachedClientConfiguration#Servers">
            <summary>
            获取Memcached服务器列表。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.EIIP#Caching#Configuration#IMemcachedClientConfiguration#SocketPool">
            <summary>
            获取Socket池的配置实例。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.EIIP#Caching#Configuration#IMemcachedClientConfiguration#KeyTransformer">
            <summary>
            获取或设置缓存项键的转译器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.EIIP#Caching#Configuration#IMemcachedClientConfiguration#NodeLocator">
            <summary>
            获取或设置用于将缓存项对应至Memcached节点的定位器类型。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.MemcachedClientSection.EIIP#Caching#Configuration#IMemcachedClientConfiguration#Transcoder">
            <summary>
            获取或设置序列化转换器的类型。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Configuration.SocketPoolElement">
            <summary>
            Memcached服务器的Socket池配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Configuration.SocketPoolElement.PostDeserialize">
            <summary>
            反序列化后调用。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.MinPoolSize">
            <summary>
            获取或设置每服务器Sochet池中的最小数量。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.MaxPoolSize">
            <summary>
            获取或设置每服务器Sochet池中的最大数量。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.ConnectionTimeout">
            <summary>
            获取或设置连接超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.ReceiveTimeout">
            <summary>
            获取或设置接收超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.DeadTimeout">
            <summary>
            获取或设置检查一个服务器是否当机的超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.EIIP#Caching#Configuration#ISocketPoolConfiguration#MinPoolSize">
            <summary>
            获取或设置每服务器Sochet池中的最小数量。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.EIIP#Caching#Configuration#ISocketPoolConfiguration#MaxPoolSize">
            <summary>
            获取或设置每服务器Sochet池中的最大数量。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.EIIP#Caching#Configuration#ISocketPoolConfiguration#ConnectionTimeout">
            <summary>
            获取或设置连接超时时间。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Configuration.SocketPoolElement.EIIP#Caching#Configuration#ISocketPoolConfiguration#DeadTimeout">
            <summary>
            获取或设置检查一个服务器是否当机的超时时间。
            </summary>
        </member>
        <member name="T:EIIP.Reflection.FastActivator">
            <summary>
            实现一个用于动态对象生成的快速对象工厂。
            工厂的动态生成会使用请求类型的 new() 构造器。比使用 Activator 快很多，但仅支持无参构造器。
            </summary>
        </member>
        <member name="M:EIIP.Reflection.FastActivator.CreateInstance(System.Type)">
            <summary>
            使用工厂而不是反射快速创建指定类型的对象实例。非公共类型会直接调用 Activator.CreateInstance(type)。
            </summary>
            <param name="type">要创建实例对象的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Reflection.FastActivator.CreateInstance``1">
            <summary>
            使用工厂而不是反射快速创建指定类型的对象实例。非公共类型会直接调用 Activator.CreateInstance[T](type)。
            </summary>
            <typeparam name="T">要创建实例对象的类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.FNV64">
            <summary>
            64位Fowler-Noll-Vo加密哈希类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.FNV64.#ctor">
            <summary>
            实例化FNV64加密哈希。
            </summary>
        </member>
        <member name="M:EIIP.Collections.FNV64.Initialize">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.FNV64.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将写入对象的数据路由到哈希算法以计算哈希值。
            </summary>
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:EIIP.Collections.FNV64.HashFinal">
            <summary>
            计算所得的哈希代码。在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.FNV1a">
            <summary>
            FNV1a加密哈希类。
            </summary>
        </member>
        <member name="F:EIIP.Collections.FNV1a.CurrentHashValue">
            <summary>
            当前哈希值。
            </summary>
        </member>
        <member name="M:EIIP.Collections.FNV1a.#ctor">
            <summary>
            实例化FNV1a加密哈希。
            </summary>
        </member>
        <member name="M:EIIP.Collections.FNV1a.Initialize">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.FNV1a.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将写入对象的数据路由到哈希算法以计算哈希值。
            </summary>
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:EIIP.Collections.FNV1a.HashFinal">
            <summary>
            计算所得的哈希代码。在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.ModifiedFNV">
            <summary>
            仅适用于32位的改进型FNV哈希加密类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ModifiedFNV.HashFinal">
            <summary>
            计算所得的哈希代码。在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Reflection.IFastObjectFacory">
            <summary>
            定义支持 FastActivator 快速对象工厂的接口。
            </summary>
        </member>
        <member name="M:EIIP.Reflection.IFastObjectFacory.CreateInstance">
            <summary>
            创建实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.InterlockedQueue`1">
            <summary>
            非锁定的队列类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.Collections.InterlockedQueue`1.#ctor">
            <summary>
            实例化非锁定的队列。
            </summary>
        </member>
        <member name="M:EIIP.Collections.InterlockedQueue`1.Dequeue(`0@)">
            <summary>
            移除并返回位于队列开始处的对象。成功返回true。
            </summary>
            <param name="value">从队列的开头移除的对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.InterlockedQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到队列的结尾处。
            </summary>
            <param name="value">要添加到队列的对象。该值可以为 null。</param>
        </member>
        <member name="T:EIIP.Collections.InterlockedQueue`1.Node">
            <summary>
            节点类。
            </summary>
        </member>
        <member name="F:EIIP.Collections.InterlockedQueue`1.Node.Value">
            <summary>
            节点值。
            </summary>
        </member>
        <member name="F:EIIP.Collections.InterlockedQueue`1.Node.Next">
            <summary>
            下一节点。
            </summary>
        </member>
        <member name="M:EIIP.Collections.InterlockedQueue`1.Node.#ctor(`0)">
            <summary>
            实例化节点。
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:EIIP.Caching.MemcachedClient">
            <summary>
            Memcached客户端类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.MemcachedClient._TAGKEYPRE">
            <summary>
            标签键前缀。
            </summary>
        </member>
        <member name="F:EIIP.Caching.MemcachedClient.Infinite">
            <summary>
            提供指示一个缓存项永不过期的一个值。
            </summary>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.#ctor">
            <summary>
            使用默认配置节 (EIIP.Net/memcached) 实例化Memcached客户端。
            </summary>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.#ctor(System.String)">
            <summary>
            使用指定配置节实例化Memcached客户端。
            该重载允许创建多个使用不同池配置的Memcached客户端。
            </summary>
            <param name="sectionName">Memcached客户端配置节名称</param>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.#ctor(EIIP.Caching.Configuration.IMemcachedClientConfiguration)">
            <summary>
            使用指定配置实例化Memcached客户端。
            </summary>
            <param name="configuration">Memcached客户端配置</param>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Remove(System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Get(System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Get``1(System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Increment(System.String,System.UInt32)">
            <summary>
            对指定缓存键的缓存项进行给定数量的增量操作。该操作会自动在服务器上执行。
            返回新值，或在未找到缓存项时返回-1（操作只能工作在非负整数的值上）。
            </summary>
            <remarks>
            缓存项必须在调用该方法前被缓存。缓存项必须以System.String插入，操作只能工作在正整数的值上。
            </remarks>
            <param name="key">要增量的缓存项对应的键</param>
            <param name="amount">客户端想要缓存项增量的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Decrement(System.String,System.UInt32)">
            <summary>
            对指定缓存键的缓存项进行给定数量的减量操作。该操作会自动在服务器上执行。
            返回新值，或在未找到缓存项时返回-1（操作只能工作在非负整数的值上）。
            </summary>
            <remarks>
            缓存项必须在调用该方法前被缓存。缓存项必须以System.String插入，操作只能工作在正整数的值上。
            </remarks>
            <param name="key">要减量的缓存项对应的键</param>
            <param name="amount">客户端想要缓存项减量的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Store(EIIP.Caching.Memcached.StoreMode,System.String,System.Object)">
            <summary>
            以指定缓存键插入对象至分布式缓存，永不过期。成功返回true。
            </summary>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Store(EIIP.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            以指定缓存键插入字节区域（使用内存流区或序列化流）至分布式缓存，永不过期。成功返回true。
            </summary>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Store(EIIP.Caching.Memcached.StoreMode,System.String,System.Object,System.TimeSpan)">
            <summary>
            以指定缓存键插入对象至分布式缓存。成功返回true。
            </summary>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Store(EIIP.Caching.Memcached.StoreMode,System.String,System.Object,System.DateTime)">
            <summary>
            以指定缓存键插入对象至分布式缓存。成功返回true。
            </summary>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Store(EIIP.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            以指定缓存键插入字节区域（使用内存流区或序列化流）至分布式缓存。成功返回true。
            </summary>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Store(EIIP.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32,System.DateTime)">
            <summary>
            以指定缓存键插入字节区域（使用内存流区或序列化流）至分布式缓存。成功返回true。
            </summary>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Append(System.String,System.Byte[])">
            <summary>
            向指定缓存项追加数据。成功返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="data">要存储的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Prepend(System.String,System.Byte[])">
            <summary>
            向指定缓存项的数据前插入数据。成功返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="data">要存储的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64)">
            <summary>
            条件更新缓存项数据，永不过期。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSet(System.String,System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            条件更新缓存项数据，永不过期。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64,System.TimeSpan)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSet(System.String,System.Object,System.UInt64,System.DateTime)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSet(System.String,System.Byte[],System.Int32,System.Int32,System.UInt64,System.TimeSpan)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSet(System.String,System.Byte[],System.Int32,System.Int32,System.UInt64,System.DateTime)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            从分存式缓存中返回多个缓存项，索引与缓存键匹配。
            </summary>
            <param name="keys">缓存键迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Get(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.UInt64}@)">
            <summary>
            从分存式缓存中返回多个缓存项，索引与缓存键匹配。
            </summary>
            <param name="keys">缓存键迭代器</param>
            <param name="casValues">缓存键对应的 CAS 值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.WrapTagEnumerable(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            包装标签迭代。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.GetTag(System.String,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.GetTag``1(System.String,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.RemoveTag(System.String,System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.RemoveTag(System.String)">
            <summary>
            删除标签对应的所有缓存。成功返回true。
            </summary>
            <param name="tag">要删除的标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.IncrementTag(System.String,System.String,System.UInt32)">
            <summary>
            对指定缓存键的缓存项进行给定数量的增量操作。该操作会自动在服务器上执行。
            返回新值，或在未找到缓存项时返回-1（操作只能工作在非负整数的值上）。
            </summary>
            <remarks>
            缓存项必须在调用该方法前被缓存。缓存项必须以System.String插入，操作只能工作在正整数的值上。
            </remarks>
            <param name="tag">标签</param>
            <param name="key">要增量的缓存项对应的键</param>
            <param name="amount">客户端想要缓存项增量的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.DecrementTag(System.String,System.String,System.UInt32)">
            <summary>
            对指定缓存键的缓存项进行给定数量的减量操作。该操作会自动在服务器上执行。
            返回新值，或在未找到缓存项时返回-1（操作只能工作在非负整数的值上）。
            </summary>
            <remarks>
            缓存项必须在调用该方法前被缓存。缓存项必须以System.String插入，操作只能工作在正整数的值上。
            </remarks>
            <param name="tag">标签</param>
            <param name="key">要减量的缓存项对应的键</param>
            <param name="amount">客户端想要缓存项减量的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.StoreTag(System.String,EIIP.Caching.Memcached.StoreMode,System.String,System.Object)">
            <summary>
            以指定缓存键插入对象至分布式缓存，永不过期。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.StoreTag(System.String,EIIP.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            以指定缓存键插入字节区域（使用内存流区或序列化流）至分布式缓存，永不过期。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.StoreTag(System.String,EIIP.Caching.Memcached.StoreMode,System.String,System.Object,System.TimeSpan)">
            <summary>
            以指定缓存键插入对象至分布式缓存。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.StoreTag(System.String,EIIP.Caching.Memcached.StoreMode,System.String,System.Object,System.DateTime)">
            <summary>
            以指定缓存键插入对象至分布式缓存。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.StoreTag(System.String,EIIP.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            以指定缓存键插入字节区域（使用内存流区或序列化流）至分布式缓存。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.StoreTag(System.String,EIIP.Caching.Memcached.StoreMode,System.String,System.Byte[],System.Int32,System.Int32,System.DateTime)">
            <summary>
            以指定缓存键插入字节区域（使用内存流区或序列化流）至分布式缓存。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="mode">设置在缓坡服务器上存储缓存项的模式。</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.AppendTag(System.String,System.String,System.Byte[])">
            <summary>
            向指定缓存项追加数据。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="data">要存储的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.PrependTag(System.String,System.String,System.Byte[])">
            <summary>
            向指定缓存项的数据前插入数据。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="data">要存储的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSetTag(System.String,System.String,System.Object,System.UInt64)">
            <summary>
            条件更新缓存项数据，永不过期。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSetTag(System.String,System.String,System.Byte[],System.Int32,System.Int32,System.UInt64)">
            <summary>
            条件更新缓存项数据，永不过期。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSetTag(System.String,System.String,System.Object,System.UInt64,System.TimeSpan)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSetTag(System.String,System.String,System.Object,System.UInt64,System.DateTime)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSetTag(System.String,System.String,System.Byte[],System.Int32,System.Int32,System.UInt64,System.TimeSpan)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.CheckAndSetTag(System.String,System.String,System.Byte[],System.Int32,System.Int32,System.UInt64,System.DateTime)">
            <summary>
            条件更新缓存项数据。
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，更新存储数据。
            成功更新返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="offset">缓存数据要存储的起始索引位置</param>
            <param name="length">缓存数据要存储的长度</param>
            <param name="cas">由 MultiGet 方法返回的唯一值。</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.GetTag(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            从分存式缓存中返回多个缓存项，索引与缓存键匹配。
            </summary>
            <param name="tag">标签</param>
            <param name="keys">缓存键迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.GetTag(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IDictionary{System.String,System.UInt64}@)">
            <summary>
            从分存式缓存中返回多个缓存项，索引与缓存键匹配。
            </summary>
            <param name="tag">标签</param>
            <param name="keys">缓存键迭代器</param>
            <param name="casValues">缓存键对应的 CAS 值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.FlushAll">
            <summary>
            从分布式缓存中移除所有项。
            </summary>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Stats">
            <summary>
            获取服务器的状态。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.MemcachedClient.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.CommandNotSupportedException">
            <summary>
            定义当不受支持的命令发生时抛出的异常类。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.MemcachedClientException">
            <summary>
            Memcached客户端异常类。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.MemcachedException">
            <summary>
            Memcached异常类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedException.#ctor">
            <summary>
            实例化Memcached异常。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedException.#ctor(System.String)">
            <summary>
            实例化Memcached异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedException.#ctor(System.String,System.Exception)">
            <summary>
            实例化Memcached异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">关联异常</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            实例化Memcached异常。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedClientException.#ctor">
            <summary>
            实例化Memcached客户端异常。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedClientException.#ctor(System.String)">
            <summary>
            实例化Memcached客户端异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedClientException.#ctor(System.String,System.Exception)">
            <summary>
            实例化Memcached客户端异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">关联异常</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedClientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            实例化Memcached客户端异常。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Caching.Memcached.CommandNotSupportedException.#ctor">
            <summary>
            实例化当不受支持的命令发生时抛出的异常。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.CommandNotSupportedException.#ctor(System.String)">
            <summary>
            实例化当不受支持的命令发生时抛出的异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.CommandNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            实例化当不受支持的命令发生时抛出的异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">关联异常</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.CommandNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            实例化当不受支持的命令发生时抛出的异常。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:EIIP.Caching.Memcached.DefaultNodeLocator">
            <summary>
            映射缓存键至Memcached节点的默认定位器。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.IMemcachedNodeLocator">
            <summary>
            定义一个映射缓存键至Memcached节点的定位器接口。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.IMemcachedNodeLocator.Initialize(System.Collections.Generic.IList{EIIP.Caching.Memcached.MemcachedNode})">
            <summary>
            初始化映射缓存键至Memcached节点的定位器。
            </summary>
            <param name="nodes">在配置中定义的memcached节点列表</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.IMemcachedNodeLocator.Locate(System.String)">
            <summary>
            定位指定缓存键。返回Memcached节点。
            </summary>
            <param name="key">要定位的缓存键。</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.Caching.Memcached.DefaultNodeLocator.keys">
            <summary>
            存储所有服务器的缓存键。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.DefaultNodeLocator.servers">
            <summary>
            用于基于键查询服务器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.DefaultNodeLocator.EIIP#Caching#Memcached#IMemcachedNodeLocator#Initialize(System.Collections.Generic.IList{EIIP.Caching.Memcached.MemcachedNode})">
            <summary>
            初始化映射缓存键至Memcached节点的定位器。
            </summary>
            <param name="nodes">在配置中定义的memcached节点列表</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.DefaultNodeLocator.EIIP#Caching#Memcached#IMemcachedNodeLocator#Locate(System.String)">
            <summary>
            定位指定缓存键。返回Memcached节点。
            </summary>
            <param name="key">要定位的缓存键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.DefaultNodeLocator.GenerateKeys(EIIP.Caching.Memcached.MemcachedNode,System.Int32)">
            <summary>
            生成键。
            </summary>
            <param name="node">缓存节点</param>
            <param name="numberOfKeys">键数量</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.IMemcachedKeyTransformer">
            <summary>
            定义转换Memcached缓存键为自定义格式的接口。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.IMemcachedKeyTransformer.Transform(System.String)">
            <summary>
            转换Memcached缓存键为自定义格式。
            </summary>
            <param name="key">要转换的缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.Base64KeyTransformer">
            <summary>
            Base64键的格式化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.Base64KeyTransformer.EIIP#Caching#Memcached#IMemcachedKeyTransformer#Transform(System.String)">
            <summary>
            转换Memcached缓存键为自定义格式。
            </summary>
            <param name="key">要转换的缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.DefaultKeyTransformer">
            <summary>
            默认的键格式化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.DefaultKeyTransformer.EIIP#Caching#Memcached#IMemcachedKeyTransformer#Transform(System.String)">
            <summary>
            转换Memcached缓存键为自定义格式。
            </summary>
            <param name="key">要转换的缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.SHA1KeyTransformer">
            <summary>
            SHA1哈希表键的格式化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.SHA1KeyTransformer.EIIP#Caching#Memcached#IMemcachedKeyTransformer#Transform(System.String)">
            <summary>
            转换Memcached缓存键为自定义格式。
            </summary>
            <param name="key">要转换的缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.TigerHashKeyTransformer">
            <summary>
            Tiger哈希表键的格式化转换器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.TigerHashKeyTransformer.EIIP#Caching#Memcached#IMemcachedKeyTransformer#Transform(System.String)">
            <summary>
            转换Memcached缓存键为自定义格式。
            </summary>
            <param name="key">要转换的缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.MemcachedNode">
            <summary>
            服务器池中的一个Memcached节点类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.#ctor(System.Net.IPEndPoint,EIIP.Caching.Configuration.ISocketPoolConfiguration)">
            <summary>
            实例化Memcached节点。
            </summary>
            <param name="endpoint">服务器网络端点</param>
            <param name="config">Socket池配置</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.Ping">
            <summary>
            获取一个值，该值指示服务器是否还在工作状态。
            若服务器不在工作状态，并且超时，它会重置初始化。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.Acquire">
            <summary>
            从socket池里取一个socket。若池已死，则返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.MemcachedNode.EndPoint">
            <summary>
            获取服务器网络端点。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.MemcachedNode.IsAlive">
            <summary>
            获取一个值，该值指示服务器是否是生存的（工作状态）。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl">
            <summary>
            内部池实体类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.freeItems">
            <summary>
            已连接并且可用的Sockets队列。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.#ctor(System.Net.IPEndPoint,EIIP.Caching.Configuration.ISocketPoolConfiguration)">
            <summary>
            实例化内部池实体。
            </summary>
            <param name="endpoint">网络端点</param>
            <param name="config">Socket池配置</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.Acquire">
            <summary>
            从socket池里取一个socket。若池已死，则返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.ReleaseSocket(EIIP.Caching.Memcached.PooledSocket)">
            <summary>
            释放指定Socket项，将其放入池中。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.IsAlive">
            <summary>
            获取一个值，该值指示池是否是生存的。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.MemcachedNode.InternalPoolImpl.MarkedAsDeadUtc">
            <summary>
            获取标记为死节点的时间。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.MemcachedNode.Comparer">
            <summary>
            比较类。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.DecrementOperation">
            <summary>
            递减操作类。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.ItemOperation">
            <summary>
            缓存项操作基类。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.Operation">
            <summary>
            操作基类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.Operation.isDisposed">
            <summary>
            指示是否已析构。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.Operation.success">
            <summary>
            指示操作是否成功。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.Operation.serverPool">
            <summary>
            服务器池。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.Operation.#ctor(EIIP.Caching.Memcached.ServerPool)">
            <summary>
            实例化操作基类。
            </summary>
            <param name="serverPool">服务器池实例</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.Operation.Execute">
            <summary>
            执行操作。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.Operation.ExecuteAction">
            <summary>
            执行动作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.Operation.CheckDisposed(System.Boolean)">
            <summary>
            检查是否已析构。
            </summary>
            <param name="throwOnError">设置当已析构时，是否抛出异常。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.Operation.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.Operation.ServerPool">
            <summary>
            获取服务器池。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.Operation.Success">
            <summary>
            获取一个值，该值指示操作是否成功。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ItemOperation.key">
            <summary>
            缓存键。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ItemOperation.hashedKey">
            <summary>
            缓存键的哈希版本。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ItemOperation.#ctor(EIIP.Caching.Memcached.ServerPool,System.String)">
            <summary>
            实例化缓存项操作基类。
            </summary>
            <param name="pool">服务器池</param>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.ItemOperation.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.ItemOperation.Key">
            <summary>
            获取缓存键。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.ItemOperation.HashedKey">
            <summary>
            获取缓存键的哈希版本。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.ItemOperation.Socket">
            <summary>
            获取缓存键所在的Socket。若不存在，则返回null。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.DecrementOperation.result">
            <summary>
            结果。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.DecrementOperation.#ctor(EIIP.Caching.Memcached.ServerPool,System.String,System.UInt32)">
            <summary>
            实例化递减操作。
            </summary>
            <param name="pool">服务器池</param>
            <param name="key">缓存键</param>
            <param name="amount">数量</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.DecrementOperation.ExecuteAction">
            <summary>
            执行操作，成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.DecrementOperation.Result">
            <summary>
            获取结果。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.DeleteOperation">
            <summary>
            删除操作类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.DeleteOperation.#ctor(EIIP.Caching.Memcached.ServerPool,System.String)">
            <summary>
            实例化删除操作。
            </summary>
            <param name="pool">服务器池</param>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.DeleteOperation.ExecuteAction">
            <summary>
            执行操作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.FlushOperation">
            <summary>
            清除操作类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.FlushOperation.#ctor(EIIP.Caching.Memcached.ServerPool)">
            <summary>
            实例化清除操作。
            </summary>
            <param name="pool">服务器池</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.FlushOperation.ExecuteAction">
            <summary>
            执行操作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.GetHelper">
            <summary>
            Get助手类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.GetHelper.FinishCurrent(EIIP.Caching.Memcached.PooledSocket)">
            <summary>
            结束当前请求。
            </summary>
            <param name="socket">socket</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.GetHelper.ReadItem(EIIP.Caching.Memcached.PooledSocket)">
            <summary>
            读取缓存项的响应。
            </summary>
            <param name="socket">socket</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.GetResponse">
            <summary>
            Get响应类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.GetResponse.Key">
            <summary>
            获取缓存键
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.GetResponse.CasValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.GetResponse.Item">
            <summary>
            获取缓存项
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.GetResponse.#ctor(System.String,System.UInt16,System.UInt64,System.Byte[])">
            <summary>
            实例化Get响应。
            </summary>
            <param name="key">缓存键</param>
            <param name="flags">自定义项数据</param>
            <param name="casValue"></param>
            <param name="data">数据</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.GetResponse.#ctor(System.String,System.UInt16,System.UInt64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            实例化Get响应。
            </summary>
            <param name="key">缓存键</param>
            <param name="flags">自定义项数据</param>
            <param name="casValue"></param>
            <param name="data">数据</param>
            <param name="offset">偏移量</param>
            <param name="count">数据长度</param>
        </member>
        <member name="T:EIIP.Caching.Memcached.GetOperation">
            <summary>
            获取操作类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.GetOperation.#ctor(EIIP.Caching.Memcached.ServerPool,System.String)">
            <summary>
            实例化获取操作。
            </summary>
            <param name="pool">服务器池</param>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.GetOperation.ExecuteAction">
            <summary>
            执行操作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.GetOperation.Result">
            <summary>
            获取缓存结果。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.IncrementOperation">
            <summary>
            增量操作类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.IncrementOperation.result">
            <summary>
            结果。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.IncrementOperation.#ctor(EIIP.Caching.Memcached.ServerPool,System.String,System.UInt32)">
            <summary>
            实例化增量操作。
            </summary>
            <param name="pool">服务器池</param>
            <param name="key">缓存键</param>
            <param name="amount">数量</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.IncrementOperation.ExecuteAction">
            <summary>
            执行操作，成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.IncrementOperation.Result">
            <summary>
            获取结果。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.MultiGetOperation">
            <summary>
            多Get操作类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.MultiGetOperation.#ctor(EIIP.Caching.Memcached.ServerPool,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            实例化多Get操作。
            </summary>
            <param name="pool">服务器池</param>
            <param name="keys">缓存键迭代器</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.MultiGetOperation.ExecuteAction">
            <summary>
            执行操作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.MultiGetOperation.Result">
            <summary>
            获取结果。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.MultiGetOperation.CasValues">
            <summary>
            获取CAS值。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.StatsOperation">
            <summary>
            缓存服务器状态项操作类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.StatsOperation.#ctor(EIIP.Caching.Memcached.ServerPool)">
            <summary>
            实例化缓存服务器状态项操作。
            </summary>
            <param name="pool">服务器池</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.StatsOperation.ExecuteAction">
            <summary>
            执行操作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.StatsOperation.Results">
            <summary>
            获取服务器状态结果。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.StoreOperation">
            <summary>
            存储操作类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.StoreOperation.#ctor(EIIP.Caching.Memcached.ServerPool,EIIP.Caching.Memcached.StoreCommand,System.String,System.Object,System.UInt64,System.TimeSpan,System.DateTime)">
            <summary>
            实例化存储操作。
            </summary>
            <param name="pool">服务器池</param>
            <param name="mode">存储命令</param>
            <param name="key">缓存键</param>
            <param name="value">缓存值</param>
            <param name="casValue"></param>
            <param name="validFor">缓存有效时间，设置 TimeSpan.Zero，表示该使用 expiresAt。</param>
            <param name="expiresAt">缓存到期时间，设置 DateTime.MinValue，表示该使用 validFor。</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.StoreOperation.ExecuteAction">
            <summary>
            执行操作。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.PooledSocket">
            <summary>
            放入池中的Socket类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.PooledSocket.InstanceId">
            <summary>
            实例ID。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.#ctor(System.Net.IPEndPoint,System.TimeSpan,System.TimeSpan,System.Action{EIIP.Caching.Memcached.PooledSocket})">
            <summary>
            实例化放入池中的Socket。
            </summary>
            <param name="endpoint">服务器网络端点</param>
            <param name="connectionTimeout">连接超时</param>
            <param name="receiveTimeout">接收超时</param>
            <param name="cleanupCallback">清除回调函数</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.Destroy">
            <summary>
            释放所有资源。释放后该实例不能被再次使用。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.ReadLine">
            <summary>
            从Socket中读取一行。 一行是以 \r\n 结束的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.SendCommand(System.String)">
            <summary>
            向服务器发送命令。结尾会自动追加 \r\n 。
            </summary>
            <param name="value">命令</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.GetCommandBuffer(System.String)">
            <summary>
            获取缓存的命令数据。结尾会自动追加 13, 10 (\r\n)
            </summary>
            <param name="value">要被转换的命令。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从服务器读取数据至指定缓存。
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">数据缓存区中保存接收数据的偏移量</param>
            <param name="count">要读取的数据长度</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.Write(System.ArraySegment{System.Byte})">
            <summary>
            写入数据。
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入数据。
            </summary>
            <param name="data">数据缓存区</param>
            <param name="offset">数据缓存区中数据的偏移量</param>
            <param name="length">要写入的数据长度</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.Write(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            写入数据。
            </summary>
            <param name="buffers">保存有数据的数据缓存</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.PooledSocket.ReadResponse">
            <summary>
            读取服务器的响应数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.PooledSocket.IsAlive">
            <summary>
            获取一个值，该值指示是否是生存的。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.PooledSocket.BasicNetworkStream">
            <summary>
            基本网络流类。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.ServerPool">
            <summary>
            服务器池类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerPool.DefaultSettings">
            <summary>
            默认配置设置。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerPool.deadServers">
            <summary>
            保存所有不可用的服务器网络端口。若发现可正常使用时，又可将其加入可用服务器网络端口列表。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerPool.workingServers">
            <summary>
            当前可用的服务器网络端口列表。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerPool.serverAccessLock">
            <summary>
            用于服务器列表的同步读写访问。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.#ctor">
            <summary>
            实例化默认配置的服务器池。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.#ctor(EIIP.Caching.Configuration.IMemcachedClientConfiguration)">
            <summary>
            实例化服务器池。
            </summary>
            <param name="configuration">Memcached客户端配置</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.RebuildIndexes">
            <summary>
            重/创建索引定位器。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.callback_isAliveTimer(System.Object)">
            <summary>
            检查死节点是否又能工作。
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.MarkAsDead(EIIP.Caching.Memcached.MemcachedNode)">
            <summary>
            标记一个节点已死（即未用）。
             - 移动节点至“死列表”
             - 基于可用服务器新列表重建定位器
            </summary>
            <param name="node">要标记的节点</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.LocateNode(System.String)">
            <summary>
            定位指定缓存键的缓存项节点。不存在则返回null。
            </summary>
            <param name="itemKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.Acquire(System.String)">
            <summary>
            获取指定缓存键的Socket。不存在则返回null。
            </summary>
            <param name="itemKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerPool.SplitKeys(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            分离缓存键。
            </summary>
            <param name="keys">缓存键迭代器</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Caching.Memcached.ServerPool.KeyTransformer">
            <summary>
            获取池的缓存键格式化转译器实例。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.ServerPool.WorkingServers">
            <summary>
            获取工作服务器列表。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.ServerStats">
            <summary>
            Memcached节点的状态类。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerStats.All">
            <summary>
            定义一个值，指示池中所有服务器的节点状态应被恢复。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerStats.Optable">
            <summary>
            定义可以被求和的值。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.ServerStats.StatKeys">
            <summary>
            状态键。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerStats.#ctor(System.Collections.Generic.Dictionary{System.Net.IPEndPoint,System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            实例化Memcached节点的状态。
            </summary>
            <param name="results">响应结果</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerStats.GetValue(System.Net.IPEndPoint,EIIP.Caching.Memcached.StatItem)">
            <summary>
            获取指定服务器的状态值。
            </summary>
            <param name="server">服务器地址。若指定了 IPAddress.Any，则返回所有服务器状态值的和。</param>
            <param name="item">要返回的状态项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerStats.GetVersion(System.Net.IPEndPoint)">
            <summary>
            获取缓存服务器的缓存版本号。
            </summary>
            <param name="server">服务器地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerStats.GetUptime(System.Net.IPEndPoint)">
            <summary>
            获取指定缓存服务器的运行秒数。
            </summary>
            <param name="server">服务器地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerStats.GetRaw(System.Net.IPEndPoint,System.String)">
            <summary>
            返回指定缓存服务器的状态值。若该值不能被正确转换则会直接按服务器返回值返回。失败返回null。
            </summary>
            <param name="server">服务器地址</param>
            <param name="key">服务器状态值的名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ServerStats.GetRaw(System.Net.IPEndPoint,EIIP.Caching.Memcached.StatItem)">
            <summary>
            返回指定缓存服务器的状态值。若该值不能被正确转换则会直接按服务器返回值返回。失败返回null。
            </summary>
            <param name="server">服务器地址</param>
            <param name="item">设置要返回的服务器状态项</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.SingleNodeLocator">
            <summary>
            映射缓存键至单一Memcached节点的定位器类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.SingleNodeLocator.EIIP#Caching#Memcached#IMemcachedNodeLocator#Initialize(System.Collections.Generic.IList{EIIP.Caching.Memcached.MemcachedNode})">
            <summary>
            初始化映射缓存键至Memcached节点的定位器。
            </summary>
            <param name="nodes">在配置中定义的memcached节点列表</param>
        </member>
        <member name="M:EIIP.Caching.Memcached.SingleNodeLocator.EIIP#Caching#Memcached#IMemcachedNodeLocator#Locate(System.String)">
            <summary>
            定位指定缓存键。返回Memcached节点。
            </summary>
            <param name="key">要定位的缓存键。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.Memcached.StatItem">
            <summary>
            指示Memcached返回的某一状态项。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.Uptime">
            <summary>
            服务器已运行的秒数。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.ServerTime">
            <summary>
            服务器的当前时间。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.Version">
            <summary>
            服务器的版本。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.ItemCount">
            <summary>
            存储在服务器的缓存项数。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.TotalItems">
            <summary>
            存储在服务器的缓存项总数（包括已丢弃的）。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.ConnectionCount">
            <summary>
            服务器的活动连接数。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.TotalConnections">
            <summary>
            服务器的总连接数。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.ConnectionStructures">
            <summary>
            连接结构。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.GetCount">
            <summary>
            由服务器执行的GET操作数量。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.SetCount">
            <summary>
            由服务器执行的SET操作数量。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.GetHits">
            <summary>
            缓存命中。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.GetMisses">
            <summary>
            缓存错过。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.UsedBytes">
            <summary>
            使用字节数。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.BytesRead">
            <summary>
            从服务器读取的字节数量。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.BytesWritten">
            <summary>
            写入服务器的字节数量。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StatItem.MaxBytes">
            <summary>
            最大字节数。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.StoreCommand">
            <summary>
            指示在缓坡服务器上存储缓存项的某一命令。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreCommand.Add">
            <summary>
            仅在服务器上没有指定缓存键存储时，存储数据。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreCommand.Replace">
            <summary>
            仅在服务器上有指定缓存键存储时，存储数据。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreCommand.Set">
            <summary>
            存储数据，若已有缓存数据，则执行覆盖。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreCommand.Append">
            <summary>
            将数据追加至缓存键对应的缓存项后。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreCommand.Prepend">
            <summary>
            将数据插入缓存键对应的缓存项前。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreCommand.CheckAndSet">
            <summary>
            仅在服务器上有指定缓存键存储，并在最近一次获取数据后还未进行任何更新时，存储数据。
            会使用一个 "transaction id" 检查是否修改过。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.StoreMode">
            <summary>
            指示在缓坡服务器上存储缓存项的某一模式。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreMode.Add">
            <summary>
            仅在服务器上没有指定缓存键存储时，存储数据。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreMode.Replace">
            <summary>
            仅在服务器上有指定缓存键存储时，存储数据。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.StoreMode.Set">
            <summary>
            存储数据，若已有缓存数据，则执行覆盖。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.ThrowHelper">
            <summary>
            抛出异常辅助类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ThrowHelper.ThrowSocketWriteError(System.Net.IPEndPoint,System.Net.Sockets.SocketError)">
            <summary>
            抛出Socket写入异常。
            </summary>
            <param name="endpoint">服务器网络端点</param>
            <param name="error">Socket错误代码</param>
        </member>
        <member name="T:EIIP.Caching.Memcached.CacheItem">
            <summary>
            缓存项类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.CacheItem.#ctor(System.UInt16,System.ArraySegment{System.Byte})">
            <summary>
            实例化缓存项。
            </summary>
            <param name="flags">自定义项数据</param>
            <param name="data">序列化数据</param>
        </member>
        <member name="P:EIIP.Caching.Memcached.CacheItem.Data">
            <summary>
            获取或设置缓存项数据。
            </summary>
        </member>
        <member name="P:EIIP.Caching.Memcached.CacheItem.Flag">
            <summary>
            获取或设置缓存项标记。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.DefaultTranscoder">
            <summary>
            默认的序列化转译器类。元类型手工序列化，其余的使用 BinarySerializer 序列化。
            </summary>
        </member>
        <member name="T:EIIP.Caching.Memcached.ITranscoder">
            <summary>
            定义序列化缓存项的接口。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.ITranscoder.Serialize(System.Object)">
            <summary>
            序列化指定的对象，以便于存储在缓存中。
            </summary>
            <param name="o">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.ITranscoder.Deserialize(EIIP.Caching.Memcached.CacheItem)">
            <summary>
            反序列化缓存项。
            </summary>
            <param name="item">要反序列化的缓存项。</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.Caching.Memcached.DefaultTranscoder.RawDataFlag">
            <summary>
            原始数据标识。
            </summary>
        </member>
        <member name="F:EIIP.Caching.Memcached.DefaultTranscoder.EmptyArray">
            <summary>
            空字节数组。
            </summary>
        </member>
        <member name="M:EIIP.Caching.Memcached.DefaultTranscoder.EIIP#Caching#Memcached#ITranscoder#Serialize(System.Object)">
            <summary>
            序列化指定的对象，以便于存储在缓存中。
            </summary>
            <param name="value">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.Memcached.DefaultTranscoder.EIIP#Caching#Memcached#ITranscoder#Deserialize(EIIP.Caching.Memcached.CacheItem)">
            <summary>
            反序列化缓存项。
            </summary>
            <param name="item">要反序列化的缓存项。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.TigerHash">
            <summary>
            Tiger哈希表类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.TigerHash.#ctor">
            <summary>
            实例化Tiger哈希表。
            </summary>
        </member>
        <member name="M:EIIP.Collections.TigerHash.Initialize">
            <summary>
            初始化Tiger哈希表。
            </summary>
        </member>
        <member name="M:EIIP.Collections.TigerHash.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将写入对象的数据路由到哈希算法以计算哈希值。
            </summary>
            <param name="array">要计算其哈希代码的输入。</param>
            <param name="ibStart">字节数组中的偏移量，从该位置开始使用数据。</param>
            <param name="cbSize">字节数组中用作数据的字节数。</param>
        </member>
        <member name="M:EIIP.Collections.TigerHash.HashFinal">
            <summary>
            在加密流对象处理完最后的数据后完成哈希计算。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Caching.UIntEqualityComparer">
            <summary>
            一个快速的 UInt 类型数据的比较器类。
            </summary>
        </member>
        <member name="M:EIIP.Caching.UIntEqualityComparer.System#Collections#Generic#IEqualityComparer{System#UInt32}#Equals(System.UInt32,System.UInt32)">
            <summary>
            确定指定的对象是否相等。
            </summary>
            <param name="x">要比较的第一个类型为 uint 的对象。</param>
            <param name="y">要比较的第二个类型为 uint 的对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Caching.UIntEqualityComparer.System#Collections#Generic#IEqualityComparer{System#UInt32}#GetHashCode(System.UInt32)">
            <summary>
            返回指定对象的哈希代码。
            </summary>
            <param name="value">uint，将为其返回哈希代码。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Imaging.Quantization.GrayscaleQuantizer">
            <summary>
            灰度调色板数字转换器类。
            </summary>
        </member>
        <member name="T:EIIP.Imaging.Quantization.PaletteQuantizer">
            <summary>
            调色板数字转换器类。
            </summary>
        </member>
        <member name="T:EIIP.Imaging.Quantization.Quantizer">
            <summary>
            数字转换器基类。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.Quantizer._singlePass">
            <summary>
            指示遍历源像素一次(true)或两次。
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.#ctor(System.Boolean)">
            <summary>
            实例化数字转换器。
            </summary>
            <param name="singlePass">设置是否仅一次遍历源像素</param>
            <remarks>
            若singlePass为true，则仅调用QuantizeImage方法；否则在调用QuantizeImage方法前会调用InitialQuantizeImage
            </remarks>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            数字转换指定图像。
            </summary>
            <param name="source">源图像</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            首次遍历。
            </summary>
            <param name="sourceData">源图像数据</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            二次遍历。
            </summary>
            <param name="sourceData">源图像数据</param>
            <param name="output">输出图像</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="bounds">绑定范围</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.InitialQuantizePixel(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            初始化遍历方法。当需要两次遍历时，重载本方法。
            </summary>
            <param name="pixel">要数字化的像素地址</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.QuantizePixel(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            第二次遍历时数字化方法。返回数字化值。
            </summary>
            <param name="pixel">要数字化的像素地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            获取调色板。
            </summary>
            <param name="original">源调色板</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Imaging.Quantization.Quantizer.Color32">
            <summary>
            32位颜色结构。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.Quantizer.Color32.Blue">
            <summary>
            蓝
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.Quantizer.Color32.Green">
            <summary>
            绿
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.Quantizer.Color32.Red">
            <summary>
            红
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.Quantizer.Color32.Alpha">
            <summary>
            alpha分量
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.Quantizer.Color32.ARGB">
            <summary>
            色值。
            </summary>
        </member>
        <member name="P:EIIP.Imaging.Quantization.Quantizer.Color32.Color">
            <summary>
            获取颜色实例。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.PaletteQuantizer._colorMap">
            <summary>
            颜色查询表。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.PaletteQuantizer._colors">
            <summary>
            调色板中的颜色。
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            实例化调色板数字转换器。
            </summary>
            <param name="palette">调色板</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.PaletteQuantizer.QuantizePixel(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            第二次遍历时数字化方法。返回数字化值。
            </summary>
            <param name="pixel">要数字化的像素地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            获取调色板。
            </summary>
            <param name="palette">源调色板</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.GrayscaleQuantizer.#ctor">
            <summary>
            实例化灰度调色板数字转换器类。
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.GrayscaleQuantizer.QuantizePixel(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            第二次遍历时数字化方法。返回数字化值。
            </summary>
            <param name="pixel">要数字化的像素地址</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Imaging.Quantization.OctreeQuantizer">
            <summary>
            八叉树数字转换器类。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer._octree">
            <summary>
            八叉树
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer._maxColors">
            <summary>
            最大颜色数
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.#ctor">
            <summary>
            实例化高质量八叉树数字转换器。
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化八叉树数字转换器。
            </summary>
            <param name="maxColors">最大颜色数，不能超过255</param>
            <param name="maxColorBits">最大颜色位数，在 1 与 8 之间</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.InitialQuantizePixel(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            初始化遍历方法。
            </summary>
            <param name="pixel">要数字化的像素地址</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.QuantizePixel(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            第二次遍历时数字化方法。返回数字化值。
            </summary>
            <param name="pixel">要数字化的像素地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            获取调色板。
            </summary>
            <param name="original">源调色板</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Imaging.Quantization.OctreeQuantizer.Octree">
            <summary>
            八叉树类。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.mask">
            <summary>
            掩码
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree._root">
            <summary>
            八叉树根。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree._leafCount">
            <summary>
            叶子数量。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            节点。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            最大颜色位数。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree._previousNode">
            <summary>
            上一节点。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree._previousColor">
            <summary>
            上一颜色。
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            实例化八叉树。
            </summary>
            <param name="maxColorBits">最大颜色位数。</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.AddColor(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            添加指定颜色。
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.Reduce">
            <summary>
            降级。
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.TrackPrevious(EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            保持上一节点。
            </summary>
            <param name="node">上一节点</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            将八叉树节点转换为调色板。
            </summary>
            <param name="colorCount">最大颜色数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.GetPaletteIndex(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            获取调色板索引。
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.Leaves">
            <summary>
            获取或设置叶子数量。
            </summary>
        </member>
        <member name="P:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            获取节点。
            </summary>
        </member>
        <member name="T:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            八叉树节点类。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            指示是否是叶子节点。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            节点的像素个数。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            红色分量。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            绿色分量。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            蓝色分量。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            子节点。
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            下一节点
            </summary>
        </member>
        <member name="F:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            调色板索引
            </summary>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,EIIP.Imaging.Quantization.OctreeQuantizer.Octree)">
            <summary>
            实例化八叉树节点。
            </summary>
            <param name="level">树中的级别，0 - 7</param>
            <param name="colorBits">颜色位数</param>
            <param name="octree">所属八叉树实例</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.AddColor(EIIP.Imaging.Quantization.Quantizer.Color32*,System.Int32,System.Int32,EIIP.Imaging.Quantization.OctreeQuantizer.Octree)">
            <summary>
            添加一颜色。
            </summary>
            <param name="pixel">像素色</param>
            <param name="colorBits">颜色位数</param>
            <param name="level">树中的级别，0 - 7</param>
            <param name="octree">所属八叉树实例</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            通过删除子节点降级。返回删除的节点个数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.Generic.List{System.Drawing.Color},System.Int32@)">
            <summary>
            遍历树绑定调色板颜色。
            </summary>
            <param name="palette">调色板</param>
            <param name="paletteIndex">当前调色板索引</param>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(EIIP.Imaging.Quantization.Quantizer.Color32*,System.Int32)">
            <summary>
            获取调色板索引。
            </summary>
            <param name="pixel"></param>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.Increment(EIIP.Imaging.Quantization.Quantizer.Color32*)">
            <summary>
            增量像素数，并添加颜色信息。
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="P:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            获取或设置下一节点
            </summary>
        </member>
        <member name="P:EIIP.Imaging.Quantization.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            获取子节点。
            </summary>
        </member>
        <member name="T:EIIP.Helper.MemcachedHelper">
            <summary>
            分布式缓存助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.MemcachedHelper.m_MemcachedClient">
            <summary>
            分布式缓存客户端。
            </summary>
        </member>
        <member name="P:EIIP.Helper.MemcachedHelper.MemcachedClient">
            <summary>
            获取分布式缓存客户端。
            </summary>
        </member>
        <member name="T:EIIP.Helper.MobileHelper">
            <summary>
            关于移动应用的助手类。
            部分需要 .NET Framework 3.5 的支持，定义 DOTNET_FRAMEWORK_3_5。
            支持智能客户端产品框架，还需定义 EIIP_FRAMEWORK_SC。
            </summary>
        </member>
        <member name="M:EIIP.Helper.MobileHelper.GetSegment(System.String)">
            <summary>
            获取指定手机号的手机号码段。不存在则返回空串。
            </summary>
            <param name="mobile">移动手机号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MobileHelper.Load(System.String)">
            <summary>
            加载指定手机号码段归属地数据。
            </summary>
            <param name="segment">手机号码段</param>
        </member>
        <member name="M:EIIP.Helper.MobileHelper.Locate(System.String)">
            <summary>
            定位手机归属地。
            </summary>
            <param name="mobile">手机号码</param>
        </member>
        <member name="T:EIIP.Helper.MobileHelper.LocateInfo">
            <summary>
            移动手机定位信息。
            </summary>
        </member>
        <member name="F:EIIP.Helper.MobileHelper.LocateInfo.Empty">
            <summary>
            空的移动手机定位信息。
            </summary>
        </member>
        <member name="F:EIIP.Helper.MobileHelper.LocateInfo.m_Segment">
            <summary>
             手机号码段
            </summary>
        </member>
        <member name="F:EIIP.Helper.MobileHelper.LocateInfo.m_Location">
            <summary>
             归属地
            </summary>
        </member>
        <member name="F:EIIP.Helper.MobileHelper.LocateInfo.m_CardName">
            <summary>
             卡类型
            </summary>
        </member>
        <member name="F:EIIP.Helper.MobileHelper.LocateInfo.m_DistrictNo">
            <summary>
             区号
            </summary>
        </member>
        <member name="F:EIIP.Helper.MobileHelper.LocateInfo.m_IsKnown">
            <summary>
            指示手机归属地是否是已知的。
            </summary>
        </member>
        <member name="M:EIIP.Helper.MobileHelper.LocateInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            实例化移动手机定位信息。
            </summary>
            <param name="segment">手机号码段</param>
            <param name="location">归属地</param>
            <param name="cardName">卡类型</param>
            <param name="districtNo">区号</param>
        </member>
        <member name="M:EIIP.Helper.MobileHelper.LocateInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            实例化移动手机定位信息。
            </summary>
            <param name="segment">手机号码段</param>
            <param name="location">归属地</param>
            <param name="cardName">卡类型</param>
            <param name="districtNo">区号</param>
            <param name="isKnown">指示手机归属地是否是已知的。</param>
        </member>
        <member name="M:EIIP.Helper.MobileHelper.LocateInfo.#ctor(System.String,System.Data.DataRow)">
            <summary>
            实例化移动手机定位信息。
            </summary>
            <param name="segment">手机号码段</param>
            <param name="row">归属地数据</param>
        </member>
        <member name="P:EIIP.Helper.MobileHelper.LocateInfo.Segment">
            <summary>
             获取手机号码段
            </summary>
        </member>
        <member name="P:EIIP.Helper.MobileHelper.LocateInfo.Location">
            <summary>
             获取归属地
            </summary>
        </member>
        <member name="P:EIIP.Helper.MobileHelper.LocateInfo.CardName">
            <summary>
             获取卡类型
            </summary>
        </member>
        <member name="P:EIIP.Helper.MobileHelper.LocateInfo.DistrictNo">
            <summary>
             获取区号
            </summary>
        </member>
        <member name="P:EIIP.Helper.MobileHelper.LocateInfo.IsKnown">
            <summary>
             获取一个值，该值指示手机归属地是否是已知的。
            </summary>
        </member>
        <member name="T:EIIP.Helper.NumberHelper">
            <summary>
            提供数字操作的助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.MIN_RADIX">
            <summary>
            最小进制基数。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.MAX_RADIX">
            <summary>
            最大进制基数（62）。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.CHAR_NULL">
            <summary>
            表示空的字符。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.CHAR_ZERO">
            <summary>
            表示0的字符。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.CHAR_A">
            <summary>
            表示a的字符。
            </summary>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Parse(System.String,System.Int32)">
            <summary>
            解析指定进制的数值。
            </summary>
            <param name="s">要解析的字符串</param>
            <param name="radix">进制</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.URShift(System.Int32,System.Int32)">
            <summary>
            将指定整型数右移特定位。
            </summary>
            <param name="number">要操作的整型数</param>
            <param name="bits">要右移的位数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.URShift(System.Int64,System.Int32)">
            <summary>
            将指定整型数右移特定位。
            </summary>
            <param name="number">要操作的长整型数</param>
            <param name="bits">要右移的位数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.NextSetBit(System.Collections.BitArray,System.Int32)">
            <summary>
            返回位数组中下一设置位的索引位置。未找到则返回-1。
            </summary>
            <param name="bits">位数组</param>
            <param name="fromIndex">要搜索的起始索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Cardinality(System.Collections.BitArray)">
            <summary>
            获取位集中设置为true的位的数量。
            </summary>
            <param name="bits">位集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.DigitChar(System.Int32,System.Int32)">
            <summary>
            获取指定进制的数值字符。非法（越界）则返回 CHAR_NULL 空字符。
            </summary>
            <param name="digit">在radix内合法的数值</param>
            <param name="radix">进制</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.ToString(System.Single)">
            <summary>
            将指定数值转换为其等效的字符串表示形式。
            </summary>
            <param name="f">数值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.ToString(System.Int64)">
            <summary>
            将指定数值转换为其等效的字符串表示形式。
            </summary>
            <param name="number">数值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.ToString(System.Int64,System.Int32)">
            <summary>
            将指定数值转换为特定进制数值的字符串表示形式。
            </summary>
            <param name="i">要转换的数据</param>
            <param name="radix">进制</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.ToInt64(System.String)">
            <summary>
            转换字符串至长整型数。
            </summary>
            <param name="s">要转换的36进制的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.ToInt64_Radix62(System.String)">
            <summary>
            转换字符串至长整型数。
            </summary>
            <param name="s">要转换的62进制的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.ToInt64(System.String,System.Int32)">
            <summary>
            转换字符串至长整型数。
            </summary>
            <param name="s">要转换的指定进制的字符串</param>
            <param name="radix">进制，最大为62</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.SumBitOfTrue(System.Int32)">
            <summary>
            计算指定整型值中位为1的数量。
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.NumberHelper.Single">
            <summary>
            双精度浮点类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示 s 允许使用的格式。</param>
            <param name="provider">一个 System.IFormatProvider，它提供有关 s 的区域性特定格式设置信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.Parse(System.String,System.IFormatProvider)">
            <summary>
            将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="provider">一个 System.IFormatProvider，它提供有关 s 的区域性特定格式设置信息。</param>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="style">System.Globalization.NumberStyles 值的按位组合，指示 s 允许使用的格式。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.Parse(System.String)">
            <summary>
            将数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.TryParse(System.String,System.Single@)">
            <summary>
            将数字的字符串表示形式转换为它的等效单精度浮点数字。一个指示转换是否成功的返回代码。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="f">当此方法返回时，如果转换成功，则包含与 s 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.ToString(System.Single)">
            <summary>
            将指定的数值转换为其等效的字符串表示形式。
            </summary>
            <param name="f">数值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.Single.ToString(System.Single,System.String)">
            <summary>
            使用指定的格式，将指定的数值转换为它的等效字符串表示形式。
            </summary>
            <param name="f">数值</param>
            <param name="format">一个数值格式字符串。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.NumberHelper.RADIX36">
            <summary>
            36进制。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.RADIX36.NEGATIVE_PREFIX">
            <summary>
            负号前缀。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.RADIX36.POSITIVE_PREFIX">
            <summary>
            位置前缀。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.RADIX36.MIN_STRING_VALUE">
            <summary>
            最小字符串值。相当于 longToString(Long.MIN_VALUE)
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.RADIX36.MAX_STRING_VALUE">
            <summary> 
            最大字符串值。相当于 longToString(Long.MAX_VALUE)
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumberHelper.RADIX36.STR_SIZE">
            <summary>
            字符串长度。
            </summary>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.RADIX36.LongToString(System.Int64)">
            <summary>
            将指定长整型数转换为固定长度的36进制字符串（前导空白以'0'填充）。
            </summary>
            <param name="l">长整型数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.RADIX36.StringToLong(System.String)">
            <summary>
            将指定固定长度的36进制字符串（前导空白以'0'填充）转换为长整型数。
            </summary>
            <param name="str">36进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.RADIX36.ToString(System.Int64)">
            <summary>
            将指定长整型数据转换为36进制字符串。
            </summary>
            <param name="lval">长整型数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumberHelper.RADIX36.ToLong(System.String)">
            <summary>
            将指定36进制字符串转换为长整型数据。
            </summary>
            <param name="t">36进制字符串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Cache.CacheEventArgs">
            <summary>
            缓存项事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheEventArgs.#ctor(System.String)">
            <summary>
            实例化缓存项事件参数。
            </summary>
            <param name="key">缓存键。</param>
        </member>
        <member name="P:EIIP.Cache.CacheEventArgs.KeyValue">
            <summary>
            获取缓存键。
            </summary>
        </member>
        <member name="T:EIIP.Cache.CacheItem">
            <summary>
            缓存项类。
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheItem.#ctor">
            <summary>
            实例化缓存项。
            </summary>
        </member>
        <member name="P:EIIP.Cache.CacheItem.Key">
            <summary>
            获取或设置缓存键。
            </summary>
        </member>
        <member name="P:EIIP.Cache.CacheItem.Value">
            <summary>
            获取或设置缓存数据。
            </summary>
        </member>
        <member name="P:EIIP.Cache.CacheItem.Priority">
            <summary>
            获取或设置缓存优先级。
            </summary>
        </member>
        <member name="P:EIIP.Cache.CacheItem.Expirations">
            <summary>
            获取或设置缓存过期策略。
            </summary>
        </member>
        <member name="T:EIIP.Cache.CacheItemPriority">
            <summary>
            指示缓存项的某一优先级。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemPriority.Low">
            <summary>
            在服务器释放系统内存时，具有该优先级级别的缓存项最有可能被从缓存删除。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemPriority.Normal">
            <summary>
            在服务器释放系统内存时，具有该优先级级别的缓存项很有可能被从缓存删除，
            其被删除的可能性仅次于具有 Low 优先级的项。这是默认选项。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemPriority.High">
            <summary>
            在服务器释放系统内存时，具有该优先级级别的缓存项最不可能被从缓存删除。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemPriority.NotRemovable">
            <summary>
            在服务器释放系统内存时，具有该优先级级别的缓存项将不会被自动从缓存删除。
            但是，具有该优先级级别的项会根据项的绝对到期时间或可调整到期时间与其他项一起被移除。
            </summary>
        </member>
        <member name="T:EIIP.Cache.CacheItemRemoveCause">
            <summary>
            指示缓存项某一移除原因。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemRemoveCause.Expired">
            <summary>
            过期
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemRemoveCause.Removed">
            <summary>
            被移除
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheItemRemoveCause.Scavenged">
            <summary>
            被回收清理
            </summary>
        </member>
        <member name="T:EIIP.Cache.CacheManager">
            <summary>
            缓存管理器类。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheManager.m_CacheService">
            <summary>
            缓存服务。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheManager.m_CacheStorage">
            <summary>
            缓存存储区。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheManager.Instance">
            <summary>
            取得全局类的单实例
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheManager.Add(System.String,System.Object)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="M:EIIP.Cache.CacheManager.Add(System.String,System.Object,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority,EIIP.Cache.CacheItemRemovedCallback)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
            <param name="expirations">过期策略</param>
            <param name="priority">缓存项优先级</param>
            <param name="onRemoveCallback">移除时回调函数</param>
        </member>
        <member name="M:EIIP.Cache.CacheManager.GetData(System.String)">
            <summary>
            获取指定键的数据。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheManager.GetItem(System.String)">
            <summary>
            获取指定缓存项。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheManager.Remove(System.String)">
            <summary>
            移除缓存项。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.CacheManager.Flush">
            <summary>
            清除所有缓存项。
            </summary>
        </member>
        <member name="P:EIIP.Cache.CacheManager.CacheStorage">
            <summary>
            获取缓存存储区。
            </summary>
        </member>
        <member name="P:EIIP.Cache.CacheManager.Item(System.String)">
            <summary>
            获取指定键的数据。
            </summary>
        </member>
        <member name="T:EIIP.Cache.CacheService">
            <summary>
            用于控制缓存项生命期的缓存服务类。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.CHECK_INTERVAL_MILLISECONDS">
            <summary>
            检查间隔 10 秒
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_CacheStorage">
            <summary>
            缓存存储区。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_CacheMetadata">
            <summary>
            缓存元数据。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_MmfReference">
            <summary>
            内存映象文件引用。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_StorageScavenging">
            <summary>
            存储区过期探测算法。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_ItemsExpiration">
            <summary>
            缓存项的过期策略集。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_CacheItemsPriority">
            <summary>
            缓存项的优先级集。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.m_ItemsOnRemoveCallbacks">
            <summary>
            缓存项的移除回调集。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.itemsMmfHandles">
            <summary>
            缓存项的内存映象文件句柄集。
            </summary>
        </member>
        <member name="F:EIIP.Cache.CacheService.Instance">
            <summary>
            取得全局类的单实例
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheService.InitializeLifetimeService">
            <summary>
            获取控制此实例的生存期策略的生存期服务对象。
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheService.Add(System.String,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority,EIIP.Cache.CacheItemRemovedCallback)">
            <summary>
            添加指定元数据的新项至缓存服务。
            </summary>
            <param name="keyVal">缓存键</param>
            <param name="expirations">过期策略</param>
            <param name="priority">缓存优先级</param>
            <param name="onRemoveCallback">移除时的回调函数</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.BeginAdd(System.String,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority,EIIP.Cache.CacheItemRemovedCallback,System.AsyncCallback,System.Object)">
            <summary>
            开始异步添加新项。返回异步操作状态。失败返回null。
            </summary>
            <remarks>
            IAsyncResult result = BeginAdd(key, expirations, priority, onRemoveCallback, callback, asyncState);
            </remarks>
            <param name="key">缓存键</param>
            <param name="expirations">过期策略</param>
            <param name="priority">缓存优先级</param>
            <param name="onRemoveCallback">移除时的回调函数</param>
            <param name="callback">异步操作完成时的回调函数</param>
            <param name="asyncState">异步操作状态参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheService.EndAdd(System.IAsyncResult)">
            <summary>
            结束异步添加新项操作。
            </summary>
            <remarks>
            EndAdd(asyncResult);
            </remarks>
            <param name="asyncResult">异步操作状态</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.GetData(System.String)">
            <summary>
            获取指定缓存键的缓存项。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheService.Flush">
            <summary>
            移除所有项。
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheService.BeginFlush(System.AsyncCallback,System.Object)">
            <summary>
            开始异步移除操作。
            </summary>
            <param name="callback">完成移除操作的回调函数</param>
            <param name="asyncState">异步操作状态参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheService.EndFlush(System.IAsyncResult)">
            <summary>
            结束异步添加新项操作。
            </summary>
            <remarks>
            EndFlush(asyncResult);
            </remarks>
            <param name="asyncResult">异步操作状态</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.Notify(System.String)">
            <summary>
            通知指定的缓存键最近已被使用。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.BeginNotify(System.String,System.AsyncCallback,System.Object)">
            <summary>
            开始异步通知操作。
            </summary>
            <remarks>
            IAsyncResult result = BeginNotify(key, callback, asyncState);
            </remarks>
            <param name="key">缓存键</param>
            <param name="callback">异步操作完成时的回调函数</param>
            <param name="asyncState">异步操作状态参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheService.EndNotify(System.IAsyncResult)">
            <summary>
            结束异步通知操作。
            </summary>
            <remarks>
            EndNotify(asyncResult);
            </remarks>
            <param name="asyncResult">异步操作状态</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.Remove(System.String)">
            <summary>
            移除指定项。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.BeginRemove(System.String,System.AsyncCallback,System.Object)">
            <summary>
            开始异步移除操作。
            </summary>
            <param name="key">缓存键</param>
            <param name="callback">完成移除操作的回调函数</param>
            <param name="asyncState">异步操作状态参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.CacheService.EndRemove(System.IAsyncResult)">
            <summary>
            结束异步添加新项操作。
            </summary>
            <remarks>
            EndRemove(asyncResult);
            </remarks>
            <param name="asyncResult">异步操作状态</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.RemoveItem(System.String,EIIP.Cache.CacheItemRemoveCause)">
            <summary>
            从本地存储区移除缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="cause">移除原因</param>
        </member>
        <member name="M:EIIP.Cache.CacheService.MonitorForExpirations">
            <summary>
            监视缓存项过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.CacheService.LoadMetadataFromStorage">
            <summary>
            从本地存储区获取缓存项的元数据。
            </summary>
        </member>
        <member name="T:EIIP.Cache.ItemDependencyChangeEventHandler">
            <summary>
            处理缓存项依赖项的变更事件委托。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EIIP.Cache.CacheItemRemovedCallback">
            <summary>
            定义移除缓存项时通知应用程序的回调方法。
            </summary>
            <param name="key">缓存键</param>
            <param name="cause">移除原因</param>
        </member>
        <member name="T:EIIP.Cache.AddDataHandler">
            <summary>
            处理添加缓存项的委托。
            </summary>
            <param name="key">键</param>
            <param name="expirations">缓存项过期方案</param>
            <param name="priority">Cache 对象中存储的项的相对优先级。</param>
            <param name="onRemoveCallback">缓存项移除的回调方法</param>
        </member>
        <member name="T:EIIP.Cache.FlushHandler">
            <summary>
            定义清空所有缓存项时通知应用程序的方法。
            </summary>
        </member>
        <member name="T:EIIP.Cache.GetHandler">
            <summary>
            定义获取指定缓存项时的方法。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:EIIP.Cache.NotifyHandler">
            <summary>
            定义通知指定缓存项的方法。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:EIIP.Cache.RemoveDataHandler">
            <summary>
            定义移除指定缓存项的方法。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="T:EIIP.Cache.UpdateHandler">
            <summary>
            更新缓存项的委托。
            </summary>
            <param name="key">键</param>
            <param name="expirations">缓存项过期方案</param>
            <param name="priority">Cache 对象中存储的项的相对优先级。</param>
        </member>
        <member name="T:EIIP.Collections.BinaryPredicate`1">
            <summary>
            BinaryPredicate委托类型封装一种带两种相同类型参数的方法，
            该方法返回布尔量，以指示这两项参数之间的关系。
            比如，检查两项参数是否相等或相近似。
            </summary>
            <param name="item1">第一项</param>
            <param name="item2">第二项</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Algorithms">
            <summary>
            提供泛型的一些算法库。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Range``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            获取指定列表的一个区间。该区间的元素并不是从列表中复制出来的，而是其对外的一种视图。
            </summary>
            <remarks>
            可将指定的算法应用于一个列表的部分元素。如:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(list, 3, 6))</code>
            会反转从索引位置3开始的 6 个元素。 
            </remarks>
            <typeparam name="T">列表元素的类型</typeparam>
            <param name="list">区间视图的列表对象</param>
            <param name="start">起始索引</param>
            <param name="count">在视图中的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Range``1(``0[],System.Int32,System.Int32)">
            <summary>
            获取指定数组的一个区间。该区间的元素并不是从数组中复制出来的，而是其对外的一种视图。
            无效元素数据为 0 或 null。
            </summary>
            <remarks>
            可将指定的算法应用于一个列表的部分元素。如:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(array, 3, 6))</code>
            会反转从索引位置3开始的 6 个元素。
            </remarks>
            <param name="array">区间视图的数组对象</param>
            <param name="start">起始索引</param>
            <param name="count">在视图中的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadOnly``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            包装指定集合对象为一个只读集合对象。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要包装的 collection</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadOnly``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取指定列表对象的一个只读包装。
            </summary>
            <typeparam name="T">列表对象的元素对象</typeparam>
            <param name="list">要包装的 list</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadOnly``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对字典的一个只读包装。
            </summary>
            <param name="dictionary">要包装的 dictionary</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedAs``1(System.Collections.IEnumerable)">
            <summary>
            包装类型化的可枚举对象。
            </summary>
            <typeparam name="T">要包装的集合中的元素类型</typeparam>
            <param name="untypedCollection">未类型化的可枚举集合对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedAs``1(System.Collections.ICollection)">
            <summary>
            获取类型化集合实例包装。
            </summary>
            <typeparam name="T">要包装的集合元素的类型</typeparam>
            <param name="untypedCollection">要包装的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedAs``1(System.Collections.IList)">
            <summary>
            获取类型化包装的列表实例。
            </summary>
            <typeparam name="T">要包装的列表的元素类型</typeparam>
            <param name="untypedList">要包装的列表对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Untyped``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            包装为未类型化的集合。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typedCollection"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Untyped``1(System.Collections.Generic.IList{``0})">
            <summary>
            包装未类型化的列表。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typedList"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadWriteList``1(``0[])">
            <summary>
            将数组进行列表包装。
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0)">
            <summary>
            返回迭代集合时，在集合中替换找到的项。
            </summary>
            <param name="collection">要处理的集合对象</param>
            <param name="itemFind">在集合中要查找并被替换的项</param>
            <param name="replaceWith">要替换为的类型对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            返回迭代集合时，在集合中替换找到的项。
            </summary>
            <param name="collection">要处理的集合对象</param>
            <param name="itemFind">在集合中要查找并被替换的项</param>
            <param name="replaceWith">要替换为的类型对象</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Replace``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0)">
            <summary>
            返回迭代集合时，在集合中替换符合条件的项。
            </summary>
            <param name="collection">要处理的集合对象</param>
            <param name="predicate">要测试的委托方法</param>
            <param name="replaceWith">要替换为的类型对象</param>
            <returns>.</returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},``0,``0)">
            <summary>
            在列表中替换找到的项。
            </summary>
            <param name="list">要处理的列表对象</param>
            <param name="itemFind">在集合中要查找并被替换的项</param>
            <param name="replaceWith">要替换为的类型对象</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            在列表中替换找到的项。
            </summary>
            <param name="list">要处理的列表对象</param>
            <param name="itemFind">在集合中要查找并被替换的项</param>
            <param name="replaceWith">要替换为的类型对象</param>
            <param name="equalityComparer">相等比较器</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReplaceInPlace``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0)">
            <summary>
            在列表中替换找到的项。
            </summary>
            <param name="list">要处理的列表对象</param>
            <param name="predicate">要测试的委托方法</param>
            <param name="replaceWith">要替换为的类型对象</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回不连续重复项的迭代集合。
            </summary>
            <param name="collection">要处理的集合</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            返回不连续重复项的迭代集合。
            </summary>
            <param name="collection">要处理的集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveDuplicates``1(System.Collections.Generic.IEnumerable{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            返回不连续重复项的迭代集合。
            </summary>
            <param name="collection">要处理的集合</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            从列表或数组中移除连续相等的项。
            </summary>
            <param name="list">要处理的列表或数组</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            从列表或数组中移除连续相等的项。
            </summary>
            <param name="list">要处理的列表或数组</param>
            <param name="equalityComparer">相等比较器</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveDuplicatesInPlace``1(System.Collections.Generic.IList{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            从列表或数组中移除连续相等的项。
            </summary>
            <param name="list">要处理的列表或数组</param>
            <param name="predicate">要测试的委托方法</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            查找首个连续相等项的索引。
            </summary>
            <param name="list">要处理的列表或数组</param>
            <param name="count">要查找的连续相等的个数，至少为1。当为1时，返回索引0</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            查找首个连续相等项的索引。
            </summary>
            <param name="list">要处理的列表或数组</param>
            <param name="count">要查找的连续相等的个数，至少为1。当为1时，返回索引0</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstConsecutiveEqual``1(System.Collections.Generic.IList{``0},System.Int32,EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            查找首个连续相等项的索引。
            </summary>
            <param name="list">要处理的列表或数组</param>
            <param name="count">要查找的连续相等的个数，至少为1。当为1时，返回索引0</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstConsecutiveWhere``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>
            查找首个连续相等条件项的索引。
            </summary>
            <param name="list">要处理的列表或数组</param>
            <param name="count">要查找的连续相等的个数，至少为1。当为1时，返回索引0</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找集合中首个符合条件的一项。
            </summary>
            <param name="collection">要搜索的集合对象</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TryFindFirstWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            查找集合中首个符合条件的一项。存在时返回true。
            </summary>
            <param name="collection">要搜索的集合对象</param>
            <param name="predicate">要测试的委托方法</param>
            <param name="foundItem">返回匹配的最后一项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            查找集合中最后符合条件的一项。
            </summary>
            <param name="collection">要搜索的集合对象</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TryFindLastWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},``0@)">
            <summary>
            查找集合中最后符合条件的一项。存在时返回true。
            </summary>
            <param name="collection">要搜索的集合对象</param>
            <param name="predicate">要测试的委托方法</param>
            <param name="foundItem">返回匹配的最后一项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FindWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            返回符合条件的迭代器。
            </summary>
            <param name="collection">要测试的集合</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FindFirstIndexWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="list">要查找的列表对象</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FindLastIndexWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="list">要查找的列表对象</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FindIndicesWhere``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            返回列表中符合条件的索引迭代器。
            </summary>
            <param name="list">要测试的列表对象</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="item">要查寻的元素对象</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LastIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LastIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="item">要查寻的元素对象</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndicesOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            获取列表中与指定元素相等的迭代器。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndicesOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取列表中与指定元素相等的迭代器。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="item">要查寻的元素对象</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回列表中与指定多个元素其中之一相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            返回列表中与指定多个元素其中之一相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FirstIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            返回列表中符合多个条件之一的首个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回列表中与指定多个元素其中之一相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            返回列表中与指定多个元素其中之一相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LastIndexOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            返回列表中符合多个条件之一的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取列表中与指定多个元素相等的元素索引迭代器。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取列表中与指定多个元素相等的元素索引迭代器。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndicesOfMany``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            获取列表中符合多个条件之一的元素索引迭代器。
            </summary>
            <param name="list">要搜索的列表</param>
            <param name="itemsToLookFor">提供要查找的元素集的迭代器</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Searchs a list for a sub-sequence of items that match a particular pattern. A subsequence 
            of <paramref name="list"/> matches pattern at index i if list[i] is equal to the first item
            in <paramref name="pattern"/>, list[i+1] is equal to the second item in <paramref name="pattern"/>,
            and so forth for all the items in <paramref name="pattern"/>.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <typeparam name="T">The type of items in the list.</typeparam>
            <param name="list">The list to search.</param>
            <param name="pattern">The sequence of items to search for.</param>
            <returns>The first index with <paramref name="list"/> that matches the items in <paramref name="pattern"/>.</returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            返回 list 列表中匹配 pattern 所有元素的首个元素索引。不存在则返回-1。
            </summary>
            <typeparam name="T">列表中元素对象的类型</typeparam>
            <param name="list">要搜索的列表对象</param>
            <param name="pattern">要搜索的元素集</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SearchForSubsequence``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            返回 list 列表中匹配 pattern 所有元素的首个元素索引。不存在则返回-1。
            </summary>
            <typeparam name="T">列表中元素对象的类型</typeparam>
            <param name="list">要搜索的列表对象</param>
            <param name="pattern">要搜索的元素集</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            测试一个集合是否是另一个集合的子集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IsSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            测试一个集合是否是另一个集合的子集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            测试一个集合是否是另一个集合的完全子集。
            若一个元素在第一个集合中出现 N 次，那么它同样需要在第二个集合中出现 N 次。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IsProperSubsetOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            测试一个集合是否是另一个集合的完全子集。
            若一个元素在第一个集合中出现 N 次，那么它同样需要在第二个集合中出现 N 次。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.DisjointSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            测试两个集合所含元素是否完全不同。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.DisjointSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            测试两个集合所含元素是否完全不同。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            测试两个集合是否有相同的元素。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.EqualSets``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            测试两个集合是否有相同的元素。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetIntersection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取两个集合的交集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetIntersection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取两个集合的交集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取两个集合的并集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetUnion``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取两个集合的并集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取第一个集合中不同于第二个集合元素的并集。
            若一个项在第一个集合出现 N 次，在第二个集合中出现 M 次，仅当 N &gt; M 时，N-M 个该项出现在结果集中。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取第一个集合中不同于第二个集合元素的并集。
            若一个项在第一个集合出现 N 次，在第二个集合中出现 M 次，仅当 N &gt; M 时，N-M 个该项出现在结果集中。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetSymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取两个集合中不同元素的并集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SetSymmetricDifference``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取两个集合中不同元素的并集。
            </summary>
            <param name="collection1">第一个集合</param>
            <param name="collection2">第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.CartesianProduct``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            获取两个集合的排列(N * M)迭代器。
            </summary>
            <typeparam name="TFirst">在第一个集合中元素的类型</typeparam>
            <typeparam name="TSecond">在第二个集合中元素的类型</typeparam>
            <param name="first">第一个集合</param>
            <param name="second">第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ToString``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合的字符串描述。若集合为null，则返回null。
            </summary>
            <param name="collection">要获取字符串描述的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ToString``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.String,System.String,System.String)">
            <summary>
            获取集合的字符串描述。若集合为null，则返回 "null"。
            </summary>
            <param name="collection">要获取字符串描述的集合</param>
            <param name="recursive">设置是否允许集合使用相同函数（而不是简单调用 ToString 方法）递归调用</param>
            <param name="start">输出字符串的前缀</param>
            <param name="separator">元素间的分隔符</param>
            <param name="end">输出字符串的后缀</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ToString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            获取字典的字符串描述。若字典为null，则返回 "null"。
            </summary>
            <param name="dictionary">要获取字符串的字典</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetRandomGenerator">
            <summary>
            获取伪随机数生成器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RandomShuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            随机重新排列集合中的元素，返回排列后的新数组。
            </summary>
            <typeparam name="T">集合中元素的数据类型</typeparam>
            <param name="collection">要重新排列元素的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RandomShuffle``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            随机重新排列集合中的元素，返回排列后的新数组。
            </summary>
            <typeparam name="T">集合中元素的数据类型</typeparam>
            <param name="collection">要重新排列元素的集合</param>
            <param name="randomGenerator">用于生成随机顺序的随机数生成器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RandomShuffleInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            随机重新排列列表中的元素，
            </summary>
            <typeparam name="T">列表中元素的数据类型</typeparam>
            <param name="list">要重新排列元素的列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RandomShuffleInPlace``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            随机重新排列列表中的元素，
            </summary>
            <typeparam name="T">列表中元素的数据类型</typeparam>
            <param name="list">要重新排列元素的列表</param>
            <param name="randomGenerator">用于生成随机顺序的随机数生成器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            获取集合中一段随机重排的元素集，返回排列后的新数组。
            </summary>
            <typeparam name="T">集合中元素的数据类型</typeparam>
            <param name="collection">要重新排列元素的集合</param>
            <param name="count">子集的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RandomSubset``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Random)">
            <summary>
            获取集合中一段随机重排的元素集，返回排列后的新数组。
            </summary>
            <typeparam name="T">集合中元素的数据类型</typeparam>
            <param name="collection">要重新排列元素的集合</param>
            <param name="count">子集的元素数量</param>
            <param name="randomGenerator">用于生成随机顺序的随机数生成器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GeneratePermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取指定集合中所有可能排列的元素迭代器。
            </summary>
            <typeparam name="T">改变序列的元素的数据类型</typeparam>
            <param name="collection">改变序列的元素所在集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取指定集合中所有可能排列的并排序后的元素迭代器。
            </summary>
            <typeparam name="T">改变序列的元素的数据类型</typeparam>
            <param name="collection">改变序列的元素所在集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            获取指定集合中所有可能排列的并排序后的元素迭代器。
            </summary>
            <typeparam name="T">改变序列的元素的数据类型</typeparam>
            <param name="collection">改变序列的元素所在集合</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GenerateSortedPermutations``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            获取指定集合中所有可能排列的并排序后的元素迭代器。
            </summary>
            <typeparam name="T">改变序列的元素的数据类型</typeparam>
            <param name="collection">改变序列的元素所在集合</param>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中的最大值。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要搜索的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            获取集合中的最大值。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要搜索的集合</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            获取集合中的最大值。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要搜索的集合</param>
            <param name="comparison">比较委托</param>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合中的最小值。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要搜索的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            获取集合中的最小值。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要搜索的集合</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            获取集合中的最小值。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="collection">要搜索的集合</param>
            <param name="comparison">比较委托</param>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取列表中的最大值索引。
            </summary>
            <typeparam name="T">集合的元素类型</typeparam>
            <param name="list">要搜索的列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            获取列表中的最大值索引。
            </summary>
            <typeparam name="T">列表的元素类型</typeparam>
            <param name="list">要搜索的列表</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndexOfMaximum``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            获取列表中的最大值索引。
            </summary>
            <typeparam name="T">列表的元素类型</typeparam>
            <param name="list">要搜索的列表</param>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取列表中的最小值索引。
            </summary>
            <typeparam name="T">列表的元素类型</typeparam>
            <param name="list">要搜索的列表</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            获取列表中的最小值索引。
            </summary>
            <typeparam name="T">列表的元素类型</typeparam>
            <param name="list">要搜索的列表</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.IndexOfMinimum``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            获取列表中的最小值索引。
            </summary>
            <typeparam name="T">列表的元素类型</typeparam>
            <param name="list">要搜索的列表</param>
            <param name="comparison">比较委托</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取集合的一个排序版本。
            </summary>
            <param name="collection">要排序的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            获取集合的一个排序版本。
            </summary>
            <param name="collection">要排序的集合</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Sort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            获取集合的一个排序版本。
            </summary>
            <param name="collection">要排序的集合</param>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            对列表进行排序处理。
            </summary>
            <param name="list">要排序的列表</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            对列表进行排序处理。
            </summary>
            <param name="list">要排序的列表</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.SortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            创建集合的一个稳定排序版本（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="list">要排序的列表</param>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            创建集合的一个稳定排序版本（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="collection">要排序的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            创建集合的一个稳定排序版本（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="collection">要排序的集合</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StableSort``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            创建集合的一个稳定排序版本（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="collection">要排序的集合</param>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            对列表进行稳定排序（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="list">要排序的列表</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            对列表进行稳定排序（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="list">要排序的列表</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StableSortInPlace``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            对列表进行稳定排序（即相等元素在排序前后的先后顺序保持不变）。
            </summary>
            <param name="list">要排序的列表</param>
            <param name="comparison">比较委托</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Int32@)">
            <summary>
            对排序后的列表进行二叉树搜索。返回相等的元素数量。
            </summary>
            <param name="list">要排序的列表</param>
            <param name="item">要查找的项</param>
            <param name="index">返回列表中该项的首个索引位置。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0},System.Int32@)">
            <summary>
            对排序后的列表进行二叉树搜索。返回相等的元素数量。
            </summary>
            <param name="list">要排序的列表</param>
            <param name="item">要查找的项</param>
            <param name="comparer">比较器</param>
            <param name="index">返回列表中该项的首个索引位置。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Comparison{``0},System.Int32@)">
            <summary>
            Searches a sorted list for an item via binary search. The list must be sorted
            by the ordering in the passed Comparison&lt;T&gt; delegate.
            </summary>
            <param name="list">The sorted list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="comparison">The comparison delegate used to sort the list.</param>
            <param name="index">Returns the first index at which the item can be found. If the return
            value is zero, indicating that <paramref name="item"/> was not present in the list, then this
            returns the index at which <paramref name="item"/> could be inserted to maintain the sorted
            order of the list.</param>
            <returns>The number of items equal to <paramref name="item"/> that appear in the list.</returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.MergeSorted``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Merge several sorted collections into a single sorted collection. Each input collection must be sorted
            by the natural ordering of the type (it's implementation of IComparable&lt;T&gt;). The merging
            is stable; equal items maintain their ordering, and equal items in different collections are placed
            in the order of the collections.
            </summary>
            <param name="collections">The set of collections to merge. In many languages, this parameter
            can be specified as several individual parameters.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates all the items in all the collections
            in sorted order. </returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.MergeSorted``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            合并并排序。
            </summary>
            <param name="comparer">比较器</param>
            <param name="collections">多个要合并并排序的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.MergeSorted``1(System.Comparison{``0},System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            合并并排序。
            </summary>
            <param name="comparison">比较委托</param>
            <param name="collections">多个要合并并排序的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2, 
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <remarks>T must implement either IComparable&lt;T&gt; and this implementation is used
            to compare the items. </remarks>
            <typeparam name="T">Types of items to compare. This type must implement IComparable&lt;T&gt; to allow 
            items to be compared.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
            <exception cref="T:System.NotSupportedException">T does not implement IComparable&lt;T&gt; or IComparable.</exception>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Performs a lexicographical comparison of two sequences of values, using a supplied comparison delegate. A lexicographical comparison compares corresponding
            pairs of elements from two sequences in order. If the first element of sequence1 is less than the first element of sequence2, 
            then the comparison ends and the first sequence is lexicographically less than the second. If the first elements of each sequence
            are equal, then the comparison proceeds to the second element of each sequence. If one sequence is shorter than the other,
            but corresponding elements are all equal, then the shorter sequence is considered less than the longer one.
            </summary>
            <typeparam name="T">Types of items to compare.</typeparam>
            <param name="sequence1">The first sequence to compare.</param>
            <param name="sequence2">The second sequence to compare.</param>
            <param name="comparison">The IComparison&lt;T&gt; delegate to compare items. 
            Only the Compare member function of this interface is called.</param>
            <returns>Less than zero if <paramref name="sequence1"/> is lexicographically less than <paramref name="sequence2"/>.
            Greater than zero if <paramref name="sequence1"/> is lexicographically greater than <paramref name="sequence2"/>.
            Zero if <paramref name="sequence1"/> is equal to <paramref name="sequence2"/>.</returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LexicographicalCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            按次序进行比较。
            </summary>
            <typeparam name="T">比较项的元素类型</typeparam>
            <param name="sequence1">第一个要比较的迭代器</param>
            <param name="sequence2">第二个要比较的迭代器</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetLexicographicalComparer``1">
            <summary>
            获取缺省的字典比较器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetLexicographicalComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            获取字典比较器。
            </summary>
            <param name="comparer">要包装的比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetLexicographicalComparer``1(System.Comparison{``0})">
            <summary>
            获取字典比较器。
            </summary>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetReverseComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            获取反转后使用的比较器。
            </summary>
            <typeparam name="T">要比较的项的类型</typeparam>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetIdentityComparer``1">
            <summary>
            获取默认标识比较器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetReverseComparison``1(System.Comparison{``0})">
            <summary>
            包装反转比较委托。
            </summary>
            <typeparam name="T">要比较顶的类型</typeparam>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetComparerFromComparison``1(System.Comparison{``0})">
            <summary>
            包装标识比较器。
            </summary>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetComparisonFromComparer``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            从比较器获取比较委托。
            </summary>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetCollectionEqualityComparer``1">
            <summary>
            获取缺省的相等比较器。
            如创建键值为字符串集合的字典
            <code>
            Dictionary&lt;IEnumerable&lt;string&gt;, int&gt; = 
             new Dictionary&lt;IEnumerable&lt;string&gt;, int&gt;(Algorithms.GetCollectionEqualityComparer&lt;string&gt;());
            </code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetCollectionEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取相等比较器。
            </summary>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetSetEqualityComparer``1">
            <summary>
            获取缺省的相等比较器。
            如创建键值为字符串集合的字典
            <code>
            Dictionary&lt;IEnumerable&lt;string&gt;, int&gt; = 
              new Dictionary&lt;IEnumerable&lt;string&gt;, int&gt;(Algorithms.GetSetEqualityComparer&lt;string&gt;(StringComparer.CurrentCultureIgnoreCase));
            </code>
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetSetEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取相等比较器。
            </summary>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            判断集合中是否包含满足条件的项。
            </summary>
            <param name="collection">要检查项所在的集合。</param>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            判断集合中元素是否都满足条件。
            </summary>
            <param name="collection">要检查项所在的集合。</param>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.CountWhere``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            返回集合中满足条件的元素数量。
            </summary>
            <param name="collection">要检查项所在的集合。</param>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            移除集合中所有满足条件的元素。
            </summary>
            <param name="collection">要检查项所在的集合。</param>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            转换集合的元素，并返回结果的迭代器。
            </summary>
            <typeparam name="TSource">源类型</typeparam>
            <typeparam name="TDest">目标类型</typeparam>
            <param name="sourceCollection">源集合</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetDictionaryConverter``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            创建一个用于转换键集为值集的委托。
            </summary>
            <param name="dictionary">要处理的字典</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.GetDictionaryConverter``2(System.Collections.Generic.IDictionary{``0,``1},``1)">
            <summary>
            创建一个用于转换键集为值集的委托。
            </summary>
            <param name="dictionary">要处理的字典</param>
            <param name="defaultValue">字典中不能转换成功的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对集合中每一元素执行指定的操作。
            </summary>
            <param name="collection">要处理的集合</param>
            <param name="action">要执行的操作</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Partition``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            基于指定的条件分割一个列表或数组。返回分割后第二个部分的元素索引。
            </summary>
            <param name="list">要分区的列表或数组</param>
            <param name="predicate">分区条件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.StablePartition``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            基于指定的条件分割一个列表或数组。返回分割后第二个部分的元素索引。
            这是一个稳定分区版本，即分区的元素前后顺序是一致的。
            </summary>
            <param name="list">要分区的列表或数组</param>
            <param name="predicate">分区条件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Concatenate``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            连接多个集合,并返回合集的迭代器。
            </summary>
            <param name="collections">多个具有相同数据类型的元素的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            测试两个集合是否包含相同的元素及其序列。
            </summary>
            <typeparam name="T">集合元素的数据类型</typeparam>
            <param name="collection1">要比较的第一个集合</param>
            <param name="collection2">要比较的第二个集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            测试两个集合是否包含相同的元素及其序列。
            </summary>
            <typeparam name="T">集合元素的数据类型</typeparam>
            <param name="collection1">要比较的第一个集合</param>
            <param name="collection2">要比较的第二个集合</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.EqualCollections``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},EIIP.Collections.BinaryPredicate{``0})">
            <summary>
            测试两个集合是否包含相同的元素及其序列。
            <code>
            List&lt;int&gt; list1, list2;
            if (EqualCollections(list1, list2, delegate(int x, int y) { return x &lt;= y; }) {
                // true...
            }
            </code>
            </summary>
            <typeparam name="T">集合元素的数据类型</typeparam>
            <param name="collection1">要比较的第一个集合</param>
            <param name="collection2">要比较的第二个集合</param>
            <param name="predicate">相等比较委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            创建指定迭代器的元素数组。
            </summary>
            <typeparam name="T">元素数据类型</typeparam>
            <param name="collection">要转换为数组的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取指定集合的元素数量。
            </summary>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.CountEqual``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            获取指定集合中与指定项相等的元素数量。
            </summary>
            <param name="collection">要搜索的集合</param>
            <param name="find">要查找的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.CountEqual``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取指定集合中与指定项相等的元素数量。
            </summary>
            <param name="collection">要搜索的集合</param>
            <param name="find">要查找的元素项</param>
            <param name="equalityComparer">相等比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.NCopiesOf``1(System.Int32,``0)">
            <summary>
            获取指定项指定数量的迭代器。
            创建包含 1000 个 double 类型的迭代器
            <code>
            List&lt;double&gt; list = new List&lt;double&gt;(Algorithms.NCopiesOf(1000, 1.0));
            </code>
            </summary>
            <param name="n">迭代器的元素个数</param>
            <param name="item">迭代器的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Fill``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            用指定项填充列表。
            </summary>
            <typeparam name="T">列表中的元素类型</typeparam>
            <param name="list">要修改的列表</param>
            <param name="value">要填充的项</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Fill``1(``0[],``0)">
            <summary>
            用指定项填充数组。
            </summary>
            <typeparam name="T">列表中的元素类型</typeparam>
            <param name="array">要修改的数组</param>
            <param name="value">要填充的项</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FillRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,``0)">
            <summary>
            以指定的值替换 List 中的每一项。
            </summary>
            <typeparam name="T">List 中的元素类型</typeparam>
            <param name="list">要修改的 List 对象</param>
            <param name="start">要填充的起始索引</param>
            <param name="count">要填充的元素数量</param>
            <param name="value">将填充的值</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.FillRange``1(``0[],System.Int32,System.Int32,``0)">
            <summary>
            替换数组中指定部分的元素。
            </summary>
            <param name="array">要修改的 array 对象</param>
            <param name="start">要填充的起始索引</param>
            <param name="count">要填充的元素数量</param>
            <param name="value">将填充的值</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Copies all of the items from the collection <paramref name="source"/> to the list <paramref name="dest"/>, starting
            at the index <paramref name="destIndex"/>. If necessary, the size of the destination list is expanded.
            </summary>
            <param name="source">The collection that provide the source items. </param>
            <param name="dest">The list to store the items into.</param>
            <param name="destIndex">The index to begin copying items to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destIndex"/> is negative or 
            greater than <paramref name="dest"/>.Count.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="dest"/> is null.</exception>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32)">
            <summary>
            将源集合的元素复制到数组的指定位置。
            </summary>
            <param name="source">源集合</param>
            <param name="dest">目标数组</param>
            <param name="destIndex">目标数组中接收元素的起始索引</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            将源集合的元素复制到列表的指定位置。
            </summary>
            <param name="source">源集合</param>
            <param name="dest">目标列表</param>
            <param name="destIndex">目标列表中接收元素的起始索引</param>
            <param name="count">要复制的最多元素数量</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Copy``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32,System.Int32)">
            <summary>
            将源集合的元素复制到数组的指定位置。
            </summary>
            <param name="source">源集合</param>
            <param name="dest">目标数组</param>
            <param name="destIndex">目标数组中接收元素的起始索引</param>
            <param name="count">要复制的最多元素数量</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Copy``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            从源列表中复制指定个数的元素至目标列表。
            </summary>
            <param name="source">源列表</param>
            <param name="sourceIndex">源列表的起始索引</param>
            <param name="dest">目标列表</param>
            <param name="destIndex">目标列表的起始索引</param>
            <param name="count">要复制的最多元素数量</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Copy``1(System.Collections.Generic.IList{``0},System.Int32,``0[],System.Int32,System.Int32)">
            <summary>
            从源列表中复制指定个数的元素至目标数组。
            </summary>
            <param name="source">源列表</param>
            <param name="sourceIndex">源列表的起始索引</param>
            <param name="dest">目标数组</param>
            <param name="destIndex">目标数组的起始索引</param>
            <param name="count">要复制的最多元素数量</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取指定列表的反转迭代器。
            </summary>
            <param name="source">源列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReverseInPlace``1(System.Collections.Generic.IList{``0})">
            <summary>
            反转列表或数组元素。
            </summary>
            <param name="list">要反转的列表或数组</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.Rotate``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            获取指定列表的旋转迭代器。该列表不会发生变化。
            </summary>
            <param name="source">要旋转的列表</param>
            <param name="amountToRotate">
            要旋转的元素数量，可以为正数也可以为负数。
            比如, 3 表示 source[3] 是结果集的首个元素；-3 表示 source[source.Count - 3] 是结果集的首个元素；
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Algorithms.RotateInPlace``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            旋转指定列表或数组。
            </summary>
            <param name="list">要旋转的列表</param>
            <param name="amountToRotate">
            要旋转的元素数量，可以为正数也可以为负数。
            比如, 3 表示 source[3] 是结果集的首个元素；-3 表示 source[source.Count - 3] 是结果集的首个元素；
            </param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ListRange`1">
            <summary>
            实现 Ilist&lt;T&gt; 以使用一个列表的一个区间元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.ListBase`1">
            <summary>
            实现泛型 IList&lt;T&gt; 接口的基类。
            </summary>
        </member>
        <member name="T:EIIP.Collections.CollectionBase`1">
            <summary>
            实现泛型 ICollection&lt;T&gt; 接口的集合基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.#ctor">
            <summary>
            实例化集合基类实例。
            </summary>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.ToString">
            <summary>
            返回集合的描述字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.Add(`0)">
            <summary>
            添加指定元素。需要在继承类中重写。
            </summary>
            <remarks>
            <code>
                public class MyCollection&lt;T&gt;: CollectionBase&lt;T&gt;, ICollection&lt;T&gt;
                {
                    public new bool Add(T item) {
                        /* Add the item */
                    }
             
                    void ICollection&lt;T&gt;.Add(T item) {
                        Add(item);
                    }
                }
            </code>
            </remarks>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.Clear">
            <summary>
            清空元素。需要在继承类中重写。
            </summary>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.Remove(`0)">
            <summary>
            移除指定元素。需要在继承类中重写。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.Contains(`0)">
            <summary>
            测试是否存在指定元素。需要在继承类中重写。
            </summary>
            <param name="item">要测试的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            将集合中的元素复制至指定的数组中。
            </summary>
            <param name="array">要接收元素的数组</param>
            <param name="arrayIndex">array 开始接收复制元素的起始索引位置</param>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.ToArray">
            <summary>
            转换为数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.AsReadOnly">
            <summary>
            返回集合实例的一个只读 ICollection&lt;T&gt; 包装。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            测试是否存在指定委托。
            </summary>
            <param name="predicate">要检查的委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            判断集合中元素是否都满足条件。
            </summary>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.CountWhere(System.Predicate{`0})">
            <summary>
            返回集合中满足条件的元素数量。
            </summary>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.FindAll(System.Predicate{`0})">
            <summary>
            返回符合条件的迭代器。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.RemoveAll(System.Predicate{`0})">
            <summary>
            移除集合中所有满足条件的元素。
            </summary>
            <param name="predicate">条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.ForEach(System.Action{`0})">
            <summary>
            对集合中每一元素执行指定的操作。
            </summary>
            <param name="action">要执行的操作</param>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            转换集合的元素，并返回结果的迭代器。
            </summary>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.GetEnumerator">
            <summary>
            获取枚举数。必须在继承类中实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            将集合中的元素复制至指定的数组中。
            </summary>
            <param name="array">要接收元素的数组</param>
            <param name="index">array 开始接收复制元素的起始索引位置</param>
        </member>
        <member name="M:EIIP.Collections.CollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.CollectionBase`1.Count">
            <summary>
            获取元素数量。需要在继承类中重写。
            </summary>
        </member>
        <member name="P:EIIP.Collections.CollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            总是返回false。
            </summary>
        </member>
        <member name="P:EIIP.Collections.CollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 System.Collections.ICollection 的访问（线程安全）。总是返回false。
            </summary>
        </member>
        <member name="P:EIIP.Collections.CollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 System.Collections.ICollection 访问的对象。总是返回当前实例。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Clear">
            <summary>
            清空元素。需要在继承类中重写。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Insert(System.Int32,`0)">
            <summary>
            在指定索引位置插入指定元素。需要在继承类中重写。
            </summary>
            <param name="index">要插入元素的索引</param>
            <param name="item">要插入的元素</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Contains(`0)">
            <summary>
            是否存在指定元素。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Add(`0)">
            <summary>
            添加指定元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Remove(`0)">
            <summary>
            删除指定元素。
            </summary>
            <param name="item">要删除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.CopyTo(`0[])">
            <summary>
            将元素复制至指定数组。
            </summary>
            <param name="array">要接收元素的目标数组</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            将元素复制至指定数组。
            </summary>
            <param name="array">要接收元素的目标数组</param>
            <param name="arrayIndex">array 接收元素的起始索引</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            将元素复制至指定数组。
            </summary>
            <param name="index">源列表中要复制元素的起始索引</param>
            <param name="array">要接收元素的目标数组</param>
            <param name="arrayIndex">array 接收元素的起始索引</param>
            <param name="count">要复制的元素数量</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.AsReadOnly">
            <summary>
            获取指定列表对象的一个只读包装。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Find(System.Predicate{`0})">
            <summary>
            查找列表中首个符合条件的一项。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.TryFind(System.Predicate{`0},`0@)">
            <summary>
            查找列表中首个符合条件的一项。存在时返回true。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <param name="foundItem">返回匹配的最后一项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindLast(System.Predicate{`0})">
            <summary>
            查找列表中最后符合条件的一项。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.TryFindLast(System.Predicate{`0},`0@)">
            <summary>
            查找列表中最后符合条件的一项。存在时返回true。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <param name="foundItem">返回匹配的最后一项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindIndex(System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="index">要查找的列表的起始索引位置</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="index">要查找的列表的起始索引位置</param>
            <param name="count">要查找的列表的元素数量</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="index">要查找的列表的结束索引位置</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="index">要查找的列表的结束索引位置</param>
            <param name="count">要查找的列表的元素数量</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.IndexOf(`0)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查找的列表的起始索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查找的列表的起始索引位置</param>
            <param name="count">要查找的列表的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.LastIndexOf(`0)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查找的列表的结束索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查找的列表的结束索引位置</param>
            <param name="count">要查找的列表的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.Range(System.Int32,System.Int32)">
            <summary>
            获取指定列表的一个区间。该区间的元素并不是从列表中复制出来的，而是其对外的一种视图。
            </summary>
            <remarks>
            可将指定的算法应用于一个列表的部分元素。如:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(list, 3, 6))</code>
            会反转从索引位置3开始的 6 个元素。 
            </remarks>
            <param name="start">起始索引</param>
            <param name="count">在视图中的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.ConvertToItemType(System.String,System.Object)">
            <summary>
            将参数转换为指定类型数据。
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            添加指定值。
            </summary>
            <param name="value">要添加的元素值。</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#Clear">
            <summary>
            移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            是否存在指定元素。
            </summary>
            <param name="value">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="value">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            在指定索引位置插入指定元素。需要在继承类中重写。
            </summary>
            <param name="index">要插入元素的索引</param>
            <param name="value">要插入的元素</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            从 System.Collections.IList 中移除特定对象的第一个匹配项。
            </summary>
            <param name="value">要从 System.Collections.IList 移除的 System.Object。</param>
        </member>
        <member name="M:EIIP.Collections.ListBase`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            移除指定索引处的 System.Collections.IList 项。
            </summary>
            <param name="index">从零开始的索引（属于要移除的项）。</param>
        </member>
        <member name="P:EIIP.Collections.ListBase`1.Count">
            <summary>
            获取元素数量。需要在继承类中重写。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ListBase`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的元素。需要在继承类中重写。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ListBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            获取一个值，该值指示 System.Collections.IList 是否具有固定大小。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ListBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.IList 是否为只读。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ListBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ListRange`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            实例化指定列表的区间实例。
            </summary>
            <param name="wrappedList">要包装的 List 对象</param>
            <param name="start">包装列表的起始索引。</param>
            <param name="count">区间包含的元素数量</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ListRange`1.Clear">
            <summary>
            移除区间中的所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ListRange`1.Insert(System.Int32,`0)">
            <summary>
            在指定索引位置插入元素。
            </summary>
            <param name="index">索引</param>
            <param name="item">要插入的元素</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ListRange`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ListRange`1.Remove(`0)">
            <summary>
            移除指定元素。
            </summary>
            <param name="item">元素。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.Algorithms.ListRange`1.Count">
            <summary>
            获取区间元素的数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Algorithms.ListRange`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引元素。
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.Algorithms.ListRange`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.Generic.ICollection&lt;T&gt; 是否为只读。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ArrayRange`1">
            <summary>
            实现 Ilist&lt;T&gt; 以使用一个数组的一个区间元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ArrayRange`1.#ctor(`0[],System.Int32,System.Int32)">
            <summary>
            实例化指定数组的区间实例。
            </summary>
            <param name="wrappedArray">要包装的 Array 对象</param>
            <param name="start">包装数组的起始索引。</param>
            <param name="count">区间包含的元素数量</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ArrayRange`1.Clear">
            <summary>
            移除区间中的所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ArrayRange`1.Insert(System.Int32,`0)">
            <summary>
            在指定索引位置插入元素。
            </summary>
            <param name="index">索引</param>
            <param name="item">要插入的元素</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ArrayRange`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:EIIP.Collections.Algorithms.ArrayRange`1.Count">
            <summary>
            获取区间元素的数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Algorithms.ArrayRange`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引元素。
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ReadOnlyCollection`1">
            <summary>
            实现只读 ICollection&lt;T&gt; 的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadOnlyCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            包装一个只读集合实例。
            </summary>
            <param name="wrappedCollection">要包装的 Collection</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ReadOnlyList`1">
            <summary>
            实现 IList&lt;T&gt; 的只读 List。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadOnlyList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            实例化只读列表对象实例。
            </summary>
            <param name="wrappedList">要包装的 List </param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ReadOnlyDictionary`2">
            <summary>
            实现了 IDictionary &lt;TKey,TValue&gt; 的只读字典。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            创建指定字典的只读包装。
            </summary>
            <param name="wrappedDictionary">要包装的 IDictionary&lt;TKey,TValue&gt;</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.TypedEnumerator`1">
            <summary>
            类型化枚举数的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedEnumerator`1.#ctor(System.Collections.IEnumerator)">
            <summary>
            创建类型化枚举数的实例。
            </summary>
            <param name="wrappedEnumerator">要包装的 IEnumerator</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.TypedEnumerable`1">
            <summary>
            类型化可枚举的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedEnumerable`1.#ctor(System.Collections.IEnumerable)">
            <summary>
            创建类型化可枚举的实例。
            </summary>
            <param name="wrappedEnumerable">要包装的 IEnumerable</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.TypedCollection`1">
            <summary>
            类型化集合的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedCollection`1.#ctor(System.Collections.ICollection)">
            <summary>
            创建类型化集合的实例。
            </summary>
            <param name="wrappedCollection">要包装的 ICollection 对象</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.TypedList`1">
            <summary>
            类型化列表的包装类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.TypedList`1.#ctor(System.Collections.IList)">
            <summary>
            实例化类型化列表。
            </summary>
            <param name="wrappedList">要包装的 IList </param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.UntypedCollection`1">
            <summary>
            未类型化的集合的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.UntypedCollection`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            创建未类型化的集合的实例。
            </summary>
            <param name="wrappedCollection">要包装的 ICollection&lt;T&gt;</param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.UntypedCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            从指定索引开始，将元素复制至指定数组array中。
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.UntypedList`1">
            <summary>
            未类型化的列表的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.UntypedList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            创建未类型化的列表的实例。
            </summary>
            <param name="wrappedList"></param>
        </member>
        <member name="M:EIIP.Collections.Algorithms.UntypedList`1.ConvertToItemType(System.String,System.Object)">
            <summary>
            转换给定的参数为类型T。当转换失败时抛出错误。
            </summary>
            <param name="name">参数名称</param>
            <param name="value">参数值</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ArrayWrapper`1">
            <summary>
            实现了 IList&lt;T&gt; 接口的数组的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ArrayWrapper`1.#ctor(`0[])">
            <summary>
            创建包装对象。
            </summary>
            <param name="wrappedArray">要包装的数组</param>
        </member>
        <member name="P:EIIP.Collections.Algorithms.ArrayWrapper`1.System#Collections#IList#IsFixedSize">
            <summary>
            始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Algorithms.LexicographicalComparerClass`1">
            <summary>
            按词典进行比较的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.LexicographicalComparerClass`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化新实例。
            </summary>
            <param name="itemComparer">比较器</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.ReverseComparerClass`1">
            <summary>
            提供用于反转后比较的类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Algorithms.ReverseComparerClass`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化用于反转后比较的实例。
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="T:EIIP.Collections.Algorithms.IdentityComparer`1">
            <summary>
            标识比较器。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Algorithms.CollectionEqualityComparer`1">
            <summary>
            集合相等比较器。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Algorithms.SetEqualityComparer`1">
            <summary>
            集合相等比较器。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Bag`1">
            <summary>
            Bag&lt;T&gt; 是一个包含数据类型T的元素的无序集合。
            不同于 Set, 它允许有重复元素项。当有多个相同项加入Bag中时，它们将被存储为一个典型项与一个数量。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Bag`1.equalityComparer">
            <summary>
            用于比较 KeyValuePairs 的比较器。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Bag`1.keyEqualityComparer">
            <summary>
            用于比较元素项的比较器。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Bag`1.hash">
            <summary>
            实际存储元素项的哈希表。每一项被存储为一个典型项与一个计数。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Bag`1.count">
            <summary>
            存储在Bag中的元素数量。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Bag`1.NumberOfCopies(`0)">
            <summary>
            获取 Bag 中指定元素项的副本个数。
            </summary>
            <param name="item">要搜索的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.GetRepresentativeItem(`0,`0@)">
            <summary>
            获取 Bag 与指定元素相等的典型元素项。并返回存储在 Bag 中的相等元素数量。
            </summary>
            <param name="item">要在 Bag 中搜索的元素项</param>
            <param name="representative">
            若能在 Bag 中找到与 item 相等的典型项，则返回找到的典型项，否则直接返回 item
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.GetEnumerator">
            <summary>
            获取元素(键)的迭代器。相同元素也会同时返回。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.Bag`1.Contains(`0)">
            <summary>
            测试 Bag 中是否包含指定的元素项。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.DistinctItems">
            <summary>
            获取唯一元素(键)的迭代器。相同元素仅返回一个。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.NewPair(`0,System.Int32)">
            <summary>
            创建指定元素项的键值对实例。
            </summary>
            <param name="item">元素项，为键</param>
            <param name="count">元素项出现的次数，为值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.NewPair(`0)">
            <summary>
            创建指定元素项的键值对实例。键为该元素项，值为0。
            </summary>
            <param name="item">元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.#ctor">
            <summary>
            创建新的Bag实例。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            创建新的Bag实例。
            </summary>
            <param name="equalityComparer">IEqualityComparer&lt;T&gt; 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化指定元素的Bag实例。
            </summary>
            <param name="collection">包含要初始化元素的集合</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            实例化指定元素的Bag实例。
            </summary>
            <param name="collection">包含要初始化元素的集合</param>
            <param name="equalityComparer">IEqualityComparer&lt;T&gt; 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.#ctor(System.Collections.Generic.IEqualityComparer{System.Collections.Generic.KeyValuePair{`0,System.Int32}},System.Collections.Generic.IEqualityComparer{`0},EIIP.Collections.Hash{System.Collections.Generic.KeyValuePair{`0,System.Int32}},System.Int32)">
            <summary>
            实例化指定的Bag实例。
            </summary>
            <param name="equalityComparer">用于 Bag 的 IEqualityComparer 实例</param>
            <param name="keyEqualityComparer">用于键的 IEqualityComparer 实例</param>
            <param name="hash">Bag 的数据</param>
            <param name="count">Bag 的尺寸</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.System#ICloneable#Clone">
            <summary>
            获取一个浅层副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Clone">
            <summary>
            获取一个浅层副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.CloneContents">
            <summary>
            获取一个深层副本。每一元素项须实现 ICloneable 接口，否则会抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Add(`0)">
            <summary>
            添加指定元素项。
            </summary>
            <param name="item">要添加的元素项</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.AddRepresentative(`0)">
            <summary>
            添加指定作为典型项的元素项。
            </summary>
            <param name="item">要添加的元素项</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.ChangeNumberOfCopies(`0,System.Int32)">
            <summary>
            变更 Bag 中存在的元素项的计数。
            </summary>
            <param name="item">要变更计数的元素</param>
            <param name="numCopies">新的计数</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将集合中的项添加至 Bag 中。
            </summary>
            <param name="collection">提供元素的集合</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Remove(`0)">
            <summary>
            移除指定元素。当有多个相同元素时，仅递减计数。当发现并移除指定元素时返回true。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.RemoveAllCopies(`0)">
            <summary>
            移除所有指定元素。返回移除元素的个数。
            </summary>
            <param name="item">要除除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除集合中指定的元素。返回从 Bag 中移除元素的个数。
            </summary>
            <param name="collection">包含要移除的元素集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Clear">
            <summary>
            移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Bag`1.CheckConsistentComparison(EIIP.Collections.Bag{`0})">
            <summary>
            检查当前实例与指定的Bag实例是否含相同的比较委托实例。当不同时抛出错误。
            </summary>
            <param name="otherBag">Bag实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IsEqualTo(EIIP.Collections.Bag{`0})">
            <summary>
            测试相等。
            </summary>
            <param name="otherBag">要比较的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IsSupersetOf(EIIP.Collections.Bag{`0})">
            <summary>
            测试是否为指定实例的扩展集。包括相等。
            </summary>
            <param name="otherBag">要比较的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IsProperSupersetOf(EIIP.Collections.Bag{`0})">
            <summary>
            测试是否为指定实例的扩展集。不包括相等。
            </summary>
            <param name="otherBag">要比较的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IsSubsetOf(EIIP.Collections.Bag{`0})">
            <summary>
            测试是否为指定实例的子集。包括相等。
            </summary>
            <param name="otherBag">要比较的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IsProperSubsetOf(EIIP.Collections.Bag{`0})">
            <summary>
            测试是否为指定实例的子集。不包括相等。
            </summary>
            <param name="otherBag">要比较的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IsDisjointFrom(EIIP.Collections.Bag{`0})">
            <summary>
            测试当前实例是否由指定实例分解而成的。
            </summary>
            <param name="otherBag">要比较的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.UnionWith(EIIP.Collections.Bag{`0})">
            <summary>
            合并指定 Bag 实例。
            </summary>
            <param name="otherBag">要合并的 Bag 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Union(EIIP.Collections.Bag{`0})">
            <summary>
            获取当前 Bag 实例与指定 Bag 实例的并集。
            </summary>
            <param name="otherBag">要合并的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.SumWith(EIIP.Collections.Bag{`0})">
            <summary>
            设置与指定 Bag 实例的合集。
            </summary>
            <param name="otherBag">要合并的 Bag 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Sum(EIIP.Collections.Bag{`0})">
            <summary>
            获取当前 Bag 实例与指定 Bag 实例的合集。
            </summary>
            <param name="otherBag">要合并的 Bag 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.IntersectionWith(EIIP.Collections.Bag{`0})">
            <summary>
            设置与指定 Bag 实例的交集。
            </summary>
            <param name="otherBag">要相交的 Bag 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Intersection(EIIP.Collections.Bag{`0})">
            <summary>
            获取当前 Bag 实例与指定 Bag 实例的交集。
            </summary>
            <param name="otherBag">要相交的 Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.DifferenceWith(EIIP.Collections.Bag{`0})">
            <summary>
            设置与指定 Bag 实例的差集。
            </summary>
            <param name="otherBag">Bag 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.Difference(EIIP.Collections.Bag{`0})">
            <summary>
            获取当前 Bag 实例与指定 Bag 实例的差集。
            </summary>
            <param name="otherBag">Bag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Bag`1.SymmetricDifferenceWith(EIIP.Collections.Bag{`0})">
            <summary>
            设置与指定 Bag 实例的对称差集。
            </summary>
            <param name="otherBag">Bag 实例</param>
        </member>
        <member name="M:EIIP.Collections.Bag`1.SymmetricDifference(EIIP.Collections.Bag{`0})">
            <summary>
            获取当前 Bag 实例与指定 Bag 实例的对称差集。
            </summary>
            <param name="otherBag">Bag 实例</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.Bag`1.Comparer">
            <summary>
            获取 Bag 中用于比较的 IEqualityComparer&lt;T&gt;。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Bag`1.Count">
            <summary>
            获取元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.BigList`1">
            <summary>
            BigList&lt;T&gt; 提供一个排序的列表类。适用于超过100项元素的列表。
            </summary>
            <typeparam name="T">元素的数据类型</typeparam>
        </member>
        <member name="F:EIIP.Collections.BigList`1.MAXITEMS">
            <summary>
            BigList中能容纳的最大的元素个数。
            </summary>
        </member>
        <member name="F:EIIP.Collections.BigList`1.MAXLEAF">
            <summary>
            一个叶子节点能容纳的最大的元素个数。
            </summary>
        </member>
        <member name="F:EIIP.Collections.BigList`1.BALANCEFACTOR">
            <summary>
            平衡因子。
            </summary>
        </member>
        <member name="F:EIIP.Collections.BigList`1.MAXFIB">
            <summary>
            斐波纳契数列最大的索引。
            </summary>
        </member>
        <member name="F:EIIP.Collections.BigList`1.FIBONACCI">
            <summary>
            斐波纳契数列
            </summary>
        </member>
        <member name="F:EIIP.Collections.BigList`1.root">
            <summary>
            根节点。如为null，表示BigList是空的；否则，表示BigList至少有一个元素。
            </summary>
        </member>
        <member name="F:EIIP.Collections.BigList`1.changeStamp">
            <summary>
            变更印戳标记。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BigList`1.#ctor">
            <summary>
            实例化缺省实例。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BigList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化指定实例。
            </summary>
            <param name="collection">提供初始化元素的集合对象</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            实例化指定实例。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
            <param name="copies">要初始化元素的个数</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.#ctor(EIIP.Collections.BigList{`0})">
            <summary>
            实例化指定实例。
            </summary>
            <param name="list">另一个 BigList 实例</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.#ctor(EIIP.Collections.BigList{`0},System.Int32)">
            <summary>
            实例化指定实例。
            </summary>
            <param name="list">另一个 BigList 实例</param>
            <param name="copies">要初始化元素的个数</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.#ctor(EIIP.Collections.BigList{`0}.Node)">
            <summary>
            从指定的节点实例化。
            </summary>
            <param name="node">作为根节点的 node，若为 null，新的BigList实例不包含元素</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Clear">
            <summary>
            清空列表。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Insert(System.Int32,`0)">
            <summary>
            在指定索引位置插入元素。
            </summary>
            <param name="index">要插入的索引位置</param>
            <param name="item">要插入的元素</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            在指定索引位置批量插入元素。
            </summary>
            <param name="index">要插入的索引位置</param>
            <param name="collection">提供插入元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.InsertRange(System.Int32,EIIP.Collections.BigList{`0})">
            <summary>
            在指定索引位置批量插入元素。
            </summary>
            <param name="index">要插入的索引位置</param>
            <param name="list">提供插入元素的列表对象</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index">要移除元素所在的索引位置</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            批量移除元素。
            </summary>
            <param name="index">要移除元素所在的起始索引位置</param>
            <param name="count">要移除元素的数量</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Add(`0)">
            <summary>
            添加元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.AddToFront(`0)">
            <summary>
            在列表的起始位置添加指定元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加元素。
            </summary>
            <param name="collection">提供添加元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.AddRangeToFront(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加元素至列表起始位置。
            </summary>
            <param name="collection">提供添加元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Clone">
            <summary>
            克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.System#ICloneable#Clone">
            <summary>
            克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.CloneContents">
            <summary>
            深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.AddRange(EIIP.Collections.BigList{`0})">
            <summary>
            批量添加元素。
            </summary>
            <param name="list">提供添加元素的列表对象</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.AddRangeToFront(EIIP.Collections.BigList{`0})">
            <summary>
            批量添加元素至列表起始位置。
            </summary>
            <param name="list">提供添加元素的列表对象</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.op_Addition(EIIP.Collections.BigList{`0},EIIP.Collections.BigList{`0})">
            <summary>
            重载+操作符。
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            获取区域元素。
            </summary>
            <param name="index">子列表的起始元素</param>
            <param name="count">子列表的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Range(System.Int32,System.Int32)">
            <summary>
            获取区域元素。
            </summary>
            <param name="index">子列表的起始元素</param>
            <param name="count">子列表的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            转换列表为指定元素类型的另一列表。
            </summary>
            <typeparam name="TDest">目标元素类型</typeparam>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Reverse">
            <summary>
            反转列表。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            反转部分列表元素。
            </summary>
            <param name="start">要反转的起始索引位置</param>
            <param name="count">要反转的元素个数</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Sort">
            <summary>
            排序元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            排序元素。
            </summary>
            <param name="comparer">排序使用的比较器</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.Sort(System.Comparison{`0})">
            <summary>
            排序元素。
            </summary>
            <param name="comparison">排序使用的比较委托</param>
        </member>
        <member name="M:EIIP.Collections.BigList`1.BinarySearch(`0)">
            <summary>
            搜索指定元素。找到了返回索引。否则返回负数。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            搜索指定元素。找到了返回索引。否则返回负数。
            </summary>
            <param name="item">要搜索的元素</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.BigList`1.BinarySearch(`0,System.Comparison{`0})">
            <summary>
            搜索指定元素。找到了返回索引。否则返回负数。
            </summary>
            <param name="item">要搜索的元素</param>
            <param name="comparison">比较委托</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.BigList`1.Count">
            <summary>
            获取列表中元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.BigList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引位置的元素。
            </summary>
        </member>
        <member name="P:EIIP.Collections.BigList`1.Node.Count">
            <summary>
            获取元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Comparers">
            <summary>
            提供创建 IComparer 与 IEqualityComparer 实例的几种方式的方法实用工具。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Comparers.ComparerFromComparison``1(System.Comparison{``0})">
            <summary>
            获取指定类型的比较接口。
            </summary>
            <typeparam name="T">要比较的类型</typeparam>
            <param name="comparison">比较同一类型的两个对象的方法。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Comparers.ComparerKeyValueFromComparerKey``2(System.Collections.Generic.IComparer{``0})">
            <summary>
            创建基于键比较的键值对比较实例。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="keyComparer">用于键的比较接口实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Comparers.EqualityComparerKeyValueFromComparerKey``2(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建基于键比较的键值对比较实例。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="keyEqualityComparer">用于键的比较实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Comparers.ComparerPairFromKeyValueComparers``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IComparer{``1})">
            <summary>
            创建键值对比较实例。先比较键，再比较值。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="keyComparer">用于键的比较实例</param>
            <param name="valueComparer">用于值的比较实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Comparers.ComparerKeyValueFromComparisonKey``2(System.Comparison{``0})">
            <summary>
            创建基于键比较的键值对比较实例。
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="keyComparison">基于键的比较同一类型的两个对象的方法。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Comparers.DefaultComparer``1">
            <summary>
            获取指定类型的缺省比较器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Comparers.DefaultKeyValueComparer``2">
            <summary>
            创建基于键比较的键值对缺省比较实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Comparers.KeyValueEqualityComparer`2">
            <summary>
            将 IEqualityComparer&lt;TKey&gt; 转换为 IEqualityComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 的类。
            该类仅比较键。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Comparers.KeyValueComparer`2">
            <summary>
            将 IComparer&lt;TKey&gt; 转换为 IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 的类。该类仅比较键。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Comparers.PairComparer`2">
            <summary>
            将 IComparer&lt;TKey&gt; 与 IComparer&lt;TValue&gt; 转换为 IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 的类。
            先比较键，然后比较值。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Comparers.ComparisonComparer`1">
            <summary>
            转换 Comparison&lt;T&gt; 为 IComparer&lt;T&gt; 的类。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Comparers.ComparisonKeyValueComparer`2">
            <summary>
            转换 Comparison&lt;TKey&gt; 为 IComparer&lt;KeyValuePair&lt;TKey, TValue&gt;&gt; 的类。
            不应在类实例中使用 GetHashCode 方法。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Deque`1">
            <summary>
            支持泛型的双端队列类。在起始处添加/删除数据项时比列表更高效。
            </summary>
            <typeparam name="T">元素类型</typeparam>
        </member>
        <member name="F:EIIP.Collections.Deque`1.INITIAL_SIZE">
            <summary>
            缓存的初始容量。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Deque`1.buffer">
            <summary>
            队列缓存。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Deque`1.start">
            <summary>
            队列中的起始索引。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Deque`1.end">
            <summary>
            队列中的结束索引。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Deque`1.#ctor">
            <summary>
            实例化空的双端队列。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化指定的双端队列。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
            将元素复制至指定数组。
            </summary>
            <param name="array">要接收元素的目标数组</param>
            <param name="arrayIndex">array 接收元素的起始索引</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.TrimToSize">
            <summary>
            将容量设置为元素数量。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Deque`1.Clear">
            <summary>
            清空队列元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Deque`1.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.Insert(System.Int32,`0)">
            <summary>
            在指定索引位置插入元素。
            </summary>
            <param name="index">要插入元素的索引位置</param>
            <param name="item">要插入的元素</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            在指定索引位置批量插入元素。
            </summary>
            <param name="index">要插入的索引位置</param>
            <param name="collection">提供插入元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.RemoveAt(System.Int32)">
            <summary>
            移除指定索引位置的元素。
            </summary>
            <param name="index">要移除元素所在的索引位置</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            批量移除元素。
            </summary>
            <param name="index">要移除元素所在的起始索引位置</param>
            <param name="count">要移除元素的数量</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.AddToFront(`0)">
            <summary>
            在队列的起始位置添加指定元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.AddManyToFront(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加元素至队列头部。
            </summary>
            <param name="collection">提供添加元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.AddToBack(`0)">
            <summary>
            在队列的尾部位置添加指定元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.Add(`0)">
            <summary>
            添加元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.AddManyToBack(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            在尾部批量添加元素。
            </summary>
            <param name="collection">提供添加元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.Deque`1.RemoveFromFront">
            <summary>
            从队列头部移除一个元素，并返回该元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.RemoveFromBack">
            <summary>
            从队列尾部部移除一个元素，并返回该元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.GetAtFront">
            <summary>
            从队列头部获取首个元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.GetAtBack">
            <summary>
            从队列尾部获取首个元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.System#ICloneable#Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Deque`1.CloneContents">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.Deque`1.Count">
            <summary>
            获取队列元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Deque`1.Capacity">
            <summary>
            获取或设置队列容量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Deque`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引的元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.DictionaryBase`2">
            <summary>
            实例了泛型 IDictionary&lt;T&gt; 接口的字典基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.Clear">
            <summary>
            清空字典。需要在继承类中实现。
            </summary>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.Remove(`0)">
            <summary>
            从字典中移除指定键。成功移除后返回true。需要在继承类中实现。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取指定键的值。存在则返回true。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">当存在指定键 key 时，返回对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.Add(`0,`1)">
            <summary>
            添加新的键值对。当字典中已存在相同键时，抛出错误。
            </summary>
            <param name="key">键</param>
            <param name="value">值。</param>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.ContainsKey(`0)">
            <summary>
            判断字典中是否存在指定键。
            </summary>
            <param name="key">要查询的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.ToString">
            <summary>
            字典的字串描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.AsReadOnly">
            <summary>
            获取字典的一个只读包装。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加键值对。
            </summary>
            <param name="item">要添加的键值对</param>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            判断是否包含指定键值对。
            </summary>
            <param name="item">要查询的键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            移除指定键值对。
            </summary>
            <param name="item">要移除的键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            在 System.Collections.IDictionary 对象中添加一个带有所提供的键和值的元素。
            </summary>
            <param name="key">用作要添加的元素的键的 System.Object。</param>
            <param name="value">用作要添加的元素的值的 System.Object。</param>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Clear">
            <summary>
            从 System.Collections.IDictionary 对象中移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            确定 System.Collections.IDictionary 对象是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 System.Collections.IDictionary 对象中定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            从 System.Collections.IDictionary 对象中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            返回一个用于 System.Collections.IDictionary 对象的 System.Collections.IDictionaryEnumerator 对象。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.DictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个用于 System.Collections.IDictionary 对象的 System.Collections.IDictionaryEnumerator 对象。
            </summary>
            <returns></returns>		
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.Item(`0)">
            <summary>
            获取或设置指定键的值。必须重载 set 操作符。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.Keys">
            <summary>
            获取字典中键的只读集合。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.Values">
            <summary>
            获取字典中值的只读集合。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            获取一个值，该值指示 System.Collections.IDictionary 对象是否具有固定大小。总是返回false。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.IDictionary 对象是否为只读。总是返回false。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Keys">
            <summary>
            获取 System.Collections.ICollection 对象，它包含 System.Collections.IDictionary 对象的键。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Values">
            <summary>
            获取 System.Collections.ICollection 对象，它包含 System.Collections.IDictionary 对象的键。
            </summary>
        </member>
        <member name="P:EIIP.Collections.DictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            获取或设置具有指定键的元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.DictionaryBase`2.KeysCollection">
            <summary>
            键的只读集合
            </summary>
        </member>
        <member name="T:EIIP.Collections.ReadOnlyCollectionBase`1">
            <summary>
            实现泛型 ICollection&lt;T&gt; 接口的只读集合基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.ToString">
            <summary>
            获取集合的描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.Exists(System.Predicate{`0})">
            <summary>
            判断集合中是否包含满足条件的项。
            </summary>
            <param name="predicate">要测试的条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.TrueForAll(System.Predicate{`0})">
            <summary>
            判断集合中元素是否都满足条件。
            </summary>
            <param name="predicate">要测试的条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.CountWhere(System.Predicate{`0})">
            <summary>
            返回集合中满足条件的元素数量。
            </summary>
            <param name="predicate">要测试的条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.FindAll(System.Predicate{`0})">
            <summary>
            返回符合条件的迭代器。
            </summary>
            <param name="predicate">要测试的条件委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.ForEach(System.Action{`0})">
            <summary>
            对集合中每一元素执行指定的操作。
            </summary>
            <param name="action">要执行的操作</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            转换集合的元素，并返回结果的迭代器。
            </summary>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            只读集合不支持该操作。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Clear">
            <summary>
            只读集合不支持该操作。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            只读集合不支持该操作。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.Contains(`0)">
            <summary>
            测试是否包含指定项。
            </summary>
            <param name="item">要搜索的项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            将元素复制至指定数组中。
            </summary>
            <param name="array">目标数组</param>
            <param name="arrayIndex">array 复制的目标起始索引</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.ToArray">
            <summary>
            转换为数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            将元素复制至指定数组中。
            </summary>
            <param name="array">目标数组</param>
            <param name="index">array 复制的目标起始索引</param>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyCollectionBase`1.Count">
            <summary>
            获取元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            始终返回true。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 System.Collections.ICollection 的访问（线程安全）。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            获取可用于同步 System.Collections.ICollection 访问的对象。
            </summary>
        </member>
        <member name="T:EIIP.Collections.DictionaryBase`2.ValuesCollection">
            <summary>
            值的只读集合
            </summary>
        </member>
        <member name="T:EIIP.Collections.Hash`1">
            <summary>
            该（内部）基类由多个哈希集合类实现。该类不应该由最终用户直接操作使用。它并不处理重复值。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.MINSIZE">
            <summary>
            Slot的最小数量。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.equalityComparer">
            <summary>
            比较元素的接口。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.count">
            <summary>
            哈希表中的元素数量。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.usedSlots">
            <summary>
            包含实际的元素与已删除的元素的边界。当需要变更Hash尺寸时使用该值来判断。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.totalSlots">
            <summary>
            Hash表的尺寸。总是一个平方值。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.loadFactor">
            <summary>
            最大的加载因子。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.thresholdGrow">
            <summary>
            小于等于 totalSlots * loadFactor 的最大整数。floor(totalSlots * loadFactor)
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.thresholdShrink">
            <summary>
            收缩量。thresholdGrow / 3
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.hashMask">
            <summary>
            转换哈希值至同尺寸的表的掩码。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.secondaryShift">
            <summary>
            移至第二个值时，需要跳过的数量。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.table">
            <summary>
            哈希表。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.changeStamp">
            <summary>
            记录每次哈希表结构变更时的变更标志。当对外枚举的同时，发生结构变更，会抛出错误。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.serializationInfo">
            <summary>
            在反序列化时使用的信息。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Hash`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            实例化指定比较器的哈希表实例。
            </summary>
            <param name="equalityComparer">比较器</param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.GetEnumerationStamp">
            <summary>
            获取当前的枚举标志。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.StopEnumerations">
            <summary>
            停止对外枚举。正处理的枚举会抛出错误。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Hash`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            检查当前枚举标志是否匹配枚举前的标志。若不匹配(过期)时，抛出错误。
            </summary>
            <param name="startStamp">枚举时的标志</param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.GetFullHash(`0)">
            <summary>
            获取指定项的哈希码。始终不会为零。
            </summary>
            <param name="item">要获取哈希码的项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.GetHashValuesFromFullHash(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            获取初始桶值与哈希跳跃值。
            </summary>
            <param name="hash">哈希码</param>
            <param name="initialBucket">返回初始桶值。取值范围在 0..(totalSlots - 1) 内</param>
            <param name="skip">返回跳跃值。取值范围在 0..(totalSlots - 1) 内的奇数值</param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.GetHashValues(`0,System.Int32@,System.Int32@)">
            <summary>
            获取指定元素项的哈希值，初始桶值与哈希跳跃值。
            </summary>
            <param name="item">哈希码对应的元素项</param>
            <param name="initialBucket">返回初始桶值。取值范围在 0..(totalSlots - 1) 内</param>
            <param name="skip">返回跳跃值。取值范围在 0..(totalSlots - 1) 内的奇数值</param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.EnsureEnoughSlots(System.Int32)">
            <summary>
            确定哈希表中有足够的Slot，以便于指定 additionalItems 数量的项能被插入至哈希表中。
            </summary>
            <param name="additionalItems">要插入项的数量</param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.ShrinkIfNeeded">
            <summary>
            收缩哈希表。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Hash`1.GetSecondaryShift(System.Int32)">
            <summary>
            根据哈希表尺寸获取跳跃数。
            </summary>
            <param name="newSize">哈希表的新尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.ResizeTable(System.Int32)">
            <summary>
            变更哈希表尺寸。
            </summary>
            <param name="newSize">哈希表新尺寸，必须为一平方值</param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.Insert(`0,System.Boolean,`0@)">
            <summary>
            插入项。返回值指示是否有重复项。当有重复项时返回false。
            </summary>
            <param name="item">要插入的项</param>
            <param name="replaceOnDuplicate">当为真时，重复项将被替换；否则不做任何操作</param>
            <param name="previous">若存在一重复项，返回该项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.Delete(`0,`0@)">
            <summary>
            删除项。当找到并已删除时返回true。
            </summary>
            <param name="item">要删除的项</param>
            <param name="itemDeleted">返回被删除的项，如果它存在的话</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.Find(`0,System.Boolean,`0@)">
            <summary>
            查找项。
            </summary>
            <param name="find">要查找的项</param>
            <param name="replace">当设置为true时，替换哈希表中相等的项</param>
            <param name="item">返回查找到的项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.GetEnumerator">
            <summary>
            获取枚举迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.Clone(System.Converter{`0,`0})">
            <summary>
            克隆哈希表的一个浅层副本。
            </summary>
            <param name="cloneItem"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Hash`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 System.Runtime.Serialization.SerializationInfo。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化哈希表。
            </summary>
            <param name="serInfo"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Collections.Hash`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender">开始回调的对象。</param>
        </member>
        <member name="P:EIIP.Collections.Hash`1.ElementCount">
            <summary>
            获取哈希表中的元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Hash`1.SlotCount">
            <summary>
            获取哈希表中的桶数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Hash`1.LoadFactor">
            <summary>
            获取或设置加载因子。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.Collections.Hash`1.Slot">
            <summary>
            提供哈希表项位的类。每个 Slot 有三个部分: 
            1、冲突位，指示在被访问的Slot是否已满; 
            2、31位的元素值位，若为零表示该Slot是空的;
            3、元素项本身。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.Slot.hash_collision">
            <summary>
            低31位: 哈希值。最高一位: 冲突位。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Hash`1.Slot.item">
            <summary>
            元素项。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Hash`1.Slot.Clear">
            <summary>
            清空Slot。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Hash`1.Slot.HashValue">
            <summary>
            获取或设置哈希值。完整的哈希值与Slot中的值关联，当Slot为空时，HashValue为零。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Hash`1.Slot.Empty">
            <summary>
            获取一个值，该值指示 Slot 是否为空。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Hash`1.Slot.Collision">
            <summary>
            获取或设置一个值，该值为冲突位值。指示命中Slot的一些值是否有冲突，当有冲突时，需要使用另一个Slot。
            </summary>
        </member>
        <member name="T:EIIP.Collections.MultiDictionary`2">
            <summary>
            多值字典类。每个键都可以有多个值。键允许重复，并且数据项是无序的。
            </summary>
        </member>
        <member name="T:EIIP.Collections.MultiDictionaryBase`2">
            <summary>
            实现泛型 IDictionary&lt;TKey, ICollection&lt;TValue&gt;&gt; 接口的基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Clear">
            <summary>
            清空元素。需要在继承类中重写。
            </summary>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.EnumerateKeys">
            <summary>
            获取键的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            尝试获取指定键对应的值的迭代器。
            </summary>
            <param name="key">值集对应的键</param>
            <param name="values">当返回true时，获取值的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            添加键值对。
            </summary>
            <param name="item">键值对。</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Add(`0,System.Collections.Generic.ICollection{`1})">
            <summary>
            添加指定键与对应的值。
            </summary>
            <param name="key">要添加的键</param>
            <param name="values">关联的值</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.AddMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            添加指定键与对应的值。
            </summary>
            <param name="key">要添加的键</param>
            <param name="values">关联的值</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Add(`0,`1)">
            <summary>
            添加指定键与对应的值。
            </summary>
            <param name="key">要添加的键</param>
            <param name="value">关联的值</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Remove(`0)">
            <summary>
            移除指定键的项。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Remove(`0,`1)">
            <summary>
            移除指定键与值。
            </summary>
            <param name="key">要移除的键</param>
            <param name="value">要移除键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            移除指定键值对。
            </summary>
            <param name="pair">要移除的键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.RemoveMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除指定键及其特定的值。
            </summary>
            <param name="key">要移除的键</param>
            <param name="values">要移除键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除指定的键集。
            </summary>
            <param name="keyCollection">要移除的键集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            尝试获取指定键的值集。
            </summary>
            <param name="key">搜索的键</param>
            <param name="values">当找到指定键后，返回对应的值集。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.ContainsKey(`0)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Contains(`0,`1)">
            <summary>
            测试是否包含指定键与值。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            测试是否包含指定键值对。
            </summary>
            <param name="pair">要搜索的键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.EqualValues(`1,`1)">
            <summary>
            比较值是否相等。
            </summary>
            <param name="value1">第一个要比较的值</param>
            <param name="value2">第二个要比较的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.CountValues(`0)">
            <summary>
            获取指定键对应的值的数量。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.CountAllValues">
            <summary>
            获取字典中所有值的数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.Replace(`0,`1)">
            <summary>
            替换指定键的值。如果发生替换，则返回true。否则仅会新添。
            </summary>
            <param name="key">键</param>
            <param name="value">key 对应的新值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.ReplaceMany(`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            替换指定键的值。如果发生替换，则返回true。否则仅会新添。
            </summary>
            <param name="key">键</param>
            <param name="values">key 对应的新值的迭代器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.ToString">
            <summary>
            获取字典描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionaryBase`2.GetEnumerator">
            <summary>
            获取键值对的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.Count">
            <summary>
            获取元素数量。需要在继承类中重写。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.Keys">
            <summary>
            获取字典中键的只读集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.Values">
            <summary>
            获取字典中值的只读集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Values">
            <summary>
            获取字典中值的只读集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.KeyValuePairs">
            <summary>
            获取字典中键值对的只读集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="F:EIIP.Collections.MultiDictionary`2.hash">
            <summary>
            存储键与值的哈希表。
            </summary>
        </member>
        <member name="F:EIIP.Collections.MultiDictionary`2.allowDuplicateValues">
            <summary>
            指示是否允许同一键拥有相等的重复值。
            </summary>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.#ctor(System.Boolean)">
            <summary>
            实例化多值字典。
            </summary>
            <param name="allowDuplicateValues">是否允许相同键有重复值</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            实例化多值字典。
            </summary>
            <param name="allowDuplicateValues">是否允许相同键有重复值</param>
            <param name="keyEqualityComparer">用于键的比较器</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            实例化多值字典。
            </summary>
            <param name="allowDuplicateValues">是否允许相同键有重复值</param>
            <param name="keyEqualityComparer">用于键的比较器</param>
            <param name="valueEqualityComparer">用于值的比较器</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.Add(`0,`1)">
            <summary>
            添加指定键与对应的值。
            </summary>
            <param name="key">要添加的键</param>
            <param name="value">关联的值</param>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.Remove(`0,`1)">
            <summary>
            移除指定键与值。
            </summary>
            <param name="key">要移除的键</param>
            <param name="value">要移除键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.Remove(`0)">
            <summary>
            移除指定键的项。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.Clear">
            <summary>
            清空元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.EqualValues(`1,`1)">
            <summary>
            比较值是否相等。
            </summary>
            <param name="value1">第一个要比较的值</param>
            <param name="value2">第二个要比较的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.Contains(`0,`1)">
            <summary>
            测试是否包含指定键与值。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.ContainsKey(`0)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.EnumerateKeys">
            <summary>
            获取键的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            尝试获取指定键对应的值的迭代器。
            </summary>
            <param name="key">值集对应的键</param>
            <param name="values">当返回true时，获取值的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.CountValues(`0)">
            <summary>
            获取指定键对应的值的数量。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.System#ICloneable#Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.MultiDictionary`2.CloneContents">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.MultiDictionary`2.KeyComparer">
            <summary>
            获取键的比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionary`2.ValueComparer">
            <summary>
            获取值的比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.MultiDictionary`2.Count">
            <summary>
            获取字典元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedBag`1">
            <summary>
            OrderedBag&lt;T&gt; 是包含类型为T的元素并被排序存储的集合。
            不同于OrderedSet，重复项允许在同一 OrderedBag 中。可以包含值为null的元素，且其排序是在所有其它元素之前。
            </summary>
        </member>
        <member name="F:EIIP.Collections.OrderedBag`1.comparer">
            <summary>
            比较器。
            </summary>
        </member>
        <member name="F:EIIP.Collections.OrderedBag`1.tree">
            <summary>
            实例存储排序项的红黑树。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor(System.Comparison{`0})">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
            <param name="comparison">用于比较排序的委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
            <param name="comparer">用于比较排序的接口实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
            <param name="collection">提供初始化元素的集合</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0})">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
            <param name="collection">提供初始化元素的集合</param>
            <param name="comparison">用于比较排序的委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
            <param name="collection">提供初始化元素的集合</param>
            <param name="comparer">用于比较排序的接口实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.#ctor(System.Collections.Generic.IComparer{`0},EIIP.Collections.RedBlackTree{`0})">
            <summary>
            实例化元素可排序的 Bag 实例。
            </summary>
            <param name="comparer">用于比较排序的接口实例</param>
            <param name="tree">存储数据的红黑树实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.System#ICloneable#Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Clone">
            <summary>
            创建作为当前实例副本的新对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.CloneContents">
            <summary>
            深层克隆并创建作为当前实例副本的新对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.NumberOfCopies(`0)">
            <summary>
            获取指定元素的副本数量。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Contains(`0)">
            <summary>
            测试是否含有指定元素。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.GetEqualItems(`0)">
            <summary>
            获取与指定元素项相等的迭代器。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.DistinctItems">
            <summary>
            获取 OrderedBag 中元素的唯一迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.LastIndexOf(`0)">
            <summary>
            获取与指定元素匹配的最后一项元素的索引。
            </summary>
            <param name="item">要搜索的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IndexOf(`0)">
            <summary>
            获取与指定元素匹配的首个元素的索引。
            </summary>
            <param name="item">要搜索的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Add(`0)">
            <summary>
            添加指定元素。
            </summary>
            <param name="item">要添加的元素</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加指定集合中的元素。
            </summary>
            <param name="collection">包含要添加的元素的集合</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Remove(`0)">
            <summary>
            移除指定元素。若有多个匹配元素，最后添加的元素将会被移除。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.RemoveAllCopies(`0)">
            <summary>
            移除指定元素的所有匹配项。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除指定集合中元素的所有匹配项。
            </summary>
            <param name="collection">包含要移除元素的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Clear">
            <summary>
            清空元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.CheckEmpty">
            <summary>
            若集合为空，则抛出错误。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.GetFirst">
            <summary>
            获取 OrderedBag 的首个元素(在Bag中是最小的)。若 Bag 为空则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.GetLast">
            <summary>
            获取 OrderedBag 的最后一个元素(在Bag中是最大的)。若 Bag 为空则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.RemoveFirst">
            <summary>
            移除首个元素(在Bag中是最小的)。并返回该元素。若 Bag 为空则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.RemoveLast">
            <summary>
            移除 OrderedBag 的最后一个元素(在Bag中是最大的)。并返回该元素。若 Bag 为空则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IsSupersetOf(EIIP.Collections.OrderedBag{`0})">
            <summary>
            测试是否为指定实例的扩展集。包括相等。
            </summary>
            <param name="otherBag">要比较的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IsProperSupersetOf(EIIP.Collections.OrderedBag{`0})">
            <summary>
            测试是否为指定实例的扩展集。不包括相等。
            </summary>
            <param name="otherBag">要比较的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IsSubsetOf(EIIP.Collections.OrderedBag{`0})">
            <summary>
            测试是否为指定实例的子集。包括相等。
            </summary>
            <param name="otherBag">要比较的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IsProperSubsetOf(EIIP.Collections.OrderedBag{`0})">
            <summary>
            测试是否为指定实例的子集。不包括相等。
            </summary>
            <param name="otherBag">要比较的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IsDisjointFrom(EIIP.Collections.OrderedBag{`0})">
            <summary>
            测试当前实例是否由指定实例分解而成的。
            </summary>
            <param name="otherBag">要比较的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IsEqualTo(EIIP.Collections.OrderedBag{`0})">
            <summary>
            测试相等。
            </summary>
            <param name="otherBag">要比较的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.UnionWith(EIIP.Collections.OrderedBag{`0})">
            <summary>
            合并指定 OrderedBag 实例。
            </summary>
            <param name="otherBag">要合并的 OrderedBag 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Union(EIIP.Collections.OrderedBag{`0})">
            <summary>
            获取当前 OrderedBag 实例与指定 OrderedBag 实例的并集。
            </summary>
            <param name="otherBag">要合并的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.SumWith(EIIP.Collections.OrderedBag{`0})">
            <summary>
            设置与指定 OrderedBag 实例的合集。
            </summary>
            <param name="otherBag">要合并的 OrderedBag 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Sum(EIIP.Collections.OrderedBag{`0})">
            <summary>
            获取当前 OrderedBag 实例与指定 OrderedBag 实例的合集。
            </summary>
            <param name="otherBag">要合并的 OrderedBag 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.IntersectionWith(EIIP.Collections.OrderedBag{`0})">
            <summary>
            设置与指定 OrderedBag 实例的交集。
            </summary>
            <param name="otherBag">要相交的 OrderedBag 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Intersection(EIIP.Collections.OrderedBag{`0})">
            <summary>
            获取当前 OrderedBag 实例与指定 OrderedBag 实例的交集。
            </summary>
            <param name="otherBag">要相交的 OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.DifferenceWith(EIIP.Collections.OrderedBag{`0})">
            <summary>
            设置与指定 OrderedBag 实例的差集。
            </summary>
            <param name="otherBag">OrderedBag 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Difference(EIIP.Collections.OrderedBag{`0})">
            <summary>
            获取当前 OrderedBag 实例与指定 OrderedBag 实例的差集。
            </summary>
            <param name="otherBag">OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.SymmetricDifferenceWith(EIIP.Collections.OrderedBag{`0})">
            <summary>
            设置与指定 OrderedBag 实例的对称差集。
            </summary>
            <param name="otherBag">OrderedBag 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.SymmetricDifference(EIIP.Collections.OrderedBag{`0})">
            <summary>
            获取当前 OrderedBag 实例与指定 OrderedBag 实例的对称差集。
            </summary>
            <param name="otherBag">OrderedBag 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.AsList">
            <summary>
            创建一个只读的 ListView 实例。在 Bag 中的最小元素项位于 List 视图中索引为0的位置上。
            ListView(视图)并不从 OrderedBag 中复制数据，仅是对其元素的对外引用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Reversed">
            <summary>
            获取一个排序反转的视图。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.Range(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            创建一个指定视图。
            </summary>
            <param name="from">视图的起始元素</param>
            <param name="fromInclusive">视图是否包含起始元素</param>
            <param name="to">视图的结束元素</param>
            <param name="toInclusive">视图是否包含结束元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.RangeFrom(`0,System.Boolean)">
            <summary>
            创建一个指定视图。
            </summary>
            <param name="from">视图的起始元素</param>
            <param name="fromInclusive">视图是否包含起始元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.RangeTo(`0,System.Boolean)">
            <summary>
            创建一个指定视图。
            </summary>
            <param name="to">视图的结束元素</param>
            <param name="toInclusive">视图是否包含结束元素</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedBag`1.Comparer">
            <summary>
            获取比较器
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedBag`1.Count">
            <summary>
            获取元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedBag`1.Item(System.Int32)">
            <summary>
            获取指定索引的元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedBag`1.ListView">
            <summary>
            提供一个只读列表视图。
            </summary>
        </member>
        <member name="T:EIIP.Collections.ReadOnlyListBase`1">
            <summary>
            实现泛型 IList&lt;T&gt; 接口的只读列表基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.GetEnumerator">
            <summary>
            获取元素的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.Contains(`0)">
            <summary>
            测试是否包含指定元素。
            </summary>
            <param name="item">要定位的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.CopyTo(`0[])">
            <summary>
            将元素复制至指定数组中。
            </summary>
            <param name="array">目标数组</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            将元素复制至指定数组中。
            </summary>
            <param name="array">目标数组</param>
            <param name="arrayIndex">array 复制的目标起始索引</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            从特定的 System.Array 索引开始，将列表的元素复制到指定数组中。
            </summary>
            <param name="index">源列表的起始索引</param>
            <param name="array">目标数组</param>
            <param name="arrayIndex">array 中从零开始的索引，从此处开始复制。</param>
            <param name="count">要复制的元素数量</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.Find(System.Predicate{`0})">
            <summary>
            查找列表中首个符合条件的一项。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.TryFind(System.Predicate{`0},`0@)">
            <summary>
            查找列表中首个符合条件的一项。存在时返回true。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <param name="foundItem">返回匹配的最后一项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindLast(System.Predicate{`0})">
            <summary>
            查找列表中最后符合条件的一项。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.TryFindLast(System.Predicate{`0},`0@)">
            <summary>
            查找列表中最后符合条件的一项。存在时返回true。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <param name="foundItem">返回匹配的最后一项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindIndex(System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="index">要查找的起始索引</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的首个元素索引。
            </summary>
            <param name="index">要查找的起始索引</param>
            <param name="count">要查找的元素项个数</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="index">要从后开始查找的超始索引</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            在列表中查找符合条件的最后一个元素索引。
            </summary>
            <param name="index">要从后开始查找的超始索引</param>
            <param name="count">要查找的元素项个数</param>
            <param name="predicate">要测试的委托方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.IndexOf(`0)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.IndexOf(`0,System.Int32)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查寻的起始索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            查找列表中与指定元素相等的首个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查寻的起始索引</param>
            <param name="count">要查寻的元素个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.LastIndexOf(`0)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.LastIndexOf(`0,System.Int32)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查寻的起始索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            查找列表中与指定元素相等的最后一个元素索引。不存在则返回-1。
            </summary>
            <param name="item">要查寻的元素对象</param>
            <param name="index">要查寻的起始索引</param>
            <param name="count">要查寻的元素个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.Range(System.Int32,System.Int32)">
            <summary>
            获取指定列表的一个区间。该区间的元素并不是从列表中复制出来的，而是其对外的一种视图。
            </summary>
            <remarks>
            可将指定的算法应用于一个列表的部分元素。如:
            <code>Algorithms.ReverseInPlace(Algorithms.Range(list, 3, 6))</code>
            会反转从索引位置3开始的 6 个元素。 
            </remarks>
            <param name="start">起始索引</param>
            <param name="count">在视图中的元素数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            只读列表不支持本操作。
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
            <summary>
            只读列表不支持本操作。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            只读列表不支持本操作。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#Clear">
            <summary>
            只读列表不支持本操作。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            确定 System.Collections.IList 是否包含特定值。
            </summary>
            <param name="value">要在 System.Collections.IList 中查找的 System.Object。</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            确定 System.Collections.IList 中特定项的索引。
            </summary>
            <param name="value">要在 System.Collections.IList 中查找的 System.Object。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            只读列表不支持本操作。
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            只读列表不支持本操作。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            只读列表不支持本操作。
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyListBase`1.Count">
            <summary>
            获取元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyListBase`1.Item(System.Int32)">
            <summary>
            获取指定索引的元素。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            Returns whether the list is a fixed size. This implementation always returns true.
            </summary>
            <value>Alway true, indicating that the list is fixed size.</value>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.IList 是否具有固定大小。始终返回true。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyListBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            获取指定索引处的元素。
            </summary>
        </member>
        <member name="F:EIIP.Collections.OrderedBag`1.ListView.rangeTester">
            <summary>
            范围测试器。
            </summary>
        </member>
        <member name="F:EIIP.Collections.OrderedBag`1.ListView.entireTree">
            <summary>
            指示视图是否对应整颗树。
            </summary>
        </member>
        <member name="F:EIIP.Collections.OrderedBag`1.ListView.reversed">
            <summary>
            指示视图是否是反转的。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.ListView.#ctor(EIIP.Collections.OrderedBag{`0},EIIP.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>
            创建新列表视图
            </summary>
            <param name="myBag">要包装的 OrderedBag 实例</param>
            <param name="rangeTester">定义包装范围的测试器</param>
            <param name="entireTree">若为真，rangeTester将定义为整颗树。用于优化一些操作。</param>
            <param name="reversed">指示视图是否是反转 OrderedBag 原有顺序（从小到大）</param>
        </member>
        <member name="T:EIIP.Collections.OrderedBag`1.View">
             <summary>
             OrderedBag&lt;T&gt;.View 用于 OrderedBag 公开对外的一个视图。
             Views 是动态的。也就是说，OrderedBag 与 Views 的数据变更是同步的。
             通常 View 实例是通过 OrderedBag 实例的 Range, RangeTo, RangeFrom, 与 Reversed 等方法对外公开。
            <p>典型的例子:</p>
            <code>
             foreach(T item in bag.Range(from, to)) {
                // 处理 item
             }
            </code>
             </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.#ctor(EIIP.Collections.OrderedBag{`0},EIIP.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>
            实例化视图。
            </summary>
            <param name="myBag">要包装的 OrderedBag 实例</param>
            <param name="rangeTester">被用于定义范围的测试器</param>
            <param name="entireTree">设置是否为整颗树</param>
            <param name="reversed">设置视图的元素是否是反转（排序）的</param>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.ItemInView(`0)">
            <summary>
            测试指定的元素是否在视图范围内。
            </summary>
            <param name="item">要测试的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.GetEnumerator">
            <summary>
            获取视图的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.Clear">
            <summary>
            清空视图中的元素。如，<code>bag.Range("A", "B").Clear();</code>
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.Add(`0)">
            <summary>
            添加指定元素。若 OrderedBag 已包含与要添加元素相等的项，则该项将被替换。
            若要添加的元素不在视图范围则会抛出错误。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.Remove(`0)">
            <summary>
            移除指定元素。若要移除的元素不在视图范围则会抛出错误。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.Contains(`0)">
            <summary>
            测试视图中是否包含与指定元素相等的项。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.IndexOf(`0)">
            <summary>
            获取指定元素在视图中的首个索引。不存在则返回=1。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.LastIndexOf(`0)">
            <summary>
            获取指定元素在视图中的最后一个索引。不存在则返回=1。
            </summary>
            <param name="item">要搜索的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.AsList">
            <summary>
            获取一个只读的 ListView。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.Reversed">
            <summary>
            创建一个排序反转的视图。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.GetFirst">
            <summary>
            获取首个元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedBag`1.View.GetLast">
            <summary>
            获取最后一个元素。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedBag`1.View.Count">
            <summary>
            获取视图的元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedBag`1.View.Item(System.Int32)">
            <summary>
            获取指定索引位置的元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedDictionary`2">
            <summary>
            按键排序的字典类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor">
            <summary>
            实例化按键排序的字典。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化按键排序的字典。
            </summary>
            <param name="comparer">用于键的比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor(System.Comparison{`0})">
            <summary>
            实例化按键排序的字典。
            </summary>
            <param name="comparison">用于键的比较委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            实例化按键排序的字典。
            </summary>
            <param name="keysAndValues">提供初始化健值对的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化按键排序的字典。
            </summary>
            <param name="keysAndValues">提供初始化健值对的迭代器</param>
            <param name="comparer">用于键的比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Comparison{`0})">
            <summary>
            实例化按键排序的字典。
            </summary>
            <param name="keysAndValues">提供初始化健值对的迭代器</param>
            <param name="comparison">用于键的比较委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            实例化按键排序的字典。
            </summary>
            <param name="keysAndValues">提供初始化健值对的迭代器</param>
            <param name="keyComparer">用于键的比较器</param>
            <param name="pairComparer">用于键值对的比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.CloneContents">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Reversed">
            <summary>
            获取反转的字典视图。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Range(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            获取指定的字典区域。
            </summary>
            <param name="from">起始键</param>
            <param name="fromInclusive">指示是否包含超始键</param>
            <param name="to">结束键</param>
            <param name="toInclusive">指示是否包含结束键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.RangeFrom(`0,System.Boolean)">
            <summary>
            获取指定的字典区域。
            </summary>
            <param name="from">起始键</param>
            <param name="fromInclusive">指示是否包含超始键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.RangeTo(`0,System.Boolean)">
            <summary>
            获取指定的字典区域。
            </summary>
            <param name="to">结束键</param>
            <param name="toInclusive">指示是否包含结束键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Remove(`0)">
            <summary>
            从字典中移除指定键。成功移除后返回true。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Clear">
            <summary>
            清空字典。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.GetValueElseAdd(`0,`1@)">
            <summary>
            在字典中查找指定键。若键存在（返回true），则取得对应的值；若键不存在，则创建该键值对。
            </summary>
            <param name="key">新的键</param>
            <param name="value">若键存在，则返回对应的值；若键不存在，则创建该键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Add(`0,`1)">
            <summary>
            添加新的键值对。当字典中已存在相同键时，抛出错误。
            </summary>
            <param name="key">键</param>
            <param name="value">值。</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.Replace(`0,`1)">
            <summary>
            替换指定键值对。当字典中不存在指定键时，抛出错误。
            </summary>
            <param name="key">键</param>
            <param name="value">值。</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.AddMany(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            批量添加元素。
            </summary>
            <param name="keysAndValues">提供元素的键值对迭代器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量移除元素。
            </summary>
            <param name="keyCollectionToRemove">提供要移除元素对应键的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.ContainsKey(`0)">
            <summary>
            判断字典中是否存在指定键。
            </summary>
            <param name="key">要查询的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取指定键的值。存在则返回true。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">当存在指定键 key 时，返回对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.GetEnumerator">
            <summary>
            获取键值对迭代器。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.System#ICloneable#Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedDictionary`2.Comparer">
            <summary>
            获取键的比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedDictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。当获取值时，指定键不存在则抛出错误。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedDictionary`2.Count">
            <summary>
            获取字典元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedDictionary`2.View">
            <summary>
            OrderedDictionary&lt;TKey,TValue&gt; 的视图类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.View.GetEnumerator">
            <summary>
            获取键值对迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.View.ContainsKey(`0)">
            <summary>
            判断字典中是否存在指定键。
            </summary>
            <param name="key">要查询的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.View.TryGetValue(`0,`1@)">
            <summary>
            尝试获取指定键的值。存在则返回true。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">当存在指定键 key 时，返回对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.View.Remove(`0)">
            <summary>
            从字典中移除指定键。成功移除后返回true。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.View.Clear">
            <summary>
            清空字典。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedDictionary`2.View.Reversed">
            <summary>
            获取反转的视图。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedDictionary`2.View.Count">
            <summary>
            获取视图的元素数量。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Collections.OrderedDictionary`2.View.Item(`0)">
            <summary>
            获取或设置指定键的值。必须重载 set 操作符。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedMultiDictionary`2">
            <summary>
            按键排序的支持多值的字典类。允许重复的键。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean)">
            <summary>
            实例化指定的字典实例。
            </summary>
            <param name="allowDuplicateValues">指示是否允许同一键下有重复值</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Comparison{`0})">
            <summary>
            实例化指定的字典实例。
            </summary>
            <param name="allowDuplicateValues">指示是否允许同一键下有重复值</param>
            <param name="keyComparison">用于键的比较委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Comparison{`0},System.Comparison{`1})">
            <summary>
            实例化指定的字典实例。
            </summary>
            <param name="allowDuplicateValues">指示是否允许同一键下有重复值</param>
            <param name="keyComparison">用于键的比较委托</param>
            <param name="valueComparison">用于值的比较委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化指定的字典实例。
            </summary>
            <param name="allowDuplicateValues">指示是否允许同一键下有重复值</param>
            <param name="keyComparer">用于键的比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.#ctor(System.Boolean,System.Collections.Generic.IComparer{`0},System.Collections.Generic.IComparer{`1})">
            <summary>
            实例化指定的字典实例。
            </summary>
            <param name="allowDuplicateValues">指示是否允许同一键下有重复值</param>
            <param name="keyComparer">用于键的比较器</param>
            <param name="valueComparer">用于值的比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Add(`0,`1)">
            <summary>
            添加指定键与对应的值。
            </summary>
            <param name="key">要添加的键</param>
            <param name="value">关联的值</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Remove(`0,`1)">
            <summary>
            移除指定键与值。
            </summary>
            <param name="key">要移除的键</param>
            <param name="value">要移除键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Remove(`0)">
            <summary>
            移除指定键的项。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Clear">
            <summary>
            清空元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.EqualValues(`1,`1)">
            <summary>
            比较值是否相等。
            </summary>
            <param name="value1">第一个要比较的值</param>
            <param name="value2">第二个要比较的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Contains(`0,`1)">
            <summary>
            测试是否包含指定键与值。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.ContainsKey(`0)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            尝试获取指定键对应的值的迭代器。
            </summary>
            <param name="key">值集对应的键</param>
            <param name="values">当返回true时，获取值的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.EnumerateKeys">
            <summary>
            获取键的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.CountValues(`0)">
            <summary>
            获取指定键对应的值的数量。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.CountAllValues">
            <summary>
            获取字典中所有值的数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.System#ICloneable#Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.CloneContents">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Reversed">
             <summary>
             获取反转的视图。
            <p>
            <code>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Reversed()) {
                // 处理 pair
             }
            </code></p>
             </summary>
             <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.Range(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            获取指定的字典区域。
            </summary>
            <param name="from">起始键</param>
            <param name="fromInclusive">指示是否包含超始键</param>
            <param name="to">结束键</param>
            <param name="toInclusive">指示是否包含结束键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.RangeFrom(`0,System.Boolean)">
            <summary>
            获取指定的字典区域。
            </summary>
            <param name="from">起始键</param>
            <param name="fromInclusive">指示是否包含超始键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.RangeTo(`0,System.Boolean)">
            <summary>
            获取指定的字典区域。
            </summary>
            <param name="to">结束键</param>
            <param name="toInclusive">指示是否包含结束键</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedMultiDictionary`2.KeyComparer">
            <summary>
            获取字典中键比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedMultiDictionary`2.ValueComparer">
            <summary>
            获取字典中值比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedMultiDictionary`2.Count">
            <summary>
            获取字典的元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedMultiDictionary`2.KeyValuePairs">
            <summary>
            获取字典中键值对的只读集。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedMultiDictionary`2.View">
             <summary>
             OrderedMultiDictionary&lt;TKey,TValue&gt; 视图类。
            <code><p>
             foreach(KeyValuePair&lt;TKey, TValue&gt; pair in dictionary.Range(from, to)) {
                // 处理 pair
             }</p>
            </code>
             </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.EnumerateKeys">
            <summary>
            获取键的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            尝试获取指定键对应的值的迭代器。
            </summary>
            <param name="key">值集对应的键</param>
            <param name="values">当返回true时，获取值的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.ContainsKey(`0)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.Contains(`0,`1)">
            <summary>
            测试是否包含指定键与值。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.CountValues(`0)">
            <summary>
            获取指定键对应的值的数量。
            </summary>
            <param name="key">要搜索的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.Add(`0,`1)">
            <summary>
            添加指定键与对应的值。
            </summary>
            <param name="key">要添加的键</param>
            <param name="value">关联的值</param>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.Remove(`0)">
            <summary>
            移除指定键的项。
            </summary>
            <param name="key">要移除的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.Remove(`0,`1)">
            <summary>
            移除指定键与值。
            </summary>
            <param name="key">要移除的键</param>
            <param name="value">要移除键对应的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.Clear">
            <summary>
            清空元素。
            <code>
            dictionary.Range("A", "B").Clear();
            </code>
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedMultiDictionary`2.View.Reversed">
            <summary>
            获取反转的视图。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedMultiDictionary`2.View.Count">
            <summary>
            获取视图元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.OrderedSet`1">
            <summary>
            OrderedSet&lt;T&gt; 用于存放有序的但不重复的元素项的集合。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.#ctor">
            <summary>
            实例化缺省集合。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.#ctor(System.Comparison{`0})">
            <summary>
            实例化缺省集合。
            </summary>
            <param name="comparison">比较委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化缺省集合。
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化指定集合。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Comparison{`0})">
            <summary>
            实例化指定集合。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
            <param name="comparison">比较委托</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化指定集合。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.System#ICloneable#Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.CloneContents">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns></returns>			
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Contains(`0)">
            <summary>
            测试是否存在指定元素。
            </summary>
            <param name="item">要测试的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.TryGetItem(`0,`0@)">
            <summary>
            尝试获取指定元素项。
            <code>
            Set&lt;string&gt; set = new Set&lt;string&gt;(StringComparer.CurrentCultureIgnoreCase);
            set.Add("HELLO");
            string s;
            bool b = set.TryGetItem("Hello", out s);   // b 返回 true, s 为 "HELLO".
            </code>
            </summary>
            <param name="item">要查找的元素项</param>
            <param name="foundItem">返回查找到的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IndexOf(`0)">
            <summary>
            获取指定元素的索引。不存在则返回-1。
            </summary>
            <param name="item">要定位的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Add(`0)">
            <summary>
            添加元素。当要添加的元素替换了已存在的一个相同元素时，返回true。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            添加元素。当要添加的元素替换了已存在的一个相同元素时，返回true。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加元素。
            </summary>
            <param name="collection">提供添加元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Remove(`0)">
            <summary>
            移除指定元素。有移除项时返回true。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量移除元素。返回实际移除的元素项数量。
            </summary>
            <param name="collection">提供要移除元素的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.GetFirst">
            <summary>
            获取集合中首个元素。若集合是空的则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.GetLast">
            <summary>
            获取集合中最后一个元素。若集合是空的则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.RemoveFirst">
            <summary>
            移除集合中首个元素，并返回该元素。若集合是空的则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.RemoveLast">
            <summary>
            移除集合中最后一个元素，并返回该元素。若集合是空的则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IsSupersetOf(EIIP.Collections.OrderedSet{`0})">
            <summary>
            测试是否为指定实例的扩展集。包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IsProperSupersetOf(EIIP.Collections.OrderedSet{`0})">
            <summary>
            测试是否为指定实例的扩展集。不包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IsSubsetOf(EIIP.Collections.OrderedSet{`0})">
            <summary>
            测试是否为指定实例的子集。包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IsProperSubsetOf(EIIP.Collections.OrderedSet{`0})">
            <summary>
            测试是否为指定实例的子集。不包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IsEqualTo(EIIP.Collections.OrderedSet{`0})">
            <summary>
            测试相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.UnionWith(EIIP.Collections.OrderedSet{`0})">
            <summary>
            合并指定 Set 实例。
            </summary>
            <param name="otherSet">要合并的 Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IsDisjointFrom(EIIP.Collections.OrderedSet{`0})">
            <summary>
            测试当前实例是否由指定实例分解而成的。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Union(EIIP.Collections.OrderedSet{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的并集。
            </summary>
            <param name="otherSet">要合并的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.IntersectionWith(EIIP.Collections.OrderedSet{`0})">
            <summary>
            设置与指定 Set 实例的交集。
            </summary>
            <param name="otherSet">要相交的 Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Intersection(EIIP.Collections.OrderedSet{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的交集。
            </summary>
            <param name="otherSet">要相交的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.DifferenceWith(EIIP.Collections.OrderedSet{`0})">
            <summary>
            设置与指定 Set 实例的差集。
            </summary>
            <param name="otherSet">Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Difference(EIIP.Collections.OrderedSet{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的差集。
            </summary>
            <param name="otherSet">Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.SymmetricDifferenceWith(EIIP.Collections.OrderedSet{`0})">
            <summary>
            设置与指定 Set 实例的对称差集。
            </summary>
            <param name="otherSet">Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.SymmetricDifference(EIIP.Collections.OrderedSet{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的对称差集。
            </summary>
            <param name="otherSet">Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.AsList">
            <summary>
            转换集合为只读列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Reversed">
             <summary>
             获取反转视图。
            <p>
            <code>
             foreach(T item in set.Reversed()) {
                // 处理 item
             }
            </code></p>
             </summary>
             <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.Range(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            创建一个指定视图。
            </summary>
            <param name="from">视图的起始元素</param>
            <param name="fromInclusive">视图是否包含起始元素</param>
            <param name="to">视图的结束元素</param>
            <param name="toInclusive">视图是否包含结束元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.RangeFrom(`0,System.Boolean)">
            <summary>
            创建一个指定视图。
            </summary>
            <param name="from">视图的起始元素</param>
            <param name="fromInclusive">视图是否包含起始元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.RangeTo(`0,System.Boolean)">
            <summary>
            创建一个指定视图。
            </summary>
            <param name="to">视图的结束元素</param>
            <param name="toInclusive">视图是否包含结束元素</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedSet`1.Comparer">
            <summary>
            获取比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedSet`1.Count">
            <summary>
            获取集合元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedSet`1.Item(System.Int32)">
            <summary>
            获取指定索引位置的元素。
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.ListView.#ctor(EIIP.Collections.OrderedSet{`0},EIIP.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,System.Boolean)">
            <summary>
            实例化只读列表视图。
            </summary>
            <param name="mySet"></param>
            <param name="rangeTester"></param>
            <param name="entireTree"></param>
            <param name="reversed"></param>
        </member>
        <member name="T:EIIP.Collections.OrderedSet`1.View">
             <summary>
             OrderedSet&lt;T&gt; 视图类。
            <code>
             foreach(T item in set.Range(from, to)) {
                // 处理 item
             }
            </code>
             </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.GetEnumerator">
            <summary>
            获取视图的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.Clear">
            <summary>
            清空视图中的元素。
            <code>
            set.Range("A", "B").Clear();
            </code>
            </summary>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.Add(`0)">
            <summary>
            添加元素。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            添加元素。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.Remove(`0)">
            <summary>
            移除视图中的元素。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.Contains(`0)">
            <summary>
            测试是否包含指定元素。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.IndexOf(`0)">
            <summary>
            获取指定元素在视图中的索引。
            </summary>
            <param name="item">要定位的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.AsList">
            <summary>
            将视图转换为只读列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.Reversed">
            <summary>
            获取反转的视图。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.GetFirst">
            <summary>
            获取视图中首个元素。若视图是空的则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.OrderedSet`1.View.GetLast">
            <summary>
            获取视图中最后一个元素。若视图是空的则抛出错误。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.OrderedSet`1.View.Count">
            <summary>
            获取视图的元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.OrderedSet`1.View.Item(System.Int32)">
            <summary>
            获取指定视图索引位置的元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Pair`2">
            <summary>
            提供一个键值对的类。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Pair`2.First">
            <summary>
            键值对的首个元素(键)。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Pair`2.Second">
            <summary>
            键值对的第二个元素(值)。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Pair`2.#ctor(`0,`1)">
            <summary>
            实例化键值对。
            </summary>
            <param name="first">首个元素(键)。</param>
            <param name="second">第二个元素(值)。</param>
        </member>
        <member name="M:EIIP.Collections.Pair`2.#ctor(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            实例化指定键值对。
            </summary>
            <param name="keyAndValue">键值对。</param>
        </member>
        <member name="M:EIIP.Collections.Pair`2.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="obj">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.Equals(EIIP.Collections.Pair{`0,`1})">
            <summary>
            测试相等。
            </summary>
            <param name="other">要比较的键值对</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.GetHashCode">
            <summary>
            获取实例的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.CompareTo(EIIP.Collections.Pair{`0,`1})">
            <summary>
            比较键值对。
            </summary>
            <param name="other">要比较的另一个键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.System#IComparable#CompareTo(System.Object)">
            <summary>
            比较当前实例与同一类型的另一对象。
            </summary>
            <param name="obj">与此实例进行比较的对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.ToString">
            <summary>
            获取队列描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.op_Equality(EIIP.Collections.Pair{`0,`1},EIIP.Collections.Pair{`0,`1})">
            <summary>
            重载相等操作符
            </summary>
            <param name="pair1"></param>
            <param name="pair2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.op_Inequality(EIIP.Collections.Pair{`0,`1},EIIP.Collections.Pair{`0,`1})">
            <summary>
            重载不等操作符
            </summary>
            <param name="pair1"></param>
            <param name="pair2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.op_Explicit(EIIP.Collections.Pair{`0,`1})~System.Collections.Generic.KeyValuePair{`0,`1}">
            <summary>
            转换为 KeyValuePair 类型对象。
            </summary>
            <param name="pair">要转换的 Pair 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.ToKeyValuePair">
            <summary>
            转换为 KeyValuePair 类型对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Pair`2.op_Explicit(System.Collections.Generic.KeyValuePair{`0,`1})~EIIP.Collections.Pair{`0,`1}">
            <summary>
            将 KeyValuePair 转换为 Pair 类型对象。
            </summary>
            <param name="keyAndValue">要转换的 KeyValuePair 实例</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.ReadOnlyDictionaryBase`2">
            <summary>
            实现泛型 IDictionary&lt;T&gt; 接口的只读字典基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
            <summary>
            只读字典不支持本操作。
            </summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.Remove(`0)">
            <summary>
            只读字典不支持本操作。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.ContainsKey(`0)">
            <summary>
            确定字典是否包含具有指定键的元素。
            </summary>
            <param name="key">要在字典中定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.TryGetValue(`0,`1@)">
            <summary>
            尝试获取指定键对应的值。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="value">当为true时，返回指定键的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.ToString">
            <summary>
            获取字典描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            测试是否含有指定键值对。
            </summary>
            <param name="item">要搜索的键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            只读字典不支持本操作。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Clear">
            <summary>
            只读字典不支持本操作。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            确定 System.Collections.IDictionary 对象是否包含具有指定键的元素。
            </summary>
            <param name="key">要在 System.Collections.IDictionary 对象中定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            只读字典不支持本操作。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#GetEnumerator">
            <summary>
            返回一个用于 System.Collections.IDictionary 对象的 System.Collections.IDictionaryEnumerator 对象。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个用于 System.Collections.IDictionary 对象的 System.Collections.IDictionaryEnumerator 对象。
            </summary>
            <returns></returns>		
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.Item(`0)">
            <summary>
            获取或设置具有指定键的元素。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.Keys">
            <summary>
            获取只读键集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.Values">
            <summary>
            获取只读值集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#IsFixedSize">
            <summary>
            获取一个值，该值指示 System.Collections.IDictionary 对象是否具有固定大小。始终返回true。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#IsReadOnly">
            <summary>
            获取一个值，该值指示 System.Collections.IDictionary 对象是否为只读。始终返回true。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Keys">
            <summary>
            获取只读键集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Values">
            <summary>
            获取只读值集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyDictionaryBase`2.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            获取具有指定键的元素。
            </summary>
        </member>
        <member name="T:EIIP.Collections.ReadOnlyMultiDictionaryBase`2">
            <summary>
            实现多值只读字典的基类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.EnumerateKeys">
            <summary>
            获取字典键的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.TryEnumerateValuesForKey(`0,System.Collections.Generic.IEnumerator{`1}@)">
            <summary>
            尝试获取指定键对应值的迭代器。
            </summary>
            <param name="key">键</param>
            <param name="values">若返回true，获取值的迭代器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Add(`0,System.Collections.Generic.ICollection{`1})">
            <summary>
            只读字典不支持本操作。
            </summary>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Remove(`0)">
            <summary>
            只读字典不支持本操作。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#TryGetValue(`0,System.Collections.Generic.ICollection{`1}@)">
            <summary>
            尝试获取指定键的值的迭代器。
            </summary>
            <param name="key">要搜索的键</param>
            <param name="values">获取值的迭代器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.ContainsKey(`0)">
            <summary>
            确定字典是否包含具有指定键的元素。
            </summary>
            <param name="key">要在字典中定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.Contains(`0,`1)">
            <summary>
            测试字典是否包含指定键与值。
            </summary>
            <param name="key">要在字典中定位的键。</param>
            <param name="value">要在字典中定位的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.ICollection{`1}})">
            <summary>
            测试字典是否包含指定键值对。
            </summary>
            <param name="pair">要在字典中定位的键值对。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.EqualValues(`1,`1)">
            <summary>
            测试值的相等性。
            </summary>
            <param name="value1">第一个值</param>
            <param name="value2">第二个值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.CountValues(`0)">
            <summary>
            获取指定键的值的数量。
            </summary>
            <param name="key">要定位的键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.CountAllValues">
            <summary>
            获取字典中所有值的数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.ToString">
            <summary>
            获取字典描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.GetEnumerator">
            <summary>
            获取键值对迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.Count">
            <summary>
            获取字典元素数量。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.Keys">
            <summary>
            获取只读键集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.Values">
            <summary>
            获取只读值集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Values">
            <summary>
            获取指定键的只读值集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.KeyValuePairs">
            <summary>
            获取只读键值对集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.Item(`0)">
            <summary>
            获取指定键的值集。
            </summary>
        </member>
        <member name="P:EIIP.Collections.ReadOnlyMultiDictionaryBase`2.System#Collections#Generic#IDictionary{TKey@System#Collections#Generic#ICollection{TValue}}#Item(`0)">
            <summary>
            获取指定键的值集。
            </summary>
        </member>
        <member name="T:EIIP.Collections.DuplicatePolicy">
            <summary>
            指示向树中插入重复项的某一策略。
            </summary>
        </member>
        <member name="F:EIIP.Collections.DuplicatePolicy.InsertFirst">
            <summary>
            在重复项前插入新节点
            </summary>
        </member>
        <member name="F:EIIP.Collections.DuplicatePolicy.InsertLast">
            <summary>
            在重复项后插入新节点
            </summary>
        </member>
        <member name="F:EIIP.Collections.DuplicatePolicy.ReplaceFirst">
            <summary>
            替换重复项的首个节点
            </summary>
        </member>
        <member name="F:EIIP.Collections.DuplicatePolicy.ReplaceLast">
            <summary>
            替换重复项的最后一个节点
            </summary>
        </member>
        <member name="F:EIIP.Collections.DuplicatePolicy.DoNothing">
            <summary>
            无操作
            </summary>
        </member>
        <member name="T:EIIP.Collections.RedBlackTree`1">
            <summary>
            作为多个使用红黑树的集合提供该算法的基类。
            </summary>
        </member>
        <member name="F:EIIP.Collections.RedBlackTree`1.comparer">
            <summary>
            比较元素的比较器。
            </summary>
        </member>
        <member name="F:EIIP.Collections.RedBlackTree`1.root">
            <summary>
            树的根，当树为空时，为null
            </summary>
        </member>
        <member name="F:EIIP.Collections.RedBlackTree`1.count">
            <summary>
            树的元素的数量。
            </summary>
        </member>
        <member name="F:EIIP.Collections.RedBlackTree`1.changeStamp">
            <summary>
            变更标识。
            </summary>
        </member>
        <member name="F:EIIP.Collections.RedBlackTree`1.stack">
            <summary>
            节点堆栈
            </summary>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.GetNodeStack">
            <summary>
            创建从项至底的任何路径的最大容纳空间的堆栈。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.StopEnumerations">
            <summary>
            停止枚举操作
            </summary>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.CheckEnumerationStamp(System.Int32)">
            <summary>
            检查枚举标识
            </summary>
            <param name="startStamp"></param>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化红黑树。
            </summary>
            <param name="comparer">用于键排序的比较器</param>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Clone">
            <summary>
            克隆红黑树。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Find(`0,System.Boolean,System.Boolean,`0@)">
            <summary>
            在树中查找键。若有多个元素有相同的键，找到首个或最后一个，可选择性地替换它。当存在指定键时返回true。
            </summary>
            <param name="key">要查找的键</param>
            <param name="findFirst">查找首个或最后一个</param>
            <param name="replace">是否替换找到的元素</param>
            <param name="item">返回找到的元素（替换前）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.FindIndex(`0,System.Boolean)">
            <summary>
            查找指定键在树中的索引。未找到时返回-1。
            </summary>
            <param name="key">要查找的键</param>
            <param name="findFirst">查找首个或最后一个</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.GetItemByIndex(System.Int32)">
            <summary>
            按索引查找元素。
            </summary>
            <param name="index">元素的索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Insert(`0,EIIP.Collections.DuplicatePolicy,`0@)">
            <summary>
            插入新节点。当有重复项存在时返回false，否则返回true。
            </summary>
            <param name="item">要插入的新节点</param>
            <param name="dupPolicy">插入策略</param>
            <param name="previous">当有重复项存在时，返回前一元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.InsertSplit(EIIP.Collections.RedBlackTree{`0}.Node,EIIP.Collections.RedBlackTree{`0}.Node,EIIP.Collections.RedBlackTree{`0}.Node,EIIP.Collections.RedBlackTree{`0}.Node,System.Boolean@)">
            <summary>
            分离有两个红子节点的节点。
            </summary>
            <param name="ggparent"></param>
            <param name="gparent"></param>
            <param name="parent"></param>
            <param name="node"></param>
            <param name="rotated"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Delete(`0,System.Boolean,`0@)">
            <summary>
            删除指定键。
            </summary>
            <param name="key">要删除的键</param>
            <param name="deleteFirst">是否删除首个匹配键，false则删除最后一个</param>
            <param name="item">返回删除项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.GetEnumerator">
            <summary>
            按排序获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            按排序获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.BoundedRangeTester(System.Boolean,`0,System.Boolean,`0)">
            <summary>
            Gets a range tester that defines a range by first and last items.
            </summary>
            <param name="useFirst">If true, bound the range on the bottom by first.</param>
            <param name="first">If useFirst is true, the inclusive lower bound.</param>
            <param name="useLast">If true, bound the range on the top by last.</param>
            <param name="last">If useLast is true, the exclusive upper bound.</param>
            <returns>A RangeTester delegate that tests for an item in the given range.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.DoubleBoundedRangeTester(`0,System.Boolean,`0,System.Boolean)">
            <summary>
            获取一个范围测试器。
            </summary>
            <param name="first">起始元素</param>
            <param name="firstInclusive">是否包含起始元素</param>
            <param name="last">结束元素</param>
            <param name="lastInclusive">是否包含结束元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.LowerBoundedRangeTester(`0,System.Boolean)">
            <summary>
            获取一个从指定起始元素开始的范围。
            </summary>
            <param name="first">起始元素</param>
            <param name="inclusive">是否包含起始元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.UpperBoundedRangeTester(`0,System.Boolean)">
            <summary>
            获取一个从指定结束元素结束的范围。
            </summary>
            <param name="last">结束元素</param>
            <param name="inclusive">是否包含结束元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.EqualRangeTester(`0)">
            <summary>
            Gets a range tester that defines a range by all items equal to an item.
            </summary>
            <param name="equalTo">The item that is contained in the range.</param>
            <returns>A RangeTester delegate that tests for an item equal to <paramref name="equalTo"/>.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.EntireRangeTester(`0)">
            <summary>
            A range tester that defines a range that is the entire tree.
            </summary>
            <param name="item">Item to test.</param>
            <returns>Always returns 0.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.EnumerateRange(EIIP.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Enumerate the items in a custom range in the tree. The range is determined by 
            a RangeTest delegate.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the custom range in order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.EnumerateRangeInOrder(EIIP.Collections.RedBlackTree{`0}.RangeTester,EIIP.Collections.RedBlackTree{`0}.Node)">
            <summary>
            Enumerate all the items in a custom range, under and including node, in-order.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <returns>An enumerable of the items.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.EnumerateRangeReversed(EIIP.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Enumerate the items in a custom range in the tree, in reversed order. The range is determined by 
            a RangeTest delegate.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <returns>An IEnumerable&lt;T&gt; that enumerates the custom range in reversed order.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.EnumerateRangeInReversedOrder(EIIP.Collections.RedBlackTree{`0}.RangeTester,EIIP.Collections.RedBlackTree{`0}.Node)">
            <summary>
            Enumerate all the items in a custom range, under and including node, in reversed order.
            </summary>
            <param name="rangeTester">Tests an item against the custom range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <returns>An enumerable of the items, in reversed oreder.</returns>
            <exception cref="T:System.InvalidOperationException">The tree has an item added or deleted during the enumeration.</exception>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.DeleteItemFromRange(EIIP.Collections.RedBlackTree{`0}.RangeTester,System.Boolean,`0@)">
            <summary>
            Deletes either the first or last item from a range, as identified by a RangeTester
            delegate. If the range is empty, returns false.
            </summary>
            <remarks>Top-down algorithm from Weiss. Basic plan is to move down in the tree, 
            rotating and recoloring along the way to always keep the current node red, which 
            ensures that the node we delete is red. The details are quite complex, however! </remarks>
            <param name="rangeTester">Range to delete from.</param>
            <param name="deleteFirst">If true, delete the first item from the range, else the last.</param>
            <param name="item">Returns the item that was deleted, if true returned.</param>
            <returns>True if an element was deleted, false if the range is empty.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.DeleteRange(EIIP.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            Delete all the items in a range, identified by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range to delete.</param>
            <returns>The number of items deleted.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.CountRange(EIIP.Collections.RedBlackTree{`0}.RangeTester)">
            <summary>
            获取指定范围的元素数量。
            </summary>
            <param name="rangeTester">范围测试委托</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.CountRangeUnderNode(EIIP.Collections.RedBlackTree{`0}.RangeTester,EIIP.Collections.RedBlackTree{`0}.Node,System.Boolean,System.Boolean)">
            <summary>
            Count all the items in a custom range, under and including node.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="node">Node to begin enumeration. May be null.</param>
            <param name="belowRangeTop">This node and all under it are either in the range or below it.</param>
            <param name="aboveRangeBottom">This node and all under it are either in the range or above it.</param>
            <returns>The number of items in the range, under and include node.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.FirstItemInRange(EIIP.Collections.RedBlackTree{`0}.RangeTester,`0@)">
            <summary>
            Find the first item in a custom range in the tree, and it's index. The range is determined
            by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="item">Returns the item found, if true was returned.</param>
            <returns>Index of first item in range if range is non-empty, -1 otherwise.</returns>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.LastItemInRange(EIIP.Collections.RedBlackTree{`0}.RangeTester,`0@)">
            <summary>
            Find the last item in a custom range in the tree, and it's index. The range is determined
            by a RangeTester delegate.
            </summary>
            <param name="rangeTester">The delegate that defines the range.</param>
            <param name="item">Returns the item found, if true was returned.</param>
            <returns>Index of the item if range is non-empty, -1 otherwise.</returns>
        </member>
        <member name="P:EIIP.Collections.RedBlackTree`1.ElementCount">
            <summary>
            获取树的元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.RedBlackTree`1.Node">
            <summary>
            红黑树的节点类。
            </summary>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Node.IncrementCount">
            <summary>
            数量递增
            </summary>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Node.DecrementCount">
            <summary>
            数量递减
            </summary>
        </member>
        <member name="M:EIIP.Collections.RedBlackTree`1.Node.Clone">
            <summary>
            克隆一个节点及其子孙。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.RedBlackTree`1.Node.IsRed">
            <summary>
            获取或设置一个值，该值指示本节点是否是红节点。
            </summary>
        </member>
        <member name="P:EIIP.Collections.RedBlackTree`1.Node.Count">
            <summary>
            获取或设置数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.RedBlackTree`1.RangeTester">
            <summary>
            范围测试委托。
            </summary>
            <param name="item">要测试的项</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Set`1">
            <summary>
            Set&lt;T&gt; 用于存放无序的但不重复的元素项的集合。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Set`1.#ctor">
            <summary>
            实例化指定集合。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Set`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            实例化指定集合。
            </summary>
            <param name="equalityComparer">相等比较器</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化指定集合。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            实例化指定集合。
            </summary>
            <param name="collection">提供初始化元素的迭代器</param>
            <param name="equalityComparer">相等比较器</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.System#ICloneable#Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.CloneContents">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.Set`1.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns></returns>		
        </member>
        <member name="M:EIIP.Collections.Set`1.Contains(`0)">
            <summary>
            测试是否存在指定元素。
            </summary>
            <param name="item">要测试的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.TryGetItem(`0,`0@)">
            <summary>
            尝试获取指定元素项。
            <code>
            Set&lt;string&gt; set = new Set&lt;string&gt;(StringComparer.CurrentCultureIgnoreCase);
            set.Add("HELLO");
            string s;
            bool b = set.TryGetItem("Hello", out s);   // b 返回 true, s 为 "HELLO".
            </code>
            </summary>
            <param name="item">要查找的元素项</param>
            <param name="foundItem">返回查找到的元素项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.Add(`0)">
            <summary>
            添加元素。当要添加的元素替换了已存在的一个相同元素时，返回true。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            添加元素。当要添加的元素替换了已存在的一个相同元素时，返回true。
            </summary>
            <param name="item">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.AddMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量添加元素。
            </summary>
            <param name="collection">提供添加元素的迭代器</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.Remove(`0)">
            <summary>
            移除指定元素。有移除项时返回true。
            </summary>
            <param name="item">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.RemoveMany(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量移除元素。返回实际移除的元素项数量。
            </summary>
            <param name="collection">提供要移除元素的迭代器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.Clear">
            <summary>
            清空集合。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Set`1.IsSupersetOf(EIIP.Collections.Set{`0})">
            <summary>
            测试是否为指定实例的扩展集。包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.IsProperSupersetOf(EIIP.Collections.Set{`0})">
            <summary>
            测试是否为指定实例的扩展集。不包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.IsSubsetOf(EIIP.Collections.Set{`0})">
            <summary>
            测试是否为指定实例的子集。包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.IsProperSubsetOf(EIIP.Collections.Set{`0})">
            <summary>
            测试是否为指定实例的子集。不包括相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.IsEqualTo(EIIP.Collections.Set{`0})">
            <summary>
            测试相等。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.IsDisjointFrom(EIIP.Collections.Set{`0})">
            <summary>
            测试当前实例是否由指定实例分解而成的。
            </summary>
            <param name="otherSet">要比较的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.UnionWith(EIIP.Collections.Set{`0})">
            <summary>
            合并指定 Set 实例。
            </summary>
            <param name="otherSet">要合并的 Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.Union(EIIP.Collections.Set{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的并集。
            </summary>
            <param name="otherSet">要合并的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.IntersectionWith(EIIP.Collections.Set{`0})">
            <summary>
            设置与指定 Set 实例的交集。
            </summary>
            <param name="otherSet">要相交的 Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.Intersection(EIIP.Collections.Set{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的交集。
            </summary>
            <param name="otherSet">要相交的 Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.DifferenceWith(EIIP.Collections.Set{`0})">
            <summary>
            设置与指定 Set 实例的差集。
            </summary>
            <param name="otherSet">Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.Difference(EIIP.Collections.Set{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的差集。
            </summary>
            <param name="otherSet">Set 实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Set`1.SymmetricDifferenceWith(EIIP.Collections.Set{`0})">
            <summary>
            设置与指定 Set 实例的对称差集。
            </summary>
            <param name="otherSet">Set 实例</param>
        </member>
        <member name="M:EIIP.Collections.Set`1.SymmetricDifference(EIIP.Collections.Set{`0})">
            <summary>
            获取当前 Set 实例与指定 Set 实例的对称差集。
            </summary>
            <param name="otherSet">Set 实例</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Collections.Set`1.Comparer">
            <summary>
            获取相等比较器。
            </summary>
        </member>
        <member name="P:EIIP.Collections.Set`1.Count">
            <summary>
            获取集合元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Collections.Triple`3">
            <summary>
            存储三个对象的结构。可用于类型为 T 的集合，或者类型为 TKey 与 TValue 的字典。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Triple`3.First">
            <summary>
            结构中的第一个对象。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Triple`3.Second">
            <summary>
            结构中的第二个对象。
            </summary>
        </member>
        <member name="F:EIIP.Collections.Triple`3.Third">
            <summary>
            结构中的第三个对象。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Triple`3.#ctor(`0,`1,`2)">
            <summary>
            实例化指定实例。
            </summary>
            <param name="first">结构中的第一个对象。</param>
            <param name="second">结构中的第二个对象。</param>
            <param name="third">结构中的第三个对象。</param>
        </member>
        <member name="M:EIIP.Collections.Triple`3.Equals(System.Object)">
            <summary>
            测试当前实例是否与指定对象相等。
            </summary>
            <param name="obj">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.Equals(EIIP.Collections.Triple{`0,`1,`2})">
            <summary>
            测试当前实例是否与指定 Triple 对象相等。
            </summary>
            <param name="other">要比较的 Triple 对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.CompareTo(EIIP.Collections.Triple{`0,`1,`2})">
            <summary>
            比较大小。
            </summary>
            <param name="other">要比较的 Triple 对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.System#IComparable#CompareTo(System.Object)">
            <summary>
            比较当前实例与同一类型的另一对象。
            </summary>
            <param name="obj">与此实例进行比较的对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.ToString">
            <summary>
            获取描述信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.op_Equality(EIIP.Collections.Triple{`0,`1,`2},EIIP.Collections.Triple{`0,`1,`2})">
            <summary>
            重载相等比较符。
            </summary>
            <param name="pair1"></param>
            <param name="pair2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Triple`3.op_Inequality(EIIP.Collections.Triple{`0,`1,`2},EIIP.Collections.Triple{`0,`1,`2})">
            <summary>
            重载不等比较符。
            </summary>
            <param name="pair1"></param>
            <param name="pair2"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Util">
            <summary>
            内部使用的实用工具。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Util.IsCloneableType(System.Type,System.Boolean@)">
            <summary>
            判断指定类型是否可以被克隆。
            </summary>
            <param name="type">要检查的类型</param>
            <param name="isValue">返回一个值，该值指示类型是否为值类型，且并未实现 ICloneable 接口</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Util.SimpleClassName(System.Type)">
            <summary>
            获取指定类型的类型名称。常被使用于异常消息中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Util.CreateEnumerableWrapper``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            创建指定枚举包装。
            </summary>
            <param name="wrapped">要包装的 IEnumerable</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Collections.Util.GetHashCode``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            获取哈希码。
            </summary>
            <param name="item">哈希码对应的项，不能为null</param>
            <param name="equalityComparer">要使用的比较器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Collections.Util.WrapEnumerable`1">
            <summary>
            包装枚举，以便于仅能使用其接口定义方法。
            </summary>
        </member>
        <member name="M:EIIP.Collections.Util.WrapEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            包装枚举实例。
            </summary>
            <param name="wrapped">要包装的 IEnumerable</param>
        </member>
        <member name="T:EIIP.Framework.ConfigSettingsBase">
            <summary>
            配置设置基类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.ConfigSettingsBase.LoadFrom(EIIP.Framework.Configuration.Settings)">
            <summary>
            加载配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.Framework.ConfigSettingsBase.SaveTo(EIIP.Framework.Configuration.Settings)">
            <summary>
            保存配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="T:EIIP.ExceptionManager">
            <summary>
            异常管理器。
            </summary>
        </member>
        <member name="M:EIIP.ExceptionManager.Publish(System.Exception)">
            <summary>
            发布异常信息。
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="M:EIIP.ExceptionManager.Publish(System.String,System.Exception)">
            <summary>
            发布异常及附加信息。
            </summary>
            <param name="eventSource">事件源</param>
            <param name="e">异常</param>
        </member>
        <member name="M:EIIP.ExceptionManager.Publish(System.String,System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            发布异常及附加信息。
            </summary>
            <param name="eventSource">事件源</param>
            <param name="exception">异常</param>
            <param name="additionalInfo">附加信息</param>
        </member>
        <member name="M:EIIP.ExceptionManager.WriteToLog(System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            输出日志。
            </summary>
            <param name="eventSource">事件源</param>
            <param name="entry">日志内容</param>
            <param name="type">日志事件类型</param>
        </member>
        <member name="M:EIIP.ExceptionManager.BuildLogContent(System.Exception,System.Collections.Specialized.NameValueCollection)">
            <summary>
            构建日志内容。
            </summary>
            <param name="exception">异常</param>
            <param name="additionalInfo">附加信息</param>
        </member>
        <member name="T:EIIP.Cache.Expirations.AbsoluteTime">
            <summary>
            测试一个使用绝对时间方案的数据项是否过期。
            </summary>
        </member>
        <member name="T:EIIP.Cache.ICacheItemExpiration">
            <summary>
            实现缓存项过期方案的接口。提供两种类型的过期方案。
            </summary>
        </member>
        <member name="M:EIIP.Cache.ICacheItemExpiration.HasExpired">
            <summary>
            测试缓存项是否过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.ICacheItemExpiration.Notify">
            <summary>
            通知该缓存项最近被使用过。
            </summary>
        </member>
        <member name="M:EIIP.Cache.ICacheItemExpiration.Key(System.String)">
            <summary>
            设置附加依赖键。
            </summary>
            <param name="keyVal">缓存键</param>
        </member>
        <member name="E:EIIP.Cache.ICacheItemExpiration.Change">
            <summary>
            处理缓存项依赖项的变更事件成员。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.AbsoluteTime.absoluteExpirationTime">
            <summary>
            绝对过期时间。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.AbsoluteTime.keyValue">
            <summary>
            缓存键。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.#ctor">
            <summary>
            实例化缺省绝对时间过期方案。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.#ctor(System.DateTime)">
            <summary>
            实例化指定绝对时间过期方案。
            </summary>
            <param name="absoluteTime">绝对过期时间</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.EIIP#Cache#ICacheItemExpiration#Key(System.String)">
            <summary>
            设置附加依赖键。
            </summary>
            <param name="keyVal">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.EIIP#Cache#ICacheItemExpiration#HasExpired">
            <summary>
            测试缓存项是否过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.EIIP#Cache#ICacheItemExpiration#Notify">
            <summary>
            通知该缓存项最近被使用过。绝对时间过期方案不做处理。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Cache.Expirations.AbsoluteTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="E:EIIP.Cache.Expirations.AbsoluteTime.Change">
            <summary>
            处理缓存项依赖项的变更事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Cache.Expirations.ExtendedFormat">
            <summary>
            为要检查过期的时间提供一种扩展格式。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.ExtendedFormat.ARGUMENT_DELIMITER">
            <summary>
            参数分隔符
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.ExtendedFormat.WILDCARD_ALL">
            <summary>
            通配符
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.ExtendedFormat.REFRESH_DELIMITER">
            <summary>
            刷新分隔符
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.#ctor(System.String)">
            <summary>
            实例化扩展过期时间格式。
            </summary>
            <param name="timeFormat">时间格式</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.MinutesFormat">
            <summary>
            获取格式时间字串中的分钟参数。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.HoursFormat">
            <summary>
            获取格式时间字串中的小时参数。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.DaysFormat">
            <summary>
            获取格式时间字串中的天参数。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.MonthsFormat">
            <summary>
            获取格式时间字串中的月参数。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.DaysOfWeekFormat">
            <summary>
            获取格式时间字串中的星期参数。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormat.ParseValueToInt(System.String)">
            <summary>
            转换时间格式字串为整型数组数据。
            </summary>
            <param name="timeFormat">时间格式字串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Cache.Expirations.ExtendedFormat.IsExpireEveryMinute">
            <summary>
            获取一个值，该值指示是否按分钟过期。
            </summary>
        </member>
        <member name="P:EIIP.Cache.Expirations.ExtendedFormat.IsExpireEveryDay">
            <summary>
            获取一个值，该值指示是否按天过期。
            </summary>
        </member>
        <member name="P:EIIP.Cache.Expirations.ExtendedFormat.IsExpireEveryHour">
            <summary>
            获取一个值，该值指示是否按小时过期。
            </summary>
        </member>
        <member name="P:EIIP.Cache.Expirations.ExtendedFormat.IsExpireEveryMonth">
            <summary>
            获取一个值，该值指示是否按月过期。
            </summary>
        </member>
        <member name="P:EIIP.Cache.Expirations.ExtendedFormat.IsExpireEveryDayOfWeek">
            <summary>
            获取一个值，该值指示是否按星期过期。
            </summary>
        </member>
        <member name="P:EIIP.Cache.Expirations.ExtendedFormat.IsAlwaysExpire">
            <summary>
            获取一个值，该值指示是否总是过期。
            </summary>
        </member>
        <member name="T:EIIP.Cache.Expirations.ExtendedFormatHelper">
            <summary>
            用于辅助测试使用扩展时间格式的过期时间的缓存项是否过期的类。
            </summary>
            <remarks>
            扩展时间格式 : <br/><br/>
            
            分钟  - 0-59 <br/>
            小时  - 0-23 <br/>
            天    - 1-31 <br/>
            月    - 1-12 <br/>
            星期  - 0-7 (星期天是 0 或 7) <br/>
            通配符- * <br/>
            Examples: <br/>
            * * * * *    - 每天的每一分钟过期 <br/>
            5 * * * *    - 每小时的头5分钟过期 或 每5分钟过期<br/>
            * 21 * * *   - 每天第21小时的每一分钟过期 或 每21小时过期
            31 15 * * *  - 每天下午 3:31 过期 <br/>
            7 4 * * 6    - 星期天上午 4:07 过期 <br/>
            15 21 4 7 *  - 七月四日下午 9:15 过期 <br/>
            </remarks>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatHelper.IsExtendedExpired(System.String,System.DateTime,System.DateTime)">
            <summary>
            测试是否过期。
            </summary>
            <param name="format">扩展时间格式字串</param>
            <param name="getTime">缓存项被刷新的时间</param>
            <param name="nowTime">要测试的时间，一般为DateTime.Now</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Cache.Expirations.ExtendedFormatTime">
            <summary>
            使用扩展时间格式方案的缓存项过期方案。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.ExtendedFormatTime.extendedFormat">
            <summary>
            扩展时间格式字串
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.ExtendedFormatTime.lastUsedTime">
            <summary>
            最近一次使用时间。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.ExtendedFormatTime.isExpired">
            <summary>
            指示是否过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.#ctor">
            <summary>
            实例化缺省扩展时间格式方案。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.#ctor(System.String)">
            <summary>
            实例化指定扩展时间格式方案。
            </summary>
            <param name="timeFormat">扩展时间格式字串</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.EIIP#Cache#ICacheItemExpiration#HasExpired">
            <summary>
            测试缓存项是否过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.EIIP#Cache#ICacheItemExpiration#Notify">
            <summary>
            通知该缓存项最近被使用过。本方案不处理。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.EIIP#Cache#ICacheItemExpiration#Key(System.String)">
            <summary>
            设置附加依赖键。本方案不处理。
            </summary>
            <param name="keyVal">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Cache.Expirations.ExtendedFormatTime.GetModifiedFormat(System.String)">
            <summary>
            若分钟为通配符，则以当前时间多一分钟来替换分钟通配符，以保证是在一分钟以后过期。
            </summary>
            <param name="format">要被修改的格式字串</param>
            <returns></returns>
        </member>
        <member name="E:EIIP.Cache.Expirations.ExtendedFormatTime.Change">
            <summary>
            处理缓存项依赖项的变更事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Cache.Expirations.FileDependency">
            <summary>
            文件依赖项。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.FileDependency.keyValue">
            <summary>
            键
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.FileDependency.dependencyFileName">
            <summary>
            依赖的文件名。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.FileDependency.lastAccessedTime">
            <summary>
            最近一次访问时间。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.FileDependency.#ctor(System.String)">
            <summary>
            实例化文件依赖项。
            </summary>
            <param name="fullFileName">依赖的文件名。</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.FileDependency.EIIP#Cache#ICacheItemExpiration#Key(System.String)">
            <summary>
            设置附加依赖键。
            </summary>
            <param name="keyVal">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.FileDependency.EIIP#Cache#ICacheItemExpiration#HasExpired">
            <summary>
            测试缓存项是否过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.FileDependency.EIIP#Cache#ICacheItemExpiration#Notify">
            <summary>
            通知该缓存项最近被使用过。本方案不处理。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.FileDependency.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Cache.Expirations.FileDependency.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="E:EIIP.Cache.Expirations.FileDependency.Change">
            <summary>
            处理缓存项依赖项的变更事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Cache.Expirations.SlidingTime">
            <summary>
            经过指定的时间段后还未使用即过期的方案
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.SlidingTime.timeLastUsed">
            <summary>
            最近一次使用时间
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.SlidingTime.itemSlidingExpiration">
            <summary>
            过期时间段。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Expirations.SlidingTime.keyValue">
            <summary>
            键
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.SlidingTime.#ctor(System.TimeSpan)">
            <summary>
            实例化经过指定的时间段后还未使用即过期的方案。
            </summary>
            <param name="slidingExpiration">过期时间段</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.SlidingTime.EIIP#Cache#ICacheItemExpiration#Key(System.String)">
            <summary>
            设置附加依赖键。
            </summary>
            <param name="keyVal">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.Expirations.SlidingTime.EIIP#Cache#ICacheItemExpiration#HasExpired">
            <summary>
            测试缓存项是否过期。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.SlidingTime.EIIP#Cache#ICacheItemExpiration#Notify">
            <summary>
            通知该缓存项最近被使用过。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Expirations.SlidingTime.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Cache.Expirations.SlidingTime.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="E:EIIP.Cache.Expirations.SlidingTime.Change">
            <summary>
            处理缓存项依赖项的变更事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Cache.ICacheMetadata">
            <summary>
            定义提供缓存元数据的接口。
            </summary> 
        </member>
        <member name="M:EIIP.Cache.ICacheMetadata.Add(System.String,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="expirations">缓存项过期方案</param>
            <param name="priority">缓存项优先级</param>
        </member>
        <member name="M:EIIP.Cache.ICacheMetadata.Remove(System.String)">
            <summary>
            移除指定缓存键的元数据。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.ICacheMetadata.GetMetadata">
            <summary>
            获取元数据存储区中的所有元数据。
            </summary>
        </member>
        <member name="M:EIIP.Cache.ICacheMetadata.Flush">
            <summary>
            移除所有元数据。
            </summary>
        </member>
        <member name="T:EIIP.Cache.ICacheMetadataWithCallback">
            <summary>
            定义提供缓存元数据与移除时回调函数的接口。
            </summary> 
            <remarks>
            若回调需要序列化，回调函数应为一静态成员的引用，因为实例成员不能被回调。
            </remarks>
        </member>
        <member name="M:EIIP.Cache.ICacheMetadataWithCallback.Add(System.String,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority,EIIP.Cache.CacheItemRemovedCallback)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="expirations">缓存项过期方案</param>
            <param name="priority">缓存项优先级</param>
            <param name="itemRemovedCallBack">移除时回调函数</param>
        </member>
        <member name="T:EIIP.Cache.ICacheStorage">
            <summary>
            定义缓存存储区接口。
            </summary>
        </member>
        <member name="M:EIIP.Cache.ICacheStorage.Add(System.String,System.Object)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="M:EIIP.Cache.ICacheStorage.Flush">
            <summary>
            清除所有缓存项。
            </summary>
        </member>
        <member name="M:EIIP.Cache.ICacheStorage.GetData(System.String)">
            <summary>
            获取指定缓存键的缓存数据。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.ICacheStorage.Remove(System.String)">
            <summary>
            移除指定缓存键的缓存项。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.ICacheStorage.Update(System.String,System.Object)">
            <summary>
            更新缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="P:EIIP.Cache.ICacheStorage.Size">
            <summary>
            获取缓存存储区中缓存项数量。
            </summary>
        </member>
        <member name="T:EIIP.Cache.IMmfReference">
            <summary>
            定义增删内存映像文件对象引用数量的接口。
            </summary>
        </member>
        <member name="M:EIIP.Cache.IMmfReference.AddReference(System.String)">
            <summary>
            添加引用数据键。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.IMmfReference.RemoveReference(System.Object)">
            <summary>
            移除指定引用数据。
            </summary>
            <param name="mmfs">引用数据</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Cache.IScavengingAlgorithm">
            <summary>
            提供过期探测算法接口。
            </summary>
        </member>
        <member name="M:EIIP.Cache.IScavengingAlgorithm.Init(EIIP.Cache.CacheService,EIIP.Cache.ICacheStorage,EIIP.Cache.ICacheMetadata)">
            <summary>
            初始化过期探测算法。
            </summary>
            <param name="cacheService">缓存服务</param>
            <param name="cacheStorage">缓存项存储区</param>
            <param name="cacheMetadata">缓存元数据</param>
        </member>
        <member name="M:EIIP.Cache.IScavengingAlgorithm.Notify(System.String)">
            <summary>
            通知使用指定键的缓存项最近被使用。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.IScavengingAlgorithm.Execute">
            <summary>
            执行过期探测算法。
            </summary>
        </member>
        <member name="M:EIIP.Cache.IScavengingAlgorithm.Add(System.String,EIIP.Cache.CacheItemPriority)">
            <summary>
            添加新项。
            </summary>
            <param name="key">缓存键</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:EIIP.Cache.IScavengingAlgorithm.Remove(System.String)">
            <summary>
            移除指定项。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.IScavengingAlgorithm.Flush">
            <summary>
            移除所有项。
            </summary>
        </member>
        <member name="T:EIIP.Cache.LruScavenging">
            <summary>
            最早使用(Last Recently Used)过期算法类。
            </summary>
        </member>
        <member name="F:EIIP.Cache.LruScavenging.m_ItemsLastUsed">
            <summary>
            最早使用项字典。
            </summary>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.#ctor">
            <summary>
            实例化最近使用(Last Recently Used)过期算法。
            </summary>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.EIIP#Cache#IScavengingAlgorithm#Init(EIIP.Cache.CacheService,EIIP.Cache.ICacheStorage,EIIP.Cache.ICacheMetadata)">
            <summary>
            初始化过期探测算法。
            </summary>
            <param name="cacheService">缓存服务</param>
            <param name="cacheStorage">缓存项存储区</param>
            <param name="cacheMetadata">缓存元数据</param>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.EIIP#Cache#IScavengingAlgorithm#Execute">
            <summary>
            执行过期探测算法。
            </summary>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.EIIP#Cache#IScavengingAlgorithm#Notify(System.String)">
            <summary>
            通知使用指定键的缓存项最近被使用。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.EIIP#Cache#IScavengingAlgorithm#Add(System.String,EIIP.Cache.CacheItemPriority)">
            <summary>
            添加新项。
            </summary>
            <param name="key">缓存键</param>
            <param name="priority">优先级</param>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.EIIP#Cache#IScavengingAlgorithm#Remove(System.String)">
            <summary>
            移除指定项。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.EIIP#Cache#IScavengingAlgorithm#Flush">
            <summary>
            移除所有项。
            </summary>
        </member>
        <member name="M:EIIP.Cache.LruScavenging.GetLruItem">
            <summary>
            获取将会被移除的最早使用项。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.MMF.MemoryProtection">
            <summary>
            指示内存某一保护方式。
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.PageNoAccess">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.PageReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.PageReadWrite">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.PageWriteCopy">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.SecImage">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.SecReserve">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.SecCommit">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.MMF.MemoryProtection.SecNoCache">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.MMF.MemoryMappedFileHelper">
            <summary>
            提供 Win32 功能与转换方法的助手类。
            </summary>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.CreateFileMapping(System.IntPtr,System.IntPtr,EIIP.MMF.MemoryProtection,System.UInt32,System.UInt32,System.String)">
            <summary>
            创建文件映像。
            </summary>
            <param name="hFile">文件句柄</param>
            <param name="lpAttributes">安全</param>
            <param name="flProtect">保护</param>
            <param name="dwMaximumSizeHigh">DWORD 高位</param>
            <param name="dwMaximumSizeLow">DWORD 低位</param>
            <param name="lpName">对象名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.CreateFile(System.String,EIIP.MMF.Win32FileAccess,EIIP.MMF.Win32FileShare,System.IntPtr,EIIP.MMF.Win32FileMode,EIIP.MMF.Win32FileAttributes,System.IntPtr)">
            <summary>
            创建文件。
            </summary>
            <param name="lpFileName">文件名</param>
            <param name="dwDesiredAccess">访问模式</param>
            <param name="dwShareMode">共享模式</param>
            <param name="lpSecurityAttributes">安全属性</param>
            <param name="dwCreationDisposition">指示如何创建</param>
            <param name="dwFlagsAndAttributes">文件属性</param>
            <param name="hTemplateFile">临时文件句柄</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.OpenFileMapping(EIIP.MMF.Win32FileMapAccess,System.Boolean,System.String)">
            <summary>
            打开文件映像。
            </summary>
            <param name="dwDesiredAccess">访问模式</param>
            <param name="isInheritHandle">继承模式</param>
            <param name="lpName">对象名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.MapViewOfFile(System.IntPtr,EIIP.MMF.Win32FileMapAccess,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            获取文件映像视图。
            </summary>
            <param name="hFileMappingObject">文件映像句柄</param>
            <param name="dwDesiredAccess">访问模式</param>
            <param name="dwFileOffsetHigh">位移字 DWORD 的高位</param>
            <param name="dwFileOffsetLow">位移字 DWORD 的低位</param>
            <param name="dwNumberOfBytesToMap">映像的字节数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.FlushViewOfFile(System.IntPtr,System.UInt32)">
            <summary>
            将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。 
            </summary>
            <param name="lpBaseAddress">开始地址</param>
            <param name="dwNumberOfBytesToFlush">刷新字节长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.UnmapViewOfFile(System.IntPtr)">
            <summary>
            解开映像视图。
            </summary>
            <param name="lpBaseAddress">开始地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.GetLastError">
            <summary>
            获取最后出错的信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.CloseHandle(System.IntPtr)">
            <summary>
            关闭文件。
            </summary>
            <param name="hFile">文件句柄</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.FormatMessage(System.UInt32,System.IntPtr,System.UInt32,System.UInt32,System.Text.StringBuilder,System.UInt32,System.IntPtr)">
            <summary>
            格式化消息。
            </summary>
            <param name="dwFlags">源及处理选项</param>
            <param name="lpSource">消息源</param>
            <param name="dwMessageId">消息标识</param>
            <param name="dwLanguageId">语言标识</param>
            <param name="lpBuffer">消息缓冲区</param>
            <param name="nSize">消息缓冲区长度</param>
            <param name="Arguments">参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.GetWin32FileMapAccess(EIIP.MMF.MemoryProtection)">
            <summary>
            获取文件映像访问。
            </summary>
            <param name="protection">内存某一保护方式。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.GetWin32FileAccess(System.IO.FileAccess)">
            <summary>
            获取文件访问。
            </summary>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.GetWin32FileMode(System.IO.FileMode)">
            <summary>
            获取文件模式。
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.GetWin32FileShare(System.IO.FileShare)">
            <summary>
            获取文件共享。
            </summary>
            <param name="share"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileHelper.GetWin32ErrorMessage(System.UInt32)">
            <summary>
            获取错误消息。
            </summary>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.MMF.MemoryMappedFileStream">
            <summary>
            内存映象文件流。提供从存储区创建文件、访问、写、读及移除一个内存映像文件功能的类。
            </summary>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.#ctor(System.IntPtr,EIIP.MMF.MemoryProtection)">
            <summary>
            实例化内存映象文件流。
            </summary>
            <param name="mapHandler">映象文件句柄</param>
            <param name="protection">内存保护模式</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.#ctor(System.String,EIIP.MMF.MemoryProtection)">
            <summary>
            实例化内存映象文件流。
            </summary>
            <param name="name">文件名称</param>
            <param name="protection">内存保护模式</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.#ctor(System.String,System.Int64,EIIP.MMF.MemoryProtection)">
            <summary>
            实例化内存映象文件流。
            </summary>
            <param name="name">文件名称</param>
            <param name="maxLength">文件最大长度</param>
            <param name="protection">内存保护模式</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.Flush">
            <summary>
            将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">buffer 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="offSet">
            字节数组。此方法返回时，该缓冲区包含指定的字符数组，
            该数组的 offset 和 (offset + count -1) 之间的值由从当前源中读取的字节替换。
            </param>
            <param name="count">要从当前流中最多读取的字节数。</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 origin 参数的字节偏移量。</param>
            <param name="origin">System.IO.SeekOrigin 类型的值，指示用于获取新位置的参考点。</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="memoryLength">所需的当前流的长度（以字节表示）。</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="offSet">字节数组。此方法将 count 个字节从 buffer 复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.CloseMapHandle">
            <summary>
            关闭映像句柄。
            </summary>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.MapViewToProcessMemory(System.Int32,System.Int64)">
            <summary>
            设置视图的内存映像文件的长度与偏移量。
            </summary>
            <param name="offSet">起始位置</param>
            <param name="count">长度</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.SetMaxLength(System.Int64)">
            <summary>
            设置文件最大长度。
            </summary>
            <param name="maxLength">要设置的最大长度</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.OpenExisting(System.String,EIIP.MMF.MemoryProtection)">
            <summary>
            打开已有的映像文件。
            </summary>
            <param name="name">文件名称</param>
            <param name="protection">文件的保护权限</param>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.OpenDictionary(System.String,EIIP.MMF.MemoryProtection)">
            <summary>
            打开字典对象。被用于 MmfStorage 查找存在的 HybridDictionary 对象。
            </summary>
            <param name="name">文件名称</param>
            <param name="protection">文件的保护权限</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.MMF.MemoryMappedFileStream.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:EIIP.MMF.MemoryMappedFileStream.MaxLength">
            <summary>
            获取文件最大长度。
            </summary>
        </member>
        <member name="P:EIIP.MMF.MemoryMappedFileStream.CanRead">
            <summary>
            获取指示当前流是否支持读取的值。
            </summary>
        </member>
        <member name="P:EIIP.MMF.MemoryMappedFileStream.CanSeek">
            <summary>
            获取指示当前流是否支持查找功能的值。
            </summary>
        </member>
        <member name="P:EIIP.MMF.MemoryMappedFileStream.CanWrite">
            <summary>
            获取指示当前流是否支持写入功能的值。
            </summary>
        </member>
        <member name="P:EIIP.MMF.MemoryMappedFileStream.Length">
            <summary>
            获取用字节表示的流长度。
            </summary>
        </member>
        <member name="P:EIIP.MMF.MemoryMappedFileStream.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
        </member>
        <member name="T:EIIP.Cache.Storages.MmfCacheStorage">
            <summary>
            使用共享的内存文件系统做为缓存数据的存储区。
            </summary>
            <remarks>
            在 XML 文件中使用下面的属性:
            Assembly	提供者所在程序集
            ClassName	提供者类型
            BasePath	文件路径
            Encrypted	是否被加密
            </remarks>
        </member>
        <member name="F:EIIP.Cache.Storages.MmfCacheStorage.LENGTH">
            <summary>
            指示映像内容长度的内存长度。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Storages.MmfCacheStorage.m_MMFs">
            <summary>
            存储 mmf 对象的字典。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Storages.MmfCacheStorage.m_DictionaryMmfs">
            <summary>
            字典文件流。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Storages.MmfCacheStorage.m_DictionarySize">
            <summary>
            字典尺寸。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.#ctor">
            <summary>
            实例化MMF缓存存储区。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#ICacheStorage#Remove(System.String)">
            <summary>
            移除指定缓存键的缓存项。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#ICacheStorage#GetData(System.String)">
            <summary>
            获取指定缓存键的缓存数据。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#ICacheStorage#Update(System.String,System.Object)">
            <summary>
            更新缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#ICacheStorage#Add(System.String,System.Object)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#ICacheStorage#Flush">
            <summary>
            清除所有缓存项。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#IMmfReference#AddReference(System.String)">
            <summary>
            添加引用数据键。注意: mmfs已被关闭？
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#IMmfReference#RemoveReference(System.Object)">
            <summary>
            移除指定引用数据。
            </summary>
            <param name="memoryMap">引用数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.GetKeyName(System.String)">
            <summary>
            获取完整的键名(文件名）。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.GetHandleName(System.String)">
            <summary>
            获取 mutex 处理键名（文件路径）。
            </summary>
            <remarks>
            string filepath = GetHandleName(key);
            </remarks>
            <param name="key">键名</param>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.CopyStreams(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            在两个流间复制数据。
            </summary>
            <param name="from">源流</param>
            <param name="to">目标流</param>
            <param name="count">要复制的长度</param>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.RemoveAllKeys">
            <summary>
            从磁盘移除所有缓存文件。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.AddDictionary(System.String)">
            <summary>
            将字典添加至共享内存。
            </summary>
            <param name="key">字典键名</param>
        </member>
        <member name="M:EIIP.Cache.Storages.MmfCacheStorage.GetDictionary(System.String)">
            <summary>
            从共享内存中获取字典对象。
            </summary>
            <param name="key">键</param>
        </member>
        <member name="P:EIIP.Cache.Storages.MmfCacheStorage.EIIP#Cache#ICacheStorage#Size">
            <summary>
            获取存储区尺寸。
            </summary>
        </member>
        <member name="T:EIIP.Cache.Storages.SingletonCacheStorage">
            <summary>
            内存缓存存储区。
            </summary>
        </member>
        <member name="F:EIIP.Cache.Storages.SingletonCacheStorage.m_CacheStorage">
            <summary>
            存储字典。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.SingletonCacheStorage.#ctor">
            <summary>
            实例化内存缓存存储区。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.SingletonCacheStorage.EIIP#Cache#ICacheStorage#Add(System.String,System.Object)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="M:EIIP.Cache.Storages.SingletonCacheStorage.EIIP#Cache#ICacheStorage#Flush">
            <summary>
            清除所有缓存项。
            </summary>
        </member>
        <member name="M:EIIP.Cache.Storages.SingletonCacheStorage.EIIP#Cache#ICacheStorage#GetData(System.String)">
            <summary>
            获取指定缓存键的缓存数据。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.Storages.SingletonCacheStorage.EIIP#Cache#ICacheStorage#Remove(System.String)">
            <summary>
            移除指定缓存键的缓存项。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Cache.Storages.SingletonCacheStorage.EIIP#Cache#ICacheStorage#Update(System.String,System.Object)">
            <summary>
            更新缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据</param>
        </member>
        <member name="P:EIIP.Cache.Storages.SingletonCacheStorage.EIIP#Cache#ICacheStorage#Size">
            <summary>
            获取存储区实例尺寸。
            </summary>
        </member>
        <member name="T:EIIP.Framework.CaptchaImage">
            <summary>
            验证码图片。
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.FontItems">
            <summary>
            字体
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.ColorItems">
            <summary>
            颜色
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.m_Random">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.m_Height">
            <summary>
            图片高度
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.m_FamilyName">
            <summary>
            字体
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.m_Text">
            <summary>
            图片文本
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.m_Image">
            <summary>
            图片
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.m_Width">
            <summary>
            图片宽度
            </summary>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.#ctor(System.String,System.Int32)">
            <summary>
            构造指定文本和大小的验证码图片实例
            </summary>
            <param name="s">图片文本</param>
            <param name="height">高度</param>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            构造指定文本,大小和字体的验证码图片实例
            </summary>
            <param name="s">图片文本</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="familyName">字体</param>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.#ctor(System.String,EIIP.Framework.CaptchaImage.StyleMode)">
            <summary>
            构造指定文本,大小和字体的验证码图片实例
            </summary>
            <param name="s">图片文本</param>
            <param name="style">宽度</param>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.Finalize">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.Dispose">
            <summary>
            清理所有正在使用的资源。
            </summary>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.Dispose(System.Boolean)">
            <summary>
            释放资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.SetDimensions(System.Int32,System.Int32)">
            <summary>
            设置尺寸
            </summary>
            <param name="width">宽</param>
            <param name="height">高</param>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.SetFamilyName(System.String)">
            <summary>
            设置字体,若该字体未被安装,则默认为系统字体
            </summary>
            <param name="familyName">字体</param>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.GenerateImage(EIIP.Framework.CaptchaImage.StyleMode)">
            <summary>
            生成图片。
            </summary>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.GenerateImage">
            <summary>
            生成图片。
            </summary>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.GenerateRandomCode(System.Int32)">
            <summary>
            获取指定长度的随机字串
            </summary>
            <param name="lenth">随机数长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.CaptchaImage.GenerateRandomCode">
            <summary>
            获取6位随机字串
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.Style">
            <summary>
            获取或设置样式风格。
            </summary>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.Text">
            <summary>
            获取或设置图片文本
            </summary>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.Image">
            <summary>
            获取图片
            </summary>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.Width">
            <summary>
            获取或设置图片宽度
            </summary>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.Height">
            <summary>
            获取或设置图片高度
            </summary>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.BackgroundNoise">
            <summary>
            获取或设置一个值,该值指示在图片中是否加入前景噪音。
            </summary>
        </member>
        <member name="P:EIIP.Framework.CaptchaImage.ForegroundNoise">
            <summary>
            获取或设置一个值,该值指示在图片中是否加入背景噪音。
            </summary>
        </member>
        <member name="T:EIIP.Framework.CaptchaImage.StyleMode">
            <summary>
            指示验证码的某一生成样式风格。
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.StyleMode.Default">
            <summary>
            缺省方式。(变形变色)
            </summary>
        </member>
        <member name="F:EIIP.Framework.CaptchaImage.StyleMode.Common">
            <summary>
            Web网站通用。(比较规整)
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.Config">
            <summary>
            EIIP 配置类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.m_KeyDataBakupFile">
            <summary>
            非对称密钥备份文件路径。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.m_SettingsFile">
            <summary>
            系统配置文件路径。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.m_Settings">
            <summary>
            配置设置对象。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.m_ConnectFile">
            <summary>
            系统连接文件路径。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.m_ConnectSettings">
            <summary>
            连接设置对象。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.ConfigFileCreateTime">
            <summary>
            配置文件创建时间。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.Singleton">
            <summary>
            取得全局类的单实例（WebForm 与 WinForm 均适用)
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.Load(System.IO.FileInfo)">
            <summary>
            加载信息
            </summary>
            <param name="file">配置文件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.LoadSettings">
            <summary>
            加载应用配置信息，返回配置文件信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.LoadSettings(System.IO.FileInfo)">
            <summary>
            加载应用配置信息。
            </summary>
            <param name="file">配置文件信息</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.LoadConnects">
            <summary>
            加载连接配置信息，返回连接文件信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.LoadConnects(System.IO.FileInfo)">
            <summary>
            加载应用配置信息。
            </summary>
            <param name="file">配置文件信息</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.SaveSettings">
            <summary>
            保存配置数据
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.SaveConnects">
            <summary>
            保存连接数据
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.Config.KeyDataBakupFile">
            <summary>
            获取非对称密钥备份文件路径。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.Config.SettingsFile">
            <summary>
            获取系统配置文件路径。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.Config.Settings">
            <summary>
            获取设置对象。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.Config.ConnectFile">
            <summary>
            获取系统连接文件路径。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.Config.ConnectSettings">
            <summary>
            获取连接设置对象。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.Config.WatchFileType">
            <summary>
            指示监视文件类型。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler">
            <summary>
            监视配置文件类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.TimeoutMillis">
            <summary>
            计时器工作延时。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.m_configFile">
            <summary>
            配置文件信息实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.m_timer">
            <summary>
            记时器实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.m_WatchFileType">
            <summary>
            监视文件类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.m_RunAtWebApplication">
            <summary>
            指示是否工作在WEB环境下。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.#ctor(System.Boolean,EIIP.Framework.Configuration.Config.WatchFileType,System.IO.FileInfo)">
            <summary>
            实例化监视配置文件类。
            </summary>
            <param name="runAtWeb">指示是否运行在Web环境</param>
            <param name="watchFileType">监视文件类型</param>
            <param name="configFile">要监视的配置文件</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.StartWatching(System.Boolean,EIIP.Framework.Configuration.Config.WatchFileType,System.IO.FileInfo)">
            <summary>
            开始监视的配置文件。
            </summary>
            <param name="runAtWeb">指示是否运行在Web环境</param>
            <param name="watchFileType">监视文件类型</param>
            <param name="configFile">要监视的配置文件</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            处理配置更改事件。
            </summary>
            <param name="source">引发事件的 FileSystemWatcher 对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.ConfigureAndWatchHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            处理配置更名事件。
            </summary>
            <param name="source">引发事件的 FileSystemWatcher 对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.Config.ConfigureAndWatchHandler.OnWatchedFileChange(System.Object)">
            <summary>
            当配置被更改时由计时器调用。
            </summary>
            <param name="state">null</param>
        </member>
        <member name="T:EIIP.Framework.Configuration.NameValueItem">
            <summary>
            提供在 <see cref="T:EIIP.Framework.Configuration.NameValueItemCollection"/> 使用的键值对。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItem.#ctor">
            <summary>
            实例化键值对。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItem.#ctor(System.String,System.String)">
            <summary>
            实例化指定键值对。
            </summary>
            <param name="name">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItem.ToString">
            <summary>
            获取当前实例的键名。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.NameValueItem.Name">
            <summary>
            获取或设置键名
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.NameValueItem.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.NameValueItem.Owner">
            <summary>
            获取或设置键名集合
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.NameValueItemCollection">
            <summary>
            提供 <see cref="T:EIIP.Framework.Configuration.NameValueItem"/> 对象集合。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.NameValueItemCollection.dictionary">
            <summary>
            按键排序的字典
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.#ctor">
            <summary>
            实例化键值对集合。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.#ctor(EIIP.Framework.Configuration.NameValueItemCollection)">
            <summary>
            实例化指定键值对集合。
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.GetNameValueItem(System.String)">
            <summary>
            获取指定键名的键值对。不存在返回null。
            </summary>
            <param name="name">键名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Add(System.String,System.String)">
            <summary>
            添加键值对。
            </summary>
            <param name="name">键名</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Add(System.Object)">
            <summary>
            添加键值对。(支持XML序列化）
            </summary>
            <param name="item">键值对对象。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Add(EIIP.Framework.Configuration.NameValueItem)">
            <summary>
            添加键值对。
            </summary>
            <param name="item">键值对对象。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Insert(System.Int32,EIIP.Framework.Configuration.NameValueItem)">
            <summary>
            在指定索引位置插入键值对。
            </summary>
            <param name="index">索引</param>
            <param name="item">键值对</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Remove(System.String)">
            <summary>
            从集合中移除指定键名的键值对。
            </summary>
            <param name="name">键名</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.IndexOf(EIIP.Framework.Configuration.NameValueItem)">
            <summary>
            确定集合中特定键值对项的索引。 
            </summary>
            <param name="item">键值对</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Contains(EIIP.Framework.Configuration.NameValueItem)">
            <summary>
            确定集合中是否包含特定的值。
            </summary>
            <param name="item">键值对</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.CopyTo(EIIP.Framework.Configuration.NameValueItem[],System.Int32)">
            <summary>
            从特定索引处开始将集合的元素复制到数组中。 
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维数组。</param>
            <param name="index">数组中的从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.Set(EIIP.Framework.Configuration.NameValueItem)">
            <summary>
            设置键值对。
            </summary>
            <param name="item">键值对</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnClear">
            <summary>
            清除集合成员引用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnClearComplete">
            <summary>
            移除所有成员。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            在向集合实例中插入新键值对之前，进行存在性检查。若已存在则抛出错误。
            </summary>
            <param name="index">从零开始的索引，在该处插入 value。</param>
            <param name="value">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            在向集合实例中插入新键值对之后，进行元素与集合之间的引用设置。若已存在则抛出错误。
            </summary>
            <param name="index">从零开始的索引，在该处插入 value。</param>
            <param name="value">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            在向集合实例中移除元素之后，进行元素与集合之间的引用取消操作。
            </summary>
            <param name="index">value 在集合中从零开始的索引。</param>
            <param name="value">在 index 处的集合中元素。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnValidate(System.Object)">
            <summary>
            当验证值时执行类型判定。
            </summary>
            <param name="value">要添加的键值对对象</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            当在集合实例中设置值后，用新值更新集合中的字典。 
            </summary>
            <param name="index">从零开始的索引，可在该位置找到 oldValue。</param>
            <param name="oldValue">要用 newValue 替换的值。</param>
            <param name="newValue">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.Configuration.NameValueItemCollection.RemoveItem(EIIP.Framework.Configuration.NameValueItem)">
            <summary>
            移除指定键值对。
            </summary>
            <param name="olditem">移除的键值对</param>
        </member>
        <member name="P:EIIP.Framework.Configuration.NameValueItemCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引的键值对。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.NameValueItemCollection.Item(System.String)">
            <summary>
            获取或设置指定键名的键值。不存在返回null。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.Perm">
            <summary>
            指定某一Perm。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Perm.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Perm.PM">
            <summary>
            PM
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.Settings">
            <summary>
            配置设置类
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.Settings.m_AppSettings">
            <summary>
            应用设置键值对集合
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.Settings.GetAppSettings(System.String,System.String,System.Int32)">
            <summary>
            获取应用设置数据。
            </summary>
            <param name="key">应用设置键</param>
            <param name="defaultValue">当 key 的数据值为空（null或长度小于 minLen）时，缺省返回的值。</param>
            <param name="minLen">key 的数据值最小长度，当达不到该长度时，会返回 defaultValue</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Settings.GetAppSettings(System.String,System.String)">
            <summary>
            获取应用设置数据。
            </summary>
            <param name="key">应用设置键</param>
            <param name="defaultValue">当 key 的数据值为空（null）时，缺省返回的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Settings.GetDecryptAppSettings(System.String)">
            <summary>
            解密对象。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Settings.GetDecryptAppSettings(System.Int32)">
            <summary>
            解密对象。
            </summary>
            <param name="indexKey">键索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Configuration.Settings.SetEncryptAppSettings(System.String,System.Object)">
            <summary>
            加密对象
            </summary>
            <param name="key">键</param>
            <param name="obj">对象实例</param>
        </member>
        <member name="P:EIIP.Framework.Configuration.Settings.AppSettings">
            <summary>
            获取或设置应用设置数据。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Configuration.WebConfig">
            <summary>
            管理 Web.config 类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.WebConfig.m_PhysicalPath">
            <summary>
            Web.config 文件所在物理路径
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.WebConfig.xmlDoc">
            <summary>
            表示Web.config 文档
            </summary>
        </member>
        <member name="F:EIIP.Framework.Configuration.WebConfig.nodeWeb">
            <summary>
            system.web 节点
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.WebConfig.#ctor">
            <summary>
            实例化 Web.config 管理类
            </summary>
        </member>
        <member name="M:EIIP.Framework.Configuration.WebConfig.Save">
            <summary>
            保存修改
            </summary>
            <remarks>
             注意，调用该函数后，会使整个Web Application重启，导致当前所有的会话丢失
            </remarks>
        </member>
        <member name="M:EIIP.Framework.Configuration.WebConfig.Modify_appSettings(System.String,System.String)">
            <summary>
             修改web.config文件appSettings配置节中的Add里的value属性
            </summary>
            <param name="key">要修改的键key</param>
            <param name="keyValue">修改后的value</param>
        </member>
        <member name="P:EIIP.Framework.Configuration.WebConfig.cookieless">
            <summary>
            获取或设置一个值,该值指示是否禁用 Cookie(用于保持会话状态)
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.WebConfig.impersonate">
            <summary>
            获取或设置一个值,该值指示是否设置允许匿名访问资源(即是否使用帐号模拟）
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.WebConfig.httpRuntime">
            <summary>
            获取或设置上传文件配置,[0]maxRequestLength;[1]executionTimeout
            </summary>
        </member>
        <member name="P:EIIP.Framework.Configuration.WebConfig.compilation">
            <summary>
            设置一个值,该值指示是否使用动态调试编译(DEBUG模式)
            </summary>
        </member>
        <member name="T:EIIP.Framework.CyclicBuffer">
            <summary>
            固定大小的可循环缓存。
            </summary>
        </member>
        <member name="F:EIIP.Framework.CyclicBuffer.m_first">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="F:EIIP.Framework.CyclicBuffer.m_last">
            <summary>
            结束位置
            </summary>
        </member>
        <member name="F:EIIP.Framework.CyclicBuffer.m_numElems">
            <summary>
            元素个数
            </summary>
        </member>
        <member name="F:EIIP.Framework.CyclicBuffer.m_maxSize">
            <summary>
            最大尺寸
            </summary>
        </member>
        <member name="M:EIIP.Framework.CyclicBuffer.#ctor(System.Int32)">
            <summary>
            实例化固定大小的可循环缓存。
            </summary>
            <param name="maxSize">缓存中最大容量</param>
        </member>
        <member name="P:EIIP.Framework.CyclicBuffer.MaxSize">
            <summary>
            获取缓存的最大尺寸。
            </summary>
        </member>
        <member name="P:EIIP.Framework.CyclicBuffer.Length">
            <summary>
            获取缓存中的元素数量。
            </summary>
        </member>
        <member name="T:EIIP.Framework.EIIPAuthentication">
            <summary>
            EIIP验证模块。
            </summary>
        </member>
        <member name="F:EIIP.Framework.EIIPAuthentication.PREFIX_UploadID">
            <summary>
            在 Application 中保存上传标识ID键
            </summary>
        </member>
        <member name="F:EIIP.Framework.EIIPAuthentication.QueryString_UploadID">
            <summary>
            查询字串中的上传标识ID键
            </summary>
        </member>
        <member name="F:EIIP.Framework.EIIPAuthentication.ERROR_Progress">
            <summary>
            在 Application 中保存错误进度条列表键
            </summary>
        </member>
        <member name="F:EIIP.Framework.EIIPAuthentication.IDKey">
            <summary>
            用户身份标识键
            </summary>
        </member>
        <member name="F:EIIP.Framework.EIIPAuthentication.pageRedirect">
            <summary>
            转向的默认页面
            </summary>
        </member>
        <member name="F:EIIP.Framework.EIIPAuthentication.pageRedirectRe">
            <summary>
            转向的默认重登录页面
            </summary>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.ResetRewriterEngine">
            <summary>
            重置URL重写引擎实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetRedirectPage">
            <summary>
            获取转向的默认页面
            </summary>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetRedirectRePage">
            <summary>
            获取转向的默认重登录页面
            </summary>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.#ctor">
            <summary>
            实例化EIIP验证模块。
            </summary>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.Init(System.Web.HttpApplication)">
            <summary>
            初始化模块，并使其为处理请求做好准备，即绑定事件处理程序。
            </summary>
            <param name="application">
            一个 HttpApplication，它提供对 ASP.NET 应用程序内所有应用程序对象的公用的方法、属性和事件的访问 
            </param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.Dispose">
            <summary>
            在从执行管线中移除模块前执行任何最后的清理工作。
            </summary>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.Application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            开始请求
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.Application_EndRequest(System.Object,System.EventArgs)">
            <summary>
            结束请求后移除进度信息
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.Application_Error(System.Object,System.EventArgs)">
            <summary>
            如果出错了设置进度信息中状态为“Error”
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication._URLRewrite(System.Web.HttpApplication)">
            <summary>
            URL地址重定向。
            </summary>
            <param name="app">HttpApplication 实例</param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetErrorProgress(System.String,System.Web.HttpApplicationState)">
            <summary>
            获取错误的进度条
            </summary>
            <param name="uploadID"></param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.SetUploadState(System.Web.HttpApplication,EIIP.Framework.UploadState)">
            <summary>
            设置当前上传进度信息的状态
            </summary>
            <param name="app"></param>
            <param name="state"></param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.SetProgress(System.String,EIIP.Framework.Progress,System.Web.HttpApplicationState)">
            <summary>
            在 ApplicationState 中设置当前上传的进度信息。
            </summary>
            <param name="uploadID">上传标识ID</param>
            <param name="progress">进度</param>
            <param name="application">应用</param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.RemoveFrom(System.Web.HttpApplication)">
            <summary>
            从Application中移出进度信息
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetProgress(System.String)">
            <summary>
            根据上传标识ID获取上传进度信息
            </summary>
            <param name="uploadID">上传标识ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetProgress(System.String,System.Web.HttpApplicationState)">
            <summary>
            根据上传标识ID获取上传进度信息
            </summary>
            <param name="uploadID">上传标识ID</param>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetProgress(System.Web.HttpApplication)">
            <summary>
            根据获取上传进度信息
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.InjectTextParts(System.Web.HttpWorkerRequest,System.Byte[])">
            <summary>
            传入已上传完的数据
            </summary>
            <param name="request"></param>
            <param name="textParts"></param>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetWorkerRequest(System.Web.HttpContext)">
            <summary>
            获取当前处理请求
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.IsUploadRequest(System.Web.HttpRequest)">
            <summary>
            是否为附件上传。
            判断的根据是ContentType中有无multipart/form-data
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.StringStartsWithAnotherIgnoreCase(System.String,System.String)">
            <summary>
            判断字串是含有另一子串，忽略大小写
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetCurrentUser">
            <summary>
            获取当前登录用户信息，不存在返回null。(WebForms 与 WCF 均适用)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetCurrentUser4WCF">
            <summary>
            获取当前WCF登录用户信息，不存在返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.EIIPAuthentication.GetCurrentUser(System.Web.HttpContext)">
            <summary>
            获取当前登录用户信息，不存在返回null。(适用于Web Forms)
            </summary>
            <param name="context">Http请求上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.EIIPAuthentication.RewriterEngine">
            <summary>
            获取URL重写引擎实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.EIIPAuthentication.OriginalQueryString">
            <summary>
            获取原始请求查询字串。
            </summary>
        </member>
        <member name="P:EIIP.Framework.EIIPAuthentication.QueryString">
            <summary>
            获取重写后的请求查询字串。
            </summary>
        </member>
        <member name="P:EIIP.Framework.EIIPAuthentication.RawUrl">
            <summary>
            获取原始请求URL。
            </summary>
        </member>
        <member name="P:EIIP.Framework.EIIPAuthentication.Configuration">
            <summary>
            获取当前URL重写配置实例。
            </summary>
        </member>
        <member name="T:EIIP.Encryption.Crypto">
            <summary>
            可逆的对称加密解密类。
            </summary>
        </member>
        <member name="F:EIIP.Encryption.Crypto.m_CryptKey">
            <summary>
            加密解密私钥变量
            </summary>
        </member>
        <member name="F:EIIP.Encryption.Crypto.m_CryptIV">
            <summary>
            加密解密初始化向量IV变量
            </summary>
        </member>
        <member name="M:EIIP.Encryption.Crypto.#ctor">
            <summary>
            实例化默认加密解密类(DES)
            </summary>
        </member>
        <member name="M:EIIP.Encryption.Crypto.#ctor(EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化指定加密算法的加密解密类
            </summary>
            <param name="algorithm">加密算法</param>
        </member>
        <member name="M:EIIP.Encryption.Crypto.SetKeyIV(System.String,System.String)">
            <summary>
            设置加密私钥和初始化向量IV
            </summary>
            <param name="keyStr"></param>
            <param name="IVStr"></param>
        </member>
        <member name="M:EIIP.Encryption.Crypto.Encrypt(System.String)">
            <summary>
            加密函数,用于对字符串进行加密。需要提供相应的密钥和IV。
            </summary>
            <param name="plainText">原文</param>
            <returns>密文</returns>
        </member>
        <member name="M:EIIP.Encryption.Crypto.Decrypt(System.String)">
            <summary>
            解密函数，用于经过加密的字符序列进行加密。需要提供相应的密钥和IV。
            </summary>
            <param name="cipherText">密文</param>
            <returns>原文</returns>
        </member>
        <member name="P:EIIP.Encryption.Crypto.CryptKey">
            <summary>
            获取加密私钥
            </summary>
        </member>
        <member name="P:EIIP.Encryption.Crypto.CryptIV">
            <summary>
            获取加密的初始化向量IV
            </summary>
        </member>
        <member name="T:EIIP.Encryption.Decryptor">
            <summary>
            解密类。
            </summary>
        </member>
        <member name="F:EIIP.Encryption.Decryptor.transformer">
            <summary>
            解密转换器
            </summary>
        </member>
        <member name="F:EIIP.Encryption.Decryptor.initVec">
            <summary>
            加密的初始化向量IV
            </summary>
        </member>
        <member name="M:EIIP.Encryption.Decryptor.#ctor(EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化指定加密算法的解密类
            </summary>
            <param name="algId">加密算法</param>
        </member>
        <member name="M:EIIP.Encryption.Decryptor.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="bytesData">密文</param>
            <param name="bytesKey">机密钥匙</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Encryption.Decryptor.IV">
            <summary>
            设置加密的初始化向量IV
            </summary>
        </member>
        <member name="T:EIIP.Encryption.DecryptTransformer">
            <summary>
            解密转换器。
            </summary>
        </member>
        <member name="F:EIIP.Encryption.DecryptTransformer.algorithmID">
            <summary>
            加密算法
            </summary>
        </member>
        <member name="F:EIIP.Encryption.DecryptTransformer.initVec">
            <summary>
            加密的初始化向量IV
            </summary>
        </member>
        <member name="M:EIIP.Encryption.DecryptTransformer.#ctor(EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化指定加密算法的解密转换器
            </summary>
            <param name="deCryptId">加密算法</param>
        </member>
        <member name="M:EIIP.Encryption.DecryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            获取指定私钥的解密转换运算服务提供者
            </summary>
            <param name="bytesKey">私钥</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Encryption.DecryptTransformer.IV">
            <summary>
            设置加密的初始化向量IV
            </summary>
        </member>
        <member name="T:EIIP.Encryption.Encryptor">
            <summary>
            加密类。
            </summary>
            <remarks>
            DES:Default=64, Minsize = 64 , MaxSize = 64 , SkipSize = 0 ,则只有一个允许的密钥大小：64位；
            RC2:Default=128, Minsize = 40 , MaxSize = 128 , SkipSize = 8 ,则有12个允许的密钥大小：40位,48位,,,,128位； 
            Rijndael:Default=256, Minsize = 128 , MaxSize = 256 , SkipSize = 64 ,则有3个允许的密钥大小：128位,192位,256位。
            </remarks>
        </member>
        <member name="F:EIIP.Encryption.Encryptor.transformer">
            <summary>
            加密转换器
            </summary>
        </member>
        <member name="F:EIIP.Encryption.Encryptor.initVec">
            <summary>
            加密的初始化向量IV
            </summary>
        </member>
        <member name="F:EIIP.Encryption.Encryptor.encKey">
            <summary>
            加密私钥
            </summary>
        </member>
        <member name="M:EIIP.Encryption.Encryptor.#ctor(EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化指定加密算法的加密类
            </summary>
            <param name="algId"></param>
        </member>
        <member name="M:EIIP.Encryption.Encryptor.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="bytesData">明文</param>
            <param name="bytesKey">机密钥匙</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Encryption.Encryptor.IV">
            <summary>
            获取或设置加密的初始化向量IV
            </summary>
        </member>
        <member name="P:EIIP.Encryption.Encryptor.Key">
            <summary>
            获取加密私钥
            </summary>
        </member>
        <member name="T:EIIP.Encryption.EncryptTransformer">
            <summary>
            加密转换器。
            </summary>
        </member>
        <member name="F:EIIP.Encryption.EncryptTransformer.algorithmID">
            <summary>
            加密算法
            </summary>
        </member>
        <member name="F:EIIP.Encryption.EncryptTransformer.initVec">
            <summary>
            加密的初始化向量IV
            </summary>
        </member>
        <member name="F:EIIP.Encryption.EncryptTransformer.encKey">
            <summary>
            加密私钥
            </summary>
        </member>
        <member name="M:EIIP.Encryption.EncryptTransformer.#ctor(EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化指定加密算法的加密转换器
            </summary>
            <param name="algId">加密算法</param>
        </member>
        <member name="M:EIIP.Encryption.EncryptTransformer.GetCryptoServiceProvider(System.Byte[])">
            <summary>
            获取指定私钥的加密转换运算服务提供者
            </summary>
            <param name="bytesKey">私钥</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Encryption.EncryptTransformer.IV">
            <summary>
            获取或设置加密的初始化向量IV
            </summary>
        </member>
        <member name="P:EIIP.Encryption.EncryptTransformer.Key">
            <summary>
            获取加密私钥
            </summary>
        </member>
        <member name="T:EIIP.Framework.Security.IDataProtection">
            <summary>
            实现数据保护的接口。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.IDataProtection.InitClientKey(System.Byte[])">
            <summary>
            初始化客户端对称算法的机密密钥。
            </summary>
            <param name="clientKey">客户端对称算法的机密密钥</param>
        </member>
        <member name="M:EIIP.Framework.Security.IDataProtection.Encrypt(System.Byte[])">
            <summary>
            加密明文。
            </summary>
            <param name="plainValue">明文数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.IDataProtection.Decrypt(System.Byte[])">
            <summary>
            解密密文。
            </summary>
            <param name="cipherValue">密文数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.IDataProtection.ComputeHash(System.Byte[])">
            <summary>
            计算明文数据的哈希码。
            </summary>
            <param name="plainValue">明文数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.IDataProtection.ToBytes(System.Object,System.Boolean)">
            <summary>
            将指定对象序列化为字节数组。
            </summary>
            <param name="value">要处理的对象</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.IDataProtection.ToObject(System.Byte[],System.Boolean)">
            <summary>
            将指定字节数组反序列化为对象(不加密)。
            </summary>
            <param name="value">要处理的字节数组</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Exceptions.NoRightException">
            <summary>
            没有权限时引发的异常
            </summary>
        </member>
        <member name="M:EIIP.Exceptions.NoRightException.#ctor">
            <summary>
            初始化 NoRightException 类的新实例。
            </summary>
        </member>
        <member name="M:EIIP.Exceptions.NoRightException.#ctor(System.String)">
            <summary>
             使用指定错误信息初始化 NoRightException 类的新实例。
            </summary>
            <param name="rightName">权限名称</param>
        </member>
        <member name="M:EIIP.Exceptions.NoRightException.#ctor(System.Enum)">
            <summary>
             使用指定错误信息初始化 NoRightException 类的新实例。
            </summary>
            <param name="right">权限枚举</param>
        </member>
        <member name="M:EIIP.Exceptions.NoRightException.#ctor(System.String,System.Enum)">
            <summary>
             使用指定错误信息初始化 NoRightException 类的新实例。
            </summary>
            <param name="message">前导信息</param>
            <param name="right">权限枚举</param>
        </member>
        <member name="T:EIIP.FilterHandler">
            <summary>
            文本过滤器。
            </summary>
        </member>
        <member name="M:EIIP.FilterHandler.Process(EIIP.TextFilterType,System.String)">
            <summary>
            处理过滤请求
            </summary>
            <param name="filterType">过滤类型</param>
            <param name="filterContent">待过滤内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.FilterHandler.FilterScript(System.String)">
            <summary>
            过滤脚本
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.FilterHandler.FilterHtml(System.String)">
            <summary>
            过滤HTML
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.FilterHandler.FilterObject(System.String)">
            <summary>
            过滤Object
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.FilterHandler.FilterSQL(System.String)">
            <summary>
            过滤SQL中的敏感字符，如like查询的格式(防SQL注入式攻击)
            </summary>
            <param name="sqlPart">内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.FilterHandler.FilterKeyChars(System.String)">
            <summary>
            过滤保留字符
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.TextFilterType">
            <summary>
            文本的过滤类型。
            </summary>
        </member>
        <member name="F:EIIP.TextFilterType.Script">
            <summary>
            过滤脚本
            </summary>
        </member>
        <member name="F:EIIP.TextFilterType.Html">
            <summary>
            过滤HTML
            </summary>
        </member>
        <member name="F:EIIP.TextFilterType.Object">
            <summary>
            过滤Object
            </summary>
        </member>
        <member name="F:EIIP.TextFilterType.保留字">
            <summary>
            过滤保留字
            </summary>
        </member>
        <member name="F:EIIP.TextFilterType.敏感字">
            <summary>
            过滤敏感字
            </summary>
        </member>
        <member name="T:EIIP.BadWordsFilter">
            <summary>
            通过新增的一个byte[char.MaxValue]和BitArray(char.MaxValue)，减少了大量的Substring和GetHashCode的调用
            </summary>
        </member>
        <member name="M:EIIP.BadWordsFilter.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.BadWordsFilter.Init(System.String[])">
            <summary>
            
            </summary>
            <param name="dirtyWords"></param>
        </member>
        <member name="M:EIIP.BadWordsFilter.Filter(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.BadWordsFilter.HasDirtyWords(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.Format.ChineseNumber">
             <summary>
             货币格式化类。
             </summary>
             <remarks>
             <code>
              string printString = String.Empty; 
            long i = 1100000013; 
            ChineseFormat fmt = new ChineseFormat(); 
            printString = string.Format(fmt, "显示正常格式: {0}", i); 
            Console.WriteLine(printString); 
            printString = string.Format(fmt, "显示正常格式: {0:C}", i); 
            Console.WriteLine(printString); 
            printString = string.Format(fmt, "显示自定义格式: {0:ChineseFormat}", i); 
            Console.WriteLine(printString); 
             </code>
             </remarks>
        </member>
        <member name="F:EIIP.Framework.Format.ChineseNumber.NUMS">
            <summary>
            中文数字。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Format.ChineseNumber.DIGITS">
            <summary>
            中文位。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Format.ChineseNumber.UNITS">
            <summary>
            中文单位数组。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Format.ChineseNumber.#ctor">
            <summary>
            实例化货币格式化类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Format.ChineseNumber.GetFormat(System.Type)">
            <summary>
            如果format Type与当前实例类型相同，则为当前实例，否则为空引用 
            </summary>
            <param name="format">格式化类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Format.ChineseNumber.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            格式化。
            </summary>
            <param name="format">格式字串</param>
            <param name="arg">要格式化的变量</param>
            <param name="provider">格式化提供程序</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Format.ChineseNumber.ConvertNumberToChinese(System.String)">
            <summary>
            货币转换。
            </summary>
            <param name="x">要转换的数字字串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.DateTimeHelper">
            <summary>
            处理日期时间的辅助类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.aryMonthName">
            <summary>
            月份名称
            </summary>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.ChineseDateAndWeek(System.String,System.DateTime)">
            <summary>
            获取完整中文日期（含星期）
            </summary>
            <param name="format">格式字符串。</param>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.ChineseDateTimeWeek(System.DateTime)">
            <summary>
            获取完整中文日期（日期 小时:分钟 星期）
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.ChineseDateWeek(System.DateTime)">
            <summary>
            获取完整中文日期（日期 星期）
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.WeekdayName(System.DateTime)">
            <summary>
            获取日期为一周的星期几
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.ChineseDate(System.DateTime)">
            <summary>
            获取完整中文日期（含星期）
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.MonthName(System.Int32)">
            <summary>
            获取指定月份名称。
            </summary>
            <param name="month">基于1的月份数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.MonthName(System.DateTime)">
            <summary>
            获取指定日期的月份
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.WeekdaysIn(System.DayOfWeek,System.DateTime,System.DateTime)">
            <summary>
            获取任意时段内的 指定星期 的个数(周日是当周的最后一天)
            </summary>
            <param name="weekDay">星期</param>
            <param name="startDate">起始日期</param>
            <param name="endDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.GetWeekOfYear(System.DateTime)">
            <summary>
            获取指定日期的周数
            </summary>
            <param name="date">日期</param>
            <returns>返回周数</returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.GetWeekRange(System.Int32,System.Int32)">
            <summary>
            获取指定周的日期时间范围
            </summary>
            <param name="year">指定年份</param>
            <param name="week">指定周</param>
            <returns>一个包含起始日期和结束日期的DateTime数组</returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.GetWeekRange(System.DateTime)">
            <summary>
            获取指定日期所在周的日期时间范围
            </summary>
            <param name="date">日期</param>
            <returns>一个包含起始日期和结束日期的DateTime数组</returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.GetFirstDayInWeek(System.DateTime)">
            <summary>
            获取指定日期所在周的第一天(基准: 星期一为一周的第一天)
            </summary>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Minutes(System.DateTime)">
            <summary>
            获取基于基准时间的整分钟数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Minutes2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="minutes">基于基准时间的整分钟数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Hours(System.DateTime)">
            <summary>
            获取基于基准时间的整小时数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Hours2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="hours">基于基准时间的整小时数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Days(System.DateTime)">
            <summary>
            获取基于基准时间的整天数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Days2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="days">基于基准时间的整天数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Months(System.DateTime)">
            <summary>
            获取基于基准时间的整月数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Months2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="months">基于基准时间的整月数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Years(System.DateTime)">
            <summary>
            获取基于基准时间的整年数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Years2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="years">基于基准时间的整年数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Quarters(System.DateTime)">
            <summary>
            获取基于基准时间的整季度数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Quarters2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="quarters">基于基准时间的整季度数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Periods(System.DateTime)">
            <summary>
            获取基于基准时间的整旬数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.Periods2Date(System.Int32)">
            <summary>
            获取转换日期。
            </summary>
            <param name="periods">基于基准时间的整旬数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.EnsureEndOfDay(System.DateTime)">
            <summary>
            获取指定日期的最后一秒的时间。
            </summary>
            <param name="day">要获取最后一秒日期的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.EnsureEndOfMonth(System.DateTime)">
            <summary>
            获取指定日期所在月份的最后一秒的时间。
            </summary>
            <param name="day">要获取最后一秒日期的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.EnsureEndOfYear(System.DateTime)">
            <summary>
            获取指定日期所在年份的最后一秒的时间。
            </summary>
            <param name="day">要获取最后一秒日期的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.EnsureBeginOfDay(System.DateTime)">
            <summary>
            获取指定日期的起始时间。
            </summary>
            <param name="day">要获取起始时间的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.EnsureBeginOfMonth(System.DateTime)">
            <summary>
            获取指定日期所在月份的起始的时间。
            </summary>
            <param name="day">要获取起始时间的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.EnsureBeginOfYear(System.DateTime)">
            <summary>
            获取指定日期所在年份的起始时间。
            </summary>
            <param name="day">要获取起始时间的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.GetTime(System.DateTime)">
            <summary>
            获取自系统基准时间以来的毫秒数。
            </summary>
            <param name="dateTime">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateStringFromNow(System.DateTime,System.String)">
            <summary>
            获取离最近发表时间的文本字串。
            </summary>
            <param name="dt">要转换为文本的日期时间</param>
            <param name="defaultFormat">默认日期时间格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.NextFixedIntervals(System.Int32)">
            <summary>
            获取下一固定间隔时间。一般用于缓存时间计算。
            </summary>
            <param name="intervalMinutes">固定的间隔分钟数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.NextFixedIntervals(System.DateTime,System.Int32)">
            <summary>
            获取基于指定时间的下一固定间隔时间。一般用于缓存时间计算。
            </summary>
            <param name="baseDT">要计算的基准时间</param>
            <param name="intervalMinutes">固定的间隔分钟数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.NextFixedIntervalsHour(System.Int32)">
            <summary>
            获取下一固定间隔时间。一般用于缓存时间计算。
            </summary>
            <param name="intervalHours">固定的间隔小时数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.NextFixedIntervalsHour(System.DateTime,System.Int32)">
            <summary>
            获取基于指定时间的下一固定间隔时间。一般用于缓存时间计算。
            </summary>
            <param name="baseDT">要计算的基准时间</param>
            <param name="intervalHours">固定的间隔小时数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.NextFixedIntervalsDay(System.Int32)">
            <summary>
            获取下一固定间隔时间。一般用于缓存时间计算。
            </summary>
            <param name="intervalDays">固定的间隔天数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.NextFixedIntervalsDay(System.DateTime,System.Int32)">
            <summary>
            获取基于指定时间的下一固定间隔时间。一般用于缓存或报表计算。
            </summary>
            <param name="baseDT">要计算的基准时间</param>
            <param name="intervalDays">固定的间隔天数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.DateTimeHelper.DateField">
            <summary>
            可用于索引存储的日期时间类型字段。
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateField.BaseTime">
            <summary>
            获取基准时间。
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateField.DATE_LEN">
            <summary>
            包含微秒的十六进制日期时间值所能表示的字符串最大长度。
            </summary>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateField.DateToString(System.DateTime)">
            <summary>
            将时间转换为字符串。
            </summary>
            <param name="date">晚于1970年的日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateField.TimeToString(System.Int64)">
            <summary>
            将毫秒级时间转换为字符串。
            </summary>
            <param name="time">毫秒级时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateField.StringToTime(System.String)">
            <summary>
            将代表时间的字符串转换为毫秒级时间值。
            </summary>
            <param name="s">时间字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateField.StringToDate(System.String)">
            <summary>
            将代表时间的字符串转换为时间。
            </summary>
            <param name="s">时间字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.DateTimeHelper.DateField.MIN_DATE_STRING">
            <summary>
            获取最小时间字符串长度。
            </summary>
        </member>
        <member name="P:EIIP.Helper.DateTimeHelper.DateField.MAX_DATE_STRING">
            <summary>
            获取最大时间字符串长度。
            </summary>
        </member>
        <member name="T:EIIP.Helper.DateTimeHelper.DateConvert">
            <summary>
            日期格式转换。
            </summary>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.DateToString(System.DateTime,EIIP.Helper.DateTimeHelper.DateConvert.Resolution)">
            <summary>
            按指定时间颗粒度转换为格式化字符串（yyyyMMddHHmmssfff）。
            </summary>
            <param name="date">日期时间</param>
            <param name="resolution">时间颗粒度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.DateToString(System.DateTime,EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType)">
            <summary>
            按指定时间颗粒度转换为格式化字符串（yyyyMMddHHmmssfff）。
            </summary>
            <param name="date">日期时间</param>
            <param name="resolution">时间颗粒度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.TimeToString(System.Int64,EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType)">
            <summary>
            按指定时间颗粒度转换为格式化字符串（yyyyMMddHHmmssfff）。
            </summary>
            <param name="time">时间值</param>
            <param name="resolution">时间颗粒度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.StringToTime(System.String)">
            <summary>
            将格式化字符串转换为日期时间值。
            </summary>
            <param name="dateString">要转换的日期时间格式化字符串（yyyyMMddHHmmssfff）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.StringToDate(System.String)">
            <summary>
            将格式化字符串转换为日期时间。
            </summary>
            <param name="dateString">要转换的日期时间格式化字符串（yyyyMMddHHmmssfff）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.Round(System.DateTime,EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType)">
            <summary>
            按指定时间颗粒度取整。
            </summary>
            <param name="date">时间值</param>
            <param name="resolution">时间颗粒度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.Round(System.Int64,EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType)">
            <summary>
            按指定时间颗粒度取整。
            </summary>
            <param name="time">时间值</param>
            <param name="resolution">时间颗粒度</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType">
            <summary>
            指示时间的某一颗粒度。
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.YEAR">
            <summary>
            年
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.MONTH">
            <summary>
            月
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.DAY">
            <summary>
            日
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.HOUR">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.MINUTE">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.SECOND">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.ResolutionType.MILLISECOND">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="T:EIIP.Helper.DateTimeHelper.DateConvert.Resolution">
            <summary>
            时间的颗粒度类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.YEAR">
            <summary>
            年
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.MONTH">
            <summary>
            月
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.DAY">
            <summary>
            日
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.HOUR">
            <summary>
            小时
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.MINUTE">
            <summary>
            分钟
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.SECOND">
            <summary>
            秒
            </summary>
        </member>
        <member name="F:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.MILLISECOND">
            <summary>
            毫秒
            </summary>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.#ctor">
            <summary>
            实例化时间的颗粒度。
            </summary>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.#ctor(System.String)">
            <summary>
            实例化指定时间的颗粒度。
            </summary>
            <param name="resolution">颗粒度。</param>
        </member>
        <member name="M:EIIP.Helper.DateTimeHelper.DateConvert.Resolution.ToString">
            <summary>
            输出颗粒度名称。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GIF.BitEncoder">
            <summary>
            位编码器类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.BitEncoder.m_CurrentBit">
            <summary>
            上一次处理剩余的bit数
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.BitEncoder.OutList">
            <summary>
            输出字节数据的集合
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.BitEncoder.#ctor(System.Int32)">
            <summary>
            实例化位编码器。
            </summary>
            <param name="initBit">初始位</param>
        </member>
        <member name="M:EIIP.Framework.GIF.BitEncoder.Add(System.Int32)">
            <summary>
            编码
            </summary>
            <param name="inByte">输入数据</param>
        </member>
        <member name="M:EIIP.Framework.GIF.BitEncoder.End">
            <summary>
            结束编码。
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.BitEncoder.Length">
            <summary>
            获取当前输出字节数据长度。
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.Color32">
            <summary>
            封装的颜色结构
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.Color32.Blue">
            <summary>
            颜色中的B,位于最低位
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.Color32.Green">
            <summary>
            颜色中的G,位于第二位
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.Color32.Red">
            <summary>
            颜色中的R,位于第三位
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.Color32.Alpha">
            <summary>
            颜色中的A,位于第四位
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.Color32.ARGB">
            <summary>
            颜色的整形值
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.Color32.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="c">argb颜色</param>
        </member>
        <member name="M:EIIP.Framework.GIF.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="r"></param>
            <param name="g"></param>
            <param name="b"></param>
        </member>
        <member name="P:EIIP.Framework.GIF.Color32.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.DataStruct">
            <summary>
            数据结构类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.DataStruct.m_BlockSize">
            <summary>
            块大小。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.DataStruct.m_Data">
            <summary>
            数据。
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.DataStruct.#ctor">
            <summary>
            实例化数据结构。
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.DataStruct.#ctor(System.Int32,System.IO.Stream)">
            <summary>
            实例化指定数据结构。
            </summary>
            <param name="blockSize">块大小。</param>
            <param name="stream">数据输入流</param>
        </member>
        <member name="M:EIIP.Framework.GIF.DataStruct.GetBuffer">
            <summary>
            获取缓存数据副本。新添的第一个字节中保存数据块长度。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.GIF.DataStruct.BlockSize">
            <summary>
            获取或设置块大小。
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.DataStruct.Data">
            <summary>
            获取或设置数据。
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.ImageDescriptor">
            <summary>
            图象标识符(Image Descriptor)描述器。
            一个GIF文件内可以包含多幅图象，一幅图象结束之后紧接着下是一幅图象的标识符，
            图象标识符以0x2C(',')字符开始，定义紧接着它的图象的性质，包括图象相对于逻辑屏幕边界的偏移量、
            图象大小以及有无局部颜色列表和颜色列表大小，由10个字节组成
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.XOffSet">
            <summary>
            X方向偏移量
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.YOffSet">
            <summary>
            X方向偏移量
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.Width">
            <summary>
            图象宽度
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.Height">
            <summary>
            图象高度
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.Packed">
            <summary>
            packed
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.LctFlag">
            <summary>
            局部颜色列表标志(Local Color Table Flag)
            置位时标识紧接在图象标识符之后有一个局部颜色列表，供紧跟在它之后的一幅图象使用；
            值否时使用全局颜色列表，忽略pixel值。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.InterlaceFlag">
            <summary>
            交织标志(Interlace Flag)，置位时图象数据使用连续方式排列，否则使用顺序排列。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.SortFlag">
            <summary>
             分类标志(Sort Flag)，如果置位表示紧跟着的局部颜色列表分类排列.
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ImageDescriptor.LctSize">
            <summary>
            局部颜色列表大小，pixel+1就为颜色列表的位数
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.ImageDescriptor.GetBuffer">
            <summary>
            获取数据。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GIF.LogicalScreenDescriptor">
            <summary>
            逻辑屏幕标识符
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.LogicalScreenDescriptor.GetBuffer">
            <summary>
            获取数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.Width">
            <summary>
            逻辑屏幕宽度 像素数，定义GIF图象的宽度
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.Height">
            <summary>
            逻辑屏幕高度 像素数，定义GIF图象的高度
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.BgColorIndex">
            <summary>
            背景色,背景颜色(在全局颜色列表中的索引，如果没有全局颜色列表，该值没有意义)
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.PixcelAspect">
            <summary>
            像素宽高比,像素宽高比(Pixel Aspect Radio)
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.GlobalColorTableFlag">
            <summary>
            全局颜色列表标志，当置位时表示有全局颜色列表，pixel值有意义.
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.ColorResoluTion">
            <summary>
            颜色深度，确定图象的颜色深度.
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.SortFlag">
            <summary>
            分类标志，如果置位表示全局颜色列表分类排列.
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.LogicalScreenDescriptor.GlobalColorTableSize">
            <summary>
            全局颜色列表大小，pixel+1确定颜色列表的索引数（2的pixel+1次方）.
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.ApplicationExtInfo">
            <summary>
            应用程序扩展（Application Extension）信息结构。定义标识、信息等（需要89a版本）。   
            </summary>  
        </member>
        <member name="F:EIIP.Framework.GIF.ApplicationExtInfo.BLOCK_SIZE">
            <summary>
            块大小，固定值11
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ApplicationExtInfo.ApplicationIdentifier">
            <summary>
            用来鉴别应用程序自身的标识(8个连续ASCII字符)
            </summary>      
        </member>
        <member name="F:EIIP.Framework.GIF.ApplicationExtInfo.ApplicationAuthenticationCode">
            <summary>
            应用程序定义的特殊标识码(3个连续ASCII字符)
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.ApplicationExtInfo.Datas">
            <summary>
            应用程序自定义数据块。一个或多个数据块组成，保存应用程序自己定义的数据
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.ApplicationExtInfo.GetBuffer">
            <summary>
            获取应用程序扩展的字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GIF.CommentExtInfo">
            <summary>
            注释扩展(Comment Extension)信息结构。这一部分是可选的（需要89a版本），
            可以用来记录图形、版权、描述等任何的非图形和控制的纯文本数据(7-bit ASCII字符)，
            注释扩展并不影响对图象数据流的处理，解码器完全可以忽略它。
            存放位置可以是数据流的任何地方，最好不要妨碍控制和数据块，推荐放在数据流的开始或结尾
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.CommentExtInfo.CommentDatas">
            <summary>
            一个或多个数据块组成。
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.CommentExtInfo.GetBuffer">
            <summary>
            获取注释数据。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GIF.GraphicExtInfo">
            <summary>
            图形控制扩展(Graphic Control Extension)信息类。这一部分是可选的（需要89a版本），
            可以放在一个图象块(包括图象标识符、局部颜色列表和图象数据)或文本扩展块的前面，
            用来控制跟在它后面的第一个图象（或文本）的渲染(Render)形式
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.BLOCK_SIZE">
            <summary>
            不包括块终结器，固定值4
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.ExtensionIntroducer">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.BlockTerminator">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.m_Delay">
            <summary>
            延时。单位1/100秒，如果值不为1，表示暂停规定的时间后再继续往下处理数据流。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.m_TranIndex">
            <summary>
            透明色索引值。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.m_TransFlag">
            <summary>
            指示是否是透明的。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GraphicExtInfo.m_DisposalMethod">
            <summary>
            处置方法(Disposal Method)
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.GraphicExtInfo.#ctor">
            <summary>
            实例化图形控制扩展信息。
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.GraphicExtInfo.GetBuffer">
            <summary>
            获取图形控制扩展数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.GIF.GraphicExtInfo.TransparencyFlag">
            <summary>
            获取或设置一个值，该值指示是否是透明的。
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GraphicExtInfo.DisposalMethod">
            <summary>
            获取或设置处置方法(Disposal Method)：指出处置图形的方法，当值为：
            0 - 不使用处置方法
            1 - 不处置图形，把图形从当前位置移去
            2 - 回复到背景色
            3 - 回复到先前状态
            4-7 - 自定义
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GraphicExtInfo.Packed">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GraphicExtInfo.Delay">
            <summary>
            获取或设置延时。单位1/100秒，如果值不为1，表示暂停规定的时间后再继续往下处理数据流。
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GraphicExtInfo.TranIndex">
            <summary>
            获取或设置透明色索引值。
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.PlainTextExtInfo">
            <summary>
            图形文本扩展(Plain Text Extension)信息结构。这一部分是可选的（需要89a版本），
            用来绘制一个简单的文本图象，这一部分由用来绘制的纯文本数据（7-bit ASCII字符）和控制绘制的参数等组成。
            绘制文本借助于一个文本框（Text Grid）来定义边界，在文本框中划分多个单元格，每个字符占用一个单元，
            绘制时按从左到右、从上到下的顺序依次进行，直到最后一个字符或者占满整个文本框
            （之后的字符将被忽略，因此定义文本框的大小时应该注意到是否可以容纳整个文本），
            绘制文本的颜色使用全局颜色列表，没有则可以使用一个已经保存的前一个颜色列表。
            另外，图形文本扩展块也属于图形块(Graphic Rendering Block)，
            可以在它前面定义图形控制扩展对它的表现形式进一步修改。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.BLOCK_SIZE">
            <summary>
            块大小，固定值12
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.XOffSet">
            <summary>
            像素值，文本框离逻辑屏幕的左边界距
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.YOffSet">
            <summary>
            像素值，文本框离逻辑屏幕的上边界距离
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.Width">
            <summary>
            文本框宽度(像素值)
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.Height">
            <summary>
            文本框高度(像素值)
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.CharacterCellWidth">
            <summary>
            字符单元格宽度(像素值)
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.CharacterCellHeight">
            <summary>
            字符单元格高度(像素值)
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.ForegroundColorIndex">
            <summary>
            文本前景色在全局颜色列表中的索引
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.BgColorIndex">
            <summary>
            文本背景色在全局颜色列表中的索引
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.PlainTextExtInfo.TextDatas">
            <summary>
            文本数据块集合，一个或多个数据块(Data Sub-Blocks)组成，保存要在显示的字符串。
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.PlainTextExtInfo.GetBuffer">
            <summary>
            获取图形文本扩展数据。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GIF.GifDecoder">
            <summary>
            GIF图像文件的解码器
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.GifDecoder.Decode(System.String)">
            <summary>
            对gif图像文件进行解码
            </summary>
            <param name="gifPath">gif文件路径</param>
        </member>
        <member name="M:EIIP.Framework.GIF.GifDecoder.Decode(System.IO.Stream)">
            <summary>
            对gif图像文件进行解码。Edwin
            </summary>
            <param name="smGif">gif文件流</param>
        </member>
        <member name="T:EIIP.Framework.GIF.GifEncoder">
            <summary>
            Gif编码器
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.GifEncoder.Encode(EIIP.Framework.GIF.GifImage,System.String)">
            <summary>
            保存Gif图片。
            </summary>
            <param name="gifImage">Gif图片描述实例</param>
            <param name="gifPath">保存路径</param>
        </member>
        <member name="M:EIIP.Framework.GIF.GifEncoder.Encode(EIIP.Framework.GIF.GifImage)">
            <summary>
            获取Gif图片流。
            </summary>
            <param name="gifImage">Gif图片描述实例</param>
        </member>
        <member name="M:EIIP.Framework.GIF.GifEncoder.GetImagePixels(System.Drawing.Bitmap,System.Byte[],System.Int32)">
            Extracts image pixels into byte array "pixels"
        </member>
        <member name="T:EIIP.Framework.GIF.GifExtensions">
            <summary>
            扩展块中的一些常量
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.ExtensionIntroducer">
            <summary>
            标识这是一个扩展块，固定值0x21
            </summary>          
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.Terminator">
            <summary>
            标识注释块结束，固定值0
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.ApplicationExtensionLabel">
            <summary>
            标识这是一个应用程序扩展块，固定值0xFF 
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.CommentLabel">
            <summary>
            标识这是一个注释块，固定值0xFE
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.ImageDescriptorLabel">
            <summary>
            图象标识符开始，固定值为','
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.PlainTextLabel">
            <summary>
            标识这是一个图形文本扩展块，固定值0x01
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.GraphicControlLabel">
            <summary>
            标识这是一个图形控制扩展块，固定值0xF9
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.ImageLabel">
            <summary>
            图像的标示
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifExtensions.EndIntroducer">
            <summary>
            文件结尾
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.GifFrame">
            <summary>
            Gif文件中可以包含多个图像，每个图像加上图像的一些特征，就组成了帧:GifFrame
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.BgColor">
            <summary>
            获取该桢的背景色
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.ImageDescriptor">
            <summary>
            获取或设置图象标识符(Image Descriptor)
            一个GIF文件内可以包含多幅图象
            一幅图象结束之后紧接着下是一幅图象的标识符，
            图象标识符以0x2C(',')字符开始，
            定义紧接着它的图象的性质，包括图象相对于逻辑屏幕边界的偏移量、
            图象大小以及有无局部颜色列表和颜色列表大小
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.Palette">
            <summary>
            获取Gif的调色板
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.Image">
            <summary>
            获取或设置图像
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.ColorDepth">
            <summary>
            获取或设置数据位大小
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.LocalColorTable">
            <summary>
            获取或设置局部颜色列表(Local Color Table)
            如果上面的局部颜色列表标志置位的话，则需要在这里（紧跟在图象标识符之后）
            定义一个局部颜色列表以供紧接着它的图象使用，注意使用前应线保存原来的颜色列表，
            使用结束之后回复原来保存的全局颜色列表。如果一个GIF文件即没有提供全局颜色列表
            也没有提供局部颜色列表，可以自己创建一个颜色列表，或使用系统的颜色列表。
            RGBRGB......
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.GraphicExtension">
            <summary>
            获取或设置图形控制扩展(Graphic Control Extension)这一部分是可选的（需要89a版本），
            可以放在一个图象块(包括图象标识符、局部颜色列表和图象数据)或文本扩展块的前面，
            用来控制跟在它后面的第一个图象（或文本）的渲染(Render)形式
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.Delay">
            <summary>
            获取或设置延迟-与下一帧之间的时间间隔
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifFrame.IndexedPixel">
            <summary>
            获取或设置这个是经过LZW压缩算法后的数据流
            </summary>
        </member>
        <member name="T:EIIP.Helper.GifHelper">
            <summary>
            处理GIF动画图像的辅助类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Watermark(System.String,EIIP.Framework.GIF.SizeMode,System.String,System.Drawing.Color,System.Drawing.Font,System.Single,System.Single,System.String)">
            <summary>
            对gif动画添加文字水印。
            </summary>
            <param name="pathGIF">原gif动画的路径</param>
            <param name="sizeMode">尺寸</param>
            <param name="text">水印文字</param>
            <param name="textForceColor">
            水印文字的颜色，因为gif不是真彩色图片，所以在显示的时候，该颜色可能有所误差，但基本上可以确定颜色范围
            </param>
            <param name="font">字体</param>
            <param name="x">水印位置横坐标</param>
            <param name="y">水印位置纵坐标</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.WatermarkSmart(System.String,System.String,System.Drawing.Color,System.Drawing.Font,System.Single,System.Single,System.String)">
            <summary>
            对gif动画智能（根据调色板决定）添加文字水印。
            </summary>
            <param name="pathGIF">原gif动画的路径</param>
            <param name="text">水印文字</param>
            <param name="textForceColor">
            水印文字的颜色，因为gif不是真彩色图片，所以在显示的时候，该颜色可能有所误差，但基本上可以确定颜色范围
            </param>
            <param name="font">字体</param>
            <param name="x">水印位置横坐标</param>
            <param name="y">水印位置纵坐标</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Watermark(System.String,System.Drawing.Bitmap,System.Single,System.Single,System.String)">
            <summary>
            对gif动画添加图片水印
            </summary>
            <param name="pathGIF">原图片路径</param>
            <param name="waterImg">水印图片</param>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Thumbnail(System.String,System.Double,System.String)">
            <summary>
            获取gif动画的缩略图。
            </summary>
            <param name="pathGIF">原gif图片路径</param>
            <param name="rate">缩放大小</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Quantizer(System.Drawing.Bitmap,EIIP.Framework.GIF.Color32[])">
            <summary>
            对图像进行量化，使其适应调色板
            </summary>
            <param name="bmp">图像</param>
            <param name="colorTab">调色板</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Quantizer(System.Drawing.Bitmap,System.Int32[])">
            <summary>
            对图像进行量化，使其适应调色板
            </summary>
            <param name="bmp">图像</param>
            <param name="colorTab">调色板</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Monochrome(System.String,System.String)">
            <summary>
            Gif动画单色化
            </summary>
            <param name="pathGIF">原动画路径</param>
            <param name="outputPath">单色后动画路径</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Merge(System.Collections.Generic.List{System.String},System.String,System.Int16,System.Boolean)">
            <summary>
            在时间坐标上合并多个gif文件
            </summary>
            <param name="sourceGifs">原图像路径集合</param>
            <param name="outGif">合并后图像路径</param>
            <param name="delay">间隔时间</param>
            <param name="repeat">是否重复播放</param> 
        </member>
        <member name="M:EIIP.Helper.GifHelper.Merge(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            在空间坐标上合并多个gif动画。
            </summary>
            <param name="sourceGifs">原图像</param>
            <param name="outPath">合并后图像</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Merge(System.IO.Stream,System.Collections.Generic.List{System.Drawing.Image},System.Int16,System.Boolean)">
            <summary>
            在时间坐标上合并多个gif文件。Edwin
            </summary>
            <param name="source">背景gif文件流，提供Gif文件结构信息</param>
            <param name="imgs">多张图片</param>
            <param name="delay">间隔时间</param>
            <param name="repeat">是否重复播放</param> 
        </member>
        <member name="M:EIIP.Helper.GifHelper.Rotate(System.String,System.Drawing.RotateFlipType,System.String)">
            <summary>
            将Gif图片进行旋转或者翻转
            </summary>
            <param name="pathGIF">原图像路径</param>
            <param name="rotateType">翻转或者旋转方式</param>
            <param name="outputPath">输出路径</param>
        </member>
        <member name="M:EIIP.Helper.GifHelper.Crop(System.String,System.Drawing.Rectangle,System.String)">
            <summary>
            对Gif图片进行剪裁
            </summary>
            <param name="pathGIF">原图像</param>
            <param name="rect">剪裁区域</param>
            <param name="outFilePath">输出路径</param>
        </member>
        <member name="T:EIIP.Framework.GIF.GifImage">
            <summary>
            描述Gif的类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_Header">
            <summary>
            GIF 文件头，可能情况有两种:GIF89a或者GIF87a
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_GBLColorTbl">
            <summary>
            全局颜色列表
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_GLBColorIdxTbl">
            <summary>
            全局颜色的索引表
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_Comments">
            <summary>
            注释块集合
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_Applictions">
            <summary>
            应用程序扩展块集合
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_PlainTexts">
            <summary>
            图形文本扩展集合
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_LSD">
            <summary>
            逻辑屏幕描述
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.GifImage.m_Frames">
            <summary>
            解析出来的帧集合
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.Width">
            <summary>
            获取背景图片的长度
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.Height">
            <summary>
            获取背景图片的高度
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.Header">
            <summary>
            获取或设置GIF 文件头，可能情况有两种:GIF89a或者GIF87a
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.GlobalColorTable">
            <summary>
            获取或设置全局颜色列表
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.Palette">
            <summary>
            获取Gif的调色板
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.GlobalColorIndexedTable">
            <summary>
            获取全局颜色的索引表
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.CommentExtensions">
            <summary>
            获取或设置注释块集合
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.ApplictionExtensions">
            <summary>
            获取或设置应用程序扩展块集合
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.PlainTextEntensions">
            <summary>
            获取或设置图形文本扩展集合
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.LogicalScreenDescriptor">
            <summary>
            获取或设置逻辑屏幕描述
            </summary>
        </member>
        <member name="P:EIIP.Framework.GIF.GifImage.Frames">
            <summary>
            获取或设置解析出来的帧集合
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.LZWDecoder">
            <summary>
            Gif 使用的可变长度的LZW压缩算法解码器
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.LZWDecoder.MaxStackSize">
            <summary>
            GIF规定编码最大为12bit，最大值即为4096
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.LZWDecoder.#ctor(System.IO.Stream)">
            <summary>
            构造函数
            </summary>
            <param name="stream">文件流</param>
        </member>
        <member name="M:EIIP.Framework.GIF.LZWDecoder.DecodeImageData(System.Int32,System.Int32,System.Int32)">
            <summary>
            LZW压缩算法的解码器
            </summary>
            <param name="width">长度</param>
            <param name="height">高度</param>
            <param name="dataSize">//图像编码流的第一个字节(byte)存放的是数据位大小，在gif通常为1,4,8</param>
            <returns>原始数据流</returns>
        </member>
        <member name="M:EIIP.Framework.GIF.LZWDecoder.Read">
            <summary>
            读取一个字节
            </summary>
            <returns></returns>
        </member>
        <member name="F:EIIP.Framework.GIF.LZWEncoder.MaxStackSize">
            <summary>
            GIF规定编码最大为12bit，最大值即为4096
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.OcTree">
            <summary>
            八叉树
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.OcTreeNode.Red">
            <summary>
            红色的数量
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.OcTreeNode.Green">
            <summary>
            绿色的数量
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.OcTreeNode.Blue">
            <summary>
            蓝色的数量
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.OcTreeNode.#ctor(System.Int32,System.Int32,EIIP.Framework.GIF.OcTree)">
            <summary>
            八叉树的构造函数
            </summary>
            <param name="colorDepth"></param>
            <param name="level">层级</param>
            <param name="tree"></param>
        </member>
        <member name="T:EIIP.Framework.GIF.OcTreeQuantizer">
            <summary>
            八叉树颜色量化器
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.PaletteHelper">
            <summary>
            调色板辅助类
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.PaletteHelper.GetColor32s(System.Byte[])">
            <summary>
            从数据流中获取颜色列表
            </summary>
            <param name="table">调色板颜色列表</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GIF.SizeMode">
            <summary>
            尺寸模式
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.SizeMode.Large">
            <summary>
            放大
            </summary>
        </member>
        <member name="F:EIIP.Framework.GIF.SizeMode.Normal">
            <summary>
            普通
            </summary>
        </member>
        <member name="T:EIIP.Framework.GIF.StreamHandle">
            <summary>
            操作流的一个辅助类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.#ctor(System.IO.Stream)">
            <summary>
            实例化指定流。
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.ReadByte(System.Int32)">
            <summary>
            从流中读取指定长度的字节。
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.Read">
            <summary>
            读取一个字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.ReadShort">
            <summary>
            读取短整数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.ReadString(System.Int32)">
            <summary>
            读取指定长度的字符串。
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.ReadChar(System.Int32)">
            <summary>
            读取指定长度的字符。
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.WriteString(System.String)">
            <summary>
            向流中写入指定字符串。
            </summary>
            <param name="str">字符串。</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.WriteBytes(System.Byte[])">
            <summary>
            向流中写入指定字节数组数据。
            </summary>
            <param name="buffer">要写入的字节数组</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.GetApplicationEx">
            <summary>
            从文件流中读取应用程序扩展块。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.GetCommentEx(System.IO.Stream)">
            <summary>
            从文件数据流中读取注释扩展块
            </summary>
            <param name="stream">文件数据流</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.GetPlainTextEx">
            <summary>
            从文件数据流中读取图形文本扩展(Plain Text Extension)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.GetImageDescriptor">
            <summary>
            从文件数据流中读取 图象标识符(Image Descriptor)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.GetGraphicControlExtension">
            <summary>
            从文件数据流中读取图形控制扩展(Graphic Control Extension)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.GetLCD">
            <summary>
            从文件数据流中读取图形控制扩展(Graphic Control Extension)
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.WriteHeader(System.String)">
            <summary>
            写文件头
            </summary>
            <param name="header">文件头</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.WriteLSD(EIIP.Framework.GIF.LogicalScreenDescriptor)">
            <summary>
            写逻辑屏幕标识符
            </summary>
            <param name="lsd">逻辑屏幕标识符</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.SetGlobalColorTable(System.Byte[])">
            <summary>
            写全局颜色表
            </summary>
            <param name="buffer">全局颜色表</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.SetCommentExtensions(System.Collections.Generic.List{EIIP.Framework.GIF.CommentExtInfo})">
            <summary>
            写入注释扩展集合
            </summary>
            <param name="comments">注释扩展集合</param>
        </member>
        <member name="M:EIIP.Framework.GIF.StreamHandle.SetApplicationExtensions(System.Collections.Generic.List{EIIP.Framework.GIF.ApplicationExtInfo})">
            <summary>
            写入应用程序展集合
            </summary>
            <param name="applications">写入应用程序展集合</param>
        </member>
        <member name="T:EIIP.Helper.ACLHelper">
            <summary>
            提供文件系统访问控制的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ACLHelper.AddDirectorySecurity(System.String,System.String,System.Security.AccessControl.FileSystemRights)">
            <summary>
            添加目录安全。如果成功修改了 DACL，则为 true；否则为 false。
            </summary>
            <param name="path">目录路径。</param>
            <param name="identity">用户帐户的名称。如 Administrator</param>
            <param name="rights">指定与访问规则关联的操作的类型。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.EventsHelper">
            <summary>
            事件辅肋类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>
            异步调用委托。
            </summary>
            <param name="del">委托</param>
            <param name="args">调用参数</param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.UnsafeFire(System.Delegate,System.Object[])">
            <summary>
            非线程安全触发。
            </summary>
            <param name="del">委托</param>
            <param name="args">调用参数</param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.UnsafeFireInParallel(System.Delegate,System.Object[])">
            <summary>
            非线程安全并行触发。
            </summary>
            <param name="del">委托</param>
            <param name="args">调用参数</param>
            <remarks>
            要取消 static void Main() 入口方法的 [STAThread] 才能调用正常。
            WaitHandle.WaitAll(handles); 不能在单线程上执行。
            </remarks>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.UnsafeFireAsync(System.Delegate,System.Object[])">
            <summary>
            非线程安全异步触发。
            </summary>
            <param name="del">委托</param>
            <param name="args">调用参数</param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            触发委托事件。
            </summary>
            <param name="del"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
            <param name="sender"></param>
            <param name="t"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire(EIIP.Framework.GenericEventHandler)">
            <summary>
            触发委托事件。
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``1(EIIP.Framework.GenericEventHandler{``0},``0)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``2(EIIP.Framework.GenericEventHandler{``0,``1},``0,``1)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``3(EIIP.Framework.GenericEventHandler{``0,``1,``2},``0,``1,``2)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``4(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``5(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``6(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.Fire``7(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            并行触发委托事件。
            </summary>
            <param name="del"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
            <param name="sender"></param>
            <param name="t"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel(EIIP.Framework.GenericEventHandler)">
            <summary>
            并行触发委托事件。
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``1(EIIP.Framework.GenericEventHandler{``0},``0)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``2(EIIP.Framework.GenericEventHandler{``0,``1},``0,``1)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``3(EIIP.Framework.GenericEventHandler{``0,``1,``2},``0,``1,``2)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``4(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``5(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``6(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireInParallel``7(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            并行触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync(System.EventHandler,System.Object,System.EventArgs)">
            <summary>
            异步触发委托事件。
            </summary>
            <param name="del"></param>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
            <param name="sender"></param>
            <param name="t"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync(EIIP.Framework.GenericEventHandler)">
            <summary>
            异步触发委托事件。
            </summary>
            <param name="del"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``1(EIIP.Framework.GenericEventHandler{``0},``0)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``2(EIIP.Framework.GenericEventHandler{``0,``1},``0,``1)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``3(EIIP.Framework.GenericEventHandler{``0,``1,``2},``0,``1,``2)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``4(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3},``0,``1,``2,``3)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``5(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4},``0,``1,``2,``3,``4)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``6(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4,``5},``0,``1,``2,``3,``4,``5)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.FireAsync``7(EIIP.Framework.GenericEventHandler{``0,``1,``2,``3,``4,``5,``6},``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            异步触发委托事件。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="del"></param>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:EIIP.Helper.EventsHelper.BroadcastEvent(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            广播事件。尝试发送事件至每一注册的监听者，即使有特殊事件抛出了错误。
            </summary>
            <param name="eventToBroadcast">要广播的事件</param>
            <param name="eventSender">事件源</param>
            <param name="eventData">广播的事件参数</param>
        </member>
        <member name="T:EIIP.Helper.EventsHelper.AsyncFire">
            <summary>
            异步触发委托。
            </summary>
            <param name="del"></param>
            <param name="args"></param>
        </member>
        <member name="T:EIIP.Helper.FileHelper">
            <summary>
            提供文件操作的助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.FileHelper.ERR_PROCESS_CANNOT_ACCESS_FILE">
            <summary>
            因正被其它进程占用，当前进程无法访问该文件。
            </summary>
        </member>
        <member name="M:EIIP.Helper.FileHelper.FormatSize(System.Int64)">
            <summary>
            获取指定文件长度的格式化尺寸。
            </summary>
            <param name="bytes">文件长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ReadFileToString(System.String,System.String)">
            <summary>
            将文本文件的内容作为 String 返回。
            </summary>
            <param name="fileName">要读取的文件的名称和路径。</param>
            <param name="encode">System.Text.Encoding。读取文件时要使用的字符编码。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ReadFileToString(System.String)">
            <summary>
            将文本文件的内容作为 String 返回。
            </summary>
            <param name="fileName">要读取的文件的名称和路径。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ReadFileToString(System.String,System.Text.Encoding)">
            <summary>
            读取文本文件。
            </summary>
            <param name="fileName">物理文件名称</param>
            <param name="encode">文件编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ReadFileToStream(System.String)">
            <summary>
            读取指定文件至内存。
            </summary>
            <param name="fileName">物理文件名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteStream(System.String,System.IO.MemoryStream)">
            <summary>
            将内存中的内容写入指定文件。若文件已存在则在写入前删除。
            </summary>
            <param name="fileName">物理文件名称</param>
            <param name="msIn">内存区</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteLine(System.String,System.String)">
            <summary>
            写入字符串行。
            </summary>
            <param name="fileName">物理文件名称</param>
            <param name="str">字符串</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteString(System.String,System.String,System.Text.Encoding)">
            <summary>
            写入字符串文本。若文件已存在则在写入前删除。
            </summary>
            <param name="fileName">物理文件名称</param>
            <param name="str">字符串</param>
            <param name="encode">字符串编码</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.DeleteFile(System.String,System.String,System.Boolean)">
            <summary>
            删除文件。
            </summary>
            <param name="path">文件夹</param>
            <param name="fileName">文件名称</param>
            <param name="recursive">设置是否递归删除path下所有fileName同名文件</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.DeleteFile(System.String)">
            <summary>
            删除文件。成功删除返回true。
            </summary>
            <param name="filePath">文件的全路径.</param>
            <returns>bool</returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteObject(System.String,System.Object)">
            <summary>
            将对象序列化后输出至文件。
            </summary>
            <param name="fileName">文件名</param>
            <param name="obj">可序列化的对象</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteFile(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            将字节数组内容保存至指定的文件,成功返回保存文件名。
            </summary>
            <param name="pathFile">文件物理路径</param>
            <param name="bytContent">字节数组内容</param>
            <param name="bCheckFileType">指定一个值，该值指示是否检查文件扩展名</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteFile(System.String,System.Byte[],System.Boolean)">
            <summary>
            将字节数组内容保存至指定的文件,成功返回保存文件名。
            </summary>
            <param name="pathFile">文件物理路径</param>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteAllText(System.String,System.String)">
            <summary>
            向文件写入文本。
            </summary>
            <param name="fileName">要被写入的文件</param>
            <param name="text">要写入文件的文本。</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteAllText(System.String,System.String,System.Boolean)">
            <summary>
            向文件写入文本。
            </summary>
            <param name="fileName">要被写入的文件</param>
            <param name="text">要写入文件的文本。</param>
            <param name="append">是追加文本还是改写现有文本。默认为 False。</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.WriteAllText(System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            向文件写入文本。
            </summary>
            <param name="fileName">要被写入的文件</param>
            <param name="text">要写入文件的文本。</param>
            <param name="append">是追加文本还是改写现有文本。默认为 False。</param>
            <param name="encoding">写入文件时要使用的编码。默认为 UTF-8。</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.CheckFilePathTrailingSeparator(System.String,System.String)">
            <summary>
            检查文件路径，当为空或以路径分隔符结尾时，抛出错误。
            </summary>
            <param name="pathFile">文件路径</param>
            <param name="paramName">导致异常的参数的名称。</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.IsUnicode(System.Text.Encoding)">
            <summary>
            判定指定编码的代码页标识符是否是 UTF 代码页。
            </summary>
            <param name="encoding">要测试的编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ReadFileContent(System.String,System.Text.Encoding@,System.Text.Encoding)">
            <summary>
            （自动识别编码）读取文件内容。
            </summary>
            <param name="fileName">文件名</param>
            <param name="encoding">文件编码</param>
            <param name="defaultEncoding">缺省的文件编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.OpenStream(System.IO.FileStream,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            打开文件流并返回读取流。
            </summary>
            <param name="fs">文件流</param>
            <param name="suggestedEncoding">建议的文件编码</param>
            <param name="defaultEncoding">缺省的文件编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.FixPath(System.String,System.Char,System.Boolean,System.Boolean)">
            <summary>
            修正路径，去掉路径中重复的分隔符和最前面的分隔符，并确保路径最终以分隔符结尾。
            </summary>
            <param name="path">要整理的路径。</param>
            <param name="seperator">路径分隔符，只能为 '/' 或 '\'</param>
            <param name="hasPrefix">设置是否确认有前导分隔符</param>
            <param name="hasPostfix">设置是否确认有后导分隔符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetFileVersion(System.String)">
            <summary>
            返回与指定文件关联的版本信息的文件版本号。不存在则返回string.Empty。
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.XCopy(System.String,System.String)">
            <summary>
            复制文件夹中的内容到目标文件夹
            </summary>
            <param name="pathSource">起始文件夹</param>
            <param name="pathTarget">目标文件夹</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetFileLength(System.String)">
            <summary>
            获取指定文件长度。
            </summary>
            <param name="fileName">物理文件名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetDirectoryLength(System.String)">
            <summary>
            获取指定文件夹的文件大小。
            </summary>
            <param name="dir">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetAssemblyPath">
            <summary>
            获取程序集路径。以"\"结尾。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.AppendDivision(System.String,System.Char)">
            <summary>
            为指定路径添加指定路径分割符。
            </summary>
            <param name="path">路径</param>
            <param name="division">路径分割符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetFolderName(System.String)">
            <summary>
            获取指定路径的文件夹名称。
            </summary>
            <param name="path">路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ComputeFileMD5(System.String)">
            <summary>
            计算指定文件的MD5码
            </summary>
            <param name="path">文件的完整物理路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ReplaceFileNameExtension(System.String,System.String)">
            <summary>
            替换文件扩展名。
            </summary>
            <param name="pathFileName">文件名，可带路径</param>
            <param name="newExtension">新的扩展名，可以带'.'</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetExtension(System.String,System.Boolean)">
            <summary>
            获取文件扩展名。不存在则返回空串。
            </summary>
            <param name="pathFileName">文件名，可带路径</param>
            <param name="withDot">设置扩展名是否带'.'</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetFiles(System.IO.FileInfo)">
            <summary>
            获取指定路径下的所有文件及文件夹。若指定父文件夹对象不是文件夹类型，则返回null。
            </summary>
            <param name="path">父文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetSystemUploadPath(System.String,EIIP.Type.UploadFolder)">
            <summary>
            获取系统文件上传相对路径(相对于EIIP所在目录),以"/"结尾,如:"upload/[dbname]/system/f[xxx]/"
            </summary>
            <param name="dbName">所在数据库</param>
            <param name="folder">系统上传文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetSystemUploadPhysicalPath(System.String,EIIP.Type.UploadFolder)">
            <summary>
            获取系统文件上传绝对路径(并确认路径存在), 以"\"结尾。
            </summary>
            <param name="dbName">所在数据库</param>
            <param name="folder">系统上传文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetPhysicalPath(System.String)">
            <summary>
            获取指定相对路径文件夹的物理路径, 以"\"结尾。若不存在则创建这个文件夹。
            </summary>
            <param name="pathFromRoot">相对于系统所在目录的位置,如:"upload/2005/05/"</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.MapFilePath(System.String)">
            <summary>
            获取系统配置文件位置。(WebForm 与 WinForm 均适用)
            </summary>
            <param name="keyAppSettings">web.config中相关键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.MapPath(System.String)">
            <summary>
            返回指定虚拟路径相对应的物理文件路径。(WebForm 与 WinForm 均适用)
            </summary>
            <param name="path">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SaveFile(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            将字节数组内容保存至指定的文件,成功返回保存文件名
            </summary>
            <param name="pathFile">文件物理路径</param>
            <param name="bytContent">字节数组内容</param>
            <param name="bCheckFileType">指定一个值，该值指示是否检查文件扩展名的安全性。</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SaveCommonFile(System.String,System.Byte[],System.Boolean,System.String)">
            <summary>
            将字节数组内容保存为文件,成功返回文件的相对路径,如:"[path]\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"
            </summary>
            <param name="pathFromRoot">相对于根所在目录的位置,如:"upload/2007/01/"</param>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <param name="extension">保存文件的扩展名,如".eiip"</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SaveCommonFile(System.Byte[],System.Boolean,EIIP.Type.CommonFileType)">
            <summary>
            将字节数组内容保存为通用文件,成功返回文件的相对路径,如:"upload\2007\01\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"
            </summary>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <param name="fileType">设置以指定的通用类型文件保存</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SaveCommonFile(System.Byte[],System.Boolean)">
            <summary>
            将字节数组内容保存为通用文件,成功返回文件的相对路径,如:"upload\2007\01\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"
            </summary>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SaveStamper(System.Byte[])">
            <summary>
            将字节数组内容保存为电子印章文件,成功返回文件的相对路径,如:"upload\stamper\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiipx"
            </summary>
            <param name="bytContent">字节数组内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.DeleteCommonFile(System.String)">
            <summary>
            删除上传的通用文件
            </summary>
            <param name="vPathFile">文件的相对路径,如:"upload\2007\01\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetCommonUploadPath(System.String)">
            <summary>
            获取通用上传文件夹的相对于OA所在目录的位置, 以"/"结尾,如:"upload/2007/01/"
            </summary>
            <param name="folderName">所在文件夹名称,不指定则默认为日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetMimeType(System.String)">
            <summary>
            获取系统支持的文件MIME类型(需要注册表读取权限，否则始终返回"application/octet-stream")
            </summary>
            <param name="fileExtension">文件扩展名,如".doc"</param>
            <returns>MIME类型,如"text/plain"</returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.DeleteFolder(System.String)">
            <summary>
            安全删除文件夹及其文件(不包括子文件夹)
            </summary>
            <param name="directory">路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.OpenFile(System.String)">
            <summary>
            根据传来的文件全路径，外部打开文件，默认用系统注册类型关联软件打开。成功执行返回true。
            </summary>
            <param name="filePath">文件的全路径</param>
            <returns>bool</returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetFileSize(System.String)">
            <summary>
            获取文件大小。
            </summary>
            <param name="filePath">文件全路径</param>
            <returns>string</returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Read(System.String)">
            <summary>
            读取文件内容，返回二进制数组Byte[]
            </summary>
            <param name="filePath">文件全路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Save(System.String,System.Byte[])">
            <summary>
            保存文件。
            </summary>
            <param name="filePath">要生成的文件全路径</param>
            <param name="streamByte">要生成文件的二进制 Byte 数组</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SerializeXml(System.String,System.String)">
            <summary>
            将Xml文件序列化(可起到加密和压缩XML文件的目的)
            </summary>
            <param name="xmlPath">要序列化的XML文件全路径</param>
            <param name="filePath">序列化后的文件</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SerializeXml(System.Data.DataSet,System.String)">
            <summary>
            将Xml文件序列化(可起到加密和压缩XML文件的目的)
            </summary>
            <param name="dsXMLData">要序列化的XML文件数据，可通过ds.ReadXml(xmlPath)初始化</param>
            <param name="filePath">序列化后的文件</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.DeserializeXml(System.String,System.String)">
            <summary>
            反序列化XML文件。成功返回true。
            </summary>
            <param name="filePath">要反序列化XML文件的全路径</param>
            <param name="xmlPath">要保存的XML文件路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.SaveAsXml(System.Data.DataSet,System.String)">
            <summary>
            将DataSet数据保存为XML文件。
            </summary>
            <param name="dsXMLData">含要序列化的XML文件数据，可通过ds.ReadXml(xmlPath)初始化</param>
            <param name="xmlPath">要保存的XML文件路径</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.ChangeExtension(System.String,System.String)">
            <summary>
            更改路径字符串的扩展名。
            </summary>
            <param name="path">要修改的路径信息。该路径不能包含在 System.IO.Path.GetInvalidPathChars() 中定义的任何字符。</param>
            <param name="extension">新的扩展名（有或没有前导句点）。指定 null 以从 path 移除现有扩展名。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.GetDirectoryName(System.String)">
            <summary>
            返回指定路径字符串的目录信息。以'\'结尾。
            </summary>
            <param name="pathFile">文件或目录的路径。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.FileHelper.ProcessDirectory">
            <summary>
            获取当前进程执行文件所在目录。
            </summary>
        </member>
        <member name="T:EIIP.Helper.FileHelper.Stream">
            <summary>
            流
            </summary>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Stream.ReadToBuf(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从流中读取数据。
            </summary>
            <param name="s">提供数据的流</param>
            <param name="buf">存放数据的目标缓存</param>
            <param name="offset">要读取的偏移量</param>
            <param name="count">要读取的数量</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Stream.ReadStreamToString(System.IO.Stream,System.String@,System.String)">
            <summary>
            从流中读取字符串数据。
            </summary>
            <param name="input">提供数据的流</param>
            <param name="str">要返回的字符串数据</param>
            <param name="encode">字符串编码</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Stream.ReadStreamToString(System.IO.Stream,System.String@,System.Text.Encoding)">
            <summary>
            从流中读取字符串数据。
            </summary>
            <param name="input">提供数据的流</param>
            <param name="str">要返回的字符串数据</param>
            <param name="encode">字符串编码</param>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Stream.WriteStringToStream(System.String,System.String)">
            <summary>
            将字符串写入内存流。
            </summary>
            <param name="str">要写入的字符串。</param>
            <param name="encode">字符串编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.FileHelper.Stream.WriteStringToStream(System.String,System.Text.Encoding)">
            <summary>
            将字符串写入内存流。
            </summary>
            <param name="str">要写入的字符串。</param>
            <param name="encode">字符串编码</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler">
            <summary>
            泛型事件委托。
            </summary>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`1">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`2">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="t"></param>
            <param name="u"></param>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`3">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`4">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`5">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`6">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="T:EIIP.Framework.GenericEventHandler`7">
            <summary>
            泛型事件委托。
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <typeparam name="V"></typeparam>
            <typeparam name="W"></typeparam>
            <typeparam name="X"></typeparam>
            <typeparam name="Y"></typeparam>
            <typeparam name="Z"></typeparam>
            <param name="t"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="T:EIIP.Framework.Global">
            <summary>
            全局类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Global.Instance">
            <summary>
            取得全局类的单实例。（WebForm 与 WinForm 均适用)
            </summary>
        </member>
        <member name="F:EIIP.Framework.Global.m_sc">
            <summary>
            安全助手实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Global.m_defaultsc">
            <summary>
            缺省安全助手实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Global.m_AccountInfoCollection">
            <summary>
            登录帐套数据库信息集。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Global.m_FileEncryptor">
            <summary>
            文件加密实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Global.m_URLRewriterRules">
            <summary>
            URL 地址的重写规则集合。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Global.LoadSkinSettings(System.IO.FileInfo)">
            <summary>
            加载信息。
            </summary>
            <param name="file">配置文件</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.Framework.Global.m_WorkflowInfoList">
            <summary>
            工作流定义集。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Global.SetWorkflowInfoListReady(System.Boolean)">
            <summary>
            设置一个值，该值指示工作流定义集是否已完成初始化工作。（仅供系统调用）
            </summary>
            <param name="value">指示工作流定义集是否已完成初始化工作。</param>
        </member>
        <member name="M:EIIP.Framework.Global.InitEIIPSystem(System.String,System.String)">
            <summary>
            初始化EIIP系统安装实例。
            </summary>
            <param name="pathWeb">EIIP系统虚拟目录物理路径</param>
            <param name="newAdminPWD">要更新的配置管理密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.GetSettings(System.IO.FileInfo)">
            <summary>
            获取配置文件中配置信息
            </summary>
            <param name="file">配置文件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.SaveSettings(EIIP.Framework.Configuration.Settings,System.String)">
            <summary>
            保存配置数据
            </summary>
            <param name="st">配置数据</param>
            <param name="pathFile">配置文件物理路径</param>
        </member>
        <member name="M:EIIP.Framework.Global.WCFCreateAuthentication(EIIP.Framework.User.LogonIdentity)">
            <summary>
            创建用户身份验证(仅适用于WCF)。
            </summary>
            <param name="identity">登录身份实例</param>
        </member>
        <member name="M:EIIP.Framework.Global.WCFAuthenticateUser(System.String,System.Boolean@)">
            <summary>
            鉴别用户身份合法性(仅适用于WCF)。
            </summary>
            <param name="guid">用户GUID</param>
            <param name="needTryRestore">获取一个值,该值指示是否需要恢复登录。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.WCFGetGuestUser(System.String)">
            <summary>
            获取或创建来宾用户身份
            </summary>
            <param name="guid">用户GUID，为 null 表示创建新的缺省帐户</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.CreateFormsAuthentication(EIIP.Framework.User.LogonIdentity)">
            <summary>
            创建用户身份验证(仅适用于WebForm)
            </summary>
            <param name="identity">登录身份实例</param>
        </member>
        <member name="M:EIIP.Framework.Global.CreateFormsGuestAuthentication(EIIP.Framework.User.LogonIdentity)">
            <summary>
            创建来宾用户身份验证(仅适用于WebForm)
            </summary>
            <param name="identity">登录身份实例</param>
        </member>
        <member name="M:EIIP.Framework.Global.RemoveFormsGuest(System.Web.HttpRequest)">
            <summary>
            移除可能存在的游客实例。
            </summary>
            <param name="request">页面窗体请求</param>
        </member>
        <member name="M:EIIP.Framework.Global.GetGuestUser(System.String)">
            <summary>
            获取或创建来宾用户身份(仅适用于WebForm)
            </summary>
            <param name="guid">用户GUID，为 null 表示创建新的缺省帐户</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.GetGuestUser(System.String,System.Boolean)">
            <summary>
            获取或创建来宾用户身份(仅适用于WebForm)
            </summary>
            <param name="guid">用户GUID，为 null 表示创建新的缺省帐户</param>
            <param name="forceRenew">强制新账户实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.GetGuestUser(EIIP.Core.Contract.LoginUser)">
            <summary>
            获取或创建来宾用户身份(仅适用于WebForm)
            </summary>
            <param name="loginUser"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.AuthenticateUser(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            鉴别用户身份合法性,非法用户会被强制重新登录(仅适用于WebForm)
            </summary>
            <param name="guid">用户GUID</param>
            <param name="redirect">重定向的页面</param>
            <param name="iewiname">IE窗体名称, 若未设置则为弹出窗口,否则在当前IE窗口显示</param>
            <param name="bReLogin">设置一个值,该值指示是否引导非法用户重登录</param>
            <param name="isNotLogoutPage">设置一个值,该值指示是否非处理注销或重登录的页面。</param>
            <param name="needTryRestore">获取一个值,该值指示是否需要恢复登录。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Global.ShowErrorMsgAndRedirectToDefaultPage(System.String,System.String)">
            <summary>
            弹出错误信息，并转向至系统默认页面（如首页）。
            </summary>
            <param name="message">错误信息</param>
            <param name="defaultPage">系统默认页面（如首页）。</param>
        </member>
        <member name="M:EIIP.Framework.Global.SignOutFormsAuthentication">
            <summary>
            移除身份验证票。(仅适用于WebForm)
            </summary>
        </member>
        <member name="M:EIIP.Framework.Global.GetHashCode">
            <summary>
            获取系统实例的哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.Global.SecureHelper">
            <summary>
            获取安全助手实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.DefaultSecureHelper">
            <summary>
            获取缺省安全助手实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.AccountInfoCollection">
            <summary>
            获取登录帐套数据库信息集。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.FileEncryptor">
            <summary>
            获取系统文件加密实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.URLRewriterRules">
            <summary>
            获取 URL 地址的重写规则集合。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.SkinSettings">
            <summary>
            获取 URL 地址的重写规则集合。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.WorkflowInfoList">
            <summary>
            获取工作流定义集。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.WorkflowInfoListReady">
            <summary>
            获取一个值，该值指示工作流定义集是否已完成初始化工作。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.SystemLog">
            <summary>
            获取按日期循环模式记录的系统日志记录器。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.SystemEIIPLog">
            <summary>
            获取EIIP专用系统日志记录器。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.ParamCahe">
            <summary>
            获取参数缓冲表
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.SimpleDictSeg">
            <summary>
            获取全文分析器。可使用 SimpleDictSegInitialized 属性以获取是否完成初始化。
            注意: 首次初始化十分耗时。在初始化期采用访问阻断，故应考虑在应用程序中异步加载。
            </summary>
        </member>
        <member name="P:EIIP.Framework.Global.SimpleDictSegInitialized">
            <summary>
            获取一个值，该值指示全文分析器是否已完成初始化。
            </summary>
        </member>
        <member name="T:EIIP.Helper.AssertHelper">
            <summary>
            提供参数检查的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.AssertHelper.ArgumentNotNull(System.Object,System.String)">
            <summary>
            检查指定参数，当为null时抛出异常。
            </summary>
            <param name="argument">要检查的参数</param>
            <param name="name">参数名</param>
        </member>
        <member name="M:EIIP.Helper.AssertHelper.ArgumentNotNull(System.Object,System.String,System.String)">
            <summary>
            检查指定参数，当为null时抛出异常。
            </summary>
            <param name="argument">要检查的参数</param>
            <param name="name">参数名</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:EIIP.Helper.AssertHelper.ArgumentHasText(System.String,System.String)">
            <summary>
            检查指定字符串类型参数，当为null或空串时抛出异常。
            </summary>
            <param name="argument">字符串类型参数</param>
            <param name="name">参数名</param>
        </member>
        <member name="M:EIIP.Helper.AssertHelper.ArgumentHasText(System.String,System.String,System.String)">
            <summary>
            检查指定字符串类型参数，当为null或空串时抛出异常。
            </summary>
            <param name="argument">字符串类型参数</param>
            <param name="name">参数名</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:EIIP.Helper.AssertHelper.AssertArgumentType(System.Object,System.String,System.Type,System.String)">
            <summary>
            确定当前参数实例是否可以从指定 Type 的实例分配。 不能则会抛出异常。
            </summary>
            <param name="argument">要检查的参数</param>
            <param name="argumentName">参数名称</param>
            <param name="requiredType">进行比较的 Type</param>
            <param name="message">异常信息</param>
        </member>
        <member name="T:EIIP.Helper.CollectionsHelper">
            <summary>
            实用集合工具类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.CollectionsHelper.EmptyList">
            <summary>
            获取列表
            </summary>
        </member>
        <member name="F:EIIP.Helper.CollectionsHelper.EmptyMap">
            <summary>
            获取字典
            </summary>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.UnmodifiableMap(System.Collections.IDictionary)">
            <summary>
            对指定字典进行只读包装。
            </summary>
            <param name="map">要进行只读包装的字典</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.UnmodifiableCollection(System.Collections.ICollection)">
            <summary>
            对指定集合进行只读包装。
            </summary>
            <param name="collection">要进行只读包装的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Sort(System.Collections.IList)">
            <summary>
            对列表进行排序
            </summary>
            <param name="result">要排序的列表</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Object[],System.Object)">
            <summary>
            数组完全填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Object[],System.Int32,System.Int32,System.Object)">
            <summary>
            数组填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="from">数组填充的起始索引</param>
            <param name="to">数组填充的结束索引</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Byte[],System.Byte)">
            <summary>
            数组完全填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Byte[],System.Int32,System.Int32,System.Byte)">
            <summary>
            数组填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="from">数组填充的起始索引</param>
            <param name="to">数组填充的结束索引</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Char[],System.Char)">
            <summary>
            数组完全填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Char[],System.Int32,System.Int32,System.Char)">
            <summary>
            数组填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="from">数组填充的起始索引</param>
            <param name="to">数组填充的结束索引</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Int32[],System.Int32)">
            <summary>
            数组完全填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            数组填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="from">数组填充的起始索引</param>
            <param name="to">数组填充的结束索引</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Int64[],System.Int64)">
            <summary>
            数组完全填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.ArrayFill(System.Int64[],System.Int32,System.Int32,System.Int64)">
            <summary>
            数组填充。
            </summary>
            <param name="array">要填充的数组</param>
            <param name="from">数组填充的起始索引</param>
            <param name="to">数组填充的结束索引</param>
            <param name="fillValue">值</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.AddAll(System.Collections.Generic.ICollection{System.Byte[]},System.Collections.Generic.ICollection{System.Byte[]})">
            <summary>
            将源集合中的所有元素添加至目标集合中。
            </summary>
            <param name="source">源集合</param>
            <param name="destination">目标集合</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.AddAll(System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            将源集合中的所有元素添加至目标集合中。
            </summary>
            <param name="source">源集合</param>
            <param name="destination">目标集合</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.AddAll(System.Collections.Generic.IList{System.Object},System.Collections.Generic.IList{System.Object})">
            <summary>
            将源列表中的所有元素添加至目标列表中。
            </summary>
            <param name="source">源列表</param>
            <param name="destination">目标列表</param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.PutAll(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            将源字典的所有元素设置至目标字典中。
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.PutAll(System.Collections.Generic.IDictionary{System.Object,System.Object},System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            将源字典的所有元素设置至目标字典中。
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.GetNextSize(System.Int32)">
            <summary>
            考虑增长空间，超预算调整列表尺寸。增长模型: 0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ...
            </summary>
            <param name="targetSize">目标尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.GetShrinkSize(System.Int32,System.Int32)">
            <summary>
            获取收缩后的列表尺寸。仅当实际上的分配更小时，才建议一个适当的收缩值，否则直接返回当前尺寸。
            </summary>
            <param name="currentSize">当前尺寸</param>
            <param name="targetSize">目标尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Grow(System.Int32[],System.Int32)">
            <summary>
            增长指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要扩大尺寸的数组</param>
            <param name="minSize">数组的最小尺寸，以此为标准适当扩展数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Grow(System.Int32[])">
            <summary>
            增长指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要扩大尺寸的数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Shrink(System.Int32[],System.Int32)">
            <summary>
            收缩指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要收缩尺寸的数组</param>
            <param name="targetSize">数组的目标尺寸，以此为标准适当收缩数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Grow(System.Int64[],System.Int32)">
            <summary>
            增长指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要扩大尺寸的数组</param>
            <param name="minSize">数组的最小尺寸，以此为标准适当扩展数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Grow(System.Int64[])">
            <summary>
            增长指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要扩大尺寸的数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Shrink(System.Int64[],System.Int32)">
            <summary>
            收缩指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要收缩尺寸的数组</param>
            <param name="targetSize">数组的目标尺寸，以此为标准适当收缩数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Grow(System.Byte[],System.Int32)">
            <summary>
            增长指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要扩大尺寸的数组</param>
            <param name="minSize">数组的最小尺寸，以此为标准适当扩展数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Grow(System.Byte[])">
            <summary>
            增长指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要扩大尺寸的数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.Shrink(System.Byte[],System.Int32)">
            <summary>
            收缩指定数组尺寸。返回新数组。
            </summary>
            <param name="array">要收缩尺寸的数组</param>
            <param name="targetSize">数组的目标尺寸，以此为标准适当收缩数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.HashCode(System.Char[],System.Int32,System.Int32)">
            <summary>
            获取指定字符数组范围中的哈希码。
            </summary>
            <param name="array">字符数组</param>
            <param name="start">要计算的起始索引位置</param>
            <param name="end">要计算的结束索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.CollectionsHelper.HashCode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            获取指定字节数组范围中的哈希码。
            </summary>
            <param name="array">字节数组</param>
            <param name="start">要计算的起始索引位置</param>
            <param name="end">要计算的结束索引位置</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.DataSourceHelper">
            <summary>
            数据源助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.DataSourceHelper.GetResolvedDataSource(System.Object,System.String)">
            <summary>
            获取(验证)合法的数据源
            </summary>
            <param name="dataSource">数据源</param>
            <param name="dataMember">多成员数据源中要绑定到数据列表控件的特定数据成员。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.EnumMapHelper">
            <summary>
            枚举信息映射助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.EnumMapHelper.m_Lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="F:EIIP.Helper.EnumMapHelper.m_EnumMaps">
            <summary>
            保存每种枚举及其对应的EnumMap对象
            </summary>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.IsDefined(System.Type,System.Int32)">
            <summary>
            返回指定枚举中是否存在具有指定值的常数的指示。
            </summary>
            <param name="enumType">枚举类型。</param>
            <param name="value">enumType 的常数值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.GetDescription(System.Enum)">
            <summary>
            获取指定枚举的描述信息类。
            </summary>
            <param name="item">枚举</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.GetString(System.Enum)">
            <summary>
            获取指定枚举的默认描述。
            </summary>
            <param name="item">枚举</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.GetName(System.Enum)">
            <summary>
            获取指定枚举的名称。
            </summary>
            <param name="item">枚举</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.GetEnumerator(System.Type)">
            <summary>
            获取指定枚举类型的描述信息集。
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.GetEnumMap(System.Type)">
            <summary>
            获取指定枚举类型的描述信息对象。
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.GetDescriptions(System.Type)">
            <summary>
            获取指定枚举类型的描述信息集。
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.EnumMapHelper.EnumMap">
            <summary>
            枚举信息映射类
            </summary>
        </member>
        <member name="M:EIIP.Helper.EnumMapHelper.EnumMap.#ctor(System.Type)">
            <summary>
            实例化指定枚举类型的枚举信息映射实例。
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="P:EIIP.Helper.EnumMapHelper.EnumMap.Values">
            <summary>
            获取枚举信息列表。
            </summary>
        </member>
        <member name="P:EIIP.Helper.EnumMapHelper.EnumMap.Count">
            <summary>
            获取或设置枚举信息数量。
            </summary>
        </member>
        <member name="P:EIIP.Helper.EnumMapHelper.EnumMap.Item(System.Enum)">
            <summary>
            获取指定枚举值的描述信息。
            </summary>
        </member>
        <member name="T:EIIP.Helper.ImageHelper">
            <summary>
            图片处理助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ConvertToGray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将一个字节数组转换为8bit灰度位图
            </summary>
            <param name="rawValues">显示字节数组</param>
            <param name="width">图像宽度</param>
            <param name="height">图像高度</param>
            <returns>位图</returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Scale(System.Drawing.Image,System.Drawing.Size)">
            <summary>
            缩略图，按高度和宽度来缩略
            </summary>
            <param name="image">源图片</param>
            <param name="size">缩略图尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Scale(System.Drawing.Image,System.Int32)">
            <summary>
            缩略图，按倍数来缩略
            </summary>
            <param name="image">源图片</param>
            <param name="multiple">放大或缩小的倍数，负数表示缩小，正数表示放大</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleFixWidth(System.Drawing.Image,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            固定宽度缩略
            </summary>
            <param name="image">源图片</param>
            <param name="width">缩略图宽度</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleFixWidth(System.Drawing.Image,System.Int32)">
            <summary>
            固定宽度缩略
            </summary>
            <param name="image">源图片</param>
            <param name="width">缩略图宽度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleFixHeight(System.Drawing.Image,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            固定高度缩略
            </summary>
            <param name="image">源图片</param>
            <param name="height">缩略图高度</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleFixHeight(System.Drawing.Image,System.Int32)">
            <summary>
            固定高度缩略
            </summary>
            <param name="image">源图片</param>
            <param name="height">缩略图高度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleFix(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            按指定等比例宽高缩略
            </summary>
            <param name="image">源图片</param>
            <param name="width">等比缩略图宽度</param>
            <param name="height">等比缩略图高度</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleFix(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            按指定等比例宽高缩略
            </summary>
            <param name="image">源图片</param>
            <param name="width">等比缩略图宽度</param>
            <param name="height">等比缩略图高度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleCut(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            裁减缩略，根据固定的高度和宽度
            </summary>
            <param name="image">源图片</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ScaleCut(System.Drawing.Image,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            裁减缩略，根据固定的高度和宽度
            </summary>
            <param name="image">源图片</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,EIIP.Helper.MakeThumbnailMode,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalPath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>   
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,EIIP.Helper.MakeThumbnailMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalPath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>    
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.Drawing.Image,System.Single,System.Drawing.Point,EIIP.Helper.ImagePosition,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            添加图片水印。无法从带有索引像素格式的图像创建 Graphics 对象。需要事先判定
            (imgBack.PixelFormat ＆ PixelFormat.Indexed) != PixelFormat.Undefined)
            </summary>
            <param name="imgBack">要添加图片水印的源图片对象</param>
            <param name="imgWatermark">水印图片对象</param>
            <param name="transparency">水印图片的透明度，在0-1之间</param>
            <param name="padding">水印图片相对于背景图片的空白间距</param>
            <param name="imagePosition">水印位置</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.Drawing.Image,System.Single,System.Drawing.Point,EIIP.Helper.ImagePosition)">
            <summary>
            添加图片水印。无法从带有索引像素格式的图像创建 Graphics 对象。需要事先判定
            (imgBack.PixelFormat ＆ PixelFormat.Indexed) != PixelFormat.Undefined)
            </summary>
            <param name="imgBack">要添加图片水印的源图片对象</param>
            <param name="imgWatermark">水印图片对象</param>
            <param name="transparency">水印图片的透明度，在0-1之间</param>
            <param name="padding">水印图片相对于背景图片的空白间距</param>
            <param name="imagePosition">水印位置</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,System.Drawing.Point,EIIP.Helper.ImagePosition)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="padding">水印图片相对于背景图片的空白间距</param>
            <param name="imagePosition">水印位置</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,System.Drawing.Point,EIIP.Helper.ImagePosition,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="padding">水印图片相对于背景图片的空白间距</param>
            <param name="imagePosition">水印位置</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,EIIP.Helper.ImagePosition)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="imagePosition">水印位置</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,EIIP.Helper.ImagePosition,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="imagePosition">水印位置</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,System.Drawing.Point)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="padding">水印图片相对于背景图片的空白间距</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.AddWatermark(System.Drawing.Image,System.String,System.Drawing.Point,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            添加图片水印。
            </summary>
            <param name="image">要添加图片水印的源图片</param>
            <param name="waterImagePath">水印图片的物理路径</param>
            <param name="padding">水印图片相对于背景图片的空白间距</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Makewater(System.Drawing.Image,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point)">
            <summary>
            在某一点打水印文本
            </summary>
            <param name="image">源图片</param>
            <param name="waterStr">水印文本</param>
            <param name="font">水印文本</param>
            <param name="brush">水印文本</param>
            <param name="p">指定点</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Makewater(System.Drawing.Image,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            在某一点打水印文本
            </summary>
            <param name="image">源图片</param>
            <param name="waterStr">水印文本</param>
            <param name="font">水印文本</param>
            <param name="brush">水印文本</param>
            <param name="p">指定点</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Makewater(System.Drawing.Image,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point,EIIP.Helper.ImagePosition)">
            <summary>
            在某一点打水印文本
            </summary>
            <param name="image">源图片</param>
            <param name="waterStr">水印文本</param>
            <param name="font">水印文本</param>
            <param name="brush">水印文本</param>
            <param name="p">指定点</param>
            <param name="imagePosition">图片位置</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Makewater(System.Drawing.Image,System.String,System.Drawing.Font,System.Drawing.Brush,System.Drawing.Point,EIIP.Helper.ImagePosition,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            在某一点打水印文本
            </summary>
            <param name="image">源图片</param>
            <param name="waterStr">水印文本</param>
            <param name="font">水印文本</param>
            <param name="brush">水印文本</param>
            <param name="p">指定点</param>
            <param name="imagePosition">图片位置</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Thumbnail(System.Drawing.Image,System.Drawing.Size,System.Boolean,System.Drawing.ContentAlignment)">
            <summary>
            获取缩略图。
            </summary>
            <param name="image">要缩略的图片。注意，不会释放该资源。</param>
            <param name="size">要缩放的尺寸</param>
            <param name="isFullorMax">
            设置缩略模式选择，true为完整(缩略图尺寸不完全填充)模式，false为最大尺寸(剪切最大边部分)模式
            </param>
            <param name="contentAlignment">当有不完全填充或剪切情况时，设置缩略图相对原图的对齐方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.Thumbnail(System.Drawing.Image,System.Drawing.Size,System.Boolean,System.Drawing.ContentAlignment,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            获取缩略图。
            </summary>
            <param name="image">要缩略的图片。注意，不会释放该资源。</param>
            <param name="size">要缩放的尺寸</param>
            <param name="isFullorMax">
            设置缩略模式选择，true为完整(缩略图尺寸不完全填充)模式，false为最大尺寸(剪切最大边部分)模式
            </param>
            <param name="contentAlignment">当有不完全填充或剪切情况时，设置缩略图相对原图的对齐方式</param>
            <param name="interpolationMode">设置图像插补模式</param>
            <param name="smoothingMode">设置图像呈现质量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.GetImageArray(System.Drawing.Image)">
            <summary>
            将图片转为字节数组。
            </summary>
            <param name="image">图片对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.OctreeQuantizeAndSaveGif(System.Drawing.Image,System.String)">
            <summary>
            高质量保存Gif处理图像。
            </summary>
            <param name="thmbnailSource">低质量的图像</param>
            <param name="savePath">保存路径</param>
        </member>
        <member name="T:EIIP.Helper.ImageHelper.ImageRecognizerBase">
            <summary>
            图片识别基类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ImageHelper.ImageRecognizerBase.m_Pic">
            <summary>
            图片
            </summary>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.#ctor">
            <summary>
            实例化图片识别基类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.#ctor(System.Drawing.Bitmap)">
            <summary>
            实例化图片识别基类。
            </summary>
            <param name="pic">图片</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.ResetImage(System.Drawing.Bitmap)">
            <summary>
            重置一张新图片。
            </summary>
            <param name="pic">图片</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetGrayNumColor(System.Drawing.Color)">
            <summary>
            获取RGB灰度值。
            </summary>
            <param name="c">颜色</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GrayByPixels">
            <summary>
            逐点方式转换灰度。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.ClearPicBorder(System.Int32)">
            <summary>
            清除图形边框。
            </summary>
            <param name="borderWidth">边框宽度</param>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GrayByLine">
            <summary>
            逐行方式转换灰度。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetPicValidByValue(System.Int32,System.Int32)">
            <summary>
            得到有效图形并调整为可平均分割的大小。
            </summary>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="charsCount">有效字符数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetPicValidByValue(System.Int32)">
            <summary>
            由类变量图形得到有效图形。
            </summary>
            <param name="dgGrayValue">灰度背景分界值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetPicValidByValue(System.Drawing.Bitmap,System.Int32)">
            <summary>
            由指定图形得到有效图形，并调整为可平均分割的大小。
            </summary>
            <param name="pic">要处理的图形</param>
            <param name="dgGrayValue">灰度背景分界值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetPicValidByValue(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            由指定图形得到有效图形。
            </summary>
            <param name="pic">要处理的图形</param>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="charsCount">有效字符数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetSplitPics(System.Int32,System.Int32)">
            <summary>
            获取图片平均分割后的图片数组。
            </summary>
            <param name="numRow">水平上分割数</param>
            <param name="numCol">垂直上分割数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetSplitPics(System.Int32)">
            <summary>
            获取图片分割后的图片数组。
            </summary>
            <param name="width">每张图片宽度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.GetSingleBmpCode(System.Drawing.Bitmap,System.Int32)">
            <summary>
            返回灰度图片的点阵描述字串，1表示灰点，0表示背景
            </summary>
            <param name="singlePic">灰度图</param>
            <param name="dgGrayValue">背前景灰色界限</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.IsVSpaceLine(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            测试指定垂直线是否空白线。
            </summary>
            <param name="pic">灰度图片</param>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="x">水平位置</param>
            <param name="y1">起始垂直位置</param>
            <param name="y2">结束垂直位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.IsHSpaceLine(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            测试指定水平线是否空白线。
            </summary>
            <param name="pic">灰度图片</param>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="y">垂直位置</param>
            <param name="x1">起始水平位置</param>
            <param name="x2">结束水平位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.ConvertToCode(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取指定灰度区域的点阵描述字串，1表示灰点，0表示背景。
            </summary>
            <param name="pic">灰度图片</param>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="x1">左上角 X 位置</param>
            <param name="y1">左上角 Y 位置</param>
            <param name="x2">右下角 X 位置</param>
            <param name="y2">右下角 Y 位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ImageHelper.ImageRecognizerBase.ParseImageCodes(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            将灰度图片转换为识别代码列表。不存在返回null。
            </summary>
            <param name="pic">灰度图片</param>
            <param name="dgGrayValue">灰度背景分界值</param>
            <param name="spaceWidth">识别为空白的最小宽度</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.ImageHelper.ImageRecognizerBase.Picture">
            <summary>
            获取目标图片。
            </summary>
        </member>
        <member name="T:EIIP.Helper.MakeThumbnailMode">
            <summary>
            生成缩略图的方式
            </summary>
        </member>
        <member name="F:EIIP.Helper.MakeThumbnailMode.FixWidth">
            <summary>
            指定宽，高按比例
            </summary>
        </member>
        <member name="F:EIIP.Helper.MakeThumbnailMode.FixHeight">
            <summary>
            指定高，宽按比例
            </summary>
        </member>
        <member name="F:EIIP.Helper.MakeThumbnailMode.FixWidthAndHeight">
            <summary>
            指定高宽缩放（可能变形）
            </summary>
        </member>
        <member name="F:EIIP.Helper.MakeThumbnailMode.Cut">
            <summary>
            指定高宽裁减（不变形） 
            </summary>
        </member>
        <member name="T:EIIP.Helper.StringPosition">
            <summary>
            文本位置
            </summary>
        </member>
        <member name="F:EIIP.Helper.StringPosition.TopLeft">
            <summary>
            靠上靠左
            </summary>
        </member>
        <member name="F:EIIP.Helper.StringPosition.BottomLeft">
            <summary>
            靠下靠左
            </summary>
        </member>
        <member name="T:EIIP.Helper.ImagePosition">
            <summary>
            图片位置
            </summary>
        </member>
        <member name="F:EIIP.Helper.ImagePosition.TopLeft">
            <summary>
            靠上靠左
            </summary>
        </member>
        <member name="F:EIIP.Helper.ImagePosition.BottomLeft">
            <summary>
            靠下靠左
            </summary>
        </member>
        <member name="F:EIIP.Helper.ImagePosition.BottomRight">
            <summary>
            靠下靠右
            </summary>
        </member>
        <member name="F:EIIP.Helper.ImagePosition.TopRigth">
            <summary>
            靠上靠右
            </summary>
        </member>
        <member name="F:EIIP.Helper.ImagePosition.MiddleCenter">
            <summary>
            中央
            </summary>
        </member>
        <member name="T:EIIP.Helper.IPHelper">
            <summary>
            IP助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.IPHelper.SetDNS(System.String[])">
            <summary>
            设置DNS。
            </summary>
            <param name="dns"></param>
        </member>
        <member name="M:EIIP.Helper.IPHelper.SetGetWay(System.String)">
            <summary>
            设置网关
            </summary>
            <param name="getway"></param>
        </member>
        <member name="M:EIIP.Helper.IPHelper.SetGetWay(System.String[])">
            <summary>
            设置网关
            </summary>
            <param name="getway"></param>
        </member>
        <member name="M:EIIP.Helper.IPHelper.SetIPAddress(System.String,System.String)">
            <summary>
            设置IP地址和掩码
            </summary>
            <param name="ip"></param>
            <param name="submask"></param>
        </member>
        <member name="M:EIIP.Helper.IPHelper.SetIPAddress(System.String,System.String,System.String)">
            <summary>
            设置IP地址，掩码和网关
            </summary>
            <param name="ip"></param>
            <param name="submask"></param>
            <param name="getway"></param>
        </member>
        <member name="M:EIIP.Helper.IPHelper.SetIPAddress(System.String[],System.String[],System.String[],System.String[])">
            <summary>
            设置IP地址，掩码，网关和DNS
            </summary>
            <param name="ip"></param>
            <param name="submask"></param>
            <param name="getway"></param>
            <param name="dns"></param>
        </member>
        <member name="M:EIIP.Helper.IPHelper.EnableDHCP">
            <summary>
            启用DHCP服务器
            </summary>
        </member>
        <member name="M:EIIP.Helper.IPHelper.IsIPAddress(System.String)">
            <summary>
            判断是否IP地址格式
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.IsoStoreHelper">
            <summary>
            使用独立存储区的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.IsoStoreHelper.StorageSpace">
            <summary>
            获取与应用程序域标识和程序集标识对应的用户范围的独立存储。
            非 ClickOnce 布署则独立存储区为 domain;  ClickOnce 布署则独立存储区为 application
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.NumCastHelper">
            <summary>
            转换数字金额的类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumCastHelper.NULLVALUE">
            <summary>
            空值。
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumCastHelper.NumLevelExponent">
            <summary>
            数位的指数
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumCastHelper.NumLeverChineseSign">
            <summary>
            数位的中文字符
            </summary>
        </member>
        <member name="F:EIIP.Helper.NumCastHelper.NumChineseCharacter">
            <summary>
            大写字符
            </summary>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.IsValidated(System.String)">
            <summary>
            验证货币数字是否合法。
            </summary>
            <param name="num">数字字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.GetNumLevel(System.Double)">
            <summary>
            获取数字的数位　使用log
            例如 1000的数位为 NumLevel.Thousand
            </summary>
            <param name="num">数字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.IsDumpLevel(System.Double)">
            <summary>
            判断数字之间是否有跳位，也就是中文中间是否要加零，例如1020 就应该加零。
            </summary>
            <param name="num">数字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.IsBigThanTillion(System.String)">
            <summary>
            是否大于兆，如果大于就把字符串分为两部分。
            一部分是兆以前的数字，另一部分是兆以后的数字。
            </summary>
            <param name="num">数字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.SplitNum(System.String)">
            <summary>
            把数字字符串由‘兆’分开两个
            </summary>
            <param name="num">数字字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.IsStartOfTen(System.Double)">
            <summary>
            是否以“壹拾”开头，如果是就可以把它变为“拾”
            </summary>
            <param name="num">数字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.ContactNumChinese(System.Double[])">
            <summary>
            合并分开的数组(大于兆的数字的前后两部分)中文货币字符。
            </summary>
            <param name="tillionNums">表示超大数据的数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.CalculateChineseSign(System.Double,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            计算中文字符串 递归计算货币数字的中文
            </summary>
            <param name="num">数字</param>
            <param name="levelNum">数位级别</param>
            <param name="IsDump">设置一个值，该值指示是否有跳位。</param>
            <param name="IsExceptTen">设置一个值，该值指示是否以‘壹拾’开头</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.NumCastHelper.ConvertToChinese(System.String)">
            <summary>
            转换为中文货币格式字串。
            </summary>
            <param name="num">数字字符串，如 "123.45"</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.ObjectHelper">
            <summary>
            关于对象、类型、属性等的助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.EmptyObjects">
            <summary>
            空的对象数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.EmptyBytes">
            <summary>
            空的字节数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.EmptyInt32s">
            <summary>
            空的整型数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.EmptyInt64s">
            <summary>
            空的长整型数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.m_InternalTypeResolver">
            <summary>
            内置的（可缓存）类型解析器。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.InstantiateType(System.Type)">
            <summary>
            实例化指定类型对象。该类型要有公共无参构造器。
            </summary>
            <param name="type">要实例化的类型，该类型要有公共无参构造器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.InstantiateType(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            实例化指定类型构造器的对象。
            </summary>
            <param name="constructor">类型构造器</param>
            <param name="arguments">类型构造器要使用的参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.IsAssignableAndNotTransparentProxy(System.Type,System.Object)">
            <summary>
            检查指定实例是否是真实对象，并可从指定类型中进行分配。
            </summary>
            <param name="type">要检查的目标类型</param>
            <param name="instance">要检查的实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.IsAssignable(System.Type,System.Object)">
            <summary>
            检查指定实例是否可从指定类型中进行分配。
            </summary>
            <param name="type">要检查的目标类型</param>
            <param name="obj">要检查的实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.IsSimpleProperty(System.Type)">
            <summary>
            检查指定类型是否是简单（系统基本或数组）类型。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.IsPrimitiveArray(System.Type)">
            <summary>
            检查指定类型是否是系统基元数组类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.ResolveType(System.String)">
            <summary>
            解析指定类型名称。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.NullSafeEquals(System.Object,System.Object)">
            <summary>
            检查两个对象是否相等。
            </summary>
            <param name="o1">第一个对象</param>
            <param name="o2">第二个对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Hash(System.Object)">
            <summary>
            获取指定对象的哈希验证码。
            </summary>
            <param name="valueToHash"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.HasDataChanged(System.Object,System.Object)">
            <summary>
            比较数据是否有变更的。
            </summary>
            <param name="oldValue">旧数据</param>
            <param name="newValue">新数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.EnumerateFirstElement(System.Collections.IEnumerator)">
            <summary>
            获取枚举数的第一个元素。
            </summary>
            <param name="enumerator">枚举数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.EnumerateFirstElement(System.Collections.IEnumerable)">
            <summary>
            获取枚举数的第一个元素。
            </summary>
            <param name="enumerable">可枚举对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.EnumerateElementAtIndex(System.Collections.IEnumerator,System.Int32)">
            <summary>
            使用枚举数获取指定索引的元素。
            </summary>
            <param name="enumerator">枚举数</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.EnumerateElementAtIndex(System.Collections.IEnumerable,System.Int32)">
            <summary>
            使用枚举数获取指定索引的元素。
            </summary>
            <param name="enumerable">可枚举对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.InvokeMethod(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            反射调用实例方法。
            </summary>
            <param name="method">方法信息</param>
            <param name="instance">实例对象</param>
            <param name="arguments">方法参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.GetProperty(System.Object,System.String)">
            <summary>
            获取属性对象。
            </summary>
            <param name="o">实例对象</param>
            <param name="property">属性名称（可以是以"."分隔的命名空间）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.InvokeProperty(System.Object,System.String)">
            <summary>
            调用属性或方法。
            </summary>
            <param name="obj">调用对象实例</param>
            <param name="property">属性或方法名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.ClearAllEvents(System.Object)">
            <summary>
            清除一个对象所有事件所挂钩的delegate
            </summary>
            <remarks>
            不建议使用反射的方式调用private 成员方法
            比较合理的方式是在class里面写个virtual public方法来清理这些events
            </remarks>
            <param name="objectHasEvents">有事件的对象</param>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.ConvertToJson(System.Text.StringBuilder,System.Object,System.Boolean)">
            <summary>
            将.Net数据转换为json格式的方法，包括特殊字符的转换，日期等js数据类型初始化。
            </summary>
            <param name="sb">输出流</param>
            <param name="value">要转换的对象</param>
            <param name="quoteName">指示是否用JavaScript引号包装属性名称。</param>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.ConvertToJson(System.Object,System.Boolean)">
            <summary>
            将.Net数据转换为json格式的方法，包括特殊字符的转换，日期等js数据类型初始化。
            </summary>
            <param name="o">要转换的对象</param>
            <param name="quoteName">指示是否用JavaScript引号包装属性名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Compress(System.Byte[])">
            <summary>
            压缩数据。
            </summary>
            <param name="input">要压缩的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Compress(System.String)">
            <summary>
            压缩字符串数据。
            </summary>
            <param name="input">要压缩的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Decompress(System.Byte[])">
            <summary>
            解压数据。
            </summary>
            <param name="input">要解压的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.DecompressAsString(System.Byte[])">
            <summary>
            解压数据。
            </summary>
            <param name="input">要压缩的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>
            压缩数据。
            </summary>
            <param name="input">要压缩的数据</param>
            <param name="offset">input 的起始索引</param>
            <param name="length">要压缩的数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Deflate(System.String,System.Text.Encoding)">
            <summary>
            压缩数据(数据解压使用Inflate)
            </summary>
            <param name="inputString"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Inflate(System.Byte[],System.Text.Encoding)">
            <summary>
            数据解压(压缩数据使用Deflate)
            </summary>
            <param name="input"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Compare(System.String[],System.String[])">
            <summary>
            相等比较。
            </summary>
            <param name="l1">第一个字符串数组。</param>
            <param name="l2">第二个字符串数组。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ObjectHelper.Compare(System.String[],System.String[],System.StringComparison)">
            <summary>
            比较两个指定的字符串数组。
            </summary>
            <param name="l1">第一个字符串数组。</param>
            <param name="l2">第二个字符串数组。</param>
            <param name="omparisonType">System.StringComparison 值之一。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.ObjectHelper.Empty">
            <summary>
            空对象。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.Empty.StringArray">
            <summary>
            空的字串数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.Empty.ObjectArray">
            <summary>
            空的对象数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.Empty.ByteArray">
            <summary>
            空的字节数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ObjectHelper.Empty.Int32Array">
            <summary>
            空的整型数组。
            </summary>
        </member>
        <member name="T:EIIP.Helper.ReflectionHelper">
            <summary>
            反射助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ReflectionHelper.AllMembersCaseInsensitiveFlags">
            <summary>
            匹配不区分大小写的 private,public,static及实例成员 的标志。
            </summary>
        </member>
        <member name="F:EIIP.Helper.ReflectionHelper.FIELDBINDINGS">
            <summary>
            可访问的字段标识。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetSignature(System.Type,System.String,System.Type[])">
            <summary>
            返回指定类型、方法名称与参数集的签名。
            </summary>
            <param name="type">类型</param>
            <param name="method">方法名称</param>
            <param name="argumentTypes">参数集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetMethod(System.Type,System.String,System.Type[])">
            <summary>
            获取指定类型、方法名称与参数的方法。
            </summary>
            <param name="targetType">目标类型</param>
            <param name="method">方法名称</param>
            <param name="argumentTypes">参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            获取指定方法或构造器的参数类型数组。
            </summary>
            <param name="method">方法或构造器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            获取指定参数信息数组的参数类型数组。
            </summary>
            <param name="args">参数信息数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetGenericParameterNames(System.Reflection.MethodInfo)">
            <summary>
            获取指定方法的泛型类型参数名称数组。
            </summary>
            <param name="method">方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetGenericParameterNames(System.Type[])">
            <summary>
            获取指定泛型参数数组的泛型参数名称数组。
            </summary>
            <param name="args">泛型类型参数数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetMostSpecificMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            搜索能匹配指定类型的实例方法。
            </summary>
            <param name="method">要调用的(接口)方法</param>
            <param name="type">目标（方法返回）类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.ToInterfaceArray(System.String[])">
            <summary>
            转换接口名称数组为对应的接口类型数组，该数组包含指定接口名称的接口类型及其通过继承得到的所有接口类型。
            </summary>
            <param name="interfaceNames">要转换的接口名称数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.ToInterfaceArray(System.Type)">
            <summary>
            转换指定接口类型为对应的接口类型数组。
            </summary>
            <param name="intf">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.PropertyIsIndexer(System.String,System.Type)">
            <summary>
            获取一个值，该值指示指定属性是否是目标类型的默认成员。
            </summary>
            <param name="propertyName">属性名称</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.MethodIsOnOneOfTheseInterfaces(System.Reflection.MethodBase,System.Type[])">
            <summary>
            获取一个值，该值指示指定方法是否实现了任意一个目标接口。
            </summary>
            <param name="method">要检查的方法</param>
            <param name="interfaces">接口类型数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetDefaultValue(System.Type)">
            <summary>
            获取指定类型的缺省值。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetDefaultValues(System.Type[])">
            <summary>
            获取指定类型数组支持的默认值。
            </summary>
            <param name="types">类型数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.ParameterTypesMatch(System.Reflection.MethodInfo,System.Type[])">
            <summary>
            匹配指定方法的调用参数。
            </summary>
            <param name="candidate">要匹配的方法</param>
            <param name="parameterTypes">参数类型数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetTypes(System.Object[])">
            <summary>
            获取对象数组对应的类型。
            </summary>
            <param name="args">对象数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.HasAtLeastOneMethodWithName(System.Type,System.String)">
            <summary>
            检查是否至少有一个返回目标类型的指定名称方法。
            </summary>
            <param name="type">要检查的类型</param>
            <param name="name">要搜索的方法名称，不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.MethodNameFilter(System.Reflection.MemberInfo,System.Object)">
            <summary>
            方法过滤器。供HasAtLeastOneMethodWithName方法使用。
            </summary>
            <param name="member"></param>
            <param name="criteria"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.CreateCustomAttribute(System.Type,System.Object[],System.Attribute)">
            <summary>
            创建自定义特性实例。
            </summary>
            <param name="type">特性类型</param>
            <param name="ctorArgs">自定义参数</param>
            <param name="sourceAttribute">要继承的源特性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.CreateCustomAttribute(System.Type,System.Attribute)">
            <summary>
            创建自定义特性实例。
            </summary>
            <param name="type">特性类型</param>
            <param name="sourceAttribute">要继承的源特性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.CreateCustomAttribute(System.Attribute)">
            <summary>
            创建自定义特性实例。
            </summary>
            <param name="sourceAttribute">要继承的源特性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.CreateCustomAttribute(System.Type)">
            <summary>
            创建自定义特性实例。
            </summary>
            <param name="type">特性类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.CreateCustomAttribute(System.Type,System.Object[])">
            <summary>
            创建自定义特性实例。
            </summary>
            <param name="type">特性类型</param>
            <param name="ctorArgs">自定义参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetMatchingMethods(System.Type,System.Reflection.MethodInfo[],System.Boolean)">
            <summary>
            搜索匹配的方法。
            </summary>
            <param name="type">匹配方法的类型</param>
            <param name="methods">要匹配的方法</param>
            <param name="strict">指示是否当发生不匹配时就立即抛出异常。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.TypeOfOrType(System.Object)">
            <summary>
            获取对象类型。
            </summary>
            <param name="source">对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.IsEnumType(System.Object)">
            <summary>
            测试对象类型是否是枚举类型。
            </summary>
            <param name="source">对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.MemberwiseCopy(System.Object,System.Object)">
            <summary>
            将源对象的字段复制到目标对象。
            </summary>
            <param name="fromObject">源对象</param>
            <param name="toObject">目标对象</param>
        </member>
        <member name="F:EIIP.Helper.ReflectionHelper.m_FieldCache">
            <summary>
            字段缓存池。
            </summary>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.GetFields(System.Type)">
            <summary>
            获取指定类型的字段。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.ReflectionHelper.CollectFieldsRecursive(System.Type,System.Collections.ArrayList)">
            <summary>
            递归收集字段成员。
            </summary>
            <param name="type">类型</param>
            <param name="fieldList">存放字段的列表</param>
        </member>
        <member name="T:EIIP.Helper.RegexHelper">
            <summary>
            正则表达式助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.AddSingleMatchStrings(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            获取和正则表达式匹配的所有匹配组最后一条字符串的列表。如果没有任何匹配，返回false。
            </summary>
            <param name="text">要匹配的文本</param>
            <param name="expression">正则表达式</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <param name="output">输出匹配的字符串列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.ReplaceMutiGroup(System.String,System.String,System.String,System.Boolean)">
             <summary>
             一次替换多个字符串，返回替换后的字符串。
             <example>
             string input = "Test1,Test2;";
             string expression = "((Test1)|(Test2))";
             string replaceStr = "${Test1}abc${Test2}def";
             string actual = ReplaceMutiGroup(input, expression, replaceStr);
             actual = "abc,def;";
            
             input = ";Test1,Test2";
             actual = ";abc,def";
             
             input = ";Test1,Test2";
             expression = "(Test1),(Test2)";
             actual = ";abc,def";
             </example>
             </summary>
             <param name="input">要替换的字符串</param>
             <param name="expression">正则表达式</param>
             <param name="replaceStr">要替换使用的格式，格式为"${Name1}Replace1${Name2}Replace2"</param>
             <param name="ignoreCase">是否忽略大小写</param>
             <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Split(System.String,System.String)">
            <summary>
            获取分割后的字符串数组。
            </summary>
            <param name="input">要分割的源字符串</param>
            <param name="splitStr">分割符,可以是正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            获取分割后的字符串数组。
            </summary>
            <param name="input">要分割的源字符串</param>
            <param name="splitStr">分割符,可以是正则表达式</param>
            <param name="option">分割正则表达式选项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Replace(System.String,System.String,System.String)">
            <summary>
            根据指定的正则表达式替换文本。(不区分大小写)
            </summary>
            <param name="content">内容，可以是多行</param>
            <param name="pattern">正则表达式</param>
            <param name="replace">替换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            根据指定的正则表达式替换文本。(不区分大小写)
            </summary>
            <param name="content">内容，可以是多行</param>
            <param name="pattern">正则表达式</param>
            <param name="replace">替换的字符串</param>
            <param name="returnEmptyWhenUnmatch">当正则不匹配时，设置true返回 String.Empty，false返回content</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Find(System.String,System.String,System.Int32)">
            <summary>
            查找指定索引位置匹配的字符串。
            </summary>
            <param name="content">内容</param>
            <param name="pattern">正则</param>
            <param name="index">索引位置（如 $1 的索引位置为1）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Find(System.String,System.String,System.Int32[])">
            <summary>
            查找指定索引位置匹配的字符串。
            </summary>
            <param name="content">内容</param>
            <param name="pattern">正则</param>
            <param name="idxs">索引位置（如 $1 的索引位置为1）数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Find(System.String,System.String)">
            <summary>
            查找指定索引位置匹配的字符串。（排除$0,仅返回匹配项）
            </summary>
            <param name="content">内容</param>
            <param name="pattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.CreateRegex(System.String)">
            <summary>
            创建指定正则表达式。（忽略大小写及多行）
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.FindLast(System.String,System.String)">
            <summary>
            查找最后一个匹配的字符串。
            </summary>
            <param name="content">内容</param>
            <param name="pattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.GetMatchDictionary(System.String,System.String)">
            <summary>
            获取匹配的目录。
            </summary>
            <param name="content">内容</param>
            <param name="pattern">要提取的目录项的正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.GetMatchStrings(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String}@)">
            <summary>
            获取匹配字符串(可能同一匹配有多个)。存在则返回true。
            </summary>
            <param name="text">要匹配的文本</param>
            <param name="regx">正则表达式</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
            <param name="output">匹配结果输出</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.GetSingleMatchStrings(System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String}@)">
            <summary>
            获取匹配字符串(同一匹配只有一个)。存在则返回true。
            </summary>
            <param name="text">要匹配的文本</param>
            <param name="regx">正则表达式</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
            <param name="output">匹配结果输出</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.CreateRegex(System.String,System.Boolean)">
            <summary>
            用修改模式的选项为指定的正则表达式初始化并编译 System.Text.RegularExpressions.Regex 类的一个新实例。
            </summary>
            <param name="pattern">要匹配的正则表达式模式。</param>
            <param name="ignoreCase">设置是否忽略大小写。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.GetSplitWithoutFirstStrings(System.String,System.String,System.Boolean,System.Collections.ArrayList@)">
            <summary>
            获取拆分的结果。不含拆分匹配的第一个字符串。存在则返回true。
            </summary>
            <param name="text">要匹配的文本</param>
            <param name="regx">正则表达式</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
            <param name="output">匹配结果输出</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.GetMatch(System.String,System.String,System.Boolean)">
            <summary>
            获取正则表达式的匹配字符串。不存在则返回空串。
            </summary>
            <param name="text">要匹配的文本</param>
            <param name="regx">正则表达式</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.GetMatchSum(System.String,System.String,System.Boolean)">
            <summary>
            获取匹配合。将匹配的结果合并成一条字符串返回。
            </summary>
            <param name="text">要匹配的文本</param>
            <param name="regx">正则表达式</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.RegexHelper.Replace2(System.String,System.String,System.String,System.Boolean)">
            <summary>
            正则替换指定文本。
            </summary>
            <param name="text">要替换的源文本</param>
            <param name="regx">正则表达式</param>
            <param name="newText">替换文本</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.OAPagerUrlRewriteExtension">
            <summary>
            获取或重置OAPager分页控件URL重写格式的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.OAPagerCustomInfoExtension">
            <summary>
            获取或重置OAPager分页控件自定义信息的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.InsecureFileNameExtension">
            <summary>
            获取或重置危险（物理）文件(夹)名称正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.ScriptExtension">
            <summary>
            获取或重置客户端脚本正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.HTMLExtension">
            <summary>
            获取或重置客户端HTML正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.ObjectExtension">
            <summary>
            获取或重置客户端对象标签正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.KeyCharsExtension">
            <summary>
            获取或重置保留字正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.InvalidFileNameCharsExtension">
            <summary>
            获取或重置保留字正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.UploadFileExtension">
            <summary>
            获取或重置合法上传文件扩展名正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.ASPXFileExtension">
            <summary>
            获取或重置ASPX执行文件扩展名正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.PictureFileExtension">
            <summary>
            获取或重置图片文件扩展名正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.UploadFileConfigExtension">
            <summary>
            获取合法上传文件扩展名配置的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.PHONExtension">
            <summary>
            获取手机（小灵通)号的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.MobileExtension">
            <summary>
            获取移动手机号的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.DateExtension">
            <summary>
            获取日期的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.DateTimeExtension">
            <summary>
            获取日期时间的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.TimeExtension">
            <summary>
            获取时间的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.WeakPasswordExtension">
            <summary>
            获取弱密码的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.NumericalValueExtension">
            <summary>
            获取数值的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.IntegerValueExtension">
            <summary>
            获取整数值的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.UIntegerValueExtension">
            <summary>
            获取非负整数值的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.NumCastValueExtension">
            <summary>
            获取货币数值的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.EmailExtension">
            <summary>
            获取 Email 的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.HttpURLExtension">
            <summary>
            获取 URL 的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.IPExtension">
            <summary>
            获取 IP 的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.EmailMIMEContentExtension">
            <summary>
            获取电子邮件 MIME 内容的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.HrefExtension">
            <summary>
            获取HTML链接的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.DoubleByteWordExtension">
            <summary>
            获取匹配双字节字的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.VarNameExtension">
            <summary>
            获取匹配变量签名的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.ExecutableASPFileNameExtension">
            <summary>
            获取或重置匹配ASP.NET可执行文件的正则实例。
            </summary>
        </member>
        <member name="P:EIIP.Helper.RegexHelper.NamespaceExtension">
            <summary>
            获取或重置匹配命名空间的正则实例。
            </summary>
        </member>
        <member name="T:EIIP.Helper.RegexHelper.Expression">
            <summary>
            正则表达式。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.UploadFileConfig">
            <summary>
            匹配合法上传文件扩展名配置设置
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Script">
            <summary>
            匹配脚本标签
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Object">
            <summary>
            匹配对象标签
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Email">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.HttpURL">
            <summary>
            网址
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.NumericalValue">
            <summary>
            数值
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.IntegerValue">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.UIntegerValue">
            <summary>
            非负整数
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.NumCastValue">
            <summary>
            货币数值
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.PHONE">
            <summary>
            电话号码
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Mobile">
            <summary>
            移动手机号码
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.DATE">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.DateAndTime">
            <summary>
            日期时间
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.KeyChars">
            <summary>
            保留字符
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.InvalidFileNameChars">
            <summary>
            非法的文件名字符。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.WeakPassword">
            <summary>
            弱类型密码。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Symbol">
            <summary>
            匹配半角、全角符号的正则表达式。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.DoubleByteWord">
            <summary>
            匹配双字节字的正则表达式。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.MultiBlank">
            <summary>
            匹配多个空格。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.VarName">
            <summary>
            匹配变量签名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.ExecutableASPFileName">
            <summary>
            匹配ASP.NET可执行文件。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.Namespace">
            <summary>
            匹配命名空间。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.InsecureFileName">
            <summary>
            匹配危险（物理）文件(夹)名称。
            </summary>
        </member>
        <member name="F:EIIP.Helper.RegexHelper.Expression.HTML">
            <summary>
            匹配HTML标签
            </summary>
        </member>
        <member name="T:EIIP.Helper.SCHelper">
            <summary>
            客户端实用助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.SCHelper.OpenUrl(System.String,System.Boolean)">
            <summary>
            按照指定的方式打开 URL
            </summary>
            <param name="url">要打开的 URL 地址，必须是遵循 http(s) 协议的 URL</param>
            <param name="openew">设置是否在新窗口打开 URL，否则会自动选择当前窗口</param>
        </member>
        <member name="M:EIIP.Helper.SCHelper.OpenUrl(System.String)">
            <summary>
            打开 URL
            </summary>
            <param name="url">要打开的 URL 地址，必须是遵循 http(s) 协议的 URL</param>
        </member>
        <member name="M:EIIP.Helper.SCHelper.ConfirmPath(System.String)">
            <summary>
            确认指定的目录存在（若不存在则创建）。
            </summary>
            <param name="path">要测试的物理磁盘路径</param>
        </member>
        <member name="T:EIIP.Helper.SerializeHelper">
            <summary>
            提供对象的序列化和反序列化的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.SerializeXml(System.Object,System.Text.Encoding)">
            <summary>
            将对象序列化为 XML 格式的流数据。
            </summary>
            <param name="value">要序列化的对象</param>
            <param name="encode">XML的字符编码方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.SerializeXml(System.Object,System.String)">
            <summary>
            将对象序列化为 XML 格式的流数据。
            </summary>
            <param name="value">要序列化的对象</param>
            <param name="encode">XML的字符编码方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.SerializeXml(System.Object)">
            <summary>
            将对象序列化为 UTF-8 字符编码的XML格式数据流
            </summary>
            <param name="value">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.DeserializeXml(System.IO.Stream,System.Type)">
            <summary>
            将数据流按 XML 方式反序列化为对象
            </summary>
            <param name="s">数据流</param>
            <param name="t">对象的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.SerializeBinary(System.Object)">
            <summary>
            将对象序列化为二进制流
            </summary>
            <param name="value">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.DeserializeBinary(System.IO.Stream)">
            <summary>
            将二进制流反序列化为对象
            </summary>
            <param name="s">二进制流</param>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.DeserializeBinary(System.String)">
            <summary>
            将序列化对象的文件反序列化为对象
            </summary>
            <param name="fileName">保存序列化对象的文件</param>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.JsonSerialize``1(``0)">
            <summary>
            序列化.NET对象为JSON字符串。(日期类型为字符串)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">.NET对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.JsonDeserialize``1(System.String)">
            <summary>
            反序列化JSON字串。(日期类型为字符串)
            </summary>
            <typeparam name="T">要反序列化的类型</typeparam>
            <param name="json">JSON字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.SerializeToJson(System.Object,System.Text.StringBuilder)">
            <summary>
            转换.NET对象为JSON字符串。(日期类型为对象)
            </summary>
            <param name="o">要转换的对象</param>
            <param name="sb">输出器</param>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.DeserializeFromJson``1(System.String)">
            <summary>
            反序列化JSON字串。(日期类型为对象)
            </summary>
            <typeparam name="T">要反序列化的类型</typeparam>
            <param name="json">JSON字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.Json_Serialize(System.Object)">
            <summary>
            转换.NET对象为JSON字符串。(日期类型为对象)
            </summary>
            <param name="o">要转换的对象</param>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.Json_Deserialize``1(System.String,System.Boolean)">
            <summary>
            反序列化JSON字串。(日期类型为对象)
            </summary>
            <typeparam name="T">要反序列化的类型</typeparam>
            <param name="json">JSON字串</param>
            <param name="memberMustExist">反序列化对象时，是否检查对象的成员必须都存在。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.Json_Deserialize``1(System.String)">
            <summary>
            反序列化JSON字串。(日期类型为对象)
            </summary>
            <typeparam name="T">要反序列化的类型</typeparam>
            <param name="json">JSON字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.DeserializeFromJson(System.String,System.Type)">
            <summary>
            反序列化JSON字串。
            </summary>
            <param name="json">JSON格式字串</param>
            <param name="type">要反序列化的类型</param>
            <returns></returns>
            <example>
            string json = "[1,2,3,4,5,6]";
            object o = JavaScriptDeserializer.Deserialize(json, typeof(int[]);
            if(o != null)	foreach(int i in (int[])o) ...
            </example>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToBytes(System.Object)">
            <summary>
            将一个object对象序列化，返回一个byte[]
            </summary>
            <param name="value">能序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToObject(System.Byte[])">
            <summary>
            将一个序列化后的byte[]数组还原
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToObject``1(System.Byte[])">
            <summary>
            将一个序列化后的byte[]数组还原
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToBytes(System.Data.DataSet)">
            <summary>
            将一个DataSet对象序列化，返回一个byte[]
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToBytes(System.Data.DataTable)">
            <summary>
            将一个DataTable对象序列化，返回一个byte[]
            </summary>
            <param name="tbl"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToBytes4Tx(System.Data.DataSet)">
            <summary>
            返回一个用于传输的byte[]。
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToBytes4Tx(System.Data.DataTable)">
            <summary>
            返回一个用于传输的byte[]。
            </summary>
            <param name="tbl"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToBytes4Tx(System.Object)">
            <summary>
            返回一个用于传输的byte[]。
            </summary>
            <param name="value">能序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToDataSet4Tx(System.Byte[])">
            <summary>
            将一个用于传输的byte[]数组还原为DataSet。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToDataTable4Tx(System.Byte[])">
            <summary>
            将一个用于传输的byte[]数组还原为DataTable。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.ToObject4Tx``1(System.Byte[])">
            <summary>
            将一个用于传输的byte[]数组还原为源类型。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.Serialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将字典对象序列化为XML字串。
            </summary>
            <param name="dict">字典对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.Deserialize(System.String)">
            <summary>
            将XML字串反序列化为字典。
            </summary>
            <param name="xml">XML字串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.SerializeHelper.XML">
            <summary>
            序列化类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML.Serialize(System.Object,System.Text.Encoding,System.IO.Stream)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encode">编码</param>
            <param name="s">数据流</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML.Serialize(System.Object,System.Text.Encoding)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML.Serialize(System.Object,System.String)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML.Serialize(System.Object)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML.Deserialize(System.IO.Stream,System.Type)">
            <summary>
            反序列化对象。
            </summary>
            <param name="smIn">存放反序列化数据的流</param>
            <param name="objType">对象类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.SerializeHelper.XML`1">
            <summary>
            泛型的序列化类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML`1.Serialize(`0,System.Text.Encoding,System.IO.Stream)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encode">编码</param>
            <param name="s">数据流</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML`1.Serialize(`0,System.Text.Encoding)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML`1.Serialize(`0,System.String)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML`1.Serialize(`0)">
            <summary>
            序列化对象。
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SerializeHelper.XML`1.Deserialize(System.IO.Stream)">
            <summary>
            反序列化对象。
            </summary>
            <param name="smIn">存放反序列化数据的流</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.StringHelper">
            <summary>
            字符串实用助手类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.StringHelper.HTML_NBSP">
            <summary>
            HTML大空格。
            </summary>
        </member>
        <member name="F:EIIP.Helper.StringHelper.EmptyStrings">
            <summary>
            空字符串数组实例。
            </summary>
        </member>
        <member name="F:EIIP.Helper.StringHelper.RND">
            <summary>
            随机数发生器。
            </summary>
        </member>
        <member name="F:EIIP.Helper.StringHelper.HEXs">
            <summary>
            十六进制符号数组。
            </summary>
        </member>
        <member name="M:EIIP.Helper.StringHelper.MD5(System.String)">
            <summary>
            获取字符串的32位MD5码。
            </summary>
            <param name="source">要计算的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.MD5_16(System.String)">
            <summary>
            获取字符串的16位MD5码
            </summary>
            <param name="source">要计算的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.SHA1(System.String)">
            <summary>
            获取字符串的SHA1码
            </summary>
            <param name="source">要计算的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Hash(System.String,System.Boolean)">
            <summary>
            获取哈希码。
            </summary>
            <param name="source">源字符串</param>
            <param name="isMD5orSHA1">设置是返回MD5还是SHA1。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HashSHA1(System.String)">
            <summary>
            获取SHA1哈希码。
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HashMD5(System.String)">
            <summary>
            获取MD5哈希码。
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HashData(System.String,System.Boolean)">
            <summary>
            获取哈希码。
            </summary>
            <param name="source">源字符串</param>
            <param name="isMD5orSHA1">设置是返回MD5还是SHA1。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EatAllWhitespace(System.String)">
            <summary>
            移除指定字符串所有空白。
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Trim(System.String)">
            <summary>
            将目标字串的前后空白去掉，如为null则返回空串。
            </summary>
            <param name="target">目标字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.FirstTrimedChar(System.String)">
            <summary>
            获取字符串中首个不是空白的字符。不存在返回0
            </summary>
            <param name="target">目标字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.FirstTrimedChar(System.String,System.Char)">
            <summary>
            获取字符串中首个不是指定排除字符的字符。不存在返回0
            </summary>
            <param name="target">目标字串</param>
            <param name="trim2">要排除的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Split(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            标识指定字符串中的子字符串（它们由指定的分隔符进行分隔），然后将这些子字符串放入一个字符串数组中。  
            </summary>
            <param name="s">要分离的字符串</param>
            <param name="delimiters">分隔符</param>
            <param name="trimTokens">设置一个值，该值指示是否去除子字符串前后的空白。</param>
            <param name="ignoreEmptyTokens">设置一个值，该值指示是否忽略空的子字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HasLength(System.String)">
            <summary>
            检查指定字符串的长度是否大于零。
            </summary>
            <param name="target">要检查的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HasText(System.String)">
            <summary>
            检查指定字符串是否有内容。
            </summary>
            <param name="target">要检查的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToLower(System.String)">
            <summary>
            获取小写字符串。
            </summary>
            <param name="s">要处理的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToLower(System.Text.StringBuilder)">
            <summary>
            处理为小写字符串。
            </summary>
            <param name="sb">要处理的字符串缓存区</param>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToLower(System.Char)">
            <summary>
            获取小写字符。
            </summary>
            <param name="ch">要处理的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HashCode(System.String)">
            <summary>
            获取指定字符串的哈希码。（区分大小写。）
            </summary>
            <param name="s">要哈希的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.HashCode(System.String,System.Boolean)">
            <summary>
            获取指定字符串的哈希码。
            </summary>
            <param name="s">要哈希的字符串</param>
            <param name="ignoreCase">指示是否区分大小写。（true 指示不区分大小写。）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            从源字符串中复制指定的字符至字符数组中。
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="sourceStart">源字符串的字符起始索引</param>
            <param name="sourceEnd">源字符串的字符结束索引</param>
            <param name="destinationArray">目标字符数组</param>
            <param name="destinationStart">目标字符数组接收字符的起始索引</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.BooleanParse(System.String)">
            <summary>
            将逻辑值的指定字符串表示形式转换为它的等效 System.Boolean 值。
            </summary>
            <param name="value">包含要转换的值的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.BooleanString(System.Boolean)">
            <summary>
            将逻辑 System.Boolean 值转换为 EIIP 系统内定字符串表示形式。
            </summary>
            <param name="value">包含要转换的值的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.IncludeCount(System.String,System.Char)">
            <summary>
            返回文本中含有指定字符的个数。
            </summary>
            <param name="text">文本</param>
            <param name="c">字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.StripFirstAndLastCharacter(System.String)">
            <summary>
            移除指定字符串中第一个与最后一个字符。
            </summary>
            <param name="text">字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Surround(System.Object,System.Object)">
            <summary>
            以指定前后缀字符串包围目标字符串。
            </summary>
            <param name="fix">作为前缀与后缀的字符串</param>
            <param name="target">目标字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Surround(System.Object,System.Object,System.Object)">
            <summary>
            以指定前后缀字符串包围目标字符串。
            </summary>
            <param name="prefix">前缀字符串</param>
            <param name="target">目标字符串</param>
            <param name="suffix">后缀字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ConvertEscapedCharacters(System.String)">
            <summary>
            转义字符串中的逃逸字符(如"\t")。
            </summary>
            <param name="inputString">要转义的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.NoNull(System.String)">
            <summary>
            获取非Null字符串。
            </summary>
            <param name="s">字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Join(System.String,System.Collections.IList)">
            <summary>
            以指定连接符连接列表。
            </summary>
            <param name="s">连接符</param>
            <param name="list">要连接的列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.LoginUserEncode(EIIP.Framework.User.IUser,System.String@,EIIP.Core.Contract.LoginUser@)">
            <summary>
            加密登录用户契约。
            </summary>
            <param name="loginUser">登录用户</param>
            <param name="ds">返回数字签名</param>
            <param name="user">返回登录用户契约</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.LoginUserEncode(EIIP.Core.Contract.LoginUser,System.String@)">
            <summary>
            加密登录用户契约。
            </summary>
            <param name="loginUser">登录用户契约</param>
            <param name="ds">返回数字签名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.LoginUserDecode(System.String,System.String@)">
            <summary>
            解密登录用户契约。
            </summary>
            <param name="loginUserEncodeString">登录用户契约加密字串</param>
            <param name="error">当无法解密时，返回错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.__ds(EIIP.Core.Contract.LoginUser)">
            <summary>
            
            </summary>
            <param name="loginUser"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Encode(System.String,System.String)">
            <summary>
            以指定编码类型对字串进行编码。
            </summary>
            <param name="s">要编码的字串</param>
            <param name="encoding">字串编码的可读说明</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EncodeBytes(System.Byte[])">
            <summary>
            对字节数组进行Base64编码。
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.DecodeBytes(System.String)">
            <summary>
            从Base64编码的字串中获取字节数组。
            </summary>
            <param name="text">Base64编码的字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EncodeDownloadFileName(System.String)">
            <summary>
            编码下载的文件名，超长的文件名将会被截断。
            </summary>
            <remarks>文件名编码后长度超过155就会不能正确显示和下载</remarks>
            <param name="fileName">待编码的文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EncodeDownloadFileName4Header(System.String)">
            <summary>
            获取下载文件头部编码信息。
            </summary>
            <remarks>文件名编码后长度超过155就会不能正确显示和下载</remarks>
            <param name="fileName">待编码的文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetBitLength(System.String)">
            <summary>
            获取指定文本中占多少字节（字符编码默认为GB2312，中文两个，英文一个）。
            </summary>
            <param name="text">要计算的文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetBitLength(System.String,System.String)">
            <summary>
            获取指定文本中占多少字节（中文两个，英文一个）。
            </summary>
            <param name="text">要计算的文本</param>
            <param name="encoding">文本的字符编码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Duration(System.Int32)">
            <summary>
            获取指定分钟数对应的时间字串(X天X时X分)。
            </summary>
            <param name="m">分钟数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.InvalidFileNameFilter(System.String,System.String)">
            <summary>
            将文件名中的非法字符进行替换。
            </summary>
            <param name="fileName">含有非法字符的文件名</param>
            <param name="newChar">要替换的新字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetStrPartly(System.String,System.Int32)">
            <summary>
            获取部分字串。
            </summary>
            <param name="text">要分析长度的原始文本</param>
            <param name="len">要截获字串的长度，当为零时，不进行剪切操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetStrPartly(System.String,System.Int32,System.Boolean)">
            <summary>
            获取部分字串。
            </summary>
            <param name="text">要分析长度的原始文本</param>
            <param name="len">要截获字串的长度，当为零时，不进行剪切操作</param>
            <param name="keepNBSP">设置是否保留HTML大空格</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetStrPartly2(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            获取部分字串。
            </summary>
            <param name="text">要分析长度的原始文本</param>
            <param name="len">要截获字串的长度，当为零时，不进行剪切操作</param>
            <param name="keepNBSP">设置是否保留HTML大空格</param>
            <param name="aequilate">设置是否保持返回字符串大致等宽。设置为true时，这时 len 表示汉字宽度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetStrPartly(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            获取部分字串。保留所有HTML转义字符，但仅包括纯字母类转义格式，如＆abcdef;
            </summary>
            <param name="text">要分析长度的原始文本</param>
            <param name="len">要截获字串的长度，当为零时，不进行剪切操作</param>
            <param name="keepNBSP">设置是否保留HTML大空格</param>
            <param name="aequilate">设置是否保持返回字符串大致等宽。设置为true时，这时 len 表示汉字宽度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Drawing.Size)">
            <summary>
            获取要显示的文本尺寸。
            </summary>
            <param name="g">绘制设备</param>
            <param name="text">要显示的文本</param>
            <param name="font">文本字体</param>
            <param name="layoutSize">预在其中显示文本的区域尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetHexBytes(System.String)">
            <summary>
            获取十六进制字串的字节数组。
            </summary>
            <param name="hexString">十六进制字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ReplaceLowOrderASCIICharacters(System.String)">
            <summary>
            把一个字符串中的 低序位 ASCII 字符 替换成转义字符
            </summary>
            <param name="source">源字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.GetLowOrderASCIICharacters(System.String)">
            <summary>
            把一个字符串中的下列字符替换成 低序位 ASCII 字符
            </summary>
            <param name="input">要处理的字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Equals(System.String,System.String)">
            <summary>
            比较两个字符串是否相等。这里 null 与 string.Empty 视为相等。
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            忽略大小写比较两个字符串是否相等。这里 null 与 string.Empty 视为相等。
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EqualsIgnoreCase(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            忽略大小写比较两个字符串是否相等。
            </summary>
            <param name="s1">第一个字符串。</param>
            <param name="index1">s1 内子字符串的位置。</param>
            <param name="s2">第二个字符串。</param>
            <param name="index2">s2 内子字符串的位置。</param>
            <param name="length">要比较的子字符串中字符的最大数量。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Replace(System.String,System.Char,System.Char)">
            <summary>
            替换字串中的指定字符。
            </summary>
            <param name="s">要处理的字符串</param>
            <param name="c1">要被替换的字符</param>
            <param name="c2">新字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ReplaceMultiBlank(System.String)">
            <summary>
            替换指定字串中的多个空格为一个空格。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ReplaceMultiSeperator(System.String,System.Char)">
            <summary>
            替换指定字串中的连续多个分隔符为一个分隔符。
            </summary>
            <param name="seperator">路径分隔符。</param>
            <param name="text">要处理的路径。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.StringArrayEquals(System.String[],System.String[])">
            <summary>
            比较两个字符串数组是否相等。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.StringEndsWith(System.String,System.Char)">
            <summary>
            测试字符串是否以指定字符结尾。
            </summary>
            <param name="s">要测试的字符串</param>
            <param name="c">结尾字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.StringEndsWithIgnoreCase(System.String,System.String)">
            <summary>
            测试字符串是否以指定子字符串结尾。比较忽略大小写。
            </summary>
            <param name="s1">要测试的字符串</param>
            <param name="s2">结尾子字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.StringStartsWith(System.String,System.Char)">
            <summary>
            测试字符串是否以指定字符打头。
            </summary>
            <param name="s">要测试的字符串</param>
            <param name="c">打头字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.StringStartsWithIgnoreCase(System.String,System.String)">
            <summary>
            测试字符串是否以指定子字符串打头。比较忽略大小写。
            </summary>
            <param name="s1">要测试的字符串</param>
            <param name="s2">打头子字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Rand(System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            获取随机字符串。
            </summary>
            <param name="length">字符串的长度</param>
            <param name="includeNums">是否包含数字</param>
            <param name="includeAll">是否包含所有可能的字符，当设置为true时，忽略includeNums的设置</param>
            <param name="isVarName">设置是否是随机变量名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Rand(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            获取随机字符串。
            </summary>
            <param name="length">字符串的长度</param>
            <param name="includeNums">是否包含数字</param>
            <param name="isVarName">设置是否是随机变量名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.RandChineseString(System.Int32)">
            <summary>
            在汉字编码范围内随机创建汉字字符串。 
            </summary>
            <param name="count">需要产生的汉字个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.RandChineseString(System.Text.StringBuilder,System.Int32)">
            <summary>
            在汉字编码范围内创建随机汉字字符串。 
            </summary>
            <param name="sb">缓存区</param>
            <param name="count">需要产生的汉字个数</param>
        </member>
        <member name="M:EIIP.Helper.StringHelper.Rand(System.Int32,System.Boolean)">
            <summary>
            获取随机字符串。
            </summary>
            <param name="length">字符串的长度</param>
            <param name="includeNums">是否包含数字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.RandAll(System.Int32)">
            <summary>
            获取包含数字，大小写字母及特殊字符的随机字符串。
            </summary>
            <param name="length">字符串的长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToSBC(System.String)">
            <summary>
            半角字串转全角字串(SBC case)
            </summary>
            <param name="input">任意字符串</param>
            <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>        
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToDBC(System.String)">
            <summary>
            全角字串转半角字串(DBC case)
            </summary>
            <param name="input">任意字符串</param>
            <returns>半角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToPinYinString(System.String)">
            <summary>
            汉字转拼音缩写
            </summary>
            <param name="s">要转换的汉字字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToPinYinChar(System.String)">
            <summary>
            取单个字符的拼音声母
            </summary>
            <param name="c">要转换的单个汉字</param>
            <returns>拼音声母</returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToCHS(System.String)">
            <summary>
            将字符串转换为简体中文形式。
            </summary>
            <param name="text">包含要转换的字符的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.ToCHT(System.String)">
            <summary>
            将字符串转换为繁体中文形式。
            </summary>
            <param name="text">包含要转换的字符的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.TrimBlankLine(System.String)">
            <summary>
            返回清除了空行的字符串的副本。
            </summary>
            <param name="text">要处理的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.EncodeString4JS(System.String,System.Boolean)">
            <summary>
            将指定字符串编码为\u0000或\x00格式的JS加密字串。
            </summary>
            <param name="text">要编码的文本</param>
            <param name="singleEncode">设置是否是单一编码，即仅返回\u0000格式的JS加密字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.RadixEncode(System.String,System.Boolean)">
            <summary>
            使用算术算法编码字符串。
            </summary>
            <param name="text">要编码的文本</param>
            <param name="useHighRadix">设置是否使用高进制算法，高进制算法区分字母大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.StringHelper.RadixDecode(System.String,System.Boolean)">
            <summary>
            使用算术算法解码字符串。
            </summary>
            <param name="text">要解码的文本</param>
            <param name="useHighRadix">设置是否使用高进制算法，必须与编码参数设置一致，高进制算法区分字母大小写</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.StringHelper.GB2312">
            <summary>
            获取简体中文字符编码。
            </summary>
        </member>
        <member name="T:EIIP.Helper.TypeRegistry">
            <summary> 
            提供一个访问系统基元类型的类型注册表。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int32Alias">
            <summary>
            'int'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int32AliasVB">
            <summary>
            'Integer'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int32ArrayAlias">
            <summary>
            'int[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int32ArrayAliasVB">
            <summary>
            'Integer()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DecimalAlias">
            <summary>
            'decimal'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DecimalAliasVB">
            <summary>
            'Decimal'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DecimalArrayAlias">
            <summary>
            'decimal[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DecimalArrayAliasVB">
            <summary>
            'Decimal()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.CharAlias">
            <summary>
            'char'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.CharAliasVB">
            <summary>
            'Char'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.CharArrayAlias">
            <summary>
            'char[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.CharArrayAliasVB">
            <summary>
            'Char()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int64Alias">
            <summary>
            'long'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int64AliasVB">
            <summary>
            'Long'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int64ArrayAlias">
            <summary>
            'long[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int64ArrayAliasVB">
            <summary>
            'Long()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int16Alias">
            <summary>
            'short'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int16AliasVB">
            <summary>
            'Short'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int16ArrayAlias">
            <summary>
            'short[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.Int16ArrayAliasVB">
            <summary>
            'Short()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.UInt32Alias">
            <summary>
            'unsigned int'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.UInt64Alias">
            <summary>
            'unsigned long'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.UInt64ArrayAlias">
            <summary>
            'ulong[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.UInt32ArrayAlias">
            <summary>
            'uint[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.UInt16Alias">
            <summary>
            'unsigned short'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.UInt16ArrayAlias">
            <summary>
            'ushort[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DoubleAlias">
            <summary>
            'double'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DoubleAliasVB">
            <summary>
            'Double'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DoubleArrayAlias">
            <summary>
            'double[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DoubleArrayAliasVB">
            <summary>
            'Double()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.FloatAlias">
            <summary>
            'float'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.SingleAlias">
            <summary>
            'Single'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.FloatArrayAlias">
            <summary>
            'float[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.SingleArrayAliasVB">
            <summary>
            'Single()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DateTimeAlias">
            <summary>
            'DateTime'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DateAlias">
            <summary>
            'DateTime'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DateAliasVB">
            <summary>
            'DateTime'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DateTimeArrayAlias">
            <summary>
            'DateTime[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DateTimeArrayAliasCSharp">
            <summary>
            'DateTime[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.DateTimeArrayAliasVB">
            <summary>
            'DateTime()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.BoolAlias">
            <summary>
            'bool'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.BoolAliasVB">
            <summary>
            'Boolean'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.BoolArrayAlias">
            <summary>
            'bool[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.BoolArrayAliasVB">
            <summary>
            'Boolean()'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.StringAlias">
            <summary>
            'string'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.StringAliasVB">
            <summary>
            'string'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.StringArrayAlias">
            <summary>
            'string[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.StringArrayAliasVB">
            <summary>
            'string[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.ObjectAlias">
            <summary>
            'object'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.ObjectAliasVB">
            <summary>
            'object'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.ObjectArrayAlias">
            <summary>
            'object[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.ObjectArrayAliasVB">
            <summary>
            'object[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableInt32Alias">
            <summary>
            'int?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableInt32ArrayAlias">
            <summary>
            'int?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableDecimalAlias">
            <summary>
            'decimal?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableDecimalArrayAlias">
            <summary>
            'decimal?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableCharAlias">
            <summary>
            'char?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableCharArrayAlias">
            <summary>
            'char?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableInt64Alias">
            <summary>
            'long?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableInt64ArrayAlias">
            <summary>
            'long?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableInt16Alias">
            <summary>
            'short?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableInt16ArrayAlias">
            <summary>
            'short?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableUInt32Alias">
            <summary>
            'unsigned int?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableUInt64Alias">
            <summary>
            'unsigned long?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableUInt64ArrayAlias">
            <summary>
            'ulong?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableUInt32ArrayAlias">
            <summary>
            'uint?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableUInt16Alias">
            <summary>
            'unsigned short?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableUInt16ArrayAlias">
            <summary>
            'ushort?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableDoubleAlias">
            <summary>
            'double?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableDoubleArrayAlias">
            <summary>
            'double?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableFloatAlias">
            <summary>
            'float?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableFloatArrayAlias">
            <summary>
            'float?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableBoolAlias">
            <summary>
            'bool?'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.NullableBoolArrayAlias">
            <summary>
            'bool?[]'类型别名。
            </summary>
        </member>
        <member name="F:EIIP.Helper.TypeRegistry.m_Types">
            <summary>
            类型字典。
            </summary>
        </member>
        <member name="M:EIIP.Helper.TypeRegistry.#cctor">
            <summary>
            静态构造器。注册标准的类型别名。
            </summary>
        </member>
        <member name="M:EIIP.Helper.TypeRegistry.RegisterType(System.String,System.String)">
            <summary>
            为指定类型注册类型别名。
            </summary>
            <param name="alias">类型别名</param>
            <param name="typeName">类型</param>
        </member>
        <member name="M:EIIP.Helper.TypeRegistry.RegisterType(System.Type)">
            <summary>
            以类型名称注册类型。
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:EIIP.Helper.TypeRegistry.RegisterType(System.String,System.Type)">
            <summary>
            以指定类型别名注册类型。
            </summary>
            <param name="alias">类型别名</param>
            <param name="type">类型</param>
        </member>
        <member name="M:EIIP.Helper.TypeRegistry.ResolveType(System.String)">
            <summary>
            从标准类型字典中解析类型别名。
            </summary>
            <param name="alias">类型别名</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.WebCacheHelper">
            <summary>
            Web缓存助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTag(System.String,System.String,System.Object,System.DateTime,System.Boolean)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="expiresAt">缓存项的过期时间</param>
            <param name="nonuseMemcached">设置是否使用分布式缓存，默认同时使用进程缓存与分布式缓存</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTag(System.String,System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="validFor">缓存项失效的时间间隔</param>
            <param name="nonuseMemcached">设置是否使用分布式缓存，默认同时使用进程缓存与分布式缓存</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTag(EIIP.Type.CacheTag,System.String,System.Object,System.DateTime)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="expiresAt">缓存项的过期时间</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTag(EIIP.Type.CacheTag,System.String,System.Object,System.TimeSpan)">
            <summary>
            向缓存池中插入对象。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="validFor">缓存项失效的时间间隔</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTag(EIIP.Type.CacheTag,System.String,System.Object)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTag(System.String,System.String,System.Object,System.Boolean)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="tag">标签</param>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="nonuseMemcached">设置是否使用分布式缓存，默认同时使用进程缓存与分布式缓存</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.GetTag(System.String,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项，默认依次查询进程缓存与分布式缓存。未找到返回null。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.GetTag``1(System.String,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.GetTag(EIIP.Type.CacheTag,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.GetTag``1(EIIP.Type.CacheTag,System.String)">
            <summary>
            从分布式缓存中获取指定缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.RemoveTag(System.String,System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.RemoveTag(System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.RemoveTag(EIIP.Type.CacheTag,System.String)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.RemoveTag(EIIP.Type.CacheTag)">
            <summary>
            从分布式缓存中移除指定缓存项。成功返回true。
            </summary>
            <param name="tag">标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTagGBL(System.String,System.Object,System.DateTime)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="expiresAt">缓存项的过期时间</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTagGBL(System.String,System.Object,System.TimeSpan)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
            <param name="validFor">缓存项失效的时间间隔</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddTagGBL(System.String,System.Object)">
            <summary>
            向缓存池中插入对象(永久性)。返回值指示是否在分布式缓存中进行了缓存。
            </summary>
            <param name="key">缓存键</param>
            <param name="value">缓存数据</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.GetTagGBL(System.String)">
            <summary>
            从分布式缓存中获取指定缓存项(全局标签)。未找到返回null。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.GetTagGBL``1(System.String)">
            <summary>
            从分布式缓存中获取指定缓存项(全局标签)。未找到返回null或该类型缺省值。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.RemoveTagGBL(System.String)">
            <summary>
            从分布式缓存中移除指定缓存项(全局标签)。成功返回true。
            </summary>
            <param name="key">要移除的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.RemoveGBL">
            <summary>
            从分布式缓存中移除所有(全局标签)缓存项。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="F:EIIP.Helper.WebCacheHelper.m_MemcachedClient">
            <summary>
            分布式缓存客户端。
            </summary>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.AddLoginUserGuest(EIIP.Framework.User.UserSkeleton)">
            <summary>
            向缓存池中插入来宾登录帐户对象。
            </summary>
            <param name="user">要插入缓存中的来宾登录帐户对象。</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Add(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            向缓存池中插入对象，后者具有依赖项、过期和优先级策略以及一个委托。
            </summary>
            <param name="cacheKey">用于引用该对象的缓存键。</param>
            <param name="value">要插入缓存中的对象。</param>
            <param name="dependencies">该项的文件依赖项或缓存键依赖项。</param>
            <param name="absoluteExpiration">所插入对象将过期并被从缓存中移除的时间。</param>
            <param name="slidingExpiration">最后一次访问所插入对象时与该对象过期时之间的时间间隔。</param>
            <param name="priority">
            该对象相对于缓存中存储的其他项的成本。
            该值由缓存在退出对象时使用；具有较低成本的对象在具有较高成本的对象之前被从缓存移除。
            </param>
            <param name="onRemoveCallback">
            在从缓存中移除对象时将调用的委托。
            当从缓存中删除应用程序的对象时，可使用它来通知应用程序。
            </param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Get(EIIP.Framework.User.UserSkeleton,System.Type)">
            <summary>
            从缓存池中检索缓存项。返回检索到的缓存项，未找到则返回null。
            </summary>
            <param name="user">登录用户实例</param>
            <param name="t">关联类型</param>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Get``1(EIIP.Framework.User.UserSkeleton,System.Type)">
            <summary>
            从缓存池中检索缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="user">登录用户实例</param>
            <param name="t">关联类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Get(System.String)">
            <summary>
            从缓存池中检索缓存项。返回检索到的缓存项，未找到则返回null。
            </summary>
            <param name="cacheKey">要检索的缓存项的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Get``1(System.String)">
            <summary>
            从缓存池中检索缓存项。未找到返回null或该类型缺省值。
            </summary>
            <param name="key">要获取的缓存项对应的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Remove(System.String)">
            <summary>
            从缓存池中移除缓存项。返回移除的缓存项，未找到则返回null。
            </summary>
            <param name="cacheKey">要检索的缓存项的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.IsNotInternal(System.String)">
            <summary>
            仅移除用户缓存的项。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WebCacheHelper.Clear">
            <summary>
            从缓存池中移除所有缓存项。(仅当前ASP.NET应用池的缓存)
            </summary>
        </member>
        <member name="P:EIIP.Helper.WebCacheHelper.MemcachedClient">
            <summary>
            获取分布式缓存客户端。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WebCacheHelper.MemcachedEnable">
            <summary>
            获取一个值，该值指示分布式缓存是否启用。
            </summary>
        </member>
        <member name="T:EIIP.Helper.WorkflowHelper">
            <summary>
            工作流辅助类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.KEY_INPUTS">
            <summary>
            工作流表单输入值集键。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.WFENTRY_NAME">
            <summary>
            工作流表单实例名称。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.CALLER_NAME">
            <summary>
            调用者关键字。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.CREATOR_NAME">
            <summary>
            发起者关键字。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.SYSTEMHOLD">
            <summary>
            系统最大保留的工作流定义ID。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.PERMISSION_KEY">
            <summary>
            许可级别字串，序号0为小写序列，1为大写序列。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.m_Lock">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.m_ConditionUtilitys">
            <summary>
            条件工具类信息数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.m_ValidatorUtilitys">
            <summary>
            验证工具类信息数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper.m_FunctionUtilitys">
            <summary>
            函数工具类信息数组。
            </summary>
        </member>
        <member name="F:EIIP.Helper.WorkflowHelper._Lock_ConditionPlugins">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.RegisterConditionPlugin(EIIP.Type.PluginInfo)">
            <summary>
            注册条件插件。
            </summary>
            <param name="pluginInfo">条件插件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.RegisterValidatorPlugin(EIIP.Type.PluginInfo)">
            <summary>
            注册验证器插件。
            </summary>
            <param name="pluginInfo">验证器插件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.RegisterFunctionPlugin(EIIP.Type.PluginInfo)">
            <summary>
            注册函数插件。
            </summary>
            <param name="pluginInfo">函数插件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.PermissionsKey(System.Int32)">
            <summary>
            获取许可级别。
            </summary>
            <param name="appro">许可值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.PermissionsKeyName(System.Int32)">
            <summary>
            获取许可级别名称。
            </summary>
            <param name="appro">许可值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.GetAppro(System.String)">
            <summary>
            获取许可级别对应的值。
            </summary>
            <param name="permissionKey">许可级别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.GetApproAll(System.String)">
            <summary>
            获取许可级别对应的值(已排序)。
            </summary>
            <param name="permissionKeys">许可级别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.GetAppro(System.Char)">
            <summary>
            获取许可级别对应的值。
            </summary>
            <param name="permissionKey">许可级别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.GetListText(System.String,System.Int32@)">
            <summary>
            获取下拉选择项内容。
            </summary>
            <param name="input">输入</param>
            <param name="count">合法选择项数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.OwnerIncludeCaller(System.String,System.String@)">
            <summary>
            过滤拥有者信息，并返回一个值，该值指示拥有者是否包含了调用者。
            </summary>
            <param name="owner">拥有者</param>
            <param name="roles">排除了调用者的角色ID字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.OwnerIncludeCreator(System.String,System.String@)">
            <summary>
            过滤拥有者信息，并返回一个值，该值指示拥有者是否包含了调用者。
            </summary>
            <param name="owner">拥有者</param>
            <param name="roles">排除了调用者的角色ID字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.WorkflowHelper.OwnerInclude(System.String,System.String,System.String@)">
            <summary>
            过滤拥有者信息，并返回一个值，该值指示拥有者是否包含了调用者。
            </summary>
            <param name="owner">拥有者</param>
            <param name="keyName">要测试是否内含的转义字串</param>
            <param name="roles">排除了调用者的角色ID字串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.ConditionPlugins">
            <summary>
            获取条件插件集。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.ValidatorPlugins">
            <summary>
            获取验证器插件集。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.FunctionPlugins">
            <summary>
            获取函数插件集。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.ConditionDictionary">
            <summary>
            获取条件类字典（供显示绑定）。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.ValidatorDictionary">
            <summary>
            获取验证类字典（供显示绑定）。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.FunctionDictionary">
            <summary>
            获取函数类字典（供显示绑定）。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.PermissionsDictionary">
            <summary>
            获取步骤许可级别字典（供显示绑定）。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.FieldTypeDictionary">
            <summary>
            获取可用表单字段类型字典（供显示绑定）。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.LogicOperatorDictionary">
            <summary>
            获取逻辑运符符类型字典（供显示绑定）。
            </summary>
        </member>
        <member name="P:EIIP.Helper.WorkflowHelper.LogicOperatorBaseDictionary">
            <summary>
            获取常用的逻辑运符符类型字典（供显示绑定）。
            </summary>
        </member>
        <member name="T:EIIP.Helper.XMLFile">
            <summary>
            XML文档文件类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.XMLFile.m_XmlFile">
            <summary>
            XML文件路径。
            </summary>
        </member>
        <member name="F:EIIP.Helper.XMLFile.m_XmlFilePathType">
            <summary>
            XML文件路径类型。
            </summary>
        </member>
        <member name="F:EIIP.Helper.XMLFile.m_XmlDoc">
            <summary>
            XML文档。
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLFile.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="tempXmlFilePath"></param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.#ctor(System.String,EIIP.Helper.XMLFile.FilePathType)">
            <summary>
            构造函数
            </summary>
            <param name="tempXmlFilePath">文件路径</param>
            <param name="tempXmlFilePathType">类型</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.GetXmlDocument">
            <summary>
            获取XmlDocument实体类
            </summary>    
             <returns>指定的XML描述文件的一个xmldocument实例</returns>
        </member>
        <member name="M:EIIP.Helper.XMLFile.GetXmlNodeAttributeValue(System.String,System.String)">
            <summary>
            功能:
            读取指定节点的指定属性值    
            </summary>
            <param name="strNode">节点名称</param>
            <param name="strAttribute">此节点的属性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLFile.GetXmlNodeValue(System.String)">
            <summary>
            功能:
            读取指定节点的值    
            </summary>
            <param name="strNode">节点名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLFile.SetXmlNodeValue(System.String,System.String)">
            <summary>
            设置节点值
            </summary>
            <param name="xmlNodePath">节点路径</param>
            <param name="xmlNodeValue">节点值</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.SetXmlNodeAttributeValue(System.String,System.String,System.String)">
            <summary>
            设置节点的属性值    
            </summary>
            <param name="xmlNodePath">节点名称</param>
            <param name="xmlNodeAttribute">属性名称</param>
            <param name="xmlNodeAttributeValue">属性值</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.GetXmlRoot">
            <summary>
            获取XML文件的根元素
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLFile.AddParentNode(System.String)">
            <summary>
            在根节点下添加父节点
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLFile.AddChildNode(System.String,System.String)">
            <summary>
            向一个已经存在的父节点中插入一个子节点
            </summary>
            <param name="parentNodePath">父节点</param>
            <param name="childnodename">字节点名称</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.AddAttribute(System.String,System.String)">
            <summary>
            向一个节点添加属性
            </summary>
            <param name="NodePath">节点路径</param>
            <param name="NodeAttribute">属性名</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.privateAddAttribute(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="NodePath"></param>
            <param name="NodeAttribute"></param>
            <param name="NodeAttributeValue"></param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.AddAttribute(System.String,System.String,System.String)">
            <summary>
             向一个节点添加属性,并付值
            </summary>
            <param name="NodePath">节点</param>
            <param name="NodeAttribute">属性名</param>
            <param name="NodeAttributeValue">属性值</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.DeleteAttribute(System.String,System.String)">
            <summary>
            删除节点的一个属性
            </summary>
            <param name="NodePath">节点所在的xpath表达式</param>
            <param name="NodeAttribute">属性名</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.DeleteAttribute(System.String,System.String,System.String)">
            <summary>
            删除节点,当其属性值等于给定的值时
            </summary>
            <param name="NodePath">节点所在的xpath表达式</param>
            <param name="NodeAttribute">属性</param>
            <param name="NodeAttributeValue">值</param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.DeleteXmlNode(System.String)">
            <summary>
            删除节点
            </summary>
            <param name="tempXmlNode"></param>
            <remarks></remarks>
        </member>
        <member name="M:EIIP.Helper.XMLFile.nodeInsertEvent(System.Object,System.Xml.XmlNodeChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.nodeDeleteEvent(System.Object,System.Xml.XmlNodeChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.nodeUpdateEvent(System.Object,System.Xml.XmlNodeChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="src"></param>
            <param name="args"></param>
        </member>
        <member name="M:EIIP.Helper.XMLFile.SaveXmlDocument">
            <summary>
            功能: 
            保存XML文件
            
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLFile.SaveXmlDocument(System.String)">
            <summary>
            功能: 
            保存XML文件    
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLFile.Savexml(System.String)">
            <summary>
            
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="P:EIIP.Helper.XMLFile.XmlFile">
            <summary>
            获取或设置XML文件路径。
            </summary>
        </member>
        <member name="P:EIIP.Helper.XMLFile.XmlFilePathType">
            <summary>
            设置XML文件路径类型。
            </summary>
        </member>
        <member name="T:EIIP.Helper.XMLFile.FilePathType">
            <summary>
            文件所在路径类型
            </summary>
        </member>
        <member name="F:EIIP.Helper.XMLFile.FilePathType.AbsolutePath">
            <summary>
            绝对路径
            </summary>
        </member>
        <member name="F:EIIP.Helper.XMLFile.FilePathType.VirtualPath">
            <summary>
            虚拟路径
            </summary>
        </member>
        <member name="T:EIIP.Helper.XMLHelper">
            <summary>
            XML 实用工具类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.Serialize``1(``0,System.Type[])">
            <summary>
            将数据契约对象序列化为XML字串。
            </summary>
            <typeparam name="T">数据契约类型</typeparam>
            <param name="instance">数据契约对象</param>
            <param name="konwnTypes">数据契约已知类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.Deserialize``1(System.String,System.Type[])">
            <summary>
            将XML字串反序列化为数据契约对象。
            </summary>
            <typeparam name="T">数据契约对象</typeparam>
            <param name="xmlDoc">XML字串</param>
            <param name="konwnTypes">数据契约已知类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.Serialize``1(``0,System.String)">
            <summary>
            将指定实例序列化后存储为物理文件。（反序列化使用XmlParser.ParseFile方法）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">实例对象</param>
            <param name="fileName">物理文件</param>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.AppendElement(System.Xml.XmlNode,System.String)">
            <summary>
            将新节点添加到指定节点的子节点列表的末尾。
            </summary>
            <param name="node">节点</param>
            <param name="newElementName">新节点的指定名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.AppendElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            将新节点添加到指定节点的子节点列表的末尾。
            </summary>
            <param name="node">节点</param>
            <param name="newElementName">新节点的指定名称。</param>
            <param name="innerValue">新节点内的文本。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.CreateAttribute(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            创建新属性
            </summary>
            <param name="xmlDocument">XML文档。</param>
            <param name="name">属性名称。</param>
            <param name="value">属性值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置节点的属性
            </summary>
            <param name="node">节点</param>
            <param name="attributeName">属性名称。</param>
            <param name="attributeValue">属性值。</param>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetChildElement(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定名称的第一个子节点。
            </summary>
            <param name="parent">父节点</param>
            <param name="childName">子节点名，XPath 表达式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetChildElements(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定名称的所有子节点。
            </summary>
            <param name="parent">父节点</param>
            <param name="childName">子节点名，XPath 表达式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetChildText(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定名称的子节点文本内容。或该子节点不存在则返回null。
            </summary>
            <param name="parent">父节点</param>
            <param name="childName">子节点名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetText(System.Xml.XmlNode)">
            <summary>
            获取指定节点的文本内容。
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.Encode(System.String)">
            <summary>
            编码XML。
            </summary>
            <param name="str">要编码的字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.WriteIndent(System.IO.TextWriter,System.Int32)">
            <summary>
            输出缩进。
            </summary>
            <param name="writer">输出流</param>
            <param name="indent">缩进量</param>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetAttribute(System.Xml.XmlNode,System.String)">
            <summary>
            获取指定节点属性值。不存在则返回空字串。
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取指定节点属性值。不存在则返回默认值。
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名称</param>
            <param name="defaultValue">当无值时需返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetNodeValue(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取指定子节点值。
            </summary>
            <param name="parentNode">父节点</param>
            <param name="nodeXPath">查询路径</param>
            <param name="defaultValue">当无值时需返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.Encode(System.Object)">
            <summary>
            对指定对象进行XML编码。
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.GetElementText(System.Xml.XmlNode)">
            <summary>
            获取XML节点文本内容。不存在返回null。
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.RemoveXMLSpacer(System.String)">
            <summary>
            移除XML标签间的空格。
            </summary>
            <param name="content">含XML标签的内容</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.XMLHelper.XmlParser">
            <summary>
            将一段xml字符串反序列化为某种类实例
            </summary>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.XmlParser.Parse``1(System.String)">
            <summary>
            将一段xml字符串反序列化为T类实例。如果字符串为空则返回null。
            </summary>
            <typeparam name="T">要反序列化成的类型</typeparam>
            <param name="configXml">xml字符串</param>
            <returns>T的实例</returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.XmlParser.GetXmlText(System.Object)">
            <summary>
            将指定对象序列化为Xml字符串。
            </summary>
            <param name="o">对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.XMLHelper.XmlParser.ParseFile``1(System.String)">
            <summary>
            将指定xml文件反序列化为T类实例。
            </summary>
            <typeparam name="T">要反序列化成的类型</typeparam>
            <param name="filePath">xml文件路径</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.Info">
            <summary>
            基本信息类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.Company">
            <summary>
            公司名称
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.Name">
            <summary>
            产品代号
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.CurrentVerCode">
            <summary>
            当前版本代号
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.IDCard">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.Salt_ConfigPWD">
            <summary>
            用于系统配置文件密码
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.SaltData">
            <summary>
            Salt
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.DefaultKeyData">
            <summary>
            系统内置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.KeyData2">
            <summary>
            备用数据1
            </summary>
        </member>
        <member name="F:EIIP.Framework.Info.PublicKeyData">
            <summary>
            公共数据
            </summary>
        </member>
        <member name="P:EIIP.Framework.Info.Salt">
            <summary>
            Salt
            </summary>
        </member>
        <member name="P:EIIP.Framework.Info.DefaultKey">
            <summary>
            内置数据
            </summary>
        </member>
        <member name="P:EIIP.Framework.Info.Key2">
            <summary>
            获取备用数据
            </summary>
        </member>
        <member name="P:EIIP.Framework.Info.PublicKey">
            <summary>
            获取公钥
            </summary>
        </member>
        <member name="T:EIIP.Framework.VersionInfo">
            <summary>
            产品版本信息
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.WCF">
            <summary>
            WCF 版本
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.CRM">
            <summary>
            CRM 版本
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.Client">
            <summary>
            客户端版本。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.ERP">
            <summary>
            ERP版本。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.Framework">
            <summary>
            框架版本。
            框架版本号变更即停止对原全线产品(包含动态插件)的补丁性支持。
            影响EIIP.Extend.dll、EIIP.Library.dll、EIIP.Remote.dll(已整合取消)及EIIP.*.*.dll等
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.OA">
            <summary>
            OA 版本
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.WEB">
            <summary>
            WEB 版本
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.WAP">
            <summary>
            WAP 版本
            </summary>
        </member>
        <member name="F:EIIP.Framework.VersionInfo.SHOP">
            <summary>
            SHOP 版本
            </summary>
        </member>
        <member name="M:EIIP.Framework.VersionInfo.ToString">
            <summary>
            产品版本信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VersionInfo.ToString(EIIP.ProductClass)">
            <summary>
            产品版本信息
            </summary>
            <param name="pc"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ILocatIPAddress">
            <summary>
            用于获取IP地址的接口。
            </summary>
        </member>
        <member name="M:EIIP.ILocatIPAddress.Locat(System.String)">
            <summary>
            获取指定IP地址的物理位置。
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.IPermission">
            <summary>
            该接口被用于实现权限许可验证。
            </summary>
        </member>
        <member name="M:EIIP.IPermission.GetUserRightKey(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取用户对特定资源的所有操作权限
            </summary>
            <param name="userID">用户ID</param>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <returns>权限值</returns>
        </member>
        <member name="M:EIIP.IPermission.GetUserResIDs(System.Int32,System.Int32)">
            <summary>
            获取用户对特定资源的所有被许可访问项。
            </summary>
            <param name="userID">用户ID</param>
            <param name="resTypeID">资源类型ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IPermission.GetRightEntity(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取用户对特定资源的操作权限验证实体。
            </summary>
            <param name="userID">用户ID</param>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IPermission.RejectMask">
            <summary>
            获取拒绝掩码。
            </summary>
        </member>
        <member name="T:EIIP.IProductInfo">
            <summary>
            产品信息接口。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.ProductType">
            <summary>
            获取产品类型。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.LicenceCount">
            <summary>
            获取产品用户许可数。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.PermissionValue">
            <summary>
            获取产品许可值。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.UnRegister">
            <summary>
            获取一个值，该值指示是否未注册。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.Name">
            <summary>
            获取或设置产品名称。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.FrameTitle">
            <summary>
            获取或设置产品UI窗体标题栏内容。
            </summary>
        </member>
        <member name="P:EIIP.IProductInfo.StyleIndex">
            <summary>
            获取或设置默认产品样式序号。
            </summary>
        </member>
        <member name="T:EIIP.IRightEntity">
            <summary>
            该接口被用于实现权限许可验证实体。
            </summary>
        </member>
        <member name="P:EIIP.IRightEntity.Right">
            <summary>
            获取权限验证器。
            </summary>
        </member>
        <member name="T:EIIP.Framework.ISystemInfoBase">
            <summary>
            基本系统信息接口。
            </summary>
        </member>
        <member name="P:EIIP.Framework.ISystemInfoBase.ID">
            <summary>
            标识
            </summary>
        </member>
        <member name="P:EIIP.Framework.ISystemInfoBase.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="T:EIIP.IThreadRunnable">
            <summary>
            线程运行接口。
            </summary>
        </member>
        <member name="M:EIIP.IThreadRunnable.Run">
            <summary>
            运行线程。
            </summary>
        </member>
        <member name="T:EIIP.IO.AbstractResource">
            <summary>
            实现资源接口的资源基类。
            </summary>
        </member>
        <member name="T:EIIP.IO.IResource">
            <summary>
            访问资源(数据库、文件、内存)的通用接口。
            </summary>
        </member>
        <member name="T:EIIP.IO.IInputStreamSource">
            <summary>
            输入流的简单接口。
            </summary>
        </member>
        <member name="P:EIIP.IO.IInputStreamSource.InputStream">
            <summary>
            获取资源的输入流。
            </summary>
        </member>
        <member name="M:EIIP.IO.IResource.CreateRelative(System.String)">
            <summary>
            获取指定路径的资源。
            </summary>
            <param name="relativePath">相对路径</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IO.IResource.IsOpen">
            <summary>
            获取一个值，该值指示资源是否正在处理已打开的输入流。
            </summary>
        </member>
        <member name="P:EIIP.IO.IResource.Uri">
            <summary>
            获取资源的Uri。
            </summary>
        </member>
        <member name="P:EIIP.IO.IResource.File">
            <summary>
            获取资源的 FileInfo。
            </summary>
        </member>
        <member name="P:EIIP.IO.IResource.Description">
            <summary>
            获取当前资源的描述。
            </summary>
        </member>
        <member name="P:EIIP.IO.IResource.Exists">
            <summary>
            检查资源的实际物理存在性。比如说，为本地文件则返回true，为内存则返回false。
            </summary>
        </member>
        <member name="F:EIIP.IO.AbstractResource.DefaultBasePathPlaceHolder">
            <summary>
            表示根路径的默认特定字符。
            </summary>
        </member>
        <member name="F:EIIP.IO.AbstractResource.m_Protocol">
            <summary>
            协议。
            </summary>
        </member>
        <member name="F:EIIP.IO.AbstractResource.m_BasePathPlaceHolder">
            <summary>
            基准根路径。
            </summary>
        </member>
        <member name="M:EIIP.IO.AbstractResource.#ctor">
            <summary>
            实例化资源基类。
            </summary>
        </member>
        <member name="M:EIIP.IO.AbstractResource.#ctor(System.String)">
            <summary>
            实例化资源基类。
            </summary>
            <param name="resourceName">资源名称</param>
        </member>
        <member name="M:EIIP.IO.AbstractResource.GetResourceNameWithoutProtocol(System.String)">
            <summary>
            获取不带协议的资源名称。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.ResolveResourceNameWithoutProtocol(System.String)">
            <summary>
            基于基准根路径解析不带协议的资源名称。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.ResolveBasePathPlaceHolder(System.String,System.String)">
            <summary>
            基于基准根路径解析资源名称。
            </summary>
            <param name="resourceName">资源名称</param>
            <param name="basePathPlaceHolder">基准根路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.ToString">
            <summary>
            获取资源描述。
            </summary>
        </member>
        <member name="M:EIIP.IO.AbstractResource.Equals(System.Object)">
            <summary>
            检查与指定对象是否相等。
            </summary>
            <param name="obj">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.GetHashCode">
            <summary>
            获取资源哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.CreateResourceInstance(System.String)">
            <summary>
            创建指定资源的新实例。工厂方法。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.GetResourceLoader">
            <summary>
            获取可配置的资源加载器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.IsRelativeResource(System.String)">
            <summary>
            获取一个值，该值指示是否是相对的名称资源。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.CreateRelative(System.String)">
            <summary>
            获取相对的资源名称的资源。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.CalculateResourcePath(System.String)">
            <summary>
            整理相对路径。
            </summary>
            <param name="relativePath">相对路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.AbstractResource.UpWalks(System.String)">
            <summary>
            延指定的路径向上，返回要退后的级数。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IO.AbstractResource.BasePathPlaceHolder">
            <summary>
            获取或设置基准根路径。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.InputStream">
            <summary>
            获取资源的输入流。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.Description">
            <summary>
            获取当前资源的描述。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.Protocol">
            <summary>
            获取资源关联的协议(如果没有会返回null)。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.IsOpen">
            <summary>
            获取一个值，该值指示资源是否正在处理已打开的输入流。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.Uri">
            <summary>
            获取资源的Uri。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.File">
            <summary>
            获取资源的 FileInfo。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.Exists">
            <summary>
            检查资源的实际物理存在性。比如说，为本地文件则返回true，为内存则返回false。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.SupportsRelativeResources">
            <summary>
            获取一个值，该值指示资源是否支持相对的名称。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.RootLocation">
            <summary>
            获取资源的应用程序根位置。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.ResourcePath">
            <summary>
            获取资源的当前路径。
            </summary>
        </member>
        <member name="P:EIIP.IO.AbstractResource.PathSeparatorChars">
            <summary>
            获取合法路径分隔符。
            </summary>
        </member>
        <member name="T:EIIP.IO.AssemblyResource">
            <summary>
            程序集资源。
            </summary>
            <remarks>
            assembly://<i>assemblyName</i>/<i>namespace</i>/<i>resourceName</i>
            </remarks>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_Resources">
            <summary>
            资源数组。
            </summary>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_ResourceName">
            <summary>
            资源名称。
            </summary>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_FullResourceName">
            <summary>
            资源完全限定名称。
            </summary>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_ResourceNamespace">
            <summary>
            资源命名空间。
            </summary>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_ResourceAssemblyName">
            <summary>
            资源程序集名称。
            </summary>
        </member>
        <member name="F:EIIP.IO.AssemblyResource.m_Log">
            <summary>
            日志记录器。
            </summary>
        </member>
        <member name="M:EIIP.IO.AssemblyResource.#ctor(System.String)">
            <summary>
            实例化程序集资源。
            </summary>
            <param name="resourceName">资源名称</param>
        </member>
        <member name="M:EIIP.IO.AssemblyResource.IsRelativeResource(System.String)">
            <summary>
            获取一个值，该值指示是否是相对的名称资源。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.InputStream">
            <summary>
            获取资源的输入流。
            </summary>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.Exists">
            <summary>
            检查资源的存在性。
            </summary>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.SupportsRelativeResources">
            <summary>
            获取一个值，该值指示资源是否支持相对的名称。
            </summary>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.RootLocation">
            <summary>
            获取资源程序集名称。
            </summary>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.ResourcePath">
            <summary>
            获取资源命名空间。
            </summary>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.PathSeparatorChars">
            <summary>
            获取合法路径分隔符。
            </summary>
        </member>
        <member name="P:EIIP.IO.AssemblyResource.Description">
            <summary>
            获取资源描述。
            </summary>
        </member>
        <member name="T:EIIP.IO.ConfigurableResourceLoader">
            <summary>
            可配置的资源加载器类。
            </summary>
        </member>
        <member name="T:EIIP.IO.IResourceLoader">
            <summary>
            描述能被加载的资源对象接口。
            </summary>
        </member>
        <member name="M:EIIP.IO.IResourceLoader.GetResource(System.String)">
            <summary>
            获取资源处理接口。
            </summary>
            <param name="location">资源位置</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.IO.ConfigurableResourceLoader.ProtocolSeparator">
            <summary>
            资源协议分隔符。
            </summary>
        </member>
        <member name="F:EIIP.IO.ConfigurableResourceLoader.m_DefaultProtocol">
            <summary>
            缺省资源协议。
            </summary>
        </member>
        <member name="M:EIIP.IO.ConfigurableResourceLoader.#ctor">
            <summary>
            实例化可配置的资源加载器。
            </summary>
        </member>
        <member name="M:EIIP.IO.ConfigurableResourceLoader.#ctor(System.String)">
            <summary>
            实例化可配置的资源加载器。
            </summary>
            <param name="defaultProtocol">缺省资源协议。</param>
        </member>
        <member name="M:EIIP.IO.ConfigurableResourceLoader.GetResource(System.String)">
            <summary>
            获取资源处理接口。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.ConfigurableResourceLoader.HasProtocol(System.String)">
            <summary>
            检查协议处理器。
            </summary>
            <param name="resourceName">协议名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.ConfigurableResourceLoader.GetProtocol(System.String)">
            <summary>
            从资源名称中解析出资源协议。不存在则返回null。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IO.ConfigurableResourceLoader.DefaultResourceProtocol">
            <summary>
            获取或设置缺省资源协议。
            </summary>
        </member>
        <member name="T:EIIP.IO.FileSystemResource">
            <summary>
            文件系统资源。
            </summary>
            <example>
            若应用程序运行目录为<c>C:\App\</c>
            <code escaped="true">
                strings.txt              C:\App\strings.txt
                ../strings.txt           C:\strings.txt
                ~/strings.txt            C:\App\strings.txt
                ~/../strings.txt         C:\strings.txt
                file://~/strings.txt     C:\App\strings.txt
                file://~/../strings.txt  C:\strings.txt
            </code>
            </example>
        </member>
        <member name="F:EIIP.IO.FileSystemResource.m_FileHandle">
            <summary>
            文件资源。
            </summary>
        </member>
        <member name="F:EIIP.IO.FileSystemResource.m_RootLocation">
            <summary>
            应用程序根位置。
            </summary>
        </member>
        <member name="F:EIIP.IO.FileSystemResource.m_ResourcePath">
            <summary>
            文件资源路径。
            </summary>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.#ctor">
            <summary>
            实例化文件系统资源。
            </summary>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.#ctor(System.String)">
            <summary>
            实例化文件系统资源。
            </summary>
            <param name="resourceName">资源名称</param>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.#ctor(System.String,System.Boolean)">
            <summary>
            实例化文件系统资源。
            </summary>
            <param name="resourceName">资源名称</param>
            <param name="suppressInitialize">设置是否需要避免进行初始化操作</param>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.Initialize(System.String)">
            <summary>
            初始化文件系统资源实例。
            </summary>
            <param name="resourceName">资源名称</param>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.ResolveFileHandle(System.String)">
            <summary>
            解析文件处理器。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.ResolveRootLocation(System.String)">
            <summary>
            解析相对于根的位置。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.ResolveResourcePath(System.String)">
            <summary>
            解析（相对于根的）资源路径。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.ResolveBasePathPlaceHolder(System.String,System.String)">
            <summary>
            解析基准根路径。
            </summary>
            <param name="resourceName">资源名称</param>
            <param name="basePathPlaceHolder">基准根路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.FileSystemResource.IsRelativeResource(System.String)">
            <summary>
            获取一个值，该值指示是否是相对的名称资源。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.File">
            <summary>
            获取文件资源。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.SupportsRelativeResources">
            <summary>
            获取一个值，该值指示资源是否支持相对的名称。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.RootLocation">
            <summary>
            获取文件资源根位置。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.ResourcePath">
            <summary>
            获取文件资源当前路径。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.PathSeparatorChars">
            <summary>
            获取合法路径分隔符。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.InputStream">
            <summary>
            获取资源的输入流。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.Description">
            <summary>
            获取当前资源的描述。
            </summary>
        </member>
        <member name="P:EIIP.IO.FileSystemResource.Uri">
            <summary>
            获取资源的Uri。
            </summary>
        </member>
        <member name="T:EIIP.IO.ResourceHandlerRegistry">
            <summary>
            资源协议处理器注册类。
            </summary>
        </member>
        <member name="F:EIIP.IO.ResourceHandlerRegistry.m_ResourceHandlers">
            <summary>
            资源协议处理器池。
            </summary>
        </member>
        <member name="M:EIIP.IO.ResourceHandlerRegistry.#cctor">
            <summary>
            注册标准的 资源协议处理器。
            </summary>
        </member>
        <member name="M:EIIP.IO.ResourceHandlerRegistry.GetResourceHandler(System.String)">
            <summary>
            获取指定协议的资源处理器。
            </summary>
            <param name="protocolName">协议名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.ResourceHandlerRegistry.IsHandlerRegistered(System.String)">
            <summary>
            获取一个值，该值指示目标协议是否已注册。
            </summary>
            <param name="protocolName">协议名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IO.ResourceHandlerRegistry.RegisterResourceHandler(System.String,System.String)">
            <summary>
            注册资源协议处理器。
            </summary>
            <param name="protocolName">协议名称</param>
            <param name="handlerTypeName">协议处理器类型名称</param>
        </member>
        <member name="M:EIIP.IO.ResourceHandlerRegistry.RegisterResourceHandler(System.String,System.Type)">
            <summary>
            注册资源协议处理器。
            </summary>
            <param name="protocolName">协议名称</param>
            <param name="handlerType">协议处理器类型</param>
        </member>
        <member name="M:EIIP.IO.ResourceHandlerRegistry.GetResourceConstructor(System.Type)">
            <summary>
            获取指定资源协议处理器类型的构造器。
            </summary>
            <param name="handlerType">资源协议处理器类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.IO.UrlResource">
            <summary>
            URL资源。
            </summary>
        </member>
        <member name="F:EIIP.IO.UrlResource.m_Uri">
            <summary>
            资源的Uri。
            </summary>
        </member>
        <member name="F:EIIP.IO.UrlResource.m_RootLocation">
            <summary>
            应用程序根位置。
            </summary>
        </member>
        <member name="F:EIIP.IO.UrlResource.m_ResourcePath">
            <summary>
            URL资源路径。
            </summary>
        </member>
        <member name="M:EIIP.IO.UrlResource.#ctor(System.String)">
            <summary>
            实例化URL资源。
            </summary>
            <param name="resourceName">资源名称</param>
        </member>
        <member name="M:EIIP.IO.UrlResource.IsRelativeResource(System.String)">
            <summary>
            获取一个值，该值指示是否是相对的名称资源。
            </summary>
            <param name="resourceName">资源名称</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IO.UrlResource.InputStream">
            <summary>
            获取资源的输入流。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.Uri">
            <summary>
            获取资源的Uri。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.File">
            <summary>
            获取资源的 FileInfo。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.SupportsRelativeResources">
            <summary>
            获取一个值，该值指示资源是否支持相对的名称。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.RootLocation">
            <summary>
            获取URL资源根位置。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.ResourcePath">
            <summary>
            获取URL资源当前路径。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.PathSeparatorChars">
            <summary>
            获取合法路径分隔符。
            </summary>
        </member>
        <member name="P:EIIP.IO.UrlResource.Description">
            <summary>
            获取当前资源的描述。
            </summary>
        </member>
        <member name="T:EIIP.Framework.IPScanner">
            <summary>
            IP地址查询器。
            </summary>
        </member>
        <member name="M:EIIP.Framework.IPScanner.#ctor">
            <summary>
            实例化IP地址查询器。
            </summary>
        </member>
        <member name="M:EIIP.Framework.IPScanner.ScanIP(System.String)">
            <summary>
            搜索匹配数据
            </summary>
            <param name="ip">IP地址字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.IPScanner.ScanIP(System.Int64)">
            <summary>
            搜索匹配数据
            </summary>
            <param name="ipValue">IP地址值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.IPScanner.IPValue(System.String)">
            <summary>
            获取指定IP地址串(如192.168.0.1)的IP数值值
            </summary>
            <param name="ip">IP地址串,如192.168.0.1</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.IPScanner.IPString(System.Int64)">
            <summary>
            将IP数字值转换成字串。
            </summary>
            <param name="ipValue">IP数字值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.IPScanner.IPString(System.Int64,System.Text.StringBuilder)">
            <summary>
            将IP数字值转换成字串。
            </summary>
            <param name="ipValue">IP数字值</param>
            <param name="writer">结果输出</param>
        </member>
        <member name="M:EIIP.Framework.IPScanner.ParseStartIPValue(System.IO.FileStream,System.Int64)">
            <summary>
            解析起始IP范围
            </summary>
            <param name="fs">文件流</param>
            <param name="recNO">记录号</param>
        </member>
        <member name="M:EIIP.Framework.IPScanner.ParseEndIPValue(System.IO.FileStream)">
            <summary>
            解析结束IP
            </summary>
            <param name="fs">文件流</param>
        </member>
        <member name="M:EIIP.Framework.IPScanner.GetFlagStr(System.IO.FileStream,System.Int64)">
            <summary>
            解析并返回国家/区域字符串
            </summary>
            <param name="fs">文件流</param>
            <param name="offSet">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.IPScanner.IPLocation(System.String)">
            <summary>
            获取IP地址
            </summary>
            <param name="domainName"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.IPScanner.IP">
            <summary>
            设置IP
            </summary>
        </member>
        <member name="P:EIIP.Framework.IPScanner.SectBegin">
            <summary>
            获取查询的IP段起始值。
            </summary>
        </member>
        <member name="P:EIIP.Framework.IPScanner.SectEnd">
            <summary>
            获取查询的IP段结束值。
            </summary>
        </member>
        <member name="P:EIIP.Framework.IPScanner.Country">
            <summary>
            获取国家信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.IPScanner.Local">
            <summary>
            获取区域信息。
            </summary>
        </member>
        <member name="T:EIIP.Json.Converters.DateTimeConverter">
            <summary>
            日期时间转换器。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonConverter">
            <summary>
            JSON 转换器基类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonConverter.WriteJson(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            输出指定对象。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要转换的对象</param>
        </member>
        <member name="M:EIIP.Json.JsonConverter.ReadJson(EIIP.Json.JsonReader,System.Type)">
            <summary>
            读取指定类型的对象。
            </summary>
            <param name="reader">输入流</param>
            <param name="objectType">返回对象的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            判断是否能转换指定类型。
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Converters.DateTimeConverter.WriteJson(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            输出DateTime。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要转换的DateTime</param>
        </member>
        <member name="M:EIIP.Json.Converters.DateTimeConverter.ReadJson(EIIP.Json.JsonReader,System.Type)">
            <summary>
            读取DateTime。
            </summary>
            <param name="reader">输入流</param>
            <param name="objectType">可设为 null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Converters.DateTimeConverter.CanConvert(System.Type)">
            <summary>
            判断是否能转换DateTime。
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Converters.HtmlColorConverter">
            <summary>
            HTML颜色转换器。
            </summary>
        </member>
        <member name="M:EIIP.Json.Converters.HtmlColorConverter.WriteJson(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            输出HTML颜色。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要转换的 Color 对象颜色</param>
        </member>
        <member name="M:EIIP.Json.Converters.HtmlColorConverter.CanConvert(System.Type)">
            <summary>
            判断是否能转换 Color 类型。
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Converters.XmlNodeConverter">
            <summary>
            处理XML节点类型的JSON转换器。
            </summary>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.WriteJson(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            输出JSON格式。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要输出的 XmlNode</param>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.GetPropertyName(System.Xml.XmlNode)">
            <summary>
            获取 XmlNode 节点的属性名称。
            </summary>
            <param name="node">XmlNode 节点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(EIIP.Json.JsonWriter,System.Xml.XmlNode)">
            <summary>
            序列化指定节点树。
            </summary>
            <param name="writer">输出流</param>
            <param name="node">XmlNode 节点</param>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.SerializeNode(EIIP.Json.JsonWriter,System.Xml.XmlNode,System.Boolean)">
            <summary>
            序列化 XmlNode 节点。
            </summary>
            <param name="writer">输出流</param>
            <param name="node">XmlNode 节点</param>
            <param name="writePropertyName">指示是否输出属性名称</param>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.ReadJson(EIIP.Json.JsonReader,System.Type)">
            <summary>
            读取JSON对象。
            </summary>
            <param name="reader">输入流</param>
            <param name="objectType">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.DeserializeValue(EIIP.Json.JsonReader,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlNode)">
            <summary>
            反序列化
            </summary>
            <param name="reader">输入流</param>
            <param name="document">XML 文档</param>
            <param name="manager"></param>
            <param name="propertyName"></param>
            <param name="currentNode"></param>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.DeserializeNode(EIIP.Json.JsonReader,System.Xml.XmlDocument,System.Xml.XmlNamespaceManager,System.Xml.XmlNode)">
            <summary>
            反序列化。
            </summary>
            <param name="reader"></param>
            <param name="document"></param>
            <param name="manager"></param>
            <param name="currentNode"></param>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            检查属性名称是否为命名空间属性。
            </summary>
            <param name="attributeName">要检查的属性名称</param>
            <param name="prefix">属性名称的前缀，不是命名空间则是一个空串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.GetPrefix(System.String)">
            <summary>
            获取限定名称的前缀。
            </summary>
            <param name="qualifiedName">限定名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            确定是否能转换指定类型。
            </summary>
            <param name="valueType">要测试的值类型</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Identifier">
            <summary>
            标识符类。
            </summary>
        </member>
        <member name="F:EIIP.Json.Identifier._name">
            <summary>
            标识符名称。
            </summary>
        </member>
        <member name="M:EIIP.Json.Identifier.#ctor(System.String)">
            <summary>
            实例化指定标识符实例。
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:EIIP.Json.Identifier.IsAsciiLetter(System.Char)">
            <summary>
            测试指定字符是否是 ASCII 字母字符。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.Equals(EIIP.Json.Identifier)">
            <summary>
            测试相等。
            </summary>
            <param name="identifer">标识符实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.Equals(EIIP.Json.Identifier,EIIP.Json.Identifier)">
            <summary>
            比较相等。
            </summary>
            <param name="a">标识符实例一</param>
            <param name="b">标识符实例二</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.GetHashCode">
            <summary>
            返回实例的哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.ToString">
            <summary>
            返回标识符名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.op_Equality(EIIP.Json.Identifier,EIIP.Json.Identifier)">
            <summary>
            重载相等操作符。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Identifier.op_Inequality(EIIP.Json.Identifier,EIIP.Json.Identifier)">
            <summary>
            重载不等操作符。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Json.Identifier.Name">
            <summary>
            获取标识符名称。
            </summary>
        </member>
        <member name="T:EIIP.Json.JavaScriptArray">
            <summary>
            提供一个JavaScript数组的类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptArray.#ctor">
            <summary>
            实例化缺省JavaScript数组。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptArray.#ctor(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            实例化指定JavaScript数组。
            </summary>
            <param name="collection">提供元素的集合</param>
        </member>
        <member name="M:EIIP.Json.JavaScriptArray.#ctor(System.Int32)">
            <summary>
            实例化指定JavaScript数组。
            </summary>
            <param name="capacity">最初可以存储的元素数。</param>
        </member>
        <member name="T:EIIP.Json.JavaScriptConstructor">
            <summary>
            提供一个JavaScript构造器类。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConstructor._name">
            <summary>
            JavaScript构造器名称。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConstructor._parameters">
            <summary>
            JavaScript参数集。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptConstructor.#ctor(System.String,EIIP.Json.JavaScriptParameters)">
            <summary>
            实例化指定JavaScript构造器。
            </summary>
            <param name="name">JavaScript构造器名称</param>
            <param name="parameters">JavaScript参数集</param>
        </member>
        <member name="M:EIIP.Json.JavaScriptConstructor.ToString">
            <summary>
            返回JavaScript构造器信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Json.JavaScriptConstructor.Parameters">
            <summary>
            获取JavaScript参数集。
            </summary>
        </member>
        <member name="P:EIIP.Json.JavaScriptConstructor.Name">
            <summary>
            获取JavaScript构造器名称。
            </summary>
        </member>
        <member name="T:EIIP.Json.JavaScriptConvert">
            <summary>
            JavaScript类型转换器类。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConvert.True">
            <summary>
            JavaScript 布尔量字串。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConvert.False">
            <summary>
            JavaScript 布尔量字串。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConvert.Null">
            <summary>
            JavaScript null字串。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConvert.Undefined">
            <summary>
            JavaScript undefined字串。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConvert.InitialJavaScriptDateTicks">
            <summary>
            JS的初始化日期时间的刻度数。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptConvert.MinimumJavaScriptDate">
            <summary>
            JS的最小日期时间。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.DateTime)">
            <summary>
            转换指定日期时间为JS格式。
            </summary>
            <param name="value">日期时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ConvertDateTimeToJavaScriptTicks(System.DateTime)">
            <summary>
            转换指定日期时间为JS时间刻度数。
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ConvertJavaScriptTicksToDateTime(System.Int64)">
            <summary>
            转换指定JS时间刻度数为日期时间。
            </summary>
            <param name="javaScriptTicks"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Boolean)">
            <summary>
            转换指定布尔量为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Char)">
            <summary>
            转换指定字符为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Enum)">
            <summary>
            转换指定枚举为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Int32)">
            <summary>
            转换指定整型值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Int16)">
            <summary>
            转换指定短整型值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.UInt16)">
            <summary>
            转换指定无符号短整型值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.UInt32)">
            <summary>
            转换指定无符号整型值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Int64)">
            <summary>
            转换指定长整型值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.UInt64)">
            <summary>
            转换指定无符号长整型值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Single)">
            <summary>
            转换指定浮点值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Double)">
            <summary>
            转换指定双精度值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Byte)">
            <summary>
            转换指定字节值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.SByte)">
            <summary>
            转换指定有符号字节值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Decimal)">
            <summary>
            转换指定小数为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Guid)">
            <summary>
            转换指定GUID值为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.String)">
            <summary>
            转换指定字符串为JS格式。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.String,System.Char)">
            <summary>
            转换指定字符串为JS格式。
            </summary>
            <param name="value">要转换的值。</param>
            <param name="delimter">字符串分隔符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.ToString(System.Object)">
            <summary>
            转换指定对象为JS格式。
            </summary>
            <param name="value">要转换的对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.SerializeObject(System.Object)">
            <summary>
            序列化指定对象。
            </summary>
            <param name="value">要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.SerializeObject(System.Object,EIIP.Json.JsonConverter[])">
            <summary>
            序列化指定对象。
            </summary>
            <param name="value">要序列化的对象</param>
            <param name="converters">要使用的JSON转换器集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject(System.String)">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <param name="value">要反序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <param name="value">要反序列化的对象</param>
            <param name="type">要反序列化的对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject``1(System.String)">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <typeparam name="T">要反序列化的对象泛型类型</typeparam>
            <param name="value">要反序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject``1(System.String,System.Boolean,EIIP.Json.JsonConverter[])">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <typeparam name="T">要反序列化的对象泛型类型</typeparam>
            <param name="value">要反序列化的对象</param>
            <param name="memberMustExist">反序列化对象时，是否检查对象的成员必须都存在。</param>
            <param name="converters">反序列化要使用的JSON转换器集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject``1(System.String,EIIP.Json.JsonConverter[])">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <typeparam name="T">要反序列化的对象泛型类型</typeparam>
            <param name="value">要反序列化的对象</param>
            <param name="converters">反序列化要使用的JSON转换器集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type,EIIP.Json.JsonConverter[])">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <param name="value">要反序列化的对象</param>
            <param name="type">要反序列化的对象类型</param>
            <param name="converters">反序列化要使用的JSON转换器集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeserializeObject(System.String,System.Type,System.Boolean,EIIP.Json.JsonConverter[])">
            <summary>
            反序列化指定对象至一个JSON对象。
            </summary>
            <param name="value">要反序列化的对象</param>
            <param name="type">要反序列化的对象类型</param>
            <param name="memberMustExist">反序列化对象时，是否检查对象的成员必须都存在。</param>
            <param name="converters">反序列化要使用的JSON转换器集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            序列化指定 XML 节点。
            </summary>
            <param name="node">XML 节点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JavaScriptConvert.DeerializeXmlNode(System.String)">
            <summary>
            反序列化指定字串。
            </summary>
            <param name="value">字串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.JavaScriptObject">
            <summary>
            提供一个 JavaScript 对象字典类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptObject.#ctor">
            <summary>
            实例化缺省 JavaScript 对象字典。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptObject.#ctor(EIIP.Json.JavaScriptObject)">
            <summary>
            实例化指定 JavaScript 对象字典。
            </summary>
            <param name="javaScriptObject">提供元素的 JavaScript 对象字典。</param>
        </member>
        <member name="T:EIIP.Json.JavaScriptParameters">
            <summary>
            提供一个JavaScript参数的只读集合类。
            </summary>
        </member>
        <member name="F:EIIP.Json.JavaScriptParameters.Empty">
            <summary>
            空的JavaScript参数的只读集合。
            </summary>
        </member>
        <member name="M:EIIP.Json.JavaScriptParameters.#ctor(System.Collections.Generic.IList{System.Object})">
            <summary>
            实例化指JavaScript参数的只读集合。
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:EIIP.Json.JsonConverterCollection">
            <summary>
            JSON转换器集合类。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonIgnoreAttribute">
            <summary>
            忽略JSON特性类。是一个标记特性。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonPropertyAttribute">
            <summary>
            JSON属性特性类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            实例化JSON属性特性。
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:EIIP.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            获取或设置JSON属性。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonReader">
            <summary>
            提供一个快速的，未缓冲的，向前的访问序列化JSON数据的阅读器。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonReader._token">
            <summary>
            当前JSON标识类型。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonReader._quoteChar">
            <summary>
            JavaScript引号字符。合法的引号字符是 ' 或 "。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonReader.#ctor(System.IO.TextReader)">
            <summary>
            初始化指定序列化JSON数据的阅读器。
            </summary>
            <param name="reader">包含XML数据的文本阅读器</param>
        </member>
        <member name="M:EIIP.Json.JsonReader.Read">
            <summary>
            从流中读取下一JSON标识。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonReader.Close">
            <summary>
            变更状态为 Close。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonReader.QuoteChar">
            <summary>
            获取JavaScript引号字符。合法的引号字符是 ' 或 "。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonReader.TokenType">
            <summary>
            获取当前JSON标识类型。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonReader.Value">
            <summary>
            获取当前JSON标识的文本值。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonReader.ValueType">
            <summary>
            获取当前JSON标识的CLR类型。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonReader.State">
            <summary>
            指示一种状态。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonReaderException">
            <summary>
            当读取JSON文本时抛出的异常类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonReaderException.#ctor">
            <summary>
            实例化缺省JSON阅读器异常。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            实例化指定JSON阅读器异常。
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:EIIP.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            实例化指定JSON阅读器异常。
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">内联异常</param>
        </member>
        <member name="T:EIIP.Json.JsonSerializationException">
            <summary>
            JSON序列化异常类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonSerializationException.#ctor">
            <summary>
            实例化缺省JSON序列化异常。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            实例化指定JSON序列化异常。
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:EIIP.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            实例化指定JSON序列化异常。
            </summary>
            <param name="message">异常信息</param>
            <param name="innerException">内联异常</param>
        </member>
        <member name="T:EIIP.Json.JsonSerializer">
            <summary>
            提供JSON的序列化与反序列化功能的类。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.#ctor">
            <summary>
            实例化缺省实例。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            序列化指定对象。
            </summary>
            <param name="textWriter">输出流</param>
            <param name="value">要序列化的对象</param>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.Serialize(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            序列化指定对象。
            </summary>
            <param name="jsonWriter">输出流</param>
            <param name="value">要序列化的对象</param>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.SerializeValue(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            序列化指定值。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要序列化的对象</param>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.HasMatchingConverter(System.Type,EIIP.Json.JsonConverter@)">
            <summary>
            匹配指定类型的JSON转换器。成攻返回true。
            </summary>
            <param name="type"></param>
            <param name="matchingConverter">匹配的JSON转换器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.WriteMemberInfoProperty(EIIP.Json.JsonWriter,System.Object,System.Reflection.MemberInfo,System.String)">
            <summary>
            输出成员信息属性。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要输出的对象</param>
            <param name="member">成员信息</param>
            <param name="propertyName">属性名称</param>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.SerializeObject(EIIP.Json.JsonWriter,System.Object)">
            <summary>
            序列化指定对象。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要序列化的对象</param>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.Deserialize(EIIP.Json.JsonReader)">
            <summary>
            从措定JSON阅读器中反序列化对象。
            </summary>
            <param name="reader">JSON阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.Deserialize(EIIP.Json.JsonReader,System.Type)">
            <summary>
            从措定JSON阅读器中反序列化对象。
            </summary>
            <param name="reader">JSON阅读器</param>
            <param name="objectType">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonSerializer.Deserialize(EIIP.Json.JsonReader,System.Type,System.Boolean)">
            <summary>
            从措定JSON阅读器中反序列化对象。
            </summary>
            <param name="reader">JSON阅读器</param>
            <param name="objectType">对象类型</param>
            <param name="memberMustExist">反序列化对象时，是否检查对象的成员必须都存在。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            获取或设置循环引用是如何处理的。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonSerializer.Converters">
            <summary>
            获取JSON转换器。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonWriter">
            <summary>
            提供一个快速的，未缓冲的，向前的产生JSON数据的编写器。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter.stateArray">
            <summary>
            基于当前写入对象的状态，提供新状态的一个数组。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._serializeStack">
            <summary>
            序列化堆栈。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._formatting">
            <summary>
            输出的格式。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._indentChar">
            <summary>
            缩进字符。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._indentation">
            <summary>
            缩进大小。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._quoteChar">
            <summary>
            JavaScript引号字符
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._quoteName">
            <summary>
            指示是否用JavaScript引号包装属性名称。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonWriter._currentState">
            <summary>
            当前状态。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.#ctor(System.IO.TextWriter)">
            <summary>
            实例化使用指定文本编写器的JSON编写器实例。
            </summary>
            <param name="textWriter">文本编写器</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.Push(EIIP.Json.JsonType)">
            <summary>
            将指定JSON类型入栈。
            </summary>
            <param name="value">JSON类型</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.Pop">
            <summary>
            出栈。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonWriter.Peek">
            <summary>
            获取当前位置的JSON类型。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonWriter.Flush">
            <summary>
            清理当前编写器的所有缓冲区，使所有缓冲数据写入基础设备。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.Close">
            <summary>
            关闭当前编写器并释放任何与该编写器关联的系统资源。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteStartObject">
            <summary>
            写入JSON对象的开始标志。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteEndObject">
            <summary>
            输出JSON对象的结束标志。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteStartArray">
            <summary>
            输出JSON数组的起始标记。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteEndArray">
            <summary>
            输出JSON数组的结束标记。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            输出JSON对象的属性键值对。
            </summary>
            <param name="name">属性名称</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteEnd">
            <summary>
            输出当前JSON对象或数组的结束标志。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteEnd(EIIP.Json.JsonType)">
            <summary>
            输出指定JSON类型的结束标志。
            </summary>
            <param name="type">JSON类型</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.AutoCompleteAll">
            <summary>
            自动关闭所有对象。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.GetTypeForCloseToken(EIIP.Json.JsonToken)">
            <summary>
            获取指定标识要关闭的类型。
            </summary>
            <param name="token">标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonWriter.GetCloseTokenForType(EIIP.Json.JsonType)">
            <summary>
            获取指定类型的关闭标识。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteIndent">
            <summary>
            输出缩进。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.AutoComplete(EIIP.Json.JsonToken)">
            <summary>
            自动完成指定的JSON标识。
            </summary>
            <param name="tokenBeingWritten">JSON标识</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValueInternal(System.String,EIIP.Json.JsonToken)">
            <summary>
            输出值。
            </summary>
            <param name="value">要输出的值</param>
            <param name="token">要完成的JSON标识</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteNull">
            <summary>
            输出 null 值。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteUndefined">
            <summary>
            输出 undefined 值。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            输出原始 JavaScript 文本。
            </summary>
            <param name="javaScript">要输出的 JavaScript 文本</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            输出整型值。
            </summary>
            <param name="value">整型值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            输出无符号整型值。
            </summary>
            <param name="value">无符号整型值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            输出长整型值。
            </summary>
            <param name="value">长整型值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            输出无符号长整型值。
            </summary>
            <param name="value">无符号长整型值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            输出单精度值。
            </summary>
            <param name="value">单精度值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            输出双精度值。
            </summary>
            <param name="value">双精度值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            输出布尔量。
            </summary>
            <param name="value">布尔量。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            输出布尔量。
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            输出短整型值。
            </summary>
            <param name="value">短整型值。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            输出字符。
            </summary>
            <param name="value">字符。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            输出字节。
            </summary>
            <param name="value">字节。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            输出有符号字节。
            </summary>
            <param name="value">有符号字节。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            输出小数。
            </summary>
            <param name="value">小数。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            输出日期时间。
            </summary>
            <param name="value">日期时间。</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            输出注释。
            </summary>
            <param name="text">要注释的文本</param>
        </member>
        <member name="M:EIIP.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            输出空白字符串。
            </summary>
            <param name="ws">空白字符串</param>
        </member>
        <member name="P:EIIP.Json.JsonWriter.SerializeStack">
            <summary>
            获取序列化堆栈。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonWriter.WriteState">
            <summary>
            获取编写器状态。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonWriter.Formatting">
            <summary>
            获取或设置输出的格式。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonWriter.Indentation">
            <summary>
            获取或设置缩进大小。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonWriter.QuoteChar">
            <summary>
            获取或设置JavaScript引号字符。合法的引号字符是 ' 或 "。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonWriter.IndentChar">
            <summary>
            获取或设置缩进字符。
            </summary>
        </member>
        <member name="P:EIIP.Json.JsonWriter.QuoteName">
            <summary>
            获取或设置一个值，该值指示是否用JavaScript引号包装属性名称。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonWriter.State">
            <summary>
            指示一种状态。
            </summary>
        </member>
        <member name="T:EIIP.Json.MemberMapping">
            <summary>
            成员信息映射结构。
            </summary>
        </member>
        <member name="M:EIIP.Json.MemberMapping.#ctor(System.String,System.Reflection.MemberInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            实例化成员映射结构。
            </summary>
            <param name="mappingName">映射名称</param>
            <param name="member">成员信息实例</param>
            <param name="ignored">设置是否可忽略</param>
            <param name="readable">设置是否可读</param>
            <param name="writable">设置是否可写</param>
        </member>
        <member name="P:EIIP.Json.MemberMapping.MappingName">
            <summary>
            获取映射名称。
            </summary>
        </member>
        <member name="P:EIIP.Json.MemberMapping.Member">
            <summary>
            获取成员信息实例
            </summary>
        </member>
        <member name="P:EIIP.Json.MemberMapping.Ignored">
            <summary>
            获取一个值，该值指示是否可忽略
            </summary>
        </member>
        <member name="P:EIIP.Json.MemberMapping.Readable">
            <summary>
            获取一个值，该值指示是否可读
            </summary>
        </member>
        <member name="P:EIIP.Json.MemberMapping.Writable">
            <summary>
            获取一个值，该值指示是否可写
            </summary>
        </member>
        <member name="T:EIIP.Json.MemberMappingCollection">
            <summary>
            成员信息映射集合类。
            </summary>
        </member>
        <member name="M:EIIP.Json.MemberMappingCollection.GetKeyForItem(EIIP.Json.MemberMapping)">
            <summary>
            从指定元素提取键。
            </summary>
            <param name="item">从中提取键的元素。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.MemberMappingCollection.AddMapping(EIIP.Json.MemberMapping)">
            <summary>
            添加成员信息映射实例。
            </summary>
            <param name="memberMapping">成员信息映射实例</param>
        </member>
        <member name="T:EIIP.Json.ReferenceLoopHandling">
            <summary>
            指定引用循环处理的某一JSON编写器选项。
            </summary>
        </member>
        <member name="F:EIIP.Json.ReferenceLoopHandling.Error">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="F:EIIP.Json.ReferenceLoopHandling.Ignore">
            <summary>
            忽略，未序列化
            </summary>
        </member>
        <member name="F:EIIP.Json.ReferenceLoopHandling.Serialize">
            <summary>
            序列化
            </summary>
        </member>
        <member name="T:EIIP.Json.StringBuffer">
            <summary>
            字符串缓冲存类。
            </summary>
        </member>
        <member name="M:EIIP.Json.StringBuffer.#ctor">
            <summary>
            实例化缺省字符串缓冲存。
            </summary>
        </member>
        <member name="M:EIIP.Json.StringBuffer.#ctor(System.Int32)">
            <summary>
            实例化指定尺寸的字符串缓冲存。
            </summary>
            <param name="initalSize">初始尺寸</param>
        </member>
        <member name="M:EIIP.Json.StringBuffer.Append(System.Char)">
            <summary>
            追加字符。
            </summary>
            <param name="value">字符</param>
        </member>
        <member name="M:EIIP.Json.StringBuffer.Clear">
            <summary>
            清空缓存。
            </summary>
        </member>
        <member name="M:EIIP.Json.StringBuffer.EnsureSize(System.Int32)">
            <summary>
            扩大缓存区。过多调用性能会有一定损失。
            </summary>
            <param name="appendLength"></param>
        </member>
        <member name="M:EIIP.Json.StringBuffer.ToString">
            <summary>
            输出字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Json.StringBuffer.Position">
            <summary>
            获取或设置位置。
            </summary>
        </member>
        <member name="T:EIIP.Json.Formatting">
            <summary>
            指定 JsonWriter 的格式化选项。
            </summary>
        </member>
        <member name="F:EIIP.Json.Formatting.None">
            <summary>
            未指定应用格式。这是缺省选项。
            </summary>
        </member>
        <member name="F:EIIP.Json.Formatting.Indented">
            <summary>
            缩进格式。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonToken">
            <summary>
            指示JSON的某一标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.None">
            <summary>
            当JSON阅读器的 Read() 方法被调用后，由JSON阅读器返回的标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.StartObject">
            <summary>
            一个对象的起始标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.StartArray">
            <summary>
            一个数组的起始标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.PropertyName">
            <summary>
            一个对象的属性名称。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Comment">
            <summary>
            注释。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Integer">
            <summary>
            整型。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Float">
            <summary>
            浮点数。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Boolean">
            <summary>
            布尔量。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Null">
            <summary>
            null值。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Undefined">
            <summary>
            未定义标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.EndObject">
            <summary>
            一个对象的结束标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.EndArray">
            <summary>
            一个数组的结束标识。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Constructor">
            <summary>
            一个JavaScript对象的构造器。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonToken.Date">
            <summary>
            日期。
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonType">
            <summary>
            指示 JSON 的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonType.Object">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonType.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:EIIP.Json.JsonType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:EIIP.Json.JsonWriterException">
            <summary>
            定义JSON编写器的异常。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriterException.#ctor">
            <summary>
            实例化缺省JSON编写器的异常。
            </summary>
        </member>
        <member name="M:EIIP.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            实例化JSON编写器的异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:EIIP.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            实例化JSON编写器的异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="innerException">内置异常</param>
        </member>
        <member name="T:EIIP.Json.WriteState">
            <summary>
            指定JSON书写器的某一状态。
            </summary>
        </member>
        <member name="F:EIIP.Json.WriteState.Error">
            <summary>
            一个异常被抛出，并且JSON书写器处于不可用状态。
            可以使用 JsonWriter.Close() 方法设置JSON书写器状态为 Close。
            调用任何其它方法均会引发 InvalidOperationException 异常抛出。
            </summary>
        </member>
        <member name="F:EIIP.Json.WriteState.Closed">
            <summary>
            调用 JsonWriter.Close() 方法后设置的状态。
            </summary>
        </member>
        <member name="F:EIIP.Json.WriteState.Object">
            <summary>
            一个对象被写入。
            </summary>
        </member>
        <member name="F:EIIP.Json.WriteState.Array">
            <summary>
            一个数组被写入。
            </summary>
        </member>
        <member name="F:EIIP.Json.WriteState.Property">
            <summary>
            一个属性被写入。
            </summary>
        </member>
        <member name="F:EIIP.Json.WriteState.Start">
            <summary>
            当还未调用写入方法时的状态。
            </summary>
        </member>
        <member name="T:EIIP.Json.Utilities.CollectionUtils">
            <summary>
            集合实用工具类。
            </summary>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.CreateList``1(``0[])">
            <summary>
            创建泛型列表。
            </summary>
            <typeparam name="T">泛型列表类型</typeparam>
            <param name="values">一个集合，其元素被复制到新列表中。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            判断指定集合是否为空。
            </summary>
            <param name="collection">要测试的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            判断指定泛型集合是否为空。
            </summary>
            <param name="collection">要测试的泛型集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.IsNullOrEmptyOrDefault``1(System.Collections.Generic.IList{``0})">
            <summary>
            判断指定泛型列表是否为空。
            </summary>
            <param name="list">要测试的泛型列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            返回泛型列表的片段。
            </summary>
            <param name="list">泛型列表</param>
            <param name="start">起始索引</param>
            <param name="end">结束索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.Slice``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            返回泛型列表的片段。
            </summary>
            <param name="list">泛型列表</param>
            <param name="start">起始索引</param>
            <param name="end">结束索引</param>
            <param name="step">步进</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.GroupBy``2(System.Collections.Generic.ICollection{``1},EIIP.Json.Utilities.Func{``1,``0})">
            <summary>
            返回由指定函数聚合的字典。
            </summary>
            <param name="source">要聚合的源集合</param>
            <param name="keySelector">聚合函数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将指定集合成员加入指定泛型列表中。
            </summary>
            <param name="initial">泛型列表</param>
            <param name="collection">要添加元素所在的集合</param>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.Distinct``1(System.Collections.Generic.List{``0})">
            <summary>
            获取集合中单一值列表。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.Flatten``1(System.Collections.Generic.IList{``0}[])">
            <summary>
            展平列表集。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="lists">列表集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.Recurse``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}},System.Int32,System.Collections.Generic.Dictionary{System.Int32,``0},System.Collections.Generic.List{System.Collections.Generic.List{``0}})">
            <summary>
            递归处理
            </summary>
            <typeparam name="T"></typeparam>
            <param name="global"></param>
            <param name="current"></param>
            <param name="currentSet"></param>
            <param name="flattenedResult"></param>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.CreateList``1(System.Collections.ICollection)">
            <summary>
            创建指定集合所有元素的列表。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="collection">集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.ListEquals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            比较两个列表是否相等。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.TryGetSingleItem``1(System.Collections.Generic.IList{``0},``0@)">
            <summary>
            获取列表中的单一项。成功返回true。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="value">返回的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.TryGetSingleItem``1(System.Collections.Generic.IList{``0},System.Boolean,``0@)">
            <summary>
            获取列表中的单一项。成功返回true。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="returnDefaultIfEmpty">设置当列表为空时，是否返回缺省值</param>
            <param name="value">返回的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.GetSingleItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取列表中的单一项。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.GetSingleItem``1(System.Collections.Generic.IList{``0},System.Boolean)">
            <summary>
            获取列表中的单一项。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">列表</param>
            <param name="returnDefaultIfEmpty">设置当列表为空时，是否返回缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.Minus``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            从源列表中排除目标列表。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="list">源列表</param>
            <param name="minus">目标列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.CreateArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            创建数组。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.CreateGenericList(System.Type)">
            <summary>
            创建泛型列表。
            </summary>
            <param name="listType">列表类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.IsListType(System.Type)">
            <summary>
            判断指定类型是否为列表类型。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.CollectionUtils.CreateAndPopulateList(System.Type,System.Action{System.Collections.IList})">
            <summary>
            创建并组装列表。
            </summary>
            <param name="listType">列表类型</param>
            <param name="populateList">组装委托</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.JavaScriptUtils">
            <summary>
            JavaScript实用工具类。
            </summary>
        </member>
        <member name="M:EIIP.Json.Utilities.JavaScriptUtils.GetCallbackEventFunction(System.Web.UI.Page,System.Web.UI.Control)">
            <summary>
            获取JavaScript回调事件函数。
            </summary>
            <param name="page">调用页面实例</param>
            <param name="control">调用控件实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.JavaScriptUtils.GetCallbackEventFunction(System.Web.UI.Page,System.Web.UI.Control,System.String)">
            <summary>
            获取JavaScript回调事件函数。
            </summary>
            <param name="page">调用页面实例</param>
            <param name="control">调用控件实例</param>
            <param name="argument">
            从客户端脚本传递给服务器端的一个参数 
            System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String) 方法。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.JavaScriptUtils.WriteEscapedJavaScriptChar(System.IO.TextWriter,System.Char,System.Char)">
            <summary>
            输出avaScript转义字符。
            </summary>
            <param name="writer">输出流</param>
            <param name="c">要转义的字符</param>
            <param name="delimiter">分隔符</param>
        </member>
        <member name="M:EIIP.Json.Utilities.JavaScriptUtils.WriteEscapedJavaScriptString(System.IO.TextWriter,System.String,System.Char,System.Boolean)">
            <summary>
            输出JavaScript转义文本。
            </summary>
            <param name="writer">输出流</param>
            <param name="value">要输出的文本</param>
            <param name="delimiter">分隔符</param>
            <param name="appendDelimiters">指示是否添加分隔符</param>
        </member>
        <member name="M:EIIP.Json.Utilities.JavaScriptUtils.ToEscapedJavaScriptString(System.String)">
            <summary>
            输出JavaScript转义文本。
            </summary>
            <param name="value">要输出的文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.JavaScriptUtils.ToEscapedJavaScriptString(System.String,System.Char,System.Boolean)">
            <summary>
            输出JavaScript转义文本。
            </summary>
            <param name="value">要输出的文本</param>
            <param name="delimiter">分隔符</param>
            <param name="appendDelimiters">指示是否添加分隔符</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.MathUtils">
            <summary>
            数学工具类。
            </summary>
        </member>
        <member name="F:EIIP.Helper.MathUtils.HexDigits">
            <summary>
            十六进制（大写）字符数组。
            </summary>
        </member>
        <member name="M:EIIP.Helper.MathUtils.HexToInt(System.Char)">
            <summary>
            将指定十六进制字符转换为十进制数。
            </summary>
            <param name="h">十六进制字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IntToHex(System.Int32)">
            <summary>
            将指定十进制数转换为十六进制字符。
            </summary>
            <param name="n">十进制数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.BinToInt(System.String)">
            <summary>
            将指定的二进制字符串转换为等效的 8 位无符号整数。
            </summary>
            <param name="s">要转换的二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IntToBin(System.Byte,System.Byte)">
            <summary>
            将 8 位无符号整数的值转换为其等效的的二进制字符串表示形式。
            </summary>
            <param name="b"> 8 位无符号整数</param>
            <param name="size">返回的二进制字符串的长度，若未达到指定长度则以'0'填充补齐</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.HexToInt(System.String)">
            <summary>
            将指定的十六进制字符串转换为等效的 8 位无符号整数数组。
            </summary>
            <param name="s">要转换的十六进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IntToHex(System.Byte[])">
            <summary>
            将 8 位无符号整数数组转换为其等效的十六进制字符串表示形式。
            </summary>
            <param name="bytes"> 8 位无符号整数数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IntToHex(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将 8 位无符号整数数组转换为其等效的十六进制字符串表示形式。
            </summary>
            <param name="bytes"> 8 位无符号整数数组</param>
            <param name="index">数组中要转换的起始索引</param>
            <param name="count">要转换的字节数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IntToHex(System.Byte)">
            <summary>
            将 8 位无符号整数转换为其等效的十六进制字符串表示形式。
            </summary>
            <param name="b">8 位无符号整数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IsHexDigit(System.Char)">
            <summary>
            测试指定的字符是否是十六进制字符。
            </summary>
            <param name="c">要测试的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IsHexString(System.String)">
            <summary>
            判断指定的字符串是否是十六进制字符串。
            </summary>
            <param name="s">要测试的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IsHexPrefix(System.String)">
            <summary>
            测试是否是十六进制前缀（0x）
            </summary>
            <param name="str">包含十六进制的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.MathUtils.IsHexPrefix(System.String,System.Int32)">
            <summary>
            测试是否是十六进制前缀（0x）
            </summary>
            <param name="str">包含十六进制的字符串。</param>
            <param name="i">十六进制前缀的起始索引</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.Action">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Json.Utilities.Creator`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.Func`2">
            <summary>
            
            </summary>
            <typeparam name="A0"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.Func`3">
            <summary>
            
            </summary>
            <typeparam name="A0"></typeparam>
            <typeparam name="A1"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.Func`4">
            <summary>
            
            </summary>
            <typeparam name="A0"></typeparam>
            <typeparam name="A1"></typeparam>
            <typeparam name="A2"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.MiscellaneousUtils">
            <summary>
            实用工具类。
            </summary>
        </member>
        <member name="M:EIIP.Json.Utilities.MiscellaneousUtils.TryAction``1(EIIP.Json.Utilities.Creator{``0},``0@)">
            <summary>
            尝试实例化指定类型对象。
            </summary>
            <typeparam name="T">要实例化的泛型类型</typeparam>
            <param name="creator">构造器</param>
            <param name="output">输出的实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.MiscellaneousUtils.TryGetDescription(System.Object,System.String@)">
            <summary>
            尝试获取指定对象属性 (Attribute) 中的说明。
            </summary>
            <param name="value">对象</param>
            <param name="description">输出属性描述</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.MiscellaneousUtils.GetDescription(System.Object)">
            <summary>
            获取指定对象属性 (Attribute) 中的说明。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.MiscellaneousUtils.GetDescriptions(System.Collections.IList)">
            <summary>
            获取指定对象集合的属性 (Attribute) 中的说明。
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.MiscellaneousUtils.ToString(System.Object)">
            <summary>
            输出为字符串。
            </summary>
            <param name="value">要输出的对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.ReflectionUtils">
            <summary>
            反射实用工具类。
            </summary>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetObjectType(System.Object)">
            <summary>
            获取指定对象类型。
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsInstantiatableType(System.Type)">
            <summary>
            判断是否实例类型。
            </summary>
            <param name="t">要测试的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type)">
            <summary>
            判断指定类型是否有构造器。
            </summary>
            <param name="t">要测试的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsNullable(System.Type)">
            <summary>
            判断指定类型是否允许有null值。
            </summary>
            <param name="t">要测试的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)">
            <summary>
            判断指定值类型是否允许有null值。
            </summary>
            <param name="t">要测试的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsUnitializedValue(System.Object)">
            <summary>
            测试指定值是否是初始化值。
            </summary>
            <param name="value">要测试的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.CreateUnitializedValue(System.Type)">
            <summary>
            创建指定类型的初始化值。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsPropertyIndexed(System.Reflection.PropertyInfo)">
            <summary>
            测试属性是否有索引。
            </summary>
            <param name="property">要测试的属性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsSubClass(System.Type,System.Type)">
            <summary>
            测试是否是指定类型的子类。
            </summary>
            <param name="type">父类型</param>
            <param name="check">要测试的子类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsSubClass(System.Type,System.Type,System.Type@)">
            <summary>
            测试是否是指定类型的子类。
            </summary>
            <param name="type">父类型</param>
            <param name="check">要测试的子类型</param>
            <param name="implementingType">实现的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsSubClassInternal(System.Type,System.Type,System.Type,System.Type@)">
            <summary>
            测试是否是子类。
            </summary>
            <param name="initialType">初始化类型</param>
            <param name="currentType">当前类型</param>
            <param name="check">要检查的类型</param>
            <param name="implementingType">实现的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetListItemType(System.Type)">
            <summary>
            获取指定泛型类型的类型实参的 System.Type 对象的数组
            </summary>
            <param name="type">IList泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetDictionaryValueType(System.Type)">
            <summary>
            获取指定泛型类型的类型实参的 System.Type 对象的字典。
            </summary>
            <param name="type">IDictionary泛型类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.ItemsUnitializedValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            测试指暄泛型列表项均为初始化值。
            </summary>
            <param name="list">泛型列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            获取成员的基本类型。
            </summary>
            <param name="member">成员信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            判断成员是否是索引属性。
            </summary>
            <param name="member">成员信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            判断是否是索引属性。
            </summary>
            <param name="property">属性信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetMember(System.Type,System.String,System.Reflection.MemberTypes)">
            <summary>
            获取指定类型的指定成员。
            </summary>
            <param name="type">类型</param>
            <param name="name">成员名称</param>
            <param name="memberTypes">成员类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetMember(System.Type,System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
            <summary>
            获取指定类型的指定成员。
            </summary>
            <param name="type">类型</param>
            <param name="name">成员名称</param>
            <param name="memberTypes">成员类型</param>
            <param name="bindingAttr">绑定标志</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            获取指定成员基于目标对象的值。
            </summary>
            <param name="member">成员信息</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            设置指定成员基于目标对象的值。
            </summary>
            <param name="member">成员信息</param>
            <param name="target">目标对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo)">
            <summary>
            判断是否能读取指定成员信息。
            </summary>
            <param name="member">要测试的成员信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo)">
            <summary>
            判断是否能设置指定成员信息。
            </summary>
            <param name="member">要测试的成员信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetFieldsAndProperties``1(System.Reflection.BindingFlags)">
            <summary>
            获取字段与属性。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="bindingAttr">绑定标志</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type,System.Reflection.BindingFlags)">
            <summary>
            获取字段与属性。
            </summary>
            <param name="type">类型</param>
            <param name="bindingAttr">绑定标志</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            获取属性
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="attributeProvider">自定义属性提供者</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            获取属性
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="attributeProvider">自定义属性提供者</param>
            <param name="inherit">设置是否继承</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            获取属性集
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="attributeProvider">自定义属性提供者</param>
            <param name="inherit">设置是否继承</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.GetNameAndAssessmblyName(System.Type)">
            <summary>
            获取指定类型的完全限定名称。
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.FindMembers(System.Type,System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
            <summary>
            搜索成员。
            </summary>
            <param name="targetType">目标类型</param>
            <param name="memberType">成员类型</param>
            <param name="bindingAttr">绑定标志</param>
            <param name="filter">筛选委托</param>
            <param name="filterCriteria">筛选标准</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.MakeGenericType(System.Type,System.Type[])">
            <summary>
            创建泛型类型。
            </summary>
            <param name="genericTypeDefinition">泛型类型定义</param>
            <param name="innerTypes">内联类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type,System.Type,System.Object[])">
            <summary>
            创建泛型类型。
            </summary>
            <param name="genericTypeDefinition">泛型类型定义</param>
            <param name="innerType">内联类型</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.ReflectionUtils.CreateGeneric(System.Type,System.Collections.Generic.IList{System.Type},System.Object[])">
            <summary>
            创建泛型类型。
            </summary>
            <param name="genericTypeDefinition">泛型类型定义</param>
            <param name="innerTypes">内联类型</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Json.Utilities.StringUtils">
            <summary>
            字符串实用工具。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.StringUtils.CarriageReturnLineFeed">
            <summary>
            回车换行字符串。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.StringUtils.Empty">
            <summary>
            空字符串。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.StringUtils.CarriageReturn">
            <summary>
            回车字符。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.StringUtils.LineFeed">
            <summary>
            换行字符。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.StringUtils.Tab">
            <summary>
            TAB字符。
            </summary>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.ContainsWhiteSpace(System.String)">
            <summary>
            判断指定字符串是否含有空白字符。当该字符串为 null 时，会抛出错误。
            </summary>
            <param name="s">要测试的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            判断指定字符串是否由空白字符组成。当该字符串为 null 时，会抛出错误; 为空时返回 false。
            </summary>
            <param name="s">要测试的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.EnsureEndsWith(System.String,System.String)">
            <summary>
            获取由指定字串结尾的目标字符串。
            </summary>
            <param name="target">目标字符串</param>
            <param name="value">结尾字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.IsNullOrEmpty(System.Data.SqlTypes.SqlString)">
            <summary>
            判断指定SqlString是否为空。
            </summary>
            <param name="s">SqlString字串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.IsNullOrEmptyOrWhiteSpace(System.String)">
            <summary>
            判断指定字符串是否为空。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String})">
            <summary>
            当指定字符串不为空时，处理指定操作。
            </summary>
            <param name="value">操作字符串</param>
            <param name="action">要处理的操作</param>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.IfNotNullOrEmpty(System.String,System.Action{System.String},System.Action{System.String})">
            <summary>
            当指定字符串不为空白字符时，处理指定操作。
            </summary>
            <param name="value">操作字符串</param>
            <param name="trueAction">当指定字符串不为空时，处理指定操作。</param>
            <param name="falseAction">当指定字符串为空时，处理指定操作。</param>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.Indent(System.String,System.Int32)">
            <summary>
            以空格缩进指定字符串。
            </summary>
            <param name="s">要缩进的字符串</param>
            <param name="indentation">缩进量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.Indent(System.String,System.Int32,System.Char)">
            <summary>
            缩进指定字符串。
            </summary>
            <param name="s">要缩进的字符串</param>
            <param name="indentation">缩进量</param>
            <param name="indentChar">缩进字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.ActionTextReaderLine(System.IO.TextReader,System.IO.TextWriter,EIIP.Json.Utilities.StringUtils.ActionLine)">
            <summary>
            输出换行符。
            </summary>
            <param name="textReader">文本阅读器</param>
            <param name="textWriter">输出流</param>
            <param name="lineAction">输出换行符的操作。</param>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.NumberLines(System.String)">
            <summary>
            输出行号。
            </summary>
            <param name="s">要添加行号的文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            处理空字符串为 null。
            </summary>
            <param name="s">要处理的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.ReplaceNewLines(System.String,System.String)">
            <summary>
            将换行符替换为指定字符串。
            </summary>
            <param name="s">要处理的文本</param>
            <param name="replacement">替换换行符的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.RemoveHtml(System.String)">
            <summary>
            移除HTML标签。
            </summary>
            <param name="s">要处理的文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.RemoveHtml(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            移除HTML标签。
            </summary>
            <param name="s">要处理的文本</param>
            <param name="removeTags">要移除的HTML标签集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.RemoveHtmlInternal(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            移除HTML标签。
            </summary>
            <param name="s">要处理的文本</param>
            <param name="removeTags">要移除的HTML标签集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.Truncate(System.String,System.Int32)">
            <summary>
            载去指定字符串多余长度，当载取发生时添加后缀"..."。
            </summary>
            <param name="s">要处理的文本</param>
            <param name="maximumLength">字符串保留的最大长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.Truncate(System.String,System.Int32,System.String)">
            <summary>
            载去指定字符串多余长度，当载取发生时添加指定后缀。
            </summary>
            <param name="s">要处理的文本</param>
            <param name="maximumLength">字符串保留的最大长度</param>
            <param name="suffix">要添加的后缀</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.CreateStringWriter(System.Int32)">
            <summary>
            创建字符串输出流。
            </summary>
            <param name="capacity">此实例的建议起始大小。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.GetLength(System.String)">
            <summary>
            获取指定字符串的长度。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.ToCharAsUnicode(System.Char)">
            <summary>
            将指定字符转换为Unicode字符。
            </summary>
            <param name="c">要转换的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Json.Utilities.StringUtils.WriteCharAsUnicode(System.IO.TextWriter,System.Char)">
            <summary>
            输出指定字符的Unicode字符内容。
            </summary>
            <param name="writer"></param>
            <param name="c"></param>
        </member>
        <member name="T:EIIP.Json.Utilities.StringUtils.ActionLine">
            <summary>
            输出换行符的操作委托。
            </summary>
            <param name="textWriter">输出流</param>
            <param name="line">换行字串</param>
        </member>
        <member name="T:EIIP.Json.Utilities.ValidationUtils">
            <summary>
            验证实用工具类。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.ValidationUtils.EmailAddressRegex">
            <summary>
            Email地址正则。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.ValidationUtils.CurrencyRegex">
            <summary>
            货币正则。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.ValidationUtils.DateRegex">
            <summary>
            日期时间正则。
            </summary>
        </member>
        <member name="F:EIIP.Json.Utilities.ValidationUtils.NumericRegex">
            <summary>
            整数正则。
            </summary>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            为空时抛出异常。
            </summary>
            <param name="value">要测试的字符串</param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNullOrEmptyOrWhitespace(System.String,System.String)">
            <summary>
            为空时抛出异常。
            </summary>
            <param name="value">要测试的字符串</param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentTypeIsEnum(System.Type,System.String)">
            <summary>
            参数不是枚举类型时抛出异常。
            </summary>
            <param name="enumType">要测试的类型</param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String)">
            <summary>
            泛型集合为空时抛出异常。
            </summary>
            <typeparam name="T">集合泛型类型</typeparam>
            <param name="collection">泛型集合</param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNullOrEmpty``1(System.Collections.Generic.ICollection{``0},System.String,System.String)">
            <summary>
            泛型集合为空时抛出异常。
            </summary>
            <typeparam name="T">集合泛型类型</typeparam>
            <param name="collection">泛型集合</param>
            <param name="parameterName">参数名称</param>
            <param name="message">要抛出的异常信息</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNullOrEmpty(System.Collections.ICollection,System.String)">
            <summary>
            集合为空时抛出异常。
            </summary>
            <param name="collection">集合</param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNullOrEmpty(System.Collections.ICollection,System.String,System.String)">
            <summary>
            集合为空时抛出异常。
            </summary>
            <param name="collection">集合</param>
            <param name="parameterName">参数名称</param>
            <param name="message">要抛出的异常信息</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNegative(System.Int32,System.String)">
            <summary>
            参数值为零或负值时抛出异常。
            </summary>
            <param name="value"></param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotNegative(System.Int32,System.String,System.String)">
            <summary>
            参数值为零或负值时抛出异常。
            </summary>
            <param name="value"></param>
            <param name="parameterName">参数名称</param>
            <param name="message">要抛出的异常信息</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotZero(System.Int32,System.String)">
            <summary>
            参数值为零时抛出异常。
            </summary>
            <param name="value"></param>
            <param name="parameterName">参数名称</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentNotZero(System.Int32,System.String,System.String)">
            <summary>
            参数值为零时抛出异常。
            </summary>
            <param name="value"></param>
            <param name="parameterName">参数名称</param>
            <param name="message">要抛出的异常信息</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentIsPositive``1(``0,System.String)">
            <summary>
            参数值不天于默认值时抛出异常。
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="value">参数名称</param>
            <param name="parameterName"></param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentIsPositive(System.Int32,System.String,System.String)">
            <summary>
            参数值为正数时抛出异常。
            </summary>
            <param name="value"></param>
            <param name="parameterName">参数名称</param>
            <param name="message">要抛出的异常信息</param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ObjectNotDisposed(System.Boolean,System.Type)">
            <summary>
            当类型未析构时抛出异常。
            </summary>
            <param name="disposed"></param>
            <param name="objectType"></param>
        </member>
        <member name="M:EIIP.Json.Utilities.ValidationUtils.ArgumentConditionTrue(System.Boolean,System.String,System.String)">
            <summary>
            当条件为假时抛出异常。
            </summary>
            <param name="condition"></param>
            <param name="parameterName"></param>
            <param name="message"></param>
        </member>
        <member name="T:EIIP.Net.HttpClient">
            <summary>
            支持 Session 和 Cookie 的 WebClient。
            </summary>
        </member>
        <member name="F:EIIP.Net.HttpClient.m_CookieContainer">
            <summary>
            Cookie 容器
            </summary>
        </member>
        <member name="F:EIIP.Net.HttpClient.m_ProxyAddress">
            <summary>
            代理服务器地址。
            </summary>
        </member>
        <member name="F:EIIP.Net.HttpClient.m_Port">
            <summary>
            代理服务器端口。
            </summary>
        </member>
        <member name="F:EIIP.Net.HttpClient.m_WebProxy">
            <summary>
            WEB 代理。
            </summary>
        </member>
        <member name="M:EIIP.Net.HttpClient.#ctor">
            <summary>
            创建默认 Cookie 容器的 WebClient 实例。
            </summary>
        </member>
        <member name="M:EIIP.Net.HttpClient.#ctor(System.Net.CookieContainer)">
            <summary>
            创建指定的 WebClient 实例。
            </summary>
            <param name="cookies">Cookie 容器</param>
        </member>
        <member name="M:EIIP.Net.HttpClient.GetWebRequest(System.Uri)">
            <summary>
            返回带有 Cookie 的 HttpWebRequest。
            </summary>
            <param name="address">一个 System.Uri，用于标识要请求的资源。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Net.HttpClient.PostData(System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            向指定的 URL POST 数据，并返回页面的源文件(过滤了回车及缩进等转义符)。
            </summary>
            <param name="postURL">用于POST提交的URL</param>
            <param name="postDATA">POST 的数据</param>
            <param name="encodingPost">数据使用的编码代码页名称。</param>
            <param name="encodingResponse">提交返回页面的编码代码页名称。</param>
            <param name="error">执行失败时，返回错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Net.HttpClient.GetPageContent(System.String,System.String,System.String@)">
            <summary>
            获得指定 URL 的页面源文件(过滤了回车及缩进等转义符)。
            </summary>
            <param name="url">页面 URL</param>
            <param name="dataEncoding">页面的 CharSet</param>
            <param name="error">执行失败时，返回错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Net.HttpClient.PreHandle">
            <summary>
            预处理。
            </summary>
        </member>
        <member name="M:EIIP.Net.HttpClient.GetFile(System.String,System.String,System.String@)">
            <summary>
            从指定的 URL 下载文件到本地。成功返回true。
            </summary>
            <param name="url">文件 URL</param>
            <param name="fileName">本地文件的完成路径</param>
            <param name="error">执行失败时，返回错误信息</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Net.HttpClient.AccessSettings">
            <summary>
            获取访问设置。
            </summary>
        </member>
        <member name="P:EIIP.Net.HttpClient.ProxyAddress">
            <summary>
            获取或设置代理服务器地址。
            </summary>
        </member>
        <member name="P:EIIP.Net.HttpClient.Port">
            <summary>
            获取或设置代理服务器端口。
            </summary>
        </member>
        <member name="P:EIIP.Net.HttpClient.Cookies">
            <summary>
            获取或设置 Cookie 容器。
            </summary>
        </member>
        <member name="T:EIIP.Net.HttpClient.Settings">
            <summary>
            设置类。
            </summary>
        </member>
        <member name="F:EIIP.Net.HttpClient.Settings.User_Agent">
            <summary>
            头部信息。
            </summary>
        </member>
        <member name="F:EIIP.Net.HttpClient.Settings.Accept">
            <summary>
            头部信息。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.Algorithm.Direction">
            <summary>
            指示单词字符比较的某一方向。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.Direction.LeftToRight">
            <summary>
            从左到右
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.Direction.RightToLeft">
            <summary>
            从右到左
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.Algorithm.CompareByPosHandler">
            <summary>
            按词性比较的委托。
            </summary>
            <param name="words">单词列表</param>
            <param name="pre"></param>
            <param name="cur"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Query.FullText.Algorithm.ExtractWords">
            <summary>
            提供从全文中提取指定的单词及其位置的类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.ExtractWords.m_WordFA">
            <summary>
            单词有穷自动机。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.ExtractWords.m_MatchDirection">
            <summary>
            匹配方向。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.ExtractWords.m_CompareByPosHandler">
            <summary>
            按位置比较的委托成员。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.ExtractWords.#ctor">
            <summary>
            实例化缺省实例。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.ExtractWords.InsertWordToFA(System.String)">
            <summary>
            向有穷自动机输入单词。
            </summary>
            <param name="word">要输入的单词。</param>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.ExtractWords.GameTree(System.Collections.Generic.List{EIIP.Query.FullText.Algorithm.WordInfo},System.Collections.Generic.List{System.Int32},System.Boolean,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            博弈树
            </summary>
            <param name="words"></param>
            <param name="nodes"></param>
            <param name="init"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="spaceNum"></param>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.ExtractWords.ExtractFullTextMaxMatch(System.String)">
            <summary>
            最大匹配提取全文中所有匹配的单词。返回WordInfo列表，如果没有找到一个匹配的单词，返回长度为0的列表。
            </summary>
            <param name="fullText">全文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.ExtractWords.ExtractFullText(System.String)">
            <summary>
            提取全文，返回 WordInfo 列表，如果没有找到一个匹配的单词，返回长度为0的列表。
            </summary>
            <param name="fullText">全文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Query.FullText.Algorithm.ExtractWords.CompareByPosHandler">
            <summary>
            获取或设置按词性比较的委托成员。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.Algorithm.ExtractWords.MatchDirection">
            <summary>
            获取或设置匹配方向。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.Algorithm.FANode">
            <summary>
            定义一个有穷自动机(Finite Automaton)节点的类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.FANode.Childs">
            <summary>
            后趋节点
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.FANode.NextFriend">
            <summary>
            该节点的下一个伙伴节点
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.FANode.QuitWord">
            <summary>
            结束时应返回的字符串。如果为null，表示没有结束。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.FANode.Tag">
            <summary>
            对于技术字符串的标签
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.FANode.Char">
            <summary>
            当前字符
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.FANode.NeedTrans">
            <summary>
            指示是否需要转义。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.Algorithm.WordFA">
            <summary>
            定义单词有穷自动机(Finite Automaton)的类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordFA.m_UseRank">
            <summary>
            指示是否使用单词的(指定)权重。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordFA.m_WordValues">
            <summary>
            单词的权重级别字典。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordFA.m_CharFANodes">
            <summary>
            首字表,作为有穷自动机的入口
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.#ctor">
            <summary>
            实例化单词有穷自动机(Finite Automaton)。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.AddChar(EIIP.Query.FullText.Algorithm.FANode,System.Char,System.String,System.Boolean,System.Object)">
            <summary>
            添加指定字符的有穷自动机节点。
            </summary>
            <param name="cur">当前节点</param>
            <param name="c">字符</param>
            <param name="quitWord">结束字串</param>
            <param name="needTrans">设置是否需要转义</param>
            <param name="tag">标签</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.TransCharEqual(System.Char,System.Char)">
            <summary>
            转义符号比较，相等返回true。
            </summary>
            <param name="trans">转义符号</param>
            <param name="c">实际字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.GetRank(System.String)">
            <summary>
            获取单词对应的权重级别。未找到单词，返回0。
            </summary>
            <param name="word">单词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.Next(EIIP.Query.FullText.Algorithm.FANode,System.Char)">
            <summary>
            获取指定字符的后趋节点。不存在返回null。
            </summary>
            <param name="cur">当前节点</param>
            <param name="c">要搜索的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.GetLastMatchUnit(System.String,System.Int32@)">
            <summary>
            遍历有穷自动机，获取最后一个和输入单词匹配的单元。若不存在，则返回null。
            </summary>
            <param name="word">单词</param>
            <param name="pos">输出位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.InsertWordToFA(System.String)">
            <summary>
            向有穷自动机输入单词。
            </summary>
            <param name="word">单词</param>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.InsertWordToFA(System.String,System.Object)">
            <summary>
            向有穷自动机输入单词。
            </summary>
            <param name="word">单词</param>
            <param name="tag">标签</param>
        </member>
        <member name="M:EIIP.Query.FullText.Algorithm.WordFA.InsertWordToFA(System.String,System.Int32,System.Object)">
            <summary>
            向有穷自动机输入单词。
            </summary>
            <param name="word">单词</param>
            <param name="rank">单词的权重。当设置为0时，表示不使用单词权重。</param>
            <param name="tag">标签</param>
        </member>
        <member name="T:EIIP.Query.FullText.Algorithm.WordInfo">
            <summary>
            单词信息类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordInfo.Word">
            <summary>
            单词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordInfo.Position">
            <summary>
            单词首字符在全文中的位置。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordInfo.Rank">
            <summary>
            单词的权重级别。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.Algorithm.WordInfo.Tag">
            <summary>
            单词对应的标记。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.POSTraffic">
            <summary>
            用于统计词性的类。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSTraffic.Traffic(System.Collections.Generic.List{System.String})">
            <summary>
            统计词性。
            </summary>
            <param name="words"></param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSTraffic.GetPosBinGroup">
            <summary>
            获取排序后的二元词性组合集。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.POSTraffic.POSResolver">
            <summary>
            获取或设置词性处理器。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.IRule">
            <summary>
            定义规则的接口。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.IRule.ProcRule(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            处理规则。规则生效返回下一个要处理的Index位置，否则返回-1。
            </summary>
            <param name="preWords">预处理后的单词列表</param>
            <param name="index">当前要处理的词位于预处理后的单词列表中的位置</param>
            <param name="retWords">输出的单词列表</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.MatchName">
            <summary>
            匹配姓名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.MatchName.FAMILY_NAMES">
            <summary>
            没有明显歧异的姓氏
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.MatchName.IsChineseName(System.String,System.String)">
            <summary>
            是否是中文名字
            </summary>
            <param name="familyName">姓</param>
            <param name="firstName">名</param>
            <returns>是返回true</returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.MatchName.MatchFamilyNameInHead(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            匹配姓位于单词首部的情况
            </summary>
            <param name="preWords"></param>
            <param name="index"></param>
            <param name="retWords"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.MatchName.MatchFamilyNameInTail(System.Collections.ArrayList,System.Int32,System.Collections.ArrayList)">
            <summary>
            匹配姓位于单词尾部的情况
            </summary>
            <param name="preWords"></param>
            <param name="index"></param>
            <param name="retWords"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.MatchName.ProcRule(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            处理规则。规则生效返回下一个要处理的Index位置，否则返回-1。
            </summary>
            <param name="preWords">预处理后的单词列表</param>
            <param name="index">当前要处理的词位于预处理后的单词列表中的位置</param>
            <param name="retWords">输出的单词列表</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.MergeNumRule">
            <summary>
            合并数量词规则
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.MergeNumRule.#ctor(EIIP.Query.FullText.DictSeg.POSResolver)">
            <summary>
            实例化合并数量词规则。
            </summary>
            <param name="posResolver">词性解析器</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.MergeNumRule.ProcRule(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            处理规则。规则生效返回下一个要处理的Index位置，否则返回-1。
            </summary>
            <param name="preWords">预处理后的单词列表</param>
            <param name="index">当前要处理的词位于预处理后的单词列表中的位置</param>
            <param name="retWords">输出的单词列表</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.POSBinRule">
            <summary>
            定义二元词性组合规则类。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBinRule.#ctor(EIIP.Query.FullText.DictSeg.POSResolver)">
            <summary>
            实例化二元词性组合规则。
            </summary>
            <param name="pos">词性</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBinRule.MatchNameInTail(System.String)">
            <summary>
            人名和前面的词词性匹配。匹配成功返回true。
            </summary>
            <param name="preStr">人名前面的词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBinRule.MatchNameInHead(System.String)">
            <summary>
            人名和后面的词词性匹配。匹配成功返回true。
            </summary>
            <param name="nextStr">人名后面的词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBinRule.Match(System.String,System.String)">
            <summary>
            匹配两个词的词性。匹配成功返回true。
            </summary>
            <param name="str1">第一个词</param>
            <param name="str2">第二个词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBinRule.ProcRule(System.Collections.Generic.List{System.String},System.Int32,System.Collections.Generic.List{System.String})">
            <summary>
            处理规则。规则生效返回下一个要处理的Index位置，否则返回-1。
            </summary>
            <param name="preWords">预处理后的单词列表</param>
            <param name="index">当前要处理的词位于预处理后的单词列表中的位置</param>
            <param name="retWords">输出的单词列表</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.SegInfo">
            <summary>
            分词信息类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SegInfo.Pos">
            <summary>
            词性值
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SegInfo.Word">
            <summary>
            单词。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SegInfo.#ctor(System.Int32,System.String)">
            <summary>
            实例化指定分词信息。
            </summary>
            <param name="pos">词性值</param>
            <param name="word">单词</param>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.SimpleDictSeg">
            <summary>
            提供简单字典分词类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.STOPWORDS">
            <summary>
            停用词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_Rules">
            <summary>
            规则集。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_StopWords">
            <summary>
            停用词表
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_POSResolver">
            <summary>
            词性解析器。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_POSBinRule">
            <summary>
            二元词性规则。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_MatchName">
            <summary>
            指示是否匹配汉语人名。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_FilterStopWords">
            <summary>
            指示是否过滤停用词。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.SimpleDictSeg.m_MatchDirection">
            <summary>
            匹配方向。默认为从左至右匹配，即正向匹配。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.#ctor">
            <summary>
            实例化简单字典分词。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.GetPosWeight(System.Collections.Generic.List{EIIP.Query.FullText.Algorithm.WordInfo},System.Collections.Generic.List{System.Int32})">
            <summary>
            获取词性权重。
            </summary>
            <param name="words">单词信息集</param>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.CompareByPos(System.Collections.Generic.List{EIIP.Query.FullText.Algorithm.WordInfo},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
            <summary>
            按词性进行比较。
            </summary>
            <param name="words">单词信息集</param>
            <param name="pre"></param>
            <param name="cur"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.MergeFloat(System.Collections.Generic.List{System.String},System.Int32,System.Int32@)">
            <summary>
            合并浮点数
            </summary>
            <param name="words"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.MergeEmail(System.Collections.Generic.List{System.String},System.Int32,System.Int32@)">
            <summary>
            合并Email
            </summary>
            <param name="words"></param>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.LoadStopwordsDict(System.String)">
            <summary>
            从停用词字典中加载停用词。停用词字典的格式：文本文件格式，一个词占一行
            </summary>
            <param name="fileName">停用词文件名</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.SaveStopwordDict(System.String)">
            <summary>
            将停用词保存到文件中 
            </summary>
            <param name="fileName">要保存文件名</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.AddStopword(System.String)">
            <summary>
            增加一个停用词
            </summary>
            <param name="word">停用词</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.DelStopword(System.String)">
            <summary>
            删除一个停用词
            </summary>
            <param name="word">停用词</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.LoadDict">
            <summary>
            从字典文件中加载字典。是一个耗时的操作。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.AddSegInfo(EIIP.Query.FullText.DictSeg.SegInfo)">
            <summary>
            单独向字典文件中添加分词信息。
            </summary>
            <param name="seg">分词信息</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.GetCurrentDictSegInfos">
            <summary>
            获取(反序化)当前分词信息字典。是一个耗时的操作。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.InsertWordToArray(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            将指定词插入列表。若设置了过滤停用词，则该词不会被插入。
            </summary>
            <param name="word"></param>
            <param name="arr"></param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.PreSegment(System.String)">
            <summary>
            预分词。返回预分词后的字符串输出。
            </summary>
            <param name="str">要分词的句子</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.RecoverUnknowWord(System.Collections.Generic.List{System.String})">
            <summary>
            召回停用词。
            </summary>
            <param name="words"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.SimpleDictSeg.Segment(System.String)">
            <summary>
            分词。
            </summary>
            <param name="str">要分词的句子</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.SimpleDictSeg.POSResolver">
            <summary>
            获取词性解析器。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.SimpleDictSeg.DictFile">
            <summary>
            获取配置的字典文件物理路径。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.SimpleDictSeg.MatchName">
            <summary>
            获取或设置一个值，该值指示是否匹配汉语人名。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.SimpleDictSeg.MatchDirection">
            <summary>
            获取或设置匹配方向。默认为从左至右匹配，即正向匹配。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.SimpleDictSeg.FilterStopWords">
            <summary>
            获取或设置一个值，该值指示是否过滤停用词。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.InnerPOS">
            <summary>
            定义内部使用的某一词性。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_A">
            <summary>
            形容词 形语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_B">
            <summary>
            区别词 区别语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_C">
            <summary>
            连词 连语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_D">
            <summary>
            副词 副语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_E">
            <summary>
            叹词 叹语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_F">
            <summary>
            方位词 方位语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_I">
            <summary>
            成语
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_L">
            <summary>
            习语
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_M">
            <summary>
            数词 数语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_MQ">
            <summary>
            数量词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_N">
            <summary>
            名词 名语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_O">
            <summary>
            拟声词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_P">
            <summary>
            介词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_Q">
            <summary>
            量词 量语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_R">
            <summary>
            代词 代语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_S">
            <summary>
            处所词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_T">
            <summary>
            时间词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_U">
            <summary>
            助词 助语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_V">
            <summary>
            动词 动语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_W">
            <summary>
            标点符号
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_X">
            <summary>
            非语素字
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_Y">
            <summary>
            语气词 语气语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_Z">
            <summary>
            状态词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_NR">
            <summary>
            人名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_NS">
            <summary>
            地名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_NT">
            <summary>
            机构团体
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_NX">
            <summary>
            外文字符
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_A_NZ">
            <summary>
            其他专名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_H">
            <summary>
            前接成分
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_D_K">
            <summary>
            后接成分
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.InnerPOS.POS_UNK">
            <summary>
            未知词性
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.POSBin">
            <summary>
            定义二元词性组合类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSBin.m_HashCode">
            <summary>
            哈希码。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBin.#ctor(EIIP.Query.FullText.DictSeg.InnerPOS,EIIP.Query.FullText.DictSeg.InnerPOS)">
            <summary>
            实例化二元词性组合实例。
            </summary>
            <param name="pos1">第一词性</param>
            <param name="pos2">第二词性</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSBin.CompareTo(System.Object)">
            <summary>
            比较当前实例与同一类型的另一对象。
            </summary>
            <param name="obj">与此实例进行比较的对象。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.POSBin.Pos1">
            <summary>
            获取第一词性。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.POSBin.Pos2">
            <summary>
            获取第二词性。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.POSBin.Count">
            <summary>
            获取数量。
            </summary>
        </member>
        <member name="P:EIIP.Query.FullText.DictSeg.POSBin.HashCode">
            <summary>
            获取哈希码。
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.POSResolver">
            <summary>
            定义的词性解析器类。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSResolver.m_POSs">
            <summary>
            单词对应词性表。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSResolver.m_Chars">
            <summary>
            单字符词表。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.#ctor">
            <summary>
            实例化词性词性解析器。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.GetInnerPos(EIIP.Query.FullText.DictSeg.POSType)">
            <summary>
            获取指定词性的内部词性。
            </summary>
            <param name="pos">词性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.GetChsPos(EIIP.Query.FullText.DictSeg.POSType)">
            <summary>
            获取指定词性类型的中文名称。
            </summary>
            <param name="pos">词性类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.GetPosList(System.Int32)">
            <summary>
            获取指定词性值的词性列表。
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.AddWordPos(System.String,System.Int32)">
            <summary>
            增加单词的词性。
            </summary>
            <param name="word">单词</param>
            <param name="pos">词性</param>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.IsUnknowOneCharWord(System.String)">
            <summary>
            判断是否是未登录的单字词。
            </summary>
            <param name="word">词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.InnertPosToPos(EIIP.Query.FullText.DictSeg.InnerPOS)">
            <summary>
            获取内部词性对应的词性。
            </summary>
            <param name="inPos">内部词性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.GetPosFromInnerPosList(EIIP.Query.FullText.DictSeg.InnerPOS[])">
            <summary>
            获取指定词性类型对应的词性值。
            </summary>
            <param name="inPosList"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Query.FullText.DictSeg.POSResolver.GetPos(System.String,System.Boolean@)">
            <summary>
            获取单词的词性。
            </summary>
            <param name="word">单词</param>
            <param name="isReg">是否是已登录词</param>
            <returns>单词词性</returns>
        </member>
        <member name="T:EIIP.Query.FullText.DictSeg.POSType">
            <summary>
            定义某一词性。
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_A">
            <summary>
            形容词 形语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_B">
            <summary>
            区别词 区别语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_C">
            <summary>
            连词 连语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_D">
            <summary>
            副词 副语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_E">
            <summary>
            叹词 叹语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_F">
            <summary>
            方位词 方位语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_I">
            <summary>
            成语
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_L">
            <summary>
            习语
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_M">
            <summary>
            数词 数语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_MQ">
            <summary>
            数量词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_N">
            <summary>
            名词 名语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_O">
            <summary>
            拟声词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_P">
            <summary>
            介词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_Q">
            <summary>
            量词 量语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_R">
            <summary>
            代词 代语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_S">
            <summary>
            处所词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_T">
            <summary>
            时间词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_U">
            <summary>
            助词 助语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_V">
            <summary>
            动词 动语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_W">
            <summary>
            标点符号
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_X">
            <summary>
            非语素字
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_Y">
            <summary>
            语气词 语气语素
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_Z">
            <summary>
            状态词
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_NR">
            <summary>
            人名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_NS">
            <summary>
            地名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_NT">
            <summary>
            机构团体
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_NX">
            <summary>
            外文字符
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_A_NZ">
            <summary>
            其他专名
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_H">
            <summary>
            前接成分
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_D_K">
            <summary>
            后接成分
            </summary>
        </member>
        <member name="F:EIIP.Query.FullText.DictSeg.POSType.POS_UNK">
            <summary>
            未知词性
            </summary>
        </member>
        <member name="T:EIIP.Query.FullText.Utility">
            <summary>
            用于全文分析的工具类。
            </summary>
        </member>
        <member name="M:EIIP.Query.FullText.Utility.LoadFromTextDict(System.String)">
            <summary>
            从文本文件读取字典
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="T:EIIP.SClient.ConfigSettings">
            <summary>
            客户端配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.ConfigSettings.SetApplicationIdentity(System.String)">
            <summary>
            设置应用程序标识。仅供安装程序使用。
            </summary>
            <param name="identity"></param>
        </member>
        <member name="M:EIIP.SClient.ConfigSettings.#ctor">
            <summary>
            实例化客户端配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.ConfigSettings.#ctor(EIIP.Framework.Configuration.Settings)">
            <summary>
            实例化指定客户端配置设置类。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.SClient.ConfigSettings.LoadFrom(EIIP.Framework.Configuration.Settings)">
            <summary>
            加载配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.SClient.ConfigSettings.SaveTo(EIIP.Framework.Configuration.Settings)">
            <summary>
            保存配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="P:EIIP.SClient.ConfigSettings.Offline">
            <summary>
            获取 Offline 配置设置。
            </summary>
        </member>
        <member name="P:EIIP.SClient.ConfigSettings.ApplicationIdentity">
            <summary>
            获取应用程序标识。
            </summary>
        </member>
        <member name="P:EIIP.SClient.ConfigSettings.EnableLog">
            <summary>
            获取或设置一个值，该值指示是否启用日志。
            </summary>
        </member>
        <member name="P:EIIP.SClient.ConfigSettings.SMSPortReceiveDelay">
            <summary>
            获取或设置短信串口信号接收延迟（毫秒）。
            注意这并不是两条短信发送之间的延迟，而是串口信号接收延迟，建议在1-500之间。
            </summary>
        </member>
        <member name="T:EIIP.SClient.ConnManageController">
            <summary>
            连线管理控制器。协调服务代理管理器与连线管理器以处理在线/离线状态变更事件。
            </summary>
        </member>
        <member name="F:EIIP.SClient.ConnManageController.m_MainForm">
            <summary>
            关联窗体。
            </summary>
        </member>
        <member name="F:EIIP.SClient.ConnManageController.m_OfflineBuilder">
            <summary>
            在线/离线管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.ConnManageController.m_ClientSA">
            <summary>
            客户端数据服务代理。
            </summary>
        </member>
        <member name="F:EIIP.SClient.ConnManageController.m_CurrentState">
            <summary>
            当前连线状态。
            </summary>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.#ctor(EIIP.SClient.Forms.MainBaseForm)">
            <summary>
            注册连线状态变更事件并响应UI。
            </summary>
            <param name="refForm">关联窗体</param>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.UpdateData(System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            将上传数据消息加入消息队列。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="data">要上传的数据</param>
            <param name="onlineProxyAssemblyName">连线代理所在程序集名称</param>
            <param name="onlineProxyClassName">连线代理类的完全限定名</param>
            <param name="onlineProxyMethodName">要调用的连线代理类的方法名称</param>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.DownloadData(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            调用下载服务代理获取数据。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="onlineProxyAssemblyName">连线代理所在程序集名称</param>
            <param name="onlineProxyClassName">连线代理类的完全限定名</param>
            <param name="onlineProxyMethodName">要调用的连线代理类的方法名称</param>
            <param name="cacheKey">缓存键，做为取回确定数据的唯一标识</param>
            <param name="absoluteExpirationTime">绝对过期时间</param>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.Start">
            <summary>
            启动连线管理器线程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.Dispose">
            <summary>
            停止连线管理器线程并释放在线/离线实例资源。
            </summary>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.UpdateState(EIIP.SClient.Offline.ConnectionState)">
            <summary>
            更新UI的连线状态。
            </summary>
            <param name="curState">当前连线状态</param>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.GOffline">
            <summary>
            脱机工作。
            </summary>
        </member>
        <member name="M:EIIP.SClient.ConnManageController.GOnline">
            <summary>
            联机工作。
            </summary>
        </member>
        <member name="P:EIIP.SClient.ConnManageController.CurrentConnectionState">
            <summary>
            获取当前连线状态。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Forms.BaseForm">
            <summary>
            窗体基类。
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.SClient.Forms.ISClient">
            <summary>
            定义支持智能客户端的窗体接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.ISClient.LoadInitData(EIIP.SClient.Offline.OfflineBuilder)">
            <summary>
            窗体加载初始化数据。
            </summary>
            <param name="offline">离线/在线管理器</param>
        </member>
        <member name="P:EIIP.SClient.Forms.ISClient.ClientID">
            <summary>
            获取客户端标识。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.BaseForm.#ctor">
            <summary>
            实例化窗体基类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.BaseForm.SafeUpdateUI(EIIP.SClient.Forms.UpdateUICallbackArgs)">
            <summary>
            线程安全更新UI。
            </summary>
            <param name="args">回调参数</param>
        </member>
        <member name="M:EIIP.SClient.Forms.BaseForm.LoadInitData(EIIP.SClient.Offline.OfflineBuilder)">
            <summary>
            窗体加载初始化数据。
            </summary>
            <param name="offline">离线/在线管理器</param>
        </member>
        <member name="F:EIIP.SClient.Forms.BaseForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.BaseForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:EIIP.SClient.Forms.BaseForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.BaseForm.ClientID">
            <summary>
            获取客户端标识。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Forms.IUpdateConnectionState">
            <summary>
            定义连线状态更新接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.IUpdateConnectionState.UpdateConnectionState(EIIP.SClient.Offline.ConnectionState,EIIP.SClient.Offline.ConnectionState)">
            <summary>
            更新UI的连线状态。
            </summary>
            <param name="oldState">旧的连线状态</param>
            <param name="curState">当前(新的)连线状态</param>
        </member>
        <member name="T:EIIP.SClient.Forms.MainBaseForm">
            <summary>
            主窗体基类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.MainBaseForm.EventConnectionStateChanged">
            <summary>
            为“连线状态变更事件”设置的静态键。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm.OnConnectionStateChanged(EIIP.SClient.Offline.ConnectionStateChangedEventArgs)">
            <summary>
            触发连线状态变更事件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm.#ctor">
            <summary>
            实例化主窗体基类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.MainBaseForm._ConnManageController">
            <summary>
            连线管理控制器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm._GOffline">
            <summary>
            脱机工作。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm._GOnline">
            <summary>
            联机工作
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm.DownloadData(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            调用下载服务代理获取数据。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="onlineProxyAssemblyName">连线代理所在程序集名称</param>
            <param name="onlineProxyClassName">连线代理类的完全限定名</param>
            <param name="onlineProxyMethodName">要调用的连线代理类的方法名称</param>
            <param name="cacheKey">缓存键，做为取回确定数据的唯一标识</param>
            <param name="absoluteExpirationTime">绝对过期时间</param>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm.UpdateConnectionState(EIIP.SClient.Offline.ConnectionState,EIIP.SClient.Offline.ConnectionState)">
            <summary>
            更新UI的连线状态。
            </summary>
            <param name="oldState">旧的连线状态</param>
            <param name="curState">当前(新的)连线状态</param>
        </member>
        <member name="F:EIIP.SClient.Forms.MainBaseForm.components">
            <summary>
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm.Dispose(System.Boolean)">
            <summary>
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:EIIP.SClient.Forms.MainBaseForm.InitializeComponent">
            <summary>
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="E:EIIP.SClient.Forms.MainBaseForm.ConnectionStateChanged">
            <summary>
            触发连线状态变更事件的事件成员。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Forms.UpdateUICallback">
            <summary>
            定义更新UI的回调委托。
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:EIIP.SClient.Forms.UpdateUICallbackArgs">
            <summary>
            定义更新UI事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Forms.UpdateUICallbackArgs.#ctor(System.String,EIIP.SClient.Forms.UpdateUICallbackType,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            实例化更新UI事件参数。
            </summary>
            <param name="clientID">关联的客户端标识。</param>
            <param name="type">回调类型。</param>
            <param name="values">参数值。</param>
        </member>
        <member name="M:EIIP.SClient.Forms.UpdateUICallbackArgs.#ctor(EIIP.SClient.Offline.DownloadData)">
            <summary>
            实例化更新UI事件参数。
            </summary>
            <param name="data">下载服务提供的数据。</param>
        </member>
        <member name="M:EIIP.SClient.Forms.UpdateUICallbackArgs.#ctor(EIIP.SClient.Offline.ReportErrorEventArgs)">
            <summary>
            实例化更新UI事件参数。
            </summary>
            <param name="e">报告错误事件参数。</param>
        </member>
        <member name="M:EIIP.SClient.Forms.UpdateUICallbackArgs.#ctor(EIIP.SClient.Offline.ServiceAgentEventArgs)">
            <summary>
            实例化更新UI事件参数。
            </summary>
            <param name="e">数据已上传事件参数。</param>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.ClientID">
            <summary>
            获取关联的客户端标识。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.CallbackType">
            <summary>
            获取回调类型。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.Values">
            <summary>
            获取参数值。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.DownloadData">
            <summary>
            获取下载服务提供的数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.ReportErrorEventArgs">
            <summary>
            获取服务的错误报告。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.ServiceAgentEventArgs">
            <summary>
            获取服务的错误报告。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Forms.UpdateUICallbackArgs.Handled">
            <summary>
            获取或设置一个值，该值指示是否已完成UI更新处理。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Forms.UpdateUICallbackType">
            <summary>
            指示更新UI的某一回调类型。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.ConnectionState">
            <summary>
            连线状态。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.UIValue">
            <summary>
            界面值。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.DownloadData">
            <summary>
            下载服务提供数据。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.ReportError">
            <summary>
            报告错误。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.UploadData">
            <summary>
            上传数据服务。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Forms.UpdateUICallbackType.Other">
            <summary>
            其它。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionManagerBuilder">
            <summary>
            负责构造连线管理器并公开其实例对象的构造类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManagerBuilder.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManagerBuilder.Start">
            <summary>
            启动连线管理器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManagerBuilder.Stop">
            <summary>
            停止连线管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ConnectionManagerBuilder.ConnectionManager">
            <summary>
            获取连线管理器实例对象。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.DataLoaderManagerBuilder">
            <summary>
            构建数据加载管理器的类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.DataLoaderManagerBuilder.#ctor(EIIP.SClient.Offline.IPayloadConsumer)">
            <summary>
            实例化。
            </summary>
            <param name="payloadConsumer">轮询客户端信息的对象</param>
        </member>
        <member name="P:EIIP.SClient.Offline.DataLoaderManagerBuilder.DataLoaderManager">
            <summary>
            获取数据加载管理器实例对象。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ExecutorBuilder">
            <summary>
            构建执行器的类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ExecutorBuilder.m_CommandProcessor">
            <summary>
            消息处理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ExecutorBuilder.m_Executor">
            <summary>
            执行器对象。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ExecutorBuilder.#ctor(EIIP.SClient.Offline.IResultConsumer,EIIP.SClient.Offline.IQueueMessageProducer)">
            <summary>
            实例化。
            </summary>
            <param name="resultConsumer">结果处理对象</param>
            <param name="queueMessageProducer">提供队列消息的对象</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ExecutorBuilder.Executor">
            <summary>
            获取执行器对象。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.OfflineBuilder">
            <summary>
            构建离线/在线管理器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_ReferenceDataCacheBuilder">
            <summary>
            引用数据缓存管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_ConnectionManagerBuilder">
            <summary>
            连线管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_DataLoaderManagerBuilder">
            <summary>
            数据加载管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_QueueManagerBuilder">
            <summary>
            消息队列管理器
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_ServiceAgentManagerBuilder">
            <summary>
            服务代理管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_ExecutorBuilder">
            <summary>
            执行器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OfflineBuilder.m_OfflineBuilder">
            <summary>
            离线/在线管理器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.OfflineBuilder.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.OfflineBuilder.Start">
            <summary>
            启动。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.OfflineBuilder.Stop">
            <summary>
            停止。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.OfflineBuilder.IsDisposed">
            <summary>
            检查是否已析构（或还未使用过）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.OfflineBuilder.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.DataLoaderManager">
            <summary>
            获取数据加载管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.ReferenceDataCache">
            <summary>
            获取引用数据缓存管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.ServiceAgentManager">
            <summary>
            获取服务代理管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.ServiceAgentRegistry">
            <summary>
            获取服务代理注册表。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.FailsafeServiceAgent">
            <summary>
            获取处理故障的服务代理。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.PayloadConsumer">
            <summary>
            获取获取轮询客户端信息的对象。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.ConnectionManager">
            <summary>
            获取连线管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.OfflineBuilder.Instance">
            <summary>
            取得离线/在线管理器的单实例
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.QueueManagerBuilder">
            <summary>
            构建消息队列管理器的类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueManagerBuilder.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueManagerBuilder.QueueManager">
            <summary>
            获取消息队列管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueManagerBuilder.QueueMessageProducer">
            <summary>
            获取消息队列存储区。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueManagerBuilder.PayloadConsumer">
            <summary>
            获取轮询客户端信息的对象。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ReferenceDataCacheBuilder">
            <summary>
            构建引用数据缓存管理器类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCacheBuilder.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataCacheBuilder.ReferenceDataCache">
            <summary>
            获取引用数据缓存管理器。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ServiceAgentManagerBuilder">
            <summary>
            构建服务代理管理器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ServiceAgentManagerBuilder.m_ServiceAgentManager">
            <summary>
            服务代理管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ServiceAgentManagerBuilder.m_ServiceAgentRegistry">
            <summary>
            服务代理注册表。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentManagerBuilder.#ctor">
            <summary>
            实例化。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgentManagerBuilder.ServiceAgentManager">
            <summary>
            获取服务代理管理器。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgentManagerBuilder.ResultConsumer">
            <summary>
            获取结果处理的对象。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgentManagerBuilder.ServiceAgentRegistry">
            <summary>
            获取服务代理注册表。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConfigSettings">
            <summary>
            客户端配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConfigSettings.#ctor">
            <summary>
            实例化客户端配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConfigSettings.#ctor(EIIP.Framework.Configuration.Settings)">
            <summary>
            实例化指定客户端配置设置类。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ConfigSettings.LoadFrom(EIIP.Framework.Configuration.Settings)">
            <summary>
            加载配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ConfigSettings.SaveTo(EIIP.Framework.Configuration.Settings)">
            <summary>
            保存配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ConfigSettings.ConnPollInterval">
            <summary>
            获取或设置连线探测间隔秒数。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionDetector">
            <summary>
            连线探测器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionDetector.m_ConnDetectionStrategy">
            <summary>
            连线探测。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionDetector.m_ConnManager">
            <summary>
            连线管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionDetector.m_CurConnState">
            <summary>
            当前连线状态。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.#ctor(EIIP.SClient.Offline.IConnectionDetectionStrategy,EIIP.SClient.Offline.ConnectionManager)">
            <summary>
            实例化连线探测器。
            </summary>
            <param name="connDetectionStrategy">连线探测</param>
            <param name="connManager">连线管理器</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.DetectConnectionState">
            <summary>
            探测连线状态。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.CanGOnline">
            <summary>
            测试是否能连线。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.ForceOffline">
            <summary>
            强制离线。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.ForceOnline">
            <summary>
            强制在线。仅当已经在能连线的状态下，使用了强制离线时才有用。当物理离线时，强制在线会抛出错误。
            </summary>
            <exception></exception>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.TransitionToOnline">
            <summary>
            将状态变更至在线。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.TransitionToOffline">
            <summary>
            将状态变更至离线。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.ChangeToState(EIIP.SClient.Offline.ConnectionState,EIIP.SClient.Offline.ConnectionState)">
            <summary>
            变更连线状态。
            </summary>
            <param name="oldState">旧状态</param>
            <param name="newState">新状态</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.IsTransitioningToOnline">
            <summary>
            判断是否可转换至在线状态。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionDetector.IsTransitioningToOffline">
            <summary>
            判断是否可转换至离线状态。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.ConnectionDetector.ConnectedState">
            <summary>
            获取当前连线状态。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionManager">
            <summary>
            连线管理器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionManager.m_Detector">
            <summary>
            连线探测器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionManager.m_PollInterval">
            <summary>
            探测间隔毫秒数。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.#ctor">
            <summary>
            实例化连线管理器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.#ctor(EIIP.SClient.Offline.IConnectionDetectionStrategy)">
            <summary>
            实例化连线管理器。
            </summary>
            <param name="detectionStrategy">连接控测策略</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.Start">
            <summary>
            启动连线探测。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.Stop">
            <summary>
            停止连线探测。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.GOffline">
            <summary>
            强制系统离线。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.GOnline">
            <summary>
            强制系统在线。仅当已经在能连线的状态下，使用了强制离线时才有用。当物理离线时，强制在线会抛出错误。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.IsPolling">
            <summary>
            判断连线探测器是否在进行连线探测。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.RaiseConnectionStateChangedEvent(EIIP.SClient.Offline.ConnectionStateChangedEventArgs)">
            <summary>
            触发连线状态变更事件广播。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionManager.WorkerMethod">
            <summary>
            间断地调用工作线程探测连线。
            </summary>
        </member>
        <member name="E:EIIP.SClient.Offline.ConnectionManager.ConnectionStateChangedEvent">
            <summary>
            连线状态变更时事件成员。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ConnectionManager.ConnectionState">
            <summary>
            获取当前连线状态。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionStateChangedEventHandler">
            <summary>
            连线状态变更事件委托。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionStateChangedEventArgs">
            <summary>
            连线状态变更事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionStateChangedEventArgs.#ctor(EIIP.SClient.Offline.ConnectionState,EIIP.SClient.Offline.ConnectionState)">
            <summary>
            实例化连线状态变更事件参数。
            </summary>
            <param name="oldState">旧的连线状态。</param>
            <param name="newState">当前连线状态。</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ConnectionStateChangedEventArgs.CurrentState">
            <summary>
            获取当前连线状态。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ConnectionStateChangedEventArgs.OriginalState">
            <summary>
            获取旧的连线状态。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionUnavailableException">
            <summary>
            当连线管理器探测到无法连线时要抛出的异常类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionUnavailableException.#ctor">
            <summary>
            实例化无法连线时的异常类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionUnavailableException.#ctor(System.String)">
            <summary>
            实例化无法连线时的异常类。
            </summary>
            <param name="reason">异常原因</param>
        </member>
        <member name="T:EIIP.SClient.Offline.IConnectionDetectionStrategy">
            <summary>
            定义如何探测连接的接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IConnectionDetectionStrategy.IsConnected">
            <summary>
            测试是否连接至网络。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.IConnectionDetectionStrategy.PollInterval">
            <summary>
            获取探测的间隔秒数。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionState">
            <summary>
            指示连接的某一状态。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionState.OffLine">
            <summary>
            离线
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionState.OnLine">
            <summary>
            在线
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ConnectionState.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.DataLoaderManager">
            <summary>
            数据加载管理器。用于加载请求数据或将其刷新至引用数据缓存中。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.DataLoaderManager.#ctor(EIIP.SClient.Offline.IPayloadConsumer)">
            <summary>
            实例化 数据加载管理器。
            </summary>
            <param name="queueManager">消息队列管理器</param>
        </member>
        <member name="M:EIIP.SClient.Offline.DataLoaderManager.LoadData(System.String,EIIP.SClient.Forms.UpdateUICallbackType,EIIP.SClient.Offline.ReferenceDataDefinition,System.Guid)">
            <summary>
            加载数据至引用数据缓存。结果通过 ReferenceDataUpdaterServiceAgent 返回。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
            <param name="dataDefinition">要加载至引用数据缓存中的引用数据定义</param>
            <param name="serviceAgentGuid">负责通知返回结果的服务代理的 GUID</param>
        </member>
        <member name="M:EIIP.SClient.Offline.DataLoaderManager.LoadData(System.String,EIIP.SClient.Forms.UpdateUICallbackType,System.Guid,EIIP.SClient.Offline.ServiceAgentContext,EIIP.SClient.Offline.ReferenceDataDefinition)">
            <summary>
            加载数据至引用数据缓存。结果通过 ReferenceDataUpdaterServiceAgent 返回。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
            <param name="serviceAgentGuid">负责通知返回结果的服务代理的 GUID</param>
            <param name="serviceAgentGettingReturnedData">返回结果至原始调用者的服务代理上下文</param>
            <param name="dataDefinition">要加载至引用数据缓存中的引用数据定义</param>
        </member>
        <member name="M:EIIP.SClient.Offline.DataLoaderManager.RefreshData(System.Guid,EIIP.SClient.Offline.ReferenceDataDefinition)">
            <summary>
            将刷新引用数据缓存中过期数据的消息加至消息队列。
            </summary>
            <param name="serviceAgentGuid">负责通知返回结果的服务代理的 GUID</param>
            <param name="dataDefInReferenceCache">引用数据定义</param>
        </member>
        <member name="T:EIIP.SClient.Offline.Executor">
            <summary>
            消息处理器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Executor.m_MessageProvider">
            <summary>
            队列消息提供者。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Executor.m_Executor">
            <summary>
            消息处理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Executor.m_ManagedThread">
            <summary>
            线程管理器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.Executor.#ctor(EIIP.SClient.Offline.IQueueMessageProducer,EIIP.SClient.Offline.ICommandProcessor)">
            <summary>
            实例化消息处理器。
            </summary>
            <param name="messageProvider">队列消息提供者。不能为null</param>
            <param name="executor">消息处理器。不能为null</param>
        </member>
        <member name="M:EIIP.SClient.Offline.Executor.Start">
            <summary>
            启动消息处理进程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.Executor.Stop">
            <summary>
            停止消息处理进程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.Executor.OnlineOfflineCallback(System.Object,EIIP.SClient.Offline.ConnectionStateChangedEventArgs)">
            <summary>
            当应用的在线/离线状态变更时，调用该方法。应由客户端代码调用。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:EIIP.SClient.Offline.Executor.IsRunning">
            <summary>
            获取一个值，该值指示是否正在处理消息。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ICommandProcessor">
            <summary>
            定义消息处理命令接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ICommandProcessor.ExecuteMessage(EIIP.SClient.Offline.QueueMessage)">
            <summary>
            处理消息。
            </summary>
            <param name="queueMessage">要处理的消息</param>
        </member>
        <member name="T:EIIP.SClient.Offline.SimpleCommandProcessor">
            <summary>
            队列消息处理器类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.SimpleCommandProcessor.#ctor(EIIP.SClient.Offline.IResultConsumer)">
            <summary>
            实例化队列消息处理器。
            </summary>
            <param name="resultConsumer">消息执行结果处理器。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.SimpleCommandProcessor.ExecuteMessage(EIIP.SClient.Offline.QueueMessage)">
            <summary>
            处理消息。
            </summary>
            <param name="message">要处理的消息</param>
        </member>
        <member name="P:EIIP.SClient.Offline.SimpleCommandProcessor.ResultConsumer">
            <summary>
            获取或设置结果处理器。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.InvalidOnlineProxyContextDefinitionException">
            <summary>
            非法的连线代理上下文定义异常类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.InvalidOnlineProxyContextDefinitionException.#ctor(System.String,System.Exception)">
            <summary>
            实例化非法的连线代理上下文定义异常。
            </summary>
            <param name="reason">异常原因</param>
            <param name="exp">关联异常</param>
        </member>
        <member name="T:EIIP.SClient.Offline.OnlineProxyContext">
            <summary>
            连线代理上下文类。该类通过反射调用方法以封装必要的信息。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OnlineProxyContext.m_AssemblyName">
            <summary>
            要执行方法的程序集
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OnlineProxyContext.m_ClassName">
            <summary>
            方法所在类名，全完限定名称
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.OnlineProxyContext.m_MethodName">
            <summary>
            要执行方法的名称
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.OnlineProxyContext.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化连线代理上下文。
            </summary>
            <param name="assemblyName">要执行方法的程序集</param>
            <param name="className">方法所在类名，全完限定名称</param>
            <param name="methodName">要执行方法的名称</param>
        </member>
        <member name="M:EIIP.SClient.Offline.OnlineProxyContext.InvokeMethodThroughReflection(EIIP.SClient.Offline.Payload)">
            <summary>
            通过反射调用方法。
            </summary>
            <param name="dataToSend">要执行的信息数据</param>
        </member>
        <member name="T:EIIP.SClient.Offline.Payload">
            <summary>
            要排队存取的所有客户端信息的基类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_MethodToExecute">
            <summary>
            连线代现上下文。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_UpdateUICallbackType">
            <summary>
            更新UI的回调类型。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_ResultCallbackTarget">
            <summary>
            服务代理上下文。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_PayloadGuid">
            <summary>
            信息编号。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_AgentGuid">
            <summary>
            代理编号。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_FailureReason">
            <summary>
            异常。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_ClientID">
            <summary>
            关联客户端ID。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_CommandFailed">
            <summary>
            指示命令是否失败。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_RequestData">
            <summary>
            请求数据对象。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.Payload.m_Results">
            <summary>
            结果数据对象。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.Payload.#ctor(System.String,EIIP.SClient.Forms.UpdateUICallbackType,EIIP.SClient.Offline.OnlineProxyContext,System.Guid,EIIP.SClient.Offline.ServiceAgentContext,System.Object)">
            <summary>
            实例化要排队存取的所有客户端信息的基类。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
            <param name="methodToExecute">定义要调用的发送数据至远程服务器的方法</param>
            <param name="serviceAgentGuid">服务代理的唯一编码</param>
            <param name="resultCallbackTarget">将执行结果返回调用者的回调方法</param>
            <param name="dataToSend">要发送至远程服务器的数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.Payload.RecordFailure(System.Exception)">
            <summary>
            记录异常。
            </summary>
            <param name="e">异常</param>
        </member>
        <member name="M:EIIP.SClient.Offline.Payload.ClearResults">
            <summary>
            清除结果。重置环境以备再次调用。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.ClientID">
            <summary>
            获取关联客户端ID。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.UpdateUICallbackType">
            <summary>
            获取更新UI的回调类型。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.MethodToExecute">
            <summary>
            获取要执行的方法。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.ResultCallbackTarget">
            <summary>
            获取结果回调对象。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.PayloadGuid">
            <summary>
            获取当前实例的唯一编码。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.ServiceAgentGuid">
            <summary>
            获取代理的唯一编码。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.RequestData">
            <summary>
            获取执行请求的数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.Results">
            <summary>
            获取或设置执行结果数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.FailureReason">
            <summary>
            获取或设置失败的原因。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.Payload.Success">
            <summary>
            获取一个值，该值指示执行是否成攻。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IsolatedStorageCacheStorage">
            <summary>
            独立存储区缓存提供者类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageCacheStorage.m_StorageSpace">
            <summary>
            独立存储区。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageCacheStorage.m_IsEncrypted">
            <summary>
            指示是否加密。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.#ctor">
            <summary>
            实例化独立存储区缓存提供者。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.Remove(System.String)">
            <summary>
            从缓存中移除指定键。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.GetData(System.String)">
            <summary>
            获取指定缓存键的数据。
            </summary>
            <param name="key">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.Update(System.String,System.Object)">
            <summary>
            更新缓存数据。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.Add(System.String,System.Object)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="keyData">缓存数据。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.Flush">
            <summary>
            移除所有缓存项。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.FileExists(System.String)">
            <summary>
            检查是否存在指定文件。
            </summary>
            <param name="qualifiedKey">要搜索的文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.EIIP#Cache#ICacheMetadata#GetMetadata">
            <summary>
            获取元数据存储区中的所有元数据。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.EIIP#Cache#ICacheMetadata#Add(System.String,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="expirations">缓存项过期方案</param>
            <param name="priority">缓存项优先级</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.EIIP#Cache#ICacheMetadataWithCallback#Add(System.String,EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority,EIIP.Cache.CacheItemRemovedCallback)">
            <summary>
            添加缓存项。
            </summary>
            <param name="key">缓存键</param>
            <param name="expirations">缓存项过期方案</param>
            <param name="priority">缓存项优先级</param>
            <param name="callback">回调函数</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.EIIP#Cache#ICacheMetadata#Remove(System.String)">
            <summary>
            移除指定缓存键的元数据。
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageCacheStorage.EIIP#Cache#ICacheMetadata#Flush">
            <summary>
            移除所有元数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.DirectoryName">
            <summary>
            缓存根文件夹路径。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.MetaDataDirectoryRootName">
            <summary>
            缓存元数据文件夹。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.MetaDataDirectoryName">
            <summary>
            缓存元数据文件夹路径。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.Size">
            <summary>
            获取缓存中元素数量。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.MetadataSize">
            <summary>
            获取元数据缓存中元数据数量。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.CurrentSize">
            <summary>
            获取独立存储的当前大小。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageCacheStorage.IsEncrypted">
            <summary>
            获取或设置一个值，该值指示是否加密。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IsolatedStorageElement">
            <summary>
            定义独立存储区元素类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageElement.m_ElementStream">
            <summary>
            文件流。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageElement.m_IsEncrypted">
            <summary>
            指示是否加密。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageElement.OpenElement(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Boolean)">
            <summary>
            静态构造方法。打开一个已存在的文件。
            </summary>
            <param name="storageSpace">独立存储区</param>
            <param name="key">文件名</param>
            <param name="isEncrypted">指示是否加密。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageElement.CreateElement(System.IO.IsolatedStorage.IsolatedStorageFile,System.String,System.Boolean)">
            <summary>
            静态构造方法。创建文件。
            </summary>
            <param name="storageSpace">独立存储区</param>
            <param name="key">文件名</param>
            <param name="isEncrypted">指示是否加密。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageElement.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageElement.Read">
            <summary>
            读取对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageElement.Write(System.Object)">
            <summary>
            写入对象。
            </summary>
            <param name="objectToWrite"></param>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageElement.Length">
            <summary>
            获取文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.MetadataItem">
            <summary>
            在独立存储区存储的元数据类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.MetadataItem.m_Expirations">
            <summary>
            过期策略。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.MetadataItem.m_Priority">
            <summary>
            缓存优先级。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.MetadataItem.m_Type">
            <summary>
            缓存项移除时的回调函数类型。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.MetadataItem.m_MethodName">
            <summary>
            缓存项移除时的回调函数名称。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.MetadataItem.#ctor(EIIP.Cache.ICacheItemExpiration[],EIIP.Cache.CacheItemPriority,EIIP.Cache.CacheItemRemovedCallback)">
            <summary>
            实例化元数据项。
            </summary>
            <param name="expirations">过期策略。</param>
            <param name="priority">缓存优先级。</param>
            <param name="callback">缓存项移除时的回调函数。仅支持静态回调方法。</param>
        </member>
        <member name="P:EIIP.SClient.Offline.MetadataItem.Expirations">
            <summary>
            获取过期策略。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.MetadataItem.Priority">
            <summary>
            获取缓存优先级。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.MetadataItem.Callback">
            <summary>
            获取缓存项移除时的回调函数。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.DefaultDetectionStrategy">
            <summary>
            连接控测策略类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.DefaultDetectionStrategy.#ctor">
            <summary>
            实例化连接控测策略。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.DefaultDetectionStrategy.#ctor(System.Int32)">
            <summary>
            实例化连接控测策略。
            </summary>
            <param name="pollInterval">探测的间隔秒数。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.DefaultDetectionStrategy.IsConnected">
            <summary>
            测试是否连接至网络。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.DefaultDetectionStrategy.PollInterval">
            <summary>
            获取探测的间隔秒数。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.WinINetDetectionStrategy">
            <summary>
            使用 wininet.dll 组件的连接控测策略。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.WinINetDetectionStrategy.#ctor">
            <summary>
            实例化连接控测策略。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.WinINetDetectionStrategy.#ctor(System.Int32)">
            <summary>
            实例化连接控测策略。
            </summary>
            <param name="pollInterval">探测的间隔秒数。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.WinINetDetectionStrategy.IsConnected">
            <summary>
            测试是否连接至网络。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.WinINetDetectionStrategy.PollInterval">
            <summary>
            获取探测的间隔秒数。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.InMemoryQueueStorageProvider">
            <summary>
            系统内存队列存储提供者类。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.QueueStorageProvider">
            <summary>
            队列存储提供者基类。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IQueueStorageProvider">
            <summary>
            定义消息队列存储提供者接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IQueueStorageProvider.Enqueue(EIIP.SClient.Offline.QueueMessage)">
            <summary>
            存储指定消息。
            </summary>
            <param name="queueMessage">要存储的消息</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IQueueStorageProvider.Dequeue">
            <summary>
            从存储区中取出消息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IQueueStorageProvider.Flush">
            <summary>
            清除所有消息。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IQueueStorageProvider.Size">
            <summary>
            获取当前消息队列中的消息数量。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.QueueStorageProvider.m_IsEncrypted">
            <summary>
            指示是否加密。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.QueueStorageProvider.m_CryptoProvider">
            <summary>
            加密提供者。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.#ctor">
            <summary>
            实例化缺省队列存储提供者基类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.#ctor(System.Boolean)">
            <summary>
            实例化指定队列存储提供者基类。
            </summary>
            <param name="isEncrypted">是否加密。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.Enqueue(EIIP.SClient.Offline.QueueMessage)">
            <summary>
            存储指定消息。
            </summary>
            <param name="queueMessage">要存储的消息</param>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.Dequeue">
            <summary>
            从存储区中取出消息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.Flush">
            <summary>
            清除所有消息。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.DoEnqueue(System.Byte[])">
            <summary>
            将数据(字节数组)存入队列。
            </summary>
            <param name="objectToStream">要存储的数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.DoDequeue">
            <summary>
            将数据(字节数组)从队列中取出。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueStorageProvider.Initialize">
            <summary>
            初始化存储区。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueStorageProvider.IsEncrypted">
            <summary>
            获取一个值，该值指示是否加密。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueStorageProvider.Size">
            <summary>
            获取队列存储区中的消息数量。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.InMemoryQueueStorageProvider.#ctor">
            <summary>
            实例化默认系统内存队列存储提供者。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.InMemoryQueueStorageProvider.Flush">
            <summary>
            清除所有消息。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.InMemoryQueueStorageProvider.DoDequeue">
            <summary>
            从存储区中取出消息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.InMemoryQueueStorageProvider.DoEnqueue(System.Byte[])">
            <summary>
            存储指定消息。
            </summary>
            <param name="queueMessage">要存储的消息</param>
        </member>
        <member name="M:EIIP.SClient.Offline.InMemoryQueueStorageProvider.Initialize">
            <summary>
            初始化。不处理。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.InMemoryQueueStorageProvider.Size">
            <summary>
            获取当前消息队列中的消息数量。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IsolatedStorageQueueElement">
            <summary>
            独立存储区队列元素类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueElement.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            实例化独立存储区队列元素。
            </summary>
            <param name="key"></param>
            <param name="fileMode"></param>
            <param name="fileAccess"></param>
            <param name="fileShare"></param>
            <param name="storageSpace"></param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueElement.OpenElement(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            静态构造函数。打开已存在的元素时调用。
            </summary>
            <param name="storageSpace">独立存储区</param>
            <param name="key">要打开的文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueElement.CreateElement(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            静态构造函数。新建或覆盖元素时调用。
            </summary>
            <param name="storageSpace">独立存储区</param>
            <param name="key">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueElement.Dispose">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueElement.Read">
            <summary>
            从独立存储区读取一项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueElement.Write(System.Object)">
            <summary>
            将一项写入独立存储区。
            </summary>
            <param name="objectToWrite"></param>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueElement.Length">
            <summary>
            获取独立存储区队列元素文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader">
            <summary>
            管理存储在独立存储区中的队列元素类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.m_NextEnqueueIndex">
            <summary>
            入队索引。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.m_NextDequeueIndex">
            <summary>
            出队索引。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.m_NumOfElements">
            <summary>
            在独立存储区中的元素数量。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.m_PivotPoint">
            <summary>
            指针索引。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.#ctor(System.Int32)">
            <summary>
            实例化指定队列元素管理器。
            </summary>
            <param name="pivotPoint">基于0递增的指示点（文件名），文件名将在0-指示点间循环使用</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.IncrementIndex">
            <summary>
            为新项分配空间。在调用 EnqueueFileName 以添加一新消息至独立存储区前调用。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.DecrementIndex">
            <summary>
            为使用的项清除空间。在调用 DequeueFileName 以从独立存储区移除一旧消息前调用。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.IsQueueEmpty">
            <summary>
            查询队列是否为空。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.IsQueueFull">
            <summary>
            查询队列是否已满。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.WrappedIncrement(System.Int32)">
            <summary>
            包装递增。当达到指定点时，从起始点0开始编号。
            </summary>
            <param name="initialValue"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.Size">
            <summary>
            获取在独立存储区中的元素数量。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.EnqueueFileName">
            <summary>
            获取入队消息文件名。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueStorageHeader.DequeueFileName">
            <summary>
            获取出队消息文件名。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider">
            <summary>
            独立存储区队列存储提供者类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.MaximumNumberOfMessages">
            <summary>
            最大消息数量。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.HeaderName">
            <summary>
            队列头名称。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.m_StorageSpace">
            <summary>
            独立存储区。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.m_MaxNumber">
            <summary>
            最大消息数量。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.#ctor">
            <summary>
            实例化默认独立存储区队列存储提供者。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.#ctor(System.Int32)">
            <summary>
            实例化独立存储区队列存储提供者。
            </summary>
            <param name="maxNumber">队列最大长度</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.Flush">
            <summary>
            清除独立存储区所有元素。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.DoEnqueue(System.Byte[])">
            <summary>
            存储指定文件项。
            </summary>
            <param name="objectToStream">要存储的文件项</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.DoDequeue">
            <summary>
            从存储区中取出文件项。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.Initialize">
            <summary>
            初始化。不处理。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.QualifiedKeyName(System.String)">
            <summary>
            获取文件的完整路径。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.FileExists(System.String)">
            <summary>
            检查是否存在指定文件。
            </summary>
            <param name="qualifiedKey">要搜索的文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.GetQueueStorageHeader">
            <summary>
            获取独立存储区队列元素管理器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.DirectoryRootName">
            <summary>
            根目录名称。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.DirectoryName">
            <summary>
            目录名称。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.IsolatedStorageQueueStorageProvider.Size">
            <summary>
            获取当前消息队列中的消息数量。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IPayloadConsumer">
            <summary>
            定义轮询客户端信息的接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IPayloadConsumer.Enqueue(EIIP.SClient.Offline.Payload)">
            <summary>
            轮询客户端信息。
            </summary>
            <param name="payloadToEnqueue">要轮询的客户端信息</param>
        </member>
        <member name="T:EIIP.SClient.Offline.IQueueMessageProducer">
            <summary>
            定义提供队列消息的接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IQueueMessageProducer.Dequeue">
            <summary>
            消息出列。从队列中移除一个消息，并返回该消息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.IQueueMessageProducer.Size">
            <summary>
            获取消息队列的大小。
            </summary>
            <value></value>
        </member>
        <member name="T:EIIP.SClient.Offline.QueueManager">
            <summary>
            消息队列管理器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.QueueManager.m_QueueStorage">
            <summary>
            消息队列存储区。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueManager.#ctor(EIIP.SClient.Offline.IQueueStorageProvider)">
            <summary>
            实例化消息队列管理器。
            </summary>
            <param name="queueStorage">消息队列存储区。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueManager.Enqueue(EIIP.SClient.Offline.Payload)">
            <summary>
            存储指定消息。
            </summary>
            <param name="messageToEnqueue">要存储的消息</param>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueManager.Dequeue">
            <summary>
            从存储区中取出消息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueManager.Flush">
            <summary>
            清除所有消息。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueManager.Size">
            <summary>
            获取队列中的消息数量。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.QueueMessage">
            <summary>
            队列消息类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.QueueMessage.m_Payload">
            <summary>
            客户端信息
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.QueueMessage.#ctor(EIIP.SClient.Offline.Payload)">
            <summary>
            实例化队列消息。
            </summary>
            <param name="clientPayload">要附加的客户端信息。</param>
        </member>
        <member name="P:EIIP.SClient.Offline.QueueMessage.MessagePayload">
            <summary>
            获取客户端信息。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IReferenceDataCache">
            <summary>
            定义引用数据缓存的接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.Store(EIIP.SClient.Offline.ReferenceDataDefinition,System.Object)">
            <summary>
            在缓存中存储引用数据。
            </summary>
            <param name="referenceDataDefinition">要被缓存的引用数据定义（元数据）</param>
            <param name="referenceDataValue">要被存储的对象，必须是能被序列化的</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.Retrieve(System.String)">
            <summary>
            获取指定缓存键的引用数据对象。
            </summary>
            <param name="cacheKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.Update(System.String,System.Object)">
            <summary>
            更新指定缓存键的引用数据对象。
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="referenceDataValue">要被存储的对象，必须是能被序列化的</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.Remove(System.String)">
            <summary>
            移除指定缓存键的引用数据对象。
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.IsDirty(System.String)">
            <summary>
            检查指定缓存键的引用数据对象是否是脏的。
            </summary>
            <param name="cacheKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.MarkAsClean(System.String)">
            <summary>
            清除一次指定缓存键的引用数据对象的脏数据标识。
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.IReferenceDataCache.ItemHasBeenExpired(System.String)">
            <summary>
            测试指定缓存键的缓存项是否已过期。
            </summary>
            <param name="expiredKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SClient.Offline.ReferenceCacheDataPayload">
            <summary>
            包装了引用数据定义的要排队存取的所有客户端信息的类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceCacheDataPayload.m_DataDef">
            <summary>
            引用数据定义
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceCacheDataPayload.m_IsRefreshMessage">
            <summary>
            指示是否是需要刷新的消息。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceCacheDataPayload.IsRefreshMessage">
            <summary>
            获取或设置一个值，该值指示是否是需要刷新的消息。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceCacheDataPayload.#ctor(System.String,EIIP.SClient.Forms.UpdateUICallbackType,EIIP.SClient.Offline.OnlineProxyContext,System.Guid,EIIP.SClient.Offline.ReferenceDataDefinition)">
            <summary>
            实例化。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
            <param name="proxyMethodToInvoke">要调用的在线返回数据的代理方法</param>
            <param name="serviceAgentGuid">负责通知返回请求结果的服务代理的 GUID</param>
            <param name="dataDef">包装数据的引用数据定义</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceCacheDataPayload.#ctor(System.String,EIIP.SClient.Forms.UpdateUICallbackType,EIIP.SClient.Offline.OnlineProxyContext,System.Guid,EIIP.SClient.Offline.ReferenceDataDefinition,System.Boolean)">
            <summary>
            实例化。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
            <param name="proxyMethodToInvoke">要调用的在线返回数据的代理方法</param>
            <param name="serviceAgentGuid">负责通知返回请求结果的服务代理的 GUID</param>
            <param name="dataDef">包装数据的引用数据定义</param>
            <param name="isRefreshMessage">指示是否是需要刷新的消息。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceCacheDataPayload.#ctor(System.String,EIIP.SClient.Forms.UpdateUICallbackType,EIIP.SClient.Offline.OnlineProxyContext,System.Guid,EIIP.SClient.Offline.ServiceAgentContext,EIIP.SClient.Offline.ReferenceDataDefinition)">
            <summary>
            实例化。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
            <param name="proxyMethodToInvoke">要调用的在线返回数据的代理方法</param>
            <param name="serviceAgentGuid">负责通知返回请求结果的服务代理的 GUID</param>
            <param name="serviceAgentToInvoke">调用并反回结果的服务代理方法</param>
            <param name="dataDef">包装数据的引用数据定义</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceCacheDataPayload.UpdateDataToReturn(System.Object)">
            <summary>
            将加载的数据更新至执行结果。
            </summary>
            <param name="updatedData">要更新的加载数据</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceCacheDataPayload.DataDefinition">
            <summary>
            获取引用数据定义。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ReferenceCacheItemNullException">
            <summary>
            当引用缓存项不存在时，引发的异常。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceCacheItemNullException.#ctor(System.String)">
            <summary>
            实例化引用缓存项不存在时的异常。
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="T:EIIP.SClient.Offline.ReferenceDataCache">
            <summary>
            提供一个缓存管理器实例的包装类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataCache.m_CacheManager">
            <summary>
            缓存管理器实例。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.Store(EIIP.SClient.Offline.ReferenceDataDefinition,System.Object)">
            <summary>
            存储指定数据(关联至元数据)至引用数据缓存中。
            </summary>
            <param name="referenceDataDef">要存储数据将关联的元数据</param>
            <param name="newDataValue">要存储的数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.Update(System.String,System.Object)">
            <summary>
            更新指定键的引用缓存数据。
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="newReferenceDataValue">新数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.Retrieve(System.String)">
            <summary>
            从引用数据缓存中获取指定缓存键的数据。不存在则返回null。
            </summary>
            <param name="cacheKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.Remove(System.String)">
            <summary>
            移除指定缓存键的数据。
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.IsDirty(System.String)">
            <summary>
            检查指定缓存键的数据是否是脏的。
            </summary>
            <param name="cacheKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.MarkAsClean(System.String)">
            <summary>
            清除一次指定缓存键数据的脏标记。
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.ItemHasBeenExpired(System.String)">
            <summary>
            标记缓存键指定的引用数据定义已过期，并引发刷新事件。
            当有标识未过期的行为发生时，则返回该引用数据定义，否则返回null。
            </summary>
            <param name="expiredKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.InsertDataIntoCache(EIIP.SClient.Offline.ReferenceDataDefinition,System.Object)">
            <summary>
            将数据放入缓存。
            </summary>
            <param name="dataDef">要包装数据的引用数据定义</param>
            <param name="valueToCache">数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.AddRootElementToCache(EIIP.SClient.Offline.ReferenceDataDefinition)">
            <summary>
            将原始键与元数据键的对应关系加入到缓存中。
            </summary>
            <param name="dataDef">包装数据的引用数据定义</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.GetExpirationDelegate">
            <summary>
            获取过期调用委托。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataCache.GetReferenceDataDefinition(System.String)">
            <summary>
            获取指定用户缓存键对应的引用数据定义。
            </summary>
            <param name="originalKey">用户指定的缓存键</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SClient.Offline.ReferenceDataDefinition">
            <summary>
            定义在引用缓存中的引用数据定义的类。它控制信息数据的刷新、过期及清理脏数据。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.CacheKeyPrefix">
            <summary>
            缓存键前缀。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.UserKeyPrefix">
            <summary>
            用户键前缀。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.NoRefreshNeededEver">
            <summary>
            从不刷新。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.m_CacheKey">
            <summary>
            用户指定的缓存键。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.m_RefreshMethod">
            <summary>
            刷新方法。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.m_NumberOfChanges">
            <summary>
            变更的次数。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.m_AgeInSeconds">
            <summary>
            生存秒数。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.m_IsExpired">
            <summary>
            指示是否过期.
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataDefinition.m_AssociatedRequestData">
            <summary>
            关联的请求数据。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.#ctor(System.String,EIIP.SClient.Offline.OnlineProxyContext)">
            <summary>
            实例化指定的引用数据定义。
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="refreshMethod">刷新数据的在线代理</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.#ctor(System.String,EIIP.SClient.Offline.OnlineProxyContext,System.Object)">
            <summary>
            实例化指定的引用数据定义。
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="refreshMethod">刷新数据的在线代理</param>
            <param name="associatedRequestData">关联的请求数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.#ctor(System.String,System.Int32,EIIP.SClient.Offline.OnlineProxyContext)">
            <summary>
            实例化指定的引用数据定义。
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="delayInSecondsUntilRefresh">刷新延时秒数</param>
            <param name="refreshMethod">刷新数据的在线代理</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.#ctor(System.String,System.Int32,EIIP.SClient.Offline.OnlineProxyContext,System.Object)">
            <summary>
            实例化指定的引用数据定义。
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="delayInSecondsUntilRefresh">刷新延时秒数</param>
            <param name="refreshMethod">刷新数据的在线代理</param>
            <param name="associatedRequestData">关联的请求数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.IsRefreshNeeded">
            <summary>
            判断是否需要刷新。当干净数据过期时需要刷新，旧数据则不需要刷新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.IsCacheKeyValid">
            <summary>
            测试缓存键是否是合法的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.IsItemRefreshable">
            <summary>
            查询数据项是否需要刷新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.MarkAsClean">
            <summary>
            标记缓存项以清理一次脏数据。至到调用 MarkAsClean() 方法前，变更的数据会一直保持脏的状态（次数）。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.MarkAsDirty">
            <summary>
            标记缓存项一次脏数据。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataDefinition.MetadataKey(System.String)">
            <summary>
            获取引用数据缓存中用户指定缓存键对应的元数据缓存键。
            </summary>
            <param name="originalKey">用户指定的缓存键</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.OriginalKey">
            <summary>
            获取用户指定的缓存键。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.CacheKey">
            <summary>
            获取元数据的缓存键。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.UserDataCacheKey">
            <summary>
            获取用户数据实际存储的缓存键。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.RefreshMethod">
            <summary>
            获取用于刷新的方法。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.RefreshInterval">
            <summary>
            获取刷新间隔秒数。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.AssociatedRequestData">
            <summary>
            获取关联的请求数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.Dirty">
            <summary>
            获取一个值，该值指示是否含有脏数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReferenceDataDefinition.Expired">
            <summary>
            获取一个值，该值指示是否过期。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ReferenceDataRefreshController">
            <summary>
            引用数据刷新控制器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataRefreshController.m_DataLoaderManager">
            <summary>
            数据加载管理器。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ReferenceDataRefreshController.m_ReferenceCache">
            <summary>
            引用数据缓存。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataRefreshController.#ctor(EIIP.SClient.Offline.DataLoaderManager,EIIP.SClient.Offline.IReferenceDataCache)">
            <summary>
            实例化引用数据刷新控制器类。
            </summary>
            <param name="dataLoaderManager">数据加载管理器。</param>
            <param name="referenceCache">引用数据缓存。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataRefreshController.Refresh(System.String)">
            <summary>
            刷新缓存数据。
            </summary>
            <param name="expiredItemInCache">过期缓存键</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReferenceDataRefreshController.CacheItemExpiredCallback(System.String,EIIP.Cache.CacheItemRemoveCause)">
            <summary>
            缓存项过期回调函数。
            </summary>
            <param name="expiredItemKey">过期缓存键</param>
            <param name="removedCause">指定缓存项的移除原因</param>
        </member>
        <member name="T:EIIP.SClient.Offline.DataAvailableEventHandler">
            <summary>
            当有可用的数据及UI能被刷新时事件委托。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.DataAvailableEventArgs">
            <summary>
            当有可用的数据及UI能被刷新时事件参数类。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ServiceAgentEventArgs">
            <summary>
            服务代理事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentEventArgs.#ctor(System.String)">
            <summary>
            实例化服务代理事件参数。
            </summary>
            <param name="clientID">操作关联的客户端标识。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentEventArgs.#ctor(EIIP.SClient.Offline.Payload)">
            <summary>
            实例化服务代理事件参数。
            </summary>
            <param name="payload">消息加载项</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgentEventArgs.ClientID">
            <summary>
            获取操作关联的客户端标识。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.DataAvailableEventArgs.#ctor(System.String,System.Object)">
            <summary>
            实例化当有可用的数据及UI能被刷新时事件参数。
            </summary>
            <param name="cacheKey">原始缓存键</param>
            <param name="refAppData">数据</param>
        </member>
        <member name="M:EIIP.SClient.Offline.DataAvailableEventArgs.#ctor(EIIP.SClient.Offline.ReferenceCacheDataPayload)">
            <summary>
            实例化当有可用的数据及UI能被刷新时事件参数。
            </summary>
            <param name="payload">引用缓存数据的消息加载项</param>
        </member>
        <member name="P:EIIP.SClient.Offline.DataAvailableEventArgs.Data">
            <summary>
            获取下载数据。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.DownloadData">
            <summary>
            定义下载数据的包装类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.DownloadData.#ctor(System.String,System.String,System.Object)">
            <summary>
            实例化下载数据的包装类。
            </summary>
            <param name="clientID">操作关联的客户端标识。</param>
            <param name="cacheKey">原始缓存键</param>
            <param name="refAppData">数据</param>
        </member>
        <member name="P:EIIP.SClient.Offline.DownloadData.ClientID">
            <summary>
            获取操作关联的客户端标识。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.DownloadData.AppData">
            <summary>
            获取应用数据。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.DownloadData.CacheKey">
            <summary>
            获取原始缓存键。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.FailsafeServiceAgent">
            <summary>
            处理故障的服务代理类。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ServiceAgent">
            <summary>
            服务代理基类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ServiceAgent.guid">
            <summary>
            唯一编码。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgent.#ctor">
            <summary>
            实例化服务代理基类。并尝试自动加入服务代理注册表。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgent.SetServiceAgentRegistry(EIIP.SClient.Offline.ServiceAgentRegistry)">
            <summary>
            设置服务代理注册表。
            </summary>
            <param name="theAgentRegistry">服务代理注册表。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgent.ReportError(EIIP.SClient.Offline.Payload)">
            <summary>
            报告消息错误。在继承类中实现。
            </summary>
            <param name="payloadWithError">有故障的消息加载</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgent.Guid">
            <summary>
            获取当前服务代理实例的唯一编码。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.FailsafeServiceAgent.ReportError(EIIP.SClient.Offline.Payload)">
            <summary>
            报告消息错误。
            </summary>
            <param name="payloadWithError">有故障的消息加载</param>
        </member>
        <member name="E:EIIP.SClient.Offline.FailsafeServiceAgent.ErrorEvent">
            <summary>
            消息(方法)执行失败报告异常的事件成员。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.IResultConsumer">
            <summary>
            定义结果处理的接口。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.IResultConsumer.ReturnDataToCaller(EIIP.SClient.Offline.Payload)">
            <summary>
            将结束数据返回原始调用者。
            </summary>
            <param name="payload">客户端信息数据，不能为null</param>
        </member>
        <member name="T:EIIP.SClient.Offline.MethodExecutionFailureReportEventHandler">
            <summary>
            定义消息(方法)执行失败报告异常的回调方法事件委托。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EIIP.SClient.Offline.MethodExecutionFailureReportEventArgs">
            <summary>
            消息(方法)执行失败报告异常的事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.MethodExecutionFailureReportEventArgs.#ctor(EIIP.SClient.Offline.Payload)">
            <summary>
            实例化消息(方法)执行失败报告异常的事件参数。
            </summary>
            <param name="payloadWithFailure">有故障的消息加载</param>
        </member>
        <member name="P:EIIP.SClient.Offline.MethodExecutionFailureReportEventArgs.Payload">
            <summary>
            获取有故障的消息加载。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ReportErrorEventHandler">
            <summary>
            当发生错误时就广播的事件委托。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ReportErrorEventArgs">
            <summary>
            广播错误事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ReportErrorEventArgs.#ctor(System.String,System.String,EIIP.SClient.Forms.UpdateUICallbackType)">
            <summary>
            实例化广播错误事件参数。
            </summary>
            <param name="clientID">关联客户端标识。</param>
            <param name="reason">错误原因。</param>
            <param name="updateUICallbackType">更新UI的回调类型。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ReportErrorEventArgs.#ctor(EIIP.SClient.Offline.Payload)">
            <summary>
            实例化当有可用的数据及UI能被刷新时事件参数。
            </summary>
            <param name="payload">引用缓存数据的消息加载项</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ReportErrorEventArgs.ClientID">
            <summary>
            获取关联客户端标识。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReportErrorEventArgs.FailureReason">
            <summary>
            获取失败原因。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ReportErrorEventArgs.EventSourceType">
            <summary>
            获取引发错误的事件源类型。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ServiceAgentContext">
            <summary>
            服务代理上下文类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentContext.#ctor(System.String)">
            <summary>
            实例化
            </summary>
            <param name="methodToInvoke">要通过反射调用的方法名称</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgentContext.MethodToInvoke">
            <summary>
            获取要通过反射调用的方法名称。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ServiceAgentManager">
            <summary>
            服务代理管理器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ServiceAgentManager.m_AgentRegistry">
            <summary>
            服务代理注册表。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentManager.#ctor(EIIP.SClient.Offline.ServiceAgentRegistry)">
            <summary>
            实例化服务代理管理器。
            </summary>
            <param name="agentRegistry">服务代理注册表。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentManager.ReturnDataToCaller(EIIP.SClient.Offline.Payload)">
            <summary>
            返回服务代理成功或失败的通知。
            </summary>
            <param name="payload">包含服务代理编码的加载项</param>
        </member>
        <member name="T:EIIP.SClient.Offline.ServiceAgentRegistry">
            <summary>
            服务代理注册表类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ServiceAgentRegistry.m_RegisteredAgents">
            <summary>
            服务代理注册表。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ServiceAgentRegistry.m_FailsafeAgent">
            <summary>
            处理故障的服务代理。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentRegistry.Find(System.Guid)">
            <summary>
            获取指定编码的服务代理。失败返回处理故障的服务代理。
            </summary>
            <param name="serviceAgentGuid">服务代理编码，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentRegistry.Register(EIIP.SClient.Offline.ServiceAgent)">
            <summary>
            注册指定服务代理。
            </summary>
            <param name="agentToRegister">要注册的服务代理，不能为null</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ServiceAgentRegistry.Remove(System.Guid)">
            <summary>
            取消注册。
            </summary>
            <param name="agentToRemove">要取消注册的服务代理编码</param>
        </member>
        <member name="P:EIIP.SClient.Offline.ServiceAgentRegistry.FailsafeServiceAgent">
            <summary>
            获取处理故障的服务代理。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.DataUpdatedEventHandler">
            <summary>
            数据上传事件处理委托。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ClientServiceAgent">
            <summary>
            上传数据服务代理类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.#ctor">
            <summary>
            实例化上传数据服务代理。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.UpdateData(System.String,System.Object,System.String,System.String,System.String)">
            <summary>
            将上传数据消息加入消息队列。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="data">要上传的数据</param>
            <param name="onlineProxyAssemblyName">连线代理所在程序集名称</param>
            <param name="onlineProxyClassName">连线代理类的完全限定名</param>
            <param name="onlineProxyMethodName">要调用的连线代理类的方法名称</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.DataUpdatedCallBack(EIIP.SClient.Offline.Payload)">
            <summary>
            已上传完数据时的回调方法。
            </summary>
            <param name="updateReference">上传数据的消息加载</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.DownloadData(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            通过下载服务获取数据。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="onlineProxyAssemblyName">连线代理所在程序集名称</param>
            <param name="onlineProxyClassName">连线代理类的完全限定名</param>
            <param name="onlineProxyMethodName">要调用的连线代理类的方法名称</param>
            <param name="cacheKey">缓存键，做为取回确定数据的唯一标识</param>
            <param name="absoluteExpirationTime">绝对过期时间</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.DownloadData(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            通过下载服务获取数据。
            </summary>
            <param name="clientID">客户端标识ID</param>
            <param name="onlineProxyAssemblyName">连线代理所在程序集名称</param>
            <param name="onlineProxyClassName">连线代理类的完全限定名</param>
            <param name="onlineProxyMethodName">要调用的连线代理类的方法名称</param>
            <param name="serviceAgentMethodTobeInvoked">服务代理的回调方法</param>
            <param name="cacheKey">缓存键</param>
            <param name="absoluteExpirationTime">绝对过期时间</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.DataAvailableCallBack(EIIP.SClient.Offline.Payload)">
            <summary>
            当有可用数据时的回调方法。
            </summary>
            <param name="refPayload">消息加载项</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.ReportError(EIIP.SClient.Offline.Payload)">
            <summary>
            报告消息错误。
            </summary>
            <param name="payloadWithError">有故障的消息加载</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ClientServiceAgent.HandleMessageFailure(EIIP.SClient.Offline.Payload)">
            <summary>
            处理消息错误。
            </summary>
            <param name="messagePayload">有故障的消息加载</param>
        </member>
        <member name="E:EIIP.SClient.Offline.ClientServiceAgent.DataUpdatedEvent">
            <summary>
            数据已上传事件委托。
            </summary>
        </member>
        <member name="E:EIIP.SClient.Offline.ClientServiceAgent.DataAvailableEvent">
            <summary>
            可用数据事件成员。当服务代理管理器通知有可用数据时被触发。
            </summary>
        </member>
        <member name="E:EIIP.SClient.Offline.ClientServiceAgent.ReportErrorEvent">
            <summary>
            当执行消息时有错误发生时，服务代理管理器通知触发。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.ThreadPoolInvoker">
            <summary>
            基于线程池返回数据至原始服务代理的线程调用者类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ThreadPoolInvoker.m_ServiceAgent">
            <summary>
            服务代理
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ThreadPoolInvoker.m_Payload">
            <summary>
            包含服务代理编码的加载项
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadPoolInvoker.#ctor(EIIP.SClient.Offline.ServiceAgent,EIIP.SClient.Offline.Payload)">
            <summary>
            实例化线程池调用者。
            </summary>
            <param name="serviceAgent">返回结果数据的服务代理，不能为null</param>
            <param name="payload">加载项，不能为null</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadPoolInvoker.ReturnResults">
            <summary>
            返回结果。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadPoolInvoker.ReturnFailure">
            <summary>
            返回调用失败的结果。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadPoolInvoker.ReturnResultsOnOtherThread(System.Object)">
            <summary>
            线程池调用。
            </summary>
            <param name="notUsedStateObject">未用状态。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadPoolInvoker.ReportFailureOnOtherThread(System.Object)">
            <summary>
            线程池调用。
            </summary>
            <param name="notUsedStateObject"></param>
        </member>
        <member name="T:EIIP.SClient.Offline.ThreadRunner">
            <summary>
            处理启动、停止方式及无线程池管理的线程执行者。类中所有方法均是线程安全的。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ThreadRunner.m_WorkerThread">
            <summary>
            工作线程。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ThreadRunner.m_DelegateToRun">
            <summary>
            要执行的委托。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.ThreadRunner.m_lock">
            <summary>
            静态锁。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadRunner.#ctor(System.Threading.ThreadStart)">
            <summary>
            实例化线程执行者。
            </summary>
            <param name="delegateToRun">要在其它线程执行的委托。</param>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadRunner.Start">
            <summary>
            启动线程执行委托方法。在调用 Stop() 方法前该方法不会启动另一个线程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadRunner.Stop">
            <summary>
            终止线程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ThreadRunner.CreateWorkerThread(System.Threading.ThreadStart)">
            <summary>
            创建工作线程。
            </summary>
            <param name="delegateToRun">要在工作线程上执行的委托。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SClient.Offline.ThreadRunner.IsRunning">
            <summary>
            获取一个值，该值指示当前内置线程的运行状态。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.ThreadRunner.DelegateToRun">
            <summary>
            获取要在工作线程上执行的委托。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Offline.WorkerThread">
            <summary>
            工作线程类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.WorkerThread.m_DelegateToRun">
            <summary>
            在当前工作线程上调用的委托。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.WorkerThread.m_WorkerThread">
            <summary>
            工作线程。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Offline.WorkerThread.m_IsRunning">
            <summary>
            指示当前线程的运行状态。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.WorkerThread.#ctor(System.Threading.ThreadStart)">
            <summary>
            实例化工作线程。
            </summary>
            <param name="delegateToRun">要在当前工作线程上调用的委托</param>
        </member>
        <member name="M:EIIP.SClient.Offline.WorkerThread.Start">
            <summary>
            启动当前线程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.WorkerThread.Stop">
            <summary>
            停止当前线程。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.WorkerThread.WorkerMethod">
            <summary>
            执行委托方法调用。该方法会不断地调用，至到使用 Stop() 方法停止。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.WorkerThread.IsRunning">
            <summary>
            获取一个值，该值指示当前线程的运行状态。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Offline.WorkerThread.DelegateToRun">
            <summary>
            获取在当前工作线程上调用的委托。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Library.Connection">
            <summary>
            网络在线联机类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.Connection.IsOnline">
            <summary>
            测试是否在线联机。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Library.Connection.IsOnlineAsync">
            <summary>
            异步测试是否在线联机。
            </summary>
        </member>
        <member name="E:EIIP.SClient.Library.Connection.IsOnlineCompleted">
            <summary>
            在线联机事件成员。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Library.Connection.IsAvaiable">
            <summary>
            可用连接委托。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SClient.Offline.ConnectionHelper">
            <summary>
            连接辅助类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Offline.ConnectionHelper.IsConnected">
            <summary>
            判断是否连线。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SClient.Library.CredentialSoapHeader">
            <summary>
            身份凭证类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Library.CredentialSoapHeader.m_UserName">
            <summary>
            用户名。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Library.CredentialSoapHeader.m_Password">
            <summary>
            用户密码。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.CredentialSoapHeader.UserName">
            <summary>
            获取或设置用户名。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.CredentialSoapHeader.Password">
            <summary>
            获取或设置用户密码。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.CredentialSoapHeader.AccountID">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.CredentialSoapHeader.PIN">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.SClient.Library.EventLogHelper">
            <summary>
            Windows 事件辅助类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Library.EventLogHelper.EventLogSource">
            <summary>
            事件记录日志名称。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.Exists(System.String)">
            <summary>
            确定该日志是否存在于本地计算机上。
            </summary>
            <param name="logName">要搜索的日志名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.CreateSource(System.String)">
            <summary>
            在本地计算机上创建指定的自定义日志。
            </summary>
            <param name="logName">日志名称。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.RemoveSource(System.String)">
            <summary>
            从本地计算机的事件日志中移除事件源注册。
            </summary>
            <param name="logName">日志名称。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.LogEvent(System.String,System.String,System.Diagnostics.EventLogEntryType)">
            <summary>
            使用指定的注册事件源，将错误、警告、信息、成功审核或失败审核项与给定的消息文本一起写入事件日志。
            </summary>
            <param name="eventLogSource">应用程序在指定计算机上用来注册的源。</param>
            <param name="message">要写入事件日志的字符串。</param>
            <param name="eventLogEntryType">System.Diagnostics.EventLogEntryType 值之一。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.LogError(System.String)">
            <summary>
            记录错误信息。
            </summary>
            <param name="message">错误信息。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.LogFailureAudit(System.String)">
            <summary>
            记录失败审核项信息。
            </summary>
            <param name="message">失败审核项信息。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.LogSuccessAudit(System.String)">
            <summary>
            记录成功审核项信息。
            </summary>
            <param name="message">成功审核项信息。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.LogWarning(System.String)">
            <summary>
            记录警告信息。
            </summary>
            <param name="message">警告信息。</param>
        </member>
        <member name="M:EIIP.SClient.Library.EventLogHelper.LogInformation(System.String)">
            <summary>
            记录信息。
            </summary>
            <param name="message">信息。</param>
        </member>
        <member name="T:EIIP.SClient.Library.LogError">
            <summary>
            记录错误信息的类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.LogError.Write(System.String)">
            <summary>
            写入错误信息记录。
            </summary>
            <param name="errorMessage">错误信息</param>
        </member>
        <member name="T:EIIP.SClient.Patterns.Command">
            <summary>
            用于实现命令模式的命令类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Patterns.Command.m_action">
            <summary>
            命令执行的成员。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Patterns.Command.m_isEnabled">
            <summary>
            指示指示命令是否为允许状态。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Patterns.Command.#ctor(EIIP.SClient.Patterns.Command.Action)">
            <summary>
            实例化指定命令。
            </summary>
            <param name="action">命令行为</param>
        </member>
        <member name="M:EIIP.SClient.Patterns.Command.Execute">
            <summary>
            执行命令。
            </summary>
        </member>
        <member name="E:EIIP.SClient.Patterns.Command.EnableChanged">
            <summary>
            命令允许状态变更的事件成员。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Patterns.Command.IsEnabled">
            <summary>
            获取或设置一个值，指示指示命令是否为允许状态。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Patterns.Command.EnableChangedEventHandler">
            <summary>
            提供命令允许状态变更的事件委托。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EIIP.SClient.Patterns.Command.Action">
            <summary>
            提供命令执行的委托。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Patterns.Command.EnableChangedEventArgs">
            <summary>
            命令允许状态变更事件参数类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Patterns.Command.EnableChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            实例化命令允许状态变更事件参数。
            </summary>
            <param name="isEnabled">指示命令是否为允许状态。</param>
        </member>
        <member name="P:EIIP.SClient.Patterns.Command.EnableChangedEventArgs.IsEnabled">
            <summary>
            获取一个值，该值指示命令是否为允许状态。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Patterns.Commander">
            <summary>
            为菜单项与工具栏提供的命令驱动模式基类。使用适配器模式将UI元素与命令对象关联。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Patterns.Commander.m_command">
            <summary>
            命令对象。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Patterns.Commander.#ctor(EIIP.SClient.Patterns.Command)">
            <summary>
            实例化命令驱动模式基类。
            </summary>
            <param name="command">命令对象。</param>
        </member>
        <member name="M:EIIP.SClient.Patterns.Commander.HandleEnableChangedEvent(System.Object,EIIP.SClient.Patterns.Command.EnableChangedEventArgs)">
            <summary>
            处理命令允许状态变更事件。在继承类中实现。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EIIP.SClient.Patterns.IObserver">
            <summary>
            观察者模式要实现的一个接口。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Patterns.IObserver.Subject">
            <summary>
            设置获取支持。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Patterns.ISubject">
            <summary>
            实现观察者模式中的一个标记接口。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Patterns.MenuItemCommander">
            <summary>
            菜单命令适配器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Patterns.MenuItemCommander.m_item">
            <summary>
            菜单项。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Patterns.MenuItemCommander.#ctor(System.Windows.Forms.ToolStripMenuItem,EIIP.SClient.Patterns.Command)">
            <summary>
            实例化菜单命令适配器。
            </summary>
            <param name="item">菜单项。</param>
            <param name="command">要关联的菜单命令。</param>
        </member>
        <member name="M:EIIP.SClient.Patterns.MenuItemCommander.HandleEnableChangedEvent(System.Object,EIIP.SClient.Patterns.Command.EnableChangedEventArgs)">
            <summary>
            处理命令允许状态变更事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.SClient.Patterns.MenuItemCommander.HandleUIEvent(System.Object,System.EventArgs)">
            <summary>
            处理菜单点击事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.SClient.Patterns.MenuItemCommander.Connect(System.Windows.Forms.ToolStripMenuItem,EIIP.SClient.Patterns.Command)">
            <summary>
            适配指定的菜单项与对应的命令。
            </summary>
            <param name="item">菜单项。</param>
            <param name="command">要关联的菜单命令。</param>
        </member>
        <member name="T:EIIP.SClient.Patterns.ToolStripButtonCommander">
            <summary>
            工具条按钮命令适配器类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Patterns.ToolStripButtonCommander.m_button">
            <summary>
            工具条按钮。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Patterns.ToolStripButtonCommander.#ctor(System.Windows.Forms.ToolStripButton,EIIP.SClient.Patterns.Command)">
            <summary>
            实例化工具条按钮命令适配器。
            </summary>
            <param name="button">工具条按钮</param>
            <param name="command">要关联的菜单命令。</param>
        </member>
        <member name="M:EIIP.SClient.Patterns.ToolStripButtonCommander.HandleEnableChangedEvent(System.Object,EIIP.SClient.Patterns.Command.EnableChangedEventArgs)">
            <summary>
            处理命令允许状态变更事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.SClient.Patterns.ToolStripButtonCommander.button_Click(System.Object,System.EventArgs)">
            <summary>
            处理单击事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.SClient.Patterns.ToolStripButtonCommander.Connect(System.Windows.Forms.ToolStripButton,EIIP.SClient.Patterns.Command)">
            <summary>
            适配指定的工具条按钮项与对应的命令。
            </summary>
            <param name="button">工具条按钮项</param>
            <param name="command">要关联的菜单命令。</param>
        </member>
        <member name="T:EIIP.SClient.Library.UserSettings">
            <summary>
            支持(加密)序列化的用户设置类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.UserSettings.#ctor">
            <summary>
            实例化用户设置类。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.UserSettings.Deserialize">
            <summary>
            从磁盘文件反序列化。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Library.UserSettings.Serialize">
            <summary>
            序列化至磁盘文件。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.UserSettings.Delete">
            <summary>
            删除序列化磁盘文件。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Library.UserSettings.CanWorkOffline">
            <summary>
            获取一个值，指示是否能工作在离线状态。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Library.UserSettings.Initialize">
            <summary>
            初始化实例。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.UserSettings.Instance">
            <summary>
            获取单实例。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.UserSettings.UserName">
            <summary>
            获取或设置用户名称。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.UserSettings.Password">
            <summary>
            获取或设置用户密码。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.UserSettings.WorkOffline">
            <summary>
            获取或设置一个值，该值指示是否工作在离线状态。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Library.UserSettings.FileName">
            <summary>
            获取磁盘文件名。
            </summary>
        </member>
        <member name="T:EIIP.Type.LogicOperator">
            <summary>
            指定系统逻辑运算符的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.小于">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.等于">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.大于">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.小于等于">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.不等于">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.大于等于">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.包含">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.不含">
            <summary>
            不含
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.之间">
            <summary>
            之间
            </summary>
        </member>
        <member name="F:EIIP.Type.LogicOperator.之外">
            <summary>
            之外
            </summary>
        </member>
        <member name="T:EIIP.Framework.LunarCalendar">
            <summary>
            农历类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.START_YEAR">
            <summary>
            农历查询最早年份
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.END_YEAR">
            <summary>
            农历查询最晚年份
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.ConstellationName">
            <summary>
            星座名称
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.HolDayName">
            <summary>
            农历节气名称
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.MonthDaysInfo">
            <summary>
            阴历1901年到2050年每年中的月天数信息。
            阴历每月只能是29或30天，一年用12（或13）个二进制位表示，对应位为1表30天，否则为29天 
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.LeapMonthInfo">
            <summary>
            阴历1901年到2050年闰月的月份信息，如没有则为0，每字节存两年 
            </summary>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.HolDayCollator">
            <summary>
            每年的二十四节气对应的阳历日期,按月存储数据。
            每月用一个字节存放,高位存放第一个节气数据,低位存放第二个节气的数据
            </summary>
            <remarks>
            每年的二十四节气对应的阳历日期几乎固定，平均分布于十二个月中 
            1月 2月 3月 4月 5月 6月 
            小寒 大寒 立春 雨水 惊蛰 春分 清明 谷雨 立夏 小满 芒种 夏至 
            7月 8月 9月 10月 11月 12月 
            小暑 大暑 立秋 处暑 白露 秋分 寒露 霜降 立冬 小雪 大雪 冬至 
            ******************************************************************
            	节气无任何确定规律,所以只好存表,要节省空间,所以.... 
            ******************************************************************
            数据格式说明: 
            如1901年的节气为 
            1月 2月 3月 4月 5月 6月 7月 8月 9月 10月 11月 12月 
            6, 21, 4, 19, 6, 21, 5, 21, 6,22, 6,22, 8, 23, 8, 24, 8, 24, 8, 24, 8, 23, 8, 22 
            9, 6, 11,4, 9, 6, 10,6, 9,7, 9,7, 7, 8, 7, 9, 7, 9, 7, 9, 7, 8, 7, 15 
            上面第一行数据为每月节气对应日期,15减去每月第一个节气,每月第二个节气减去15得第二行 
            这样每月两个节气对应数据都小于16,每月用一个字节存放,高位存放第一个节气数据,低位存放 
            第二个节气的数据,可得下表 
            </remarks>
        </member>
        <member name="F:EIIP.Framework.LunarCalendar.m_Date">
            <summary>
            对应的阳历日期
            </summary>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.#ctor">
            <summary>
            以当前日期实例化农历类
            </summary>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.#ctor(System.DateTime)">
            <summary>
            以指定日期实例化农历类
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetConstellationIndex(System.DateTime)">
            <summary>
            获取指定日期的星座序号
            </summary>
            <param name="solarDate">阳历日期,1901-01-01 至 2050-12-31</param>
            <returns>星座序号</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetConstellationIndex">
            <summary>
            获取当前实例的星座序号
            </summary>
            <returns>星座序号</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetConstellationName(System.DateTime)">
            <summary>
            获取指定日期的星座名称
            </summary>
            <param name="solarDate">阳历日期,1901-01-01 至 2050-12-31</param>
            <returns>星座名称</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetConstellationName">
            <summary>
            获取当前实例的星座名称 
            </summary>
            <returns>星座名称</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetHolDayIndex(System.DateTime)">
            <summary>
            获取指定日期的节气序号 0-23，-1表示不是节气 
            </summary>
            <param name="solarDate">阳历日期,1901-01-01 至 2050-12-31</param>
            <returns>节气序号 0-23，-1表示不是节气</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetHolDayIndex">
            <summary>
            获取当前实例的节气序号 0-23，-1表示不是节气 
            </summary>
            <returns>节气序号 0-23，-1表示不是节气</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.FormatMonth(System.Int32,System.Boolean)">
            <summary>
            获取格式化后的月份字串
            </summary>
            <param name="month">一年中的第几月,取值范围为 1-12</param>
            <param name="bLunar">设置一个值，该值指示是否返回农历数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.FormatDay(System.Int32)">
            <summary>
            获取格式化后的农历天数字串
            </summary>
            <param name="lunarDay">农历一月中的第几天</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetHolDayName(System.DateTime)">
            <summary>
            获取指定日期的节气，若不是节气，则返回 String.Empty
            </summary>
            <param name="solarDate">阳历日期,1901-01-01 至 2050-12-31</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetHolDayName">
            <summary>
            获取当前实例的节气，若不是节气，则返回 String.Empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.FormatMonthDay(System.DateTime)">
            <summary>
            获取指定阳历日期对应的阴历日期名称
            </summary>
            <param name="solarDate">阳历日期,1901-01-01 至 2050-12-31</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.FormatMonthDay">
            <summary>
            获取当前实例的阴历日期名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetLeapMonth(System.Int32)">
            <summary>
            获取指定阴历年份的闰月月份，若没有则返回0
            </summary>
            <param name="lunarYear">阴历年</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetLeapMonth">
            <summary>
            获取当前实例的闰月月份，若没有则返回0
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetDaysInMonth(System.Int32,System.Int32)">
            <summary>
            获取指定农历年月的天数,如果为闰月，第二个元素为闰月的天数，否则为0
            </summary>
            <param name="lunarYear">阴历年</param>
            <param name="lunarMonth">阴历月</param>
            <returns>返回阴历年阴历月的天数</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetDaysInMonth">
            <summary>
            获取当前实例当月的天数,如果为闰月，第二个元素为闰月的天数，否则为0
            </summary>
            <returns>返回阴历年阴历月的天数</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetDaysInYear(System.Int32)">
            <summary>
            获取指定阴历年的总天数
            </summary>
            <param name="lunarYear">阴历年</param>
            <returns>返回阴历年的总天数</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetDaysInYear">
            <summary>
            获取当前实例阴历年的总天数
            </summary>
            <returns>返回阴历年的总天数</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetLunarDate(System.DateTime)">
            <summary>
            获取指定阳历日期对应的阴历日期数据,[0]年，[1]月，[2]日
            </summary>
            <param name="solarDate">阳历日期,1901-01-01 至 2050-12-31</param>
            <remarks>
            阳历1901年2月19日为阴历1901年正月初一;
            阳历1901年1月1日到2月19日共有49天 
            </remarks>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.FormatYear(System.Int32)">
            <summary>
            获取格式化后的阴历年份字串(天干记年法表示)
            </summary>
            <param name="lunarYear">阴历年份</param>
            <returns>天干记年法表示的字符串</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetYearIndex(System.Int32)">
            <summary>
            获取阴历年份对应的属相序号
            </summary>
            <param name="lunarYear">阴历年份</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetYearName(System.Int32)">
            <summary>
            获取阴历年份对应的属相名称
            </summary>
            <param name="lunarYear">阴历年份</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.FormatYear">
            <summary>
            获取当前实例格式化后的阴历年份字串(天干记年法表示)
            </summary>
            <returns>天干记年法表示的字符串</returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetYearIndex">
            <summary>
            获取当前实例对应的属相序号
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.LunarCalendar.GetYearName">
            <summary>
            获取当前实例对应的属相名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.LunarCalendar.Date">
            <summary>
            获取或设置对应的阳历日期
            </summary>
        </member>
        <member name="P:EIIP.Framework.LunarCalendar.LunarDate">
            <summary>
            获取阴历日期数据，[0]年[1]月[2]日
            </summary>
        </member>
        <member name="T:EIIP.Framework.Principal">
            <summary>
            重构用户主体(Principal)类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Principal.m_Identity">
            <summary>
            实现IPrincipal接口,必须实现IIdentity接口
            </summary>
        </member>
        <member name="M:EIIP.Framework.Principal.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            构造用户主体
            </summary>
            <param name="identity">用户身份标示</param>
            <param name="roles">隶属的角色组</param>
        </member>
        <member name="M:EIIP.Framework.Principal.#ctor(EIIP.Framework.User.LogonIdentity)">
            <summary>
            构造用户主体
            </summary>
            <param name="identity">用户身份标示</param>
        </member>
        <member name="M:EIIP.Framework.Principal.IsInAllRoles(System.String[])">
            <summary>
            检查当前用户角色组是否包含指定角色序列
            </summary>
            <param name="roles">角色序列</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Principal.IsInAnyRoles(System.String[])">
            <summary>
            检查当前用户角色组是否包含指定的角色序列中的任一角色
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Principal.IsInRole(System.String)">
            <summary>
            检查当前用户角色组是否包含指定角色
            </summary>
            <param name="role">角色</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.Principal.Identity">
            <summary>
            获取用户标示
            </summary>
        </member>
        <member name="T:EIIP.ProductInfo">
            <summary>
            产品信息。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_ProductType">
            <summary>
            产品类型。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_Version">
            <summary>
            产品版本信息。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_LicenceCount">
            <summary>
            用户许可数。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_PermissionValue">
            <summary>
            产品许可值。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_UnRegister">
            <summary>
            设置一个值，该值指示是否未注册。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_Name">
            <summary>
            产品名称。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_FrameTitle">
            <summary>
            产品UI窗体标题栏内容。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_StyleIndex">
            <summary>
            产品默认样式序号
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_WFSetID">
            <summary>
            工作流特许ID集。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_WFCount">
            <summary>
            工作流许可数。
            </summary>
        </member>
        <member name="F:EIIP.ProductInfo.m_PermSet">
            <summary>
            许可集。
            </summary>
        </member>
        <member name="M:EIIP.ProductInfo.#ctor(EIIP.ProductType)">
            <summary>
            实例化指定产品信息。
            </summary>
            <param name="productType">产品类型</param>
        </member>
        <member name="M:EIIP.ProductInfo.#ctor(EIIP.ProductType,System.Int32)">
            <summary>
            实例化指定产品信息。
            </summary>
            <param name="productType">产品类型</param>
            <param name="licenceCount">用户许可</param>
        </member>
        <member name="M:EIIP.ProductInfo.#ctor(EIIP.ProductType,EIIP.Framework.Configuration.NameValueItemCollection)">
            <summary>
            实例化指定产品信息。
            </summary>
            <param name="productType">基准产品类型</param>
            <param name="col"></param>
        </member>
        <member name="M:EIIP.ProductInfo.UseOneLicence">
            <summary>
            使用一个用户许可数。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ProductInfo.ReleaseOneLicence">
            <summary>
            释放一个用户许可数。
            </summary>
        </member>
        <member name="M:EIIP.ProductInfo.ResetLicenceCount">
            <summary>
            重置用户数
            </summary>
        </member>
        <member name="M:EIIP.ProductInfo.ToString">
            <summary>
            获取产品版本信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ProductInfo.PermSet">
            <summary>
            获取产品许可集。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.ProductType">
            <summary>
            获取产品类型。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.LicenceCount">
            <summary>
            获取产品用户许可数。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.PermissionValue">
            <summary>
            获取产品许可值。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.UnRegister">
            <summary>
            获取一个值，该值指示是否未注册。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.WFSetID">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.WFCount">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.Name">
            <summary>
            获取或设置产品名称。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.FrameTitle">
            <summary>
            获取或设置产品UI窗体标题栏内容。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.StyleIndex">
            <summary>
            获取或设置默认产品样式序号。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.BaseDate">
            <summary>
            获取基准日期。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.EndDate">
            <summary>
            获取结束日期。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.UserCount">
            <summary>
            获取当前产品已占用用户数。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.OtherInfo">
            <summary>
            获取当前产品其它信息。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.IsRestricted">
            <summary>
            获取一个（动态计算）值，该值指示当前产品是否是受限制的。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.IsUseTimeOver">
            <summary>
            获取一个（动态计算）值，该值指示当前产品是否已过试用期。
            </summary>
        </member>
        <member name="P:EIIP.ProductInfo.HasFullLicense">
            <summary>
            获取一个值，该值指示当前产品是否已获取完整授权。
            </summary>
        </member>
        <member name="T:EIIP.Framework.UploadState">
            <summary>
            指示上传的某一状态
            </summary>
        </member>
        <member name="F:EIIP.Framework.UploadState.正在接收数据">
            <summary>
            正在接收数据
            </summary>
        </member>
        <member name="F:EIIP.Framework.UploadState.已完成">
            <summary>
            已完成
            </summary>
        </member>
        <member name="F:EIIP.Framework.UploadState.上传错误">
            <summary>
            上传错误.
            </summary>
        </member>
        <member name="F:EIIP.Framework.UploadState.上传长度超限">
            <summary>
            上传长度超限
            </summary>
        </member>
        <member name="T:EIIP.Framework.Progress">
            <summary>
            上传进度信息
            </summary>
        </member>
        <member name="M:EIIP.Framework.Progress.#ctor(System.Int64,System.String)">
            <summary>
            以总长度及上传标志ID实例化进度条
            </summary>
            <param name="contentLength">总长度</param>
            <param name="uploadID">上传标志ID</param>
        </member>
        <member name="P:EIIP.Framework.Progress.Start">
            <summary>
            获取上传开始时间
            </summary>
        </member>
        <member name="P:EIIP.Framework.Progress.ErrorEnd">
            <summary>
            获取或设置上传(错误)结束时间
            </summary>
        </member>
        <member name="P:EIIP.Framework.Progress.UploadID">
            <summary>
            获取唯一标志当前上传的UploadID
            </summary>
        </member>
        <member name="P:EIIP.Framework.Progress.ContentLength">
            <summary>
            获取总大小
            </summary>
        </member>
        <member name="P:EIIP.Framework.Progress.BytesRead">
            <summary>
            获取或设置已上传大小
            </summary>
        </member>
        <member name="P:EIIP.Framework.Progress.State">
            <summary>
            获取或设置上传状态
            </summary>
        </member>
        <member name="T:EIIP.SClient.Singleton.ActivationMonitor">
            <summary>
            激活窗体应用监听器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Singleton.ActivationMonitor.ActivateApplication">
            <summary>
            激活窗体应用。
            </summary>
        </member>
        <member name="T:EIIP.SClient.Singleton.SingletonApp">
            <summary>
            单实例窗体应用类。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Singleton.SingletonApp.Uri">
            <summary>
            单实例窗体应用Uri。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Singleton.SingletonApp.m_Mutex">
            <summary>
            同步基元。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Singleton.SingletonApp.m_MainForm">
            <summary>
            主窗体。
            </summary>
        </member>
        <member name="F:EIIP.SClient.Singleton.SingletonApp.m_IpcChannel">
            <summary>
            为跨远程处理边界的消息提供管道。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.Run">
            <summary>
            运行应用。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.Run(System.Windows.Forms.ApplicationContext)">
            <summary>
            运行指定应用。
            </summary>
            <param name="context">应用上下文</param>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.Run(System.Windows.Forms.Form)">
            <summary>
            运行指定窗体。
            </summary>
            <param name="mainForm">窗体</param>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.Run(System.Windows.Forms.ApplicationContext,System.Boolean)">
            <summary>
            运行指定应用。
            </summary>
            <param name="context">应用上下文</param>
            <param name="useSmartConnController">指示是否使用智能连线控制器</param>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.Run(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            运行指定窗体。
            </summary>
            <param name="mainForm">窗体</param>
            <param name="useSmartConnController">指示是否使用智能连线控制器</param>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.IsFirstInstance">
            <summary>
            判断是否首个实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.OnExit(System.Object,System.EventArgs)">
            <summary>
            触发退出事件。
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.RegisterActivationMonitor">
            <summary>
            注册应用监听器。
            </summary>
        </member>
        <member name="M:EIIP.SClient.Singleton.SingletonApp.ActivateFirstInstance">
            <summary>
            激活首个实例。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Singleton.SingletonApp.MainForm">
            <summary>
            获取主窗体。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Singleton.SingletonApp.TheForm">
            <summary>
            获取主窗体。
            </summary>
        </member>
        <member name="P:EIIP.SClient.Singleton.SingletonApp.RunAtClient">
            <summary>
            获取一个值,该值指示是否运行在客户端。
            </summary>
        </member>
        <member name="T:EIIP.Framework.SClient.SplashForm">
            <summary>
            启动界面窗体。
            </summary>
        </member>
        <member name="M:EIIP.Framework.SClient.SplashForm.#ctor(System.Drawing.Bitmap)">
            <summary>
            实例化启动界面窗体。
            </summary>
            <param name="splashImage">要展示的图片</param>
        </member>
        <member name="P:EIIP.Framework.SClient.SplashForm.HideSplash">
            <summary>
            获取或设置一个值，该值指示是否隐藏界面。
            </summary>
        </member>
        <member name="T:EIIP.Framework.SClient.SplashScreen">
            <summary>
            提供一个启动界面类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.SClient.SplashScreen.#ctor(System.Drawing.Bitmap)">
            <summary>
            实例化启动界面。
            </summary>
            <param name="splash">要展示的图片</param>
        </member>
        <member name="M:EIIP.Framework.SClient.SplashScreen.#ctor(System.Drawing.Bitmap,System.Int32)">
            <summary>
            实例化启动界面。
            </summary>
            <param name="splash">要展示的图片</param>
            <param name="delaySecond">延时时间，单位秒</param>
        </member>
        <member name="M:EIIP.Framework.SClient.SplashScreen.Close">
            <summary>
            关闭启动界面。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Security.Algorithm">
            <summary>
            指示某一加密算法。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.Algorithm.不加密">
            <summary>
            不加密
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.Algorithm.Des">
            <summary>
            DES加密方式
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.Algorithm.Rc2">
            <summary>
            RC2加密方式
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.Algorithm.Rijndael">
            <summary>
            Rijndael加密方式
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.Algorithm.TripleDes">
            <summary>
            三重DES加密方式
            </summary>
        </member>
        <member name="T:EIIP.Framework.Security.FileEncryptor">
            <summary>
            文件加密类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.FileEncryptor.asymmetricKey">
            <summary>
            RSA不对称加密算法
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.#ctor">
            <summary>
            实例化文件加密类,使用默认非对称密钥信息(系统级)。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.#ctor(System.String)">
            <summary>
            以指定非对称密钥实例化文件加密类
            </summary>
            <param name="xmlString">非对称密钥信息</param>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.EncryptFile(System.Byte[],EIIP.Framework.Security.Algorithm)">
            <summary>
            加密文件，在文件头部放入使用的对称加密算法的密钥（已用服务器非对称密钥加密）及长度信息
            </summary>
            <param name="fileContent">文件内容</param>
            <param name="algorithm">对称算法标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.DecryptFile(System.Byte[],EIIP.Framework.Security.Algorithm)">
            <summary>
            解密文件，在文件头部需放入使用的对称加密算法的密钥（已用服务器非对称密钥加密）及长度信息
            </summary>
            <param name="fileContent">文件加密后的数据</param>
            <param name="algorithm">对称算法标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.EncryptFile(System.Byte[])">
            <summary>
            加密文件，在文件头部放入使用的对称加密算法的密钥（已用服务器非对称密钥加密）及长度信息。
            默认为 Rijndael 算法
            </summary>
            <param name="fileContent">文件内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.DecryptFile(System.Byte[])">
            <summary>
            解密文件，在文件头部需放入使用的对称加密算法的密钥（已用服务器非对称密钥加密）及长度信息。
            默认为 Rijndael 算法
            </summary>
            <param name="fileContent">文件加密后的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.EncryptFile(System.String)">
            <summary>
            加密文件，在文件头部放入使用的对称加密算法的密钥（已用服务器非对称密钥加密）及长度信息。
            默认为 Rijndael 算法。
            内部采用 UTF-8 解码字串
            </summary>
            <param name="fileContent">文件字串内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.FileEncryptor.DecryptFileAString(System.Byte[])">
            <summary>
            解密文件，在文件头部需放入使用的对称加密算法的密钥（已用服务器非对称密钥加密）及长度信息。
            默认为 Rijndael 算法。
            返回 UTF-8 解码字串
            </summary>
            <param name="fileContent">文件加密后的数据</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.Security.HashHelper">
            <summary>
            Salt哈希助手类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.HashHelper.m_SaltLength">
            <summary>
            Salt长度
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.#ctor">
            <summary>
            实例化哈希助手类（默认5位Salt值）。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.#ctor(System.Int32)">
            <summary>
            实例化哈希助手类。
            </summary>
            <param name="saltLength">Salt值长度</param>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.CreateDBPassword(System.String)">
            <summary>
            创建Salt化的存于数据库的密码（随机产生的Salt值追加在后面）
            </summary>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.CreateDBPasswordToString(System.String)">
            <summary>
            创建Salt化的存于数据库的密码（随机产生的Salt值追加在后面）
            </summary>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.CreatePasswordHash(System.String)">
            <summary>
            创建哈希密码（未加入Salt）
            </summary>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.CreateSaltedPassword(System.Byte[],System.Byte[])">
            <summary>
            创建Salt化密码, 返回(Salt化密码 + Salt值)
            </summary>
            <param name="saltValue">Salt值</param>
            <param name="unsaltedPassword">哈希密码</param>
            <returns>返回(Salt化密码 + Salt值)</returns>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.ComparePasswords(System.Byte[],System.Byte[])">
            <summary>
            比较密码
            </summary>
            <param name="storedPassword">存储在数据库的密码，Salt化的密码(Salt值在后面)</param>
            <param name="unsaltedPassword">未Salt化的哈希密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.ComparePasswords(System.Byte[],System.String)">
            <summary>
            比较密码
            </summary>
            <param name="storedPassword">存储在数据库的密码，Salt化的密码(Salt值在后面)</param>
            <param name="passwordText">要比较的密码明文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.HashHelper.ComparePasswords(System.String,System.String)">
            <summary>
            比较密码
            </summary>
            <param name="storedPassword">存储在数据库的密码，Salt化的密码(Salt值在后面)</param>
            <param name="passwordText">要比较的密码明文</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.Security.LoginInfo">
            <summary>
            登录信息类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.LoginInfo.UserName">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.LoginInfo.PasswordHash">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.LoginInfo.CreatedTime">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.LoginInfo.ClientKey">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.LoginInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.LoginInfo.#ctor(System.String,System.Byte[],System.Byte[],System.DateTime)">
            <summary>
            
            </summary>
            <param name="userName"></param>
            <param name="passwordHash"></param>
            <param name="clientKey"></param>
            <param name="serverDate"></param>
        </member>
        <member name="T:EIIP.Framework.Security.SecureClientSession">
            <summary>
            客户端会话加密类。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Security.SecureSession">
            <summary>
            会话加密基类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.SecureSession.serverKey">
            <summary>
            服务器端不对称加密算法（默认为RSA，默认密钥大小为1024位,有效密钥大小为364-16384位,以8位递增）
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.SecureSession.clientKey">
            <summary>
            客户端对称加密算法
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.SecureSession.validationAlgorithm">
            <summary>
            验证(哈希码)算法。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Security.SecureSession.m_ClientKeyReady">
            <summary>
            指示是否已设置客户端对称算法的机密密钥。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.EncryptSymmetric(System.Object)">
            <summary>
            对称加密消息, 并将消息认证码加入消息后面
            </summary>
            <param name="objectToEncrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.DecryptSymmetric(System.Byte[])">
            <summary>
            对称解密消息
            </summary>
            <param name="dataToDecrypt">待解密消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.EncryptAsymmetric(System.Object)">
            <summary>
            不对称加密消息
            </summary>
            <param name="objectToEncrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.DecryptAsymmetric(System.Byte[])">
            <summary>
            不对称解密消息
            </summary>
            <param name="dataToDecrypt">待解密消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.InitClientKey(System.Byte[])">
            <summary>
            初始化客户端对称算法的机密密钥。
            </summary>
            <param name="clientKey">客户端对称算法的机密密钥</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.ToBytes(System.Object,System.Boolean)">
            <summary>
            将指定对象序列化为字节数组。
            </summary>
            <param name="value">要处理的对象</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.ToObject(System.Byte[],System.Boolean)">
            <summary>
            将指定字节数组反序列化为对象。
            </summary>
            <param name="value">要处理的字节数组</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.Encrypt(System.Byte[])">
            <summary>
            加密明文。
            </summary>
            <param name="plainValue">明文数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.Decrypt(System.Byte[])">
            <summary>
            解密密文。
            </summary>
            <param name="cipherValue">密文数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.ComputeHash(System.Byte[])">
            <summary>
            计算明文数据的认证码(哈希码 SHA1)。
            </summary>
            <param name="plainValue">明文数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            校验指定数据的哈希值的正确性(SHA1)。
            </summary>
            <param name="data">数据</param>
            <param name="storedHash">存储的哈希值(SHA1)</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.ToBytes(System.Object)">
            <summary>
            将指定对象序列化为字节数组(不加密)。
            </summary>
            <param name="value">要处理的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureSession.ToObject(System.Byte[])">
            <summary>
            将指定字节数组反序列化为对象(不加密)。
            </summary>
            <param name="value">要处理的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.#ctor">
            <summary>
            实例化客户端会话加密类,以系统内置公钥初始化服务器公钥并采用Rijndael对称加密方式
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.#ctor(EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化客户端会话加密类,以系统内置公钥初始化服务器公钥
            </summary>
            <param name="algorithm">对称算法标识</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.#ctor(System.String)">
            <summary>
            实例化客户端会话加密类,采用Rijndael对称加密方式
            </summary>
            <param name="serverKeyXml">密钥信息</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.#ctor(System.String,EIIP.Framework.Security.Algorithm)">
            <summary>
            实例化客户端会话加密类,初始化服务器公钥
            </summary>
            <param name="serverKeyXml">密钥信息</param>
            <param name="algorithm">对称算法标识</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.SignData(System.Byte[])">
            <summary>
            获取数据的数据签名
            </summary>
            <param name="DataToSign">要签名的数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.VerifyData(System.Byte[],System.String)">
            <summary>
            校验签名。
            </summary>
            <param name="DataToSign">签名的数据</param>
            <param name="signature">签名字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.VerifyData(System.String,System.String)">
            <summary>
            校验签名。
            </summary>
            <param name="data">签名的数据</param>
            <param name="signature">签名字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.EncryptLoginData(System.String,System.String,System.DateTime)">
            <summary>
            加密登录数据(非对称加密)
            </summary>
            <param name="userName">用户名</param>
            <param name="password">用户密码</param>
            <param name="serverDate">服务器时间</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.EncryptObjectForServer(System.Object)">
            <summary>
            加密发往服务器的消息(对称加密)
            </summary>
            <param name="objectToEncrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.EncryptToStringForServer(System.Object)">
            <summary>
            加密发往服务器的消息(对称加密)
            </summary>
            <param name="objectToEncrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.DecryptObjectFromServer(System.Byte[])">
            <summary>
            解密从服务器接收的消息(对称加密)
            </summary>
            <param name="dataToDecrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.DecryptObjectFromServer(System.String)">
            <summary>
            解密从服务器接收的消息(对称加密)
            </summary>
            <param name="dataToDecrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.EncryptObject(System.Object)">
            <summary>
            加密消息,加密消息的对称密钥以非对称算法加密后放在消息数据头部
            </summary>
            <param name="objectToEncrypt">消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.DecryptObject(System.Byte[])">
            <summary>
            解密消息,被加密消息的对称密钥以非对称算法加密后放在消息数据头部
            </summary>
            <param name="dataToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.EncryptToString(System.Object)">
            <summary>
            加密对象为字符串。失败返回null。
            </summary>
            <param name="objectToEncrypt">待加密对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.DecryptToObject(System.String)">
            <summary>
            解密字符串，返回加密前对象。失败返回null。
            </summary>
            <param name="dataToDecrypt">待解密字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.InitClientKey(System.Byte[])">
            <summary>
            初始化客户端对称算法的机密密钥。
            </summary>
            <param name="clientKey">客户端对称算法的机密密钥</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.ToBytes(System.Object,System.Boolean)">
            <summary>
            将指定对象序列化为字节数组。
            </summary>
            <param name="value">要处理的对象</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureClientSession.ToObject(System.Byte[],System.Boolean)">
            <summary>
            将指定字节数组反序列化为对象。
            </summary>
            <param name="value">要处理的字节数组</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.Security.SecureServerSession">
            <summary>
            服务器端会话加密类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.#ctor(System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            实例化服务器端会话加密类
            </summary>
            <param name="serverKey">RSA不对称加密算法实例</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.SetClientKey(System.Byte[])">
            <summary>
            设置客户端密钥
            </summary>
            <param name="clientKey">客户端对称算法的机密密钥</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.SetClientKey(System.Byte[],EIIP.Framework.Security.Algorithm)">
            <summary>
            设置客户端密钥
            </summary>
            <param name="clientKey">客户端对称算法的机密密钥</param>
            <param name="algorithm">对称算法标识</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.DecryptLoginData(System.Byte[])">
            <summary>
            解密登录信息(非对称加密)
            </summary>
            <param name="loginData"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.EncryptObjectForClient(System.Object)">
            <summary>
            加密发往客户端的数据(对称加密)
            </summary>
            <param name="objectToEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.DecryptObjectFromClient(System.Byte[])">
            <summary>
            解密从客户端接收到的数据(对称加密)
            </summary>
            <param name="dataToDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.InitClientKey(System.Byte[])">
            <summary>
            初始化客户端对称算法的机密密钥。
            </summary>
            <param name="clientKey">客户端对称算法的机密密钥</param>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.ToBytes(System.Object,System.Boolean)">
            <summary>
            将指定对象序列化为字节数组。
            </summary>
            <param name="value">要处理的对象</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Security.SecureServerSession.ToObject(System.Byte[],System.Boolean)">
            <summary>
            将指定字节数组反序列化为对象(不加密)。
            </summary>
            <param name="value">要处理的字节数组</param>
            <param name="encryptMode">指示是否使用加密方式</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Setup">
            <summary>
            系统设置类。
            </summary>
        </member>
        <member name="F:EIIP.Setup.XML_HEADER">
            <summary>
            XML头部声明。
            </summary>
        </member>
        <member name="F:EIIP.Setup.XML_WORKFLOW_DTD">
            <summary>
            XML公用DTD说明。
            </summary>
        </member>
        <member name="F:EIIP.Setup.VSA_LANGUAGE">
            <summary>
            VSA语言
            </summary>
        </member>
        <member name="F:EIIP.Setup.VSA_SCRIPT">
            <summary>
            VSA脚本键
            </summary>
        </member>
        <member name="F:EIIP.Setup.XML_WORKFLOW_DOC">
            <summary>
            工作流配置内容。
            </summary>
        </member>
        <member name="F:EIIP.Setup.INTERNAL_PWD">
            <summary>
            内置密码。
            </summary>
        </member>
        <member name="F:EIIP.Setup.MasterCookies">
            <summary>
            区分不同的应用程序状态用
            </summary>
        </member>
        <member name="F:EIIP.Setup.LOGIN_USER_KEY">
            <summary>
            登录用户实例键名。
            </summary>
        </member>
        <member name="F:EIIP.Setup.Validate2_Error_KEY">
            <summary>
            恢复登录异常消息键名。
            </summary>
        </member>
        <member name="F:EIIP.Setup.XGUID_KEY">
            <summary>
            登录用户实例键名。
            </summary>
        </member>
        <member name="F:EIIP.Setup.LOGIN_Passport">
            <summary>
            通行证。
            </summary>
        </member>
        <member name="F:EIIP.Setup.URL_REWRITER_RULE_KEY">
            <summary>
            重写规则实例键名。
            </summary>
        </member>
        <member name="F:EIIP.Setup.SystemUploadFolder_User">
            <summary>
            获取系统级用户上传文件夹
            </summary>
        </member>
        <member name="F:EIIP.Setup.UnauthorizedAccessMessage">
            <summary>
            未被授权访问异常消息
            </summary>
        </member>
        <member name="F:EIIP.Setup.ErrorMessage2IsOABase">
            <summary>
            获取当为 OA 标准版版本时，显示的错误信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.ErrorMessage2UnUse">
            <summary>
            获取当无权使用项目管理版本时，显示的错误信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.KeyIV">
            <summary>
            获取机要密钥和IV的字符串
            </summary>
        </member>
        <member name="F:EIIP.Setup.ErrorMessage2TrialLimit">
            <summary>
            获取超出试用限制时的显示信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.ErrorMessage2InvalidUser">
            <summary>
            获取非指定产品（或类别）用户时的显示信息，需设置一个产品名称（或类别）参数。
            </summary>
        </member>
        <member name="F:EIIP.Setup.ErrorMessage2UpTextMaxLen">
            <summary>
            获取超文本编辑器文本内容超长时的显示信息。
            </summary>
        </member>
        <member name="F:EIIP.Setup.VALID_UPLOAD_FILETYPES">
            <summary>
            系统默认的合法的上传文件类型。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_HomeUrl">
            <summary>
            EIIP虚拟应用程序根路径，以"/"结尾。
            </summary>
        </member>
        <member name="F:EIIP.Setup.BaseTime">
            <summary>
            获取系统基准时间。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_EnableNewFeature">
            <summary>
            指示是否应用新特性。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_PhysicalApplicationPath">
            <summary>
            应用程序的根目录的物理文件系统路径,以"\"结尾
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_X_MAILER_HEADER">
            <summary>
            发送的邮件头部信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_Product_OA">
            <summary>
            OA版本信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_Product_CRM">
            <summary>
            CRM版本信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_Product_WEB">
            <summary>
            Web版本信息
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_LogonTitle">
            <summary>
            登录窗口标题名称
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_ValidUploadFileTypes">
            <summary>
            可接受的上传合法文件类型,扩展名以"|"分隔,小写
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_ValidASPXFileTypes">
            <summary>
            可接受的合法ASPX执行文件类型,扩展名以"|"分隔,小写
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_UploadFolder">
            <summary>
            默认的上传文件夹路径,格式:起始于根目录,如"upload/"；结尾有"/"
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_EveryoneFolders">
            <summary>
            每个人的工作文件夹(上传)
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_EnableSMS">
            <summary>
            指示是否启用短信功能。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_EnableMemcached">
            <summary>
            指示是否启用分布式缓存。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_TextMaxLen">
            <summary>
            允许最大文本长度,单位字节
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_ConfigAdminPWD">
            <summary>
            配置管理密码（哈希）。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_PrivateKey">
            <summary>
            系统默认非对称私钥
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_PhysicalDataPath">
            <summary>
            获取存储数据文件的物理路径,以"\"结尾
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_LoginAccountJS">
            <summary>
            登录帐套下拉框脚本
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_LoginProductList">
            <summary>
            登录产品列表
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_HTMLHeadContent">
            <summary>
            要加入所有页面 HEAD 标签内的内容。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_AllowGuestAccess">
            <summary>
            指示是否允许来宾(匿名)访问。
            </summary>
        </member>
        <member name="F:EIIP.Setup.m_UseSQLock">
            <summary>
            指示是否使用SQL查询锁。
            </summary>
        </member>
        <member name="M:EIIP.Setup.HandlePermission(EIIP.Framework.Configuration.Settings)">
            <summary>
            许可处理(仅适用于 WebForm)
            </summary>
            <param name="st">设置</param>
        </member>
        <member name="M:EIIP.Setup.Refresh(System.Boolean)">
            <summary>
            更新配置信息（WebForm 与 WinForm 均适用)
            </summary>
            <param name="runAtWebForm">是否运行在WEB环境</param>
        </member>
        <member name="M:EIIP.Setup.RefreshConnect(System.Boolean)">
            <summary>
            更新连接信息（WebForm 与 WinForm 均适用)
            </summary>
            <param name="runAtWebForm">是否运行在WEB环境</param>
        </member>
        <member name="M:EIIP.Setup.GetLoginAccountJS">
            <summary>
            获取登录下拉列表脚本
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Setup.GetUserUploadFolders(System.String)">
            <summary>
            获取用户上传文件夹列表。
            </summary>
            <param name="folderStr">以 "|" 分隔的文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Setup.GetAppSettings(System.String,System.String,System.Int32)">
            <summary>
            获取 setup.config 配置文件夹的应用设置数据。
            </summary>
            <param name="key">应用设置键</param>
            <param name="defaultValue">当 key 的数据值为空（null或长度小于 minLen）时，缺省返回的值。</param>
            <param name="minLen">key 的数据值最小长度，当达不到该长度时，会返回 defaultValue</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Setup.GetAppSettings(System.String,System.String)">
            <summary>
            获取 setup.config 配置文件夹的应用设置数据。
            </summary>
            <param name="key">应用设置键</param>
            <param name="defaultValue">当 key 的数据值为空（null）时，缺省返回的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Setup.ParseUserNamePassword(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="unPwd"></param>
        </member>
        <member name="M:EIIP.Setup.SetWCFAuthorizationUser(EIIP.Framework.User.IUser)">
            <summary>
            仅由系统调用。
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:EIIP.Setup.GetWCFAuthorizationUser">
            <summary>
            仅由系统调用。
            </summary>
        </member>
        <member name="M:EIIP.Setup.AnonymousVersion">
            <summary>
            获取定时更新的匿名版本随机字串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Setup.GetAccountInfo(System.Int32)">
            <summary>
            获取指定帐套数据库信息。
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Setup.GetDefaultAccountInfo">
            <summary>
            获取默认帐套数据库信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Setup.HomeUrl">
            <summary>
            获取EIIP虚拟应用程序根路径，以"/"结尾。
            </summary>
        </member>
        <member name="P:EIIP.Setup.SetupUpdateTime">
            <summary>
            获取配置更新应用时间。
            </summary>
        </member>
        <member name="P:EIIP.Setup.EnableNewFeature">
            <summary>
            获取一个值，该值指示是否应用新特性。
            </summary>
        </member>
        <member name="P:EIIP.Setup.PhysicalApplicationPath">
            <summary>
            获取根目录的物理文件系统路径,以"\"结尾
            </summary>
        </member>
        <member name="P:EIIP.Setup.VerifyAddress">
            <summary>
            获取或设置一个值，该值指示是否需要验证email地址
            </summary>
        </member>
        <member name="P:EIIP.Setup.X_MAILER_HEADER">
            <summary>
            获取或设置发送的邮件头部信息
            </summary>
        </member>
        <member name="P:EIIP.Setup.OA">
            <summary>
            获取OA版本
            </summary>
        </member>
        <member name="P:EIIP.Setup.CRM">
            <summary>
            获取CRM版本
            </summary>
        </member>
        <member name="P:EIIP.Setup.WEB">
            <summary>
            获取WEB版本
            </summary>
        </member>
        <member name="P:EIIP.Setup.LogonTitle">
            <summary>
            获取登录窗口标题名称
            </summary>
        </member>
        <member name="P:EIIP.Setup.ValidUploadFileTypes">
            <summary>
            可接受的上传合法文件类型,扩展名以"|"分隔,小写
            </summary>
        </member>
        <member name="P:EIIP.Setup.ValidASPXFileTypes">
            <summary>
            可接受的合法ASPX执行文件类型,扩展名以"|"分隔,小写
            </summary>
        </member>
        <member name="P:EIIP.Setup.UploadFolder">
            <summary>
            获取默认的上传文件夹路径,格式:起始于根目录,如"upload/"；结尾有"/"
            </summary>
        </member>
        <member name="P:EIIP.Setup.EveryoneFolders">
            <summary>
            获取每个人的工作文件夹(上传)
            </summary>
        </member>
        <member name="P:EIIP.Setup.EnableSMS">
            <summary>
            获取一个值，该值指示是否启用短信功能。
            </summary>
        </member>
        <member name="P:EIIP.Setup.EnableMemcached">
            <summary>
            获取一个值，该值指示是否启用分布式缓存。
            </summary>
        </member>
        <member name="P:EIIP.Setup.TextMaxLen">
            <summary>
            获取允许最大文本长度,单位字节
            </summary>
        </member>
        <member name="P:EIIP.Setup.WebStyle">
            <summary>
            获取样式风格集
            </summary>
        </member>
        <member name="P:EIIP.Setup.ConfigAdminPWD">
            <summary>
            获取配置管理密码（哈希）。
            </summary>
        </member>
        <member name="P:EIIP.Setup.RegistCompany">
            <summary>
            获取注册用户
            </summary>
        </member>
        <member name="P:EIIP.Setup.RegistPermissionNO">
            <summary>
            获取授权号
            </summary>
        </member>
        <member name="P:EIIP.Setup.IPDataPath">
            <summary>
            获取访问IP数据库的文件路径
            </summary>
        </member>
        <member name="P:EIIP.Setup.PhysicalDataPath">
            <summary>
            获取存储数据文件的物理路径,以"\"结尾
            </summary>
        </member>
        <member name="P:EIIP.Setup.LoginAccountJS">
            <summary>
            获取登录帐套下拉框脚本
            </summary>
        </member>
        <member name="P:EIIP.Setup.LoginProductList">
            <summary>
            获取登录产品列表
            </summary>
        </member>
        <member name="P:EIIP.Setup.UploadConfigInfo">
            <summary>
            获取上传配置信息,[0]长度（KB);[1]超时(秒)
            </summary>
        </member>
        <member name="P:EIIP.Setup.HTMLHeadContent">
            <summary>
            获取或设置要加入所有页面 HEAD 标签内的内容。
            </summary>
        </member>
        <member name="P:EIIP.Setup.WebSetup">
            <summary>
            获取 Web 配置设置。
            </summary>
        </member>
        <member name="P:EIIP.Setup.GuestsFormsCookieName">
            <summary>
            获取来宾(未验证)窗体验证 Cookie 名称。
            </summary>
        </member>
        <member name="P:EIIP.Setup.GuestsFormsCookieName2">
            <summary>
            获取来宾(未验证)窗体验证 Cookie 名称。
            </summary>
        </member>
        <member name="P:EIIP.Setup.AllowGuestAccess">
            <summary>
            获取一个值，该值指示是否允许来宾(匿名)访问。
            </summary>
        </member>
        <member name="P:EIIP.Setup.UseSQLock">
            <summary>
            获取一个值，该值指示是否使用SQL查询锁。
            </summary>
        </member>
        <member name="P:EIIP.Setup.CSetup">
            <summary>
            获取客户端配置设置。
            </summary>
        </member>
        <member name="T:EIIP.Framework.SMSClient">
            <summary>
            SMS消息发送客户端。
            </summary>
            <remarks>
            短信内容如果大于一条，内容自动切割,末尾加序号（X），X值为1--9，
            移动、联通70个字，小灵通45个字（包括企业简称、冒号和短信序号）。
            </remarks>
        </member>
        <member name="M:EIIP.Framework.SMSClient.Register(System.String,System.String)">
            <summary>
            使用软件序列号进行注册
            </summary>
            <param name="sn">软件序列号</param>
            <param name="pwd">密码（6位）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.Register(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            使用软件序列号进行注册
            </summary>
            <param name="sn">软件序列号</param>
            <param name="pwd">密码（6位）</param>
            <param name="entName">企业名称(最多60字节)</param>
            <param name="linkMan">联系人姓名(最多20字节)</param>
            <param name="phone">联系电话(最多20字节)</param>
            <param name="mobile">联系手机(最多15字节)</param>
            <param name="email">电子邮件(最多60字节)</param>
            <param name="fax">联系传真(最多20字节)</param>
            <param name="address">单位地址(最多60字节)</param>
            <param name="postcode">邮政编码(最多6字节)</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.UnRegister(System.String)">
            <summary>
            注销注册号
            </summary>
            <param name="sn">软件序列号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.RegistryPwdUpd(System.String,System.String,System.String)">
            <summary>
            修改软件序列号对应的密码
            </summary>
            <param name="sn">软件序列号</param>
            <param name="oldPWD">原始密码</param>
            <param name="newPWD">新密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.GetBalance(System.String,System.Text.StringBuilder)">
            <summary>
            获得帐户当前余额
            </summary>
            <param name="sn">软件序列号</param>
            <param name="balance">返回的余额(10个字节)</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.ChargeUp(System.String,System.String,System.String)">
            <summary>
            短信充值
            </summary>
            <param name="sn">软件序列号</param>
            <param name="acco">卡号</param>
            <param name="pass">卡密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.SendSMS(System.String,System.String,System.String)">
            <summary>
            发送短消息
            </summary>
            <param name="sn">软件序列号</param>
            <param name="mobiles">手机号码(最多一次发送1000个手机号码,号码间用逗号分隔)</param>
            <param name="content">短信内容(最多70个字)</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.SMSClient.ErrorMessgae(System.Int32)">
            <summary>
            获取错误信息。
            </summary>
            <param name="errorCode">错误信息代码</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.SqlHelper">
            <summary>
            为方便执行Sql语句的类。非静态类，需要实例化使用。
            </summary>
            <example>
            下面是如何传入参数的示例代码：
            <code>
            //第一种传值方式  不要求参数顺序
            string strSQL = "EXEC sp_Common_Page @chvnSQL=@SQL,@intPageIndex=@pageIndex,@intPageSize=@pageSize";
            SqlParameter[] parameters={
            							new SqlParameter("@SQL",strSQL2),
            							new SqlParameter("@pageIndex",intPageIndex),
            							new SqlParameter("@pageSize",intPageSize)
            							};
            DataSet ds = ExecuteDataSet(strSQL,parameters);
            
            //第二种传值方式  必须按0,1,2...的顺序传入参数
            string strSQL = "EXEC sp_Common_Page @chvnSQL=@p0,@intPageIndex=@p1,@intPageSize=@p2";
            DataSet ds = ExecuteDataSet(strSQL, strSQL2, intPageIndex, intPageSize);
            </code>
            </example>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.m_ConnectionStr">
            <summary>
            SQL的连接字串
            </summary>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.#ctor(System.String)">
            <summary>
            由提供的连接字串构造SqlHelper
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetConnection">
            <summary>
            获取SQL的一个连接(未打开)
            </summary>
            <returns>返回一个未打开的SQL连接</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.SetParam(System.Data.SqlClient.SqlParameterCollection,System.String,System.Object)">
            <summary>
            设置SqlCommand参数,如果有同名（不区分大小写）的参数，那么替换之
            </summary>
            <param name="pcoll">SqlCommand的参数集合</param>
            <param name="pname">参数名</param>
            <param name="o">参数值</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.SetParameters(System.Data.SqlClient.SqlCommand,System.String,System.Int32,System.Object[])">
            <summary>
            根据自定义的参数前缀，把参数值按顺序设置到SqlCommand的Parameters中
            例如SetParameters(cmd,"p",0,"aa","bb")把"aa"作为@p0,"bb"作为"@p1"设置到cmd中
            </summary>
            <param name="cmd">要设置Parameter的SqlCommand</param>
            <param name="prefix">参数前缀，不应该包括@，例如 "p"</param>
            <param name="start">参数后缀的初始数,例如 0</param>
            <param name="sqlparams">参数值列表</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.SetParameters(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            根据自定义的参数前缀，把参数值按顺序设置到SqlCommand的Parameters中
            例如SetParameters(cmd,"aa","bb")把"aa"作为@p0,"bb"作为"@p1"设置到cmd中
            </summary>
            <param name="cmd">要设置Parameter的SqlCommand</param>
            <param name="sqlparams">参数值列表</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ToGuid(System.Object)">
            <summary>
            获取全局唯一标识符
            </summary>
            <param name="o">产生Guid的object对象</param>
            <returns>全局唯一标识符</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            将 SqlParameter[] 配置于 SqlCommand.
            如果输入输出参数值为null,则会转换为 DBNull.Value
            </summary>
            <param name="command">要传入参数的SqlCommand</param>
            <param name="commandParameters">为SqlCommand提供的参数数组</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            将DataRow中的列数据赋值给SqlParameter[]
            </summary>
            <param name="commandParameters">要赋值的SqlParameter[]</param>
            <param name="dataRow">保存存储过程参数值的DataRow,列名与参数名要一致,但不要求顺序一致</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            将一个数组中的值赋值给SqlParameter[]
            </summary>
            <param name="commandParameters">要赋值的SqlParameter[]</param>
            <param name="parameterValues">保存值的object[]数组,这会按顺序赋值</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            准备命令
            </summary>
            <param name="command">将被准备的SqlCommand</param>
            <param name="connection">一个可用的数据库连接,将会在它上面执行SqlCommand命令</param>
            <param name="transaction">一个可用的事务，或者null</param>
            <param name="commandType">命令类型(stored procedure, text, etc.)</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">传于命令的SqlParameter[]，如果没有则传入null</param>
            <param name="mustCloseConnection">如果连接是在本方法中被打开，则为true(表示需要在外部关闭),否则是false</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.SetParameter(System.Data.SqlClient.SqlCommand,System.String,System.Object)">
            <summary>
            设置单个SqlParameter,如果有同名（不区分大小写）的参数，那么替换之
            </summary>
            <param name="cmd">要设置Parameter的SqlCommand</param>
            <param name="paramName">参数名</param>
            <param name="paramValue">参数值</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.SetParameterPairs(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            为SqlCommand添加可变数目的SqlParameter参数（"@px",v1,"@py",v2...的形式），把v1,v2设置到名为@px,@py的SqlParameter中
            例如：SetParameterPairs(cmd,"@Title","I'm Edwin","@Date",DateTime.Now);
            </summary>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.SetParameters(System.Data.SqlClient.SqlCommand,System.Data.DataRow)">
            <summary>
            把DataRow中的每一列的当前值都设置为该列名的参数
            </summary>
            <param name="cmd">要设置Parameter的SqlCommand</param>
            <param name="row">包含列数据的DataRow</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回DataReader
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回受影响的行数
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>受影响的行数</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回object值
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>object值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteString(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回字符串
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteInt32(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回整型值
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>整型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDouble(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回双精度型值
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>双精度型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteBoolean(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回布尔值
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDateTime(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回DateTime
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteGuid(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回Guid
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>Guid</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataRow(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回数据首行。不存在则返回null。
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>数据行</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataTable(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回数据表。不存在则返回null。
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>数据表</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataSet(System.Data.SqlClient.SqlCommand,System.Object[])">
            <summary>
            执行SqlCommand命令,并返回数据集。
            </summary>
            <param name="cmd">SqlCommand命令</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>数据集</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.String,System.Data.IDataParameter[])">
            <summary>
            获取查询DataReader。连接需要在外部关闭。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>查询DataReader</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.String,System.Object[])">
            <summary>
            获取查询DataReader。连接需要在外部关闭。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">可变数目的参数值</param>
            <returns>DataReader</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.String,System.Data.IDataParameter[])">
            <summary>
            执行Sql语句，并返回受影响的行数。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            执行SQL语句，并返回受影响的行数
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">可变数目的参数值</param>
            <returns>返回受影响的行数</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.String,System.Data.IDataParameter[])">
            <summary>
            返回查询结果的第一行的第一列
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>返回查询结果的第一行的第一列</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteString(System.String,System.Data.IDataParameter[])">
            <summary>
            执行SQL语句,并返回字符串
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>字符串</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteInt32(System.String,System.Data.IDataParameter[])">
            <summary>
            执行SQL语句,并返回整型值。当取回null值时，返回0。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>整型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteInt32(System.String,System.Data.IDataParameter[],System.Int32)">
            <summary>
            执行SQL语句,并返回整型值。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="defaultValue">当取回null值时，要返回的缺省值</param>
            <returns>整型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDouble(System.String,System.Data.IDataParameter[])">
            <summary>
            执行SQL语句，并返回双精度型值。当取回null值时，返回0。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>双精度型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDouble(System.String,System.Data.IDataParameter[],System.Double)">
            <summary>
            执行SQL语句，并返回双精度型值。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="defaultValue">当取回null值时，要返回的缺省值</param>
            <returns>双精度型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteBoolean(System.String,System.Data.IDataParameter[])">
            <summary>
            执行SQL语句,并返回布尔值。当取回null值时，返回false。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteBoolean(System.String,System.Data.IDataParameter[],System.Boolean)">
            <summary>
            执行SQL语句,并返回布尔值。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="defaultValue">当取回null值时，要返回的缺省值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDateTime(System.String,System.Data.IDataParameter[])">
            <summary>
            执行SQL语句,并返回DateTime。当取回null值时，返回0001-01-01。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDateTime(System.String,System.Data.IDataParameter[],System.DateTime)">
            <summary>
            执行SQL语句,并返回DateTime。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="defaultValue">当取回null值时，要返回的缺省值</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteGuid(System.String,System.Data.IDataParameter[])">
            <summary>
            执行SQL语句,并返回Guid。当取回null值时，抛出错误。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>Guid</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.String,System.Object[])">
            <summary>
            返回查询结果的第一行的第一列
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">可变数目的参数值</param>
            <returns>返回查询结果的第一行的第一列</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteString(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回字符串
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>字符串</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteInt32(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回整型值。当取回null值时，返回0。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>整型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDouble(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回双精度型值。当取回null值时，返回0。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>双精度型值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteBoolean(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回布尔值。当取回null值时，返回false。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>布尔值</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDateTime(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回DateTime。当取回null值时，返回0001-01-01。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteGuid(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回Guid。当取回null值时，抛出错误。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>Guid</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回数据集
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>数据集</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataTable(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回数据表。不存在则返回null。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>数据表</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataRow(System.String,System.Object[])">
            <summary>
            执行SQL语句,并返回数据行。不存在则返回null。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="sqlparams">按顺序传入可变数目的参数值</param>
            <returns>数据行</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataTable(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            获取查询结果数据表。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="dataTableName">数据表名</param>
            <returns>数据表</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataTable(System.String,System.Data.IDataParameter[])">
            <summary>
            获取查询结果数据表。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>数据表</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataSet(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            获取查询结果数据集。
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <param name="dataSetName">数据集名</param>
            <returns>数据集</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataSet(System.String,System.Data.IDataParameter[])">
            <summary>
            获取查询结果数据集
            </summary>
            <param name="SQL">SQL语句</param>
            <param name="parameters">参数</param>
            <returns>数据集</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQueryWithTransaction(System.String)">
            <summary>
            执行Sql批查询，同时进行事务处理。
            </summary>
            <param name="SQL">Sql批查询语句</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataTable(System.Data.DataSet,System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            填充数据表
            </summary>
            <param name="ds">承载的数据集</param>
            <param name="SQL">SQL语句</param>
            <param name="parameters">需要的参数</param>
            <param name="tableName">数据表名</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataTable(System.Data.DataSet,System.String,System.Data.IDataParameter[],System.String[])">
            <summary>
            填充数据表
            </summary>
            <param name="ds">承载的数据集</param>
            <param name="SQL">SQL语句</param>
            <param name="parameters">需要的参数</param>
            <param name="tableNames">数据表名数组</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            更新数据集,为数据集中的插入行,更新行和删除行分别执行对应的命令
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">插入命令</param>
            <param name="deleteCommand">删除命令</param>
            <param name="updateCommand">更新命令</param>
            <param name="dataSet">数据集</param>
            <param name="tableName">数据表</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            创建命令
            </summary>
            <remarks>
            使用方法:  SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">数据库连接</param>
            <param name="spName">存储过程名</param>
            <param name="sourceColumns">源列的名称字串数组,赋值于对应的存储过程参数集</param>
            <returns>SqlCommand对象</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],EIIP.Helper.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>    
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand(that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand(that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand(that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name(probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand(that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure(the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            动态取得存储过程的参数集
            </summary>
            <param name="connection">数据库连接</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值</param>
            <returns>取回的参数集</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            SqlParameter[]的深度拷贝
            </summary>
            <param name="originalParameters">源参数集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            缓冲参数集
            </summary>
            <param name="connectionString">连接字串</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <param name="commandParameters">要缓冲的参数集</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetCachedParameterSet(System.String,System.String)">
            <summary>
            从缓冲中取回参数集
            </summary>
            <param name="connectionString">连接字串</param>
            <param name="commandText">存储过程名或T-SQL语句</param>
            <returns>参数集</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetSpParameterSet(System.String,System.String)">
            <summary>
            获取存储过程的参数集. 从数据库中查询相关参数集信息,并将之缓存
            </summary>
            <remarks>
            从数据库中查询相关参数集信息,并将之缓存
            </remarks>
            <param name="connectionString">连接字串</param>
            <param name="spName">存储过程名</param>
            <returns>SqlParameter[]</returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            获取存储过程的参数集. 从数据库中查询相关参数集信息,并将之缓存
            </summary>
            <remarks>
            从数据库中查询相关参数集信息,并将之缓存
            </remarks>
            <param name="connectionString">连接字串</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            获取存储过程的参数集. 从数据库中查询相关参数集信息,并将之缓存
            </summary>
            <remarks>
            从数据库中查询相关参数集信息,并将之缓存
            </remarks>
            <param name="connection">数据库连接</param>
            <param name="spName">存储过程名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            获取存储过程的参数集. 从数据库中查询相关参数集信息,并将之缓存
            </summary>
            <remarks>
            从数据库中查询相关参数集信息,并将之缓存
            </remarks>
            <param name="connection">数据库连接</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            获取存储过程的参数集. 从数据库中查询相关参数集信息,并将之缓存
            </summary>
            <remarks>
            从数据库中查询相关参数集信息,并将之缓存
            </remarks>
            <param name="connection">数据库连接</param>
            <param name="spName">存储过程名</param>
            <param name="includeReturnValueParameter">是否包含返回值参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLCondition(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLCondition(System.Text.StringBuilder,System.String,System.String,System.Boolean,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionPY(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            输出SQL条件(支持拼音查询)。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionPY(System.Text.StringBuilder,System.String,System.String,System.Boolean,System.String)">
            <summary>
            输出SQL条件(支持拼音查询)。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLCondition(System.Text.StringBuilder,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="supportPinyin">设置一个值,该值指示是否支持拼音查询</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLCondition(System.Text.StringBuilder,EIIP.Helper.SqlHelper.ValueType,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。分区查询
            </summary>
            <param name="writer">输出流</param>
            <param name="valueType">值类型</param>
            <param name="begin">区间起始值</param>
            <param name="end">区间结束值</param>
            <param name="fildName">数据库字段名</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.VerifyValueString(EIIP.Helper.SqlHelper.ValueType,System.String,System.String)">
            <summary>
            校验(过滤)值。
            </summary>
            <param name="valueType">值类型</param>
            <param name="v">要校验的值</param>
            <param name="fildDesc">字段描述</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionKeywords(System.Text.StringBuilder,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="supportPinyin">设置一个值,该值指示是否支持拼音查询</param>
            <param name="fildName">数据库字段名</param>
            <param name="keywords">以半角空格或逗号分隔的关键字。</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionKeywords(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="keywords">以半角空格或逗号分隔的关键字。</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionKeywords(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="keywords">以半角空格或逗号分隔的关键字。</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionDate(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="dtBegin">起始日期</param>
            <param name="dtEnd">结束日期</param>
            <param name="fildName">字段名称</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionInDay(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="date">指定日期当天</param>
            <param name="fildName">字段名称</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionDateTime(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="dtmBegin">起始时间</param>
            <param name="dtmEnd">结束时间</param>
            <param name="fildName">字段名称</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionDate(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="dtBegin">起始日期</param>
            <param name="dtEnd">结束日期</param>
            <param name="fildName">字段名称</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionInDay(System.Text.StringBuilder,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="date">指定日期当天</param>
            <param name="fildName">字段名称</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionDateTime(System.Text.StringBuilder,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            输出SQL条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="dtmBegin">起始时间</param>
            <param name="dtmEnd">结束时间</param>
            <param name="fildName">字段名称</param>
            <param name="fildDesc">字段描述</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFT(System.Text.StringBuilder,System.String,System.String,EIIP.Helper.SqlHelper.ContainsCondition,System.String)">
            <summary>
            输出SQL全文检索条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
            <param name="condition">当有多个关键字时，关键字之间的关系</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFT(System.Text.StringBuilder,System.String,System.String,EIIP.Helper.SqlHelper.ContainsCondition)">
            <summary>
            输出SQL全文检索条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
            <param name="condition">当有多个关键字时，关键字之间的关系</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFT(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            输出SQL全文检索条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFT(System.Text.StringBuilder,System.String,System.String,EIIP.Helper.SqlHelper.ContainsCondition,System.String,System.String)">
            <summary>
            输出SQL全文检索条件。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
            <param name="condition">当有多个关键字时，关键字之间的关系</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFTable(System.Text.StringBuilder,System.String,System.String,System.String,EIIP.Helper.SqlHelper.ContainsCondition)">
            <summary>
            输出SQL全文检索的关联索引表及条件，表名为 [ft] 主键为 [KEY]。
            </summary>
            <param name="writer">输出流</param>
            <param name="tableName">数据库表名</param>
            <param name="fildName">数据库搜索字段名</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
            <param name="condition">当有多个关键字时，关键字之间的关系</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFTable(System.Text.StringBuilder,System.String,System.String,System.String)">
            <summary>
            输出SQL全文检索的关联索引表及条件，表名为 [ft] 主键为 [KEY]。
            </summary>
            <param name="writer">输出流</param>
            <param name="tableName">数据库表名</param>
            <param name="fildName">数据库搜索字段名</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
        </member>
        <member name="M:EIIP.Helper.SqlHelper.WriteSQLConditionFTable(System.Text.StringBuilder,System.String,System.String,System.Int32,System.String,EIIP.Helper.SqlHelper.ContainsCondition)">
            <summary>
            输出SQL全文检索的关联索引表及条件，表名为 [ft] 主键为 [KEY]。
            </summary>
            <param name="writer">输出流</param>
            <param name="tableName">数据库表名</param>
            <param name="fildName">数据库搜索字段名</param>
            <param name="top">设置要获取的记录数，若为0表示无限制</param>
            <param name="value">关键字字串，多个关键字以空格分隔</param>
            <param name="condition">当有多个关键字时，关键字之间的关系</param>
        </member>
        <member name="P:EIIP.Helper.SqlHelper.ConnectionStr">
            <summary>
            获取或设置数据库连接字串
            </summary>
        </member>
        <member name="T:EIIP.Helper.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:EIIP.Helper.SqlHelper.ValueType">
            <summary>
            指示查询数据的某一值类型。
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ValueType.Int">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ValueType.Decimal">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ValueType.Percent">
            <summary>
            百分比
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ValueType.DateTime">
            <summary>
            日期时间
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ValueType.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ValueType.Other">
            <summary>
            其他可以作区间比较的数据
            </summary>
        </member>
        <member name="T:EIIP.Helper.SqlHelper.ContainsCondition">
            <summary>
            指示 Contains 的某一条件类型。
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ContainsCondition.AND">
            <summary>
            逻辑与
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ContainsCondition.AND_NOT">
            <summary>
            逻辑与非
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ContainsCondition.OR">
            <summary>
            逻辑或
            </summary>
        </member>
        <member name="F:EIIP.Helper.SqlHelper.ContainsCondition.NEAR">
            <summary>
            邻近词搜索类型
            </summary>
        </member>
        <member name="T:EIIP.Framework.StringCyclicBuffer">
            <summary>
            字符串的循环式缓存。
            </summary>
        </member>
        <member name="F:EIIP.Framework.StringCyclicBuffer.m_infos">
            <summary>
            字符串数组
            </summary>
        </member>
        <member name="M:EIIP.Framework.StringCyclicBuffer.#ctor">
            <summary>
            实例化字符串的循环式缓存。
            </summary>
        </member>
        <member name="M:EIIP.Framework.StringCyclicBuffer.#ctor(System.Int32)">
            <summary>
            实例化字符串的循环式缓存。
            </summary>
            <param name="maxSize">缓存中最大容量</param>
        </member>
        <member name="M:EIIP.Framework.StringCyclicBuffer.Append(System.String)">
            <summary>
            追加字符串。如果缓存已满，返回丢弃的字符串；否则返回null。
            </summary>
            <param name="newString">字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.StringCyclicBuffer.PopOldest">
            <summary>
            释放最旧的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.StringCyclicBuffer.Reset">
            <summary>
            重置缓存
            </summary>
        </member>
        <member name="M:EIIP.Framework.StringCyclicBuffer.PopAll">
            <summary>
            释放所有的字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.StringCyclicBuffer.Item(System.Int32)">
            <summary>
            获取指定发生顺序的字符串。
            </summary>
        </member>
        <member name="T:EIIP.Framework.SystemInfo">
            <summary>
            系统信息类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.SystemInfo.#ctor">
            <summary>
            实例化系统信息。
            </summary>
        </member>
        <member name="M:EIIP.Framework.SystemInfo.SetSystemInfo">
            <summary>
            获取系统信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.SystemInfo.Key">
            <summary>
            获取键
            </summary>
        </member>
        <member name="P:EIIP.Framework.SystemInfo.ID">
            <summary>
            获取系统标识。
            </summary>
        </member>
        <member name="P:EIIP.Framework.SystemInfo.Content">
            <summary>
            获取内容。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Type.BinaryTree`1">
            <summary>
            提供一个二叉树数据结构的类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.#ctor">
            <summary>
            实例化缺省二叉树数据结构。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Add(`0[])">
            <summary>
            实例化指定二叉树数据结构。
            </summary>
            <param name="items">数据项集合</param>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Add(`0)">
            <summary>
            实例化指定二叉树数据结构。
            </summary>
            <param name="item">数据项</param>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Add(EIIP.Framework.Type.BinaryTree{`0}.Node{`0},EIIP.Framework.Type.BinaryTree{`0}.Node{`0})">
            <summary>
            添加节点。
            </summary>
            <param name="newNode">新节点</param>
            <param name="root">父节点</param>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.ScanInOrder(EIIP.Framework.Type.BinaryTree{`0}.Node{`0})">
            <summary>
            遍历二叉树。
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.Type.BinaryTree`1.InOrder">
            <summary>
            获取排序后的可枚举的二叉树。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Type.BinaryTree`1.Node`1">
            <summary>
            定义可序列化的节点。
            </summary>
            <typeparam name="T1">节点类型</typeparam>
        </member>
        <member name="F:EIIP.Framework.Type.BinaryTree`1.Node`1.LeftNode">
            <summary>
            左节点。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Type.BinaryTree`1.Node`1.RightNode">
            <summary>
            右节点。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Type.BinaryTree`1.Node`1.Item">
            <summary>
            节点项。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Node`1.#ctor">
            <summary>
            实例化缺省节点。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Node`1.#ctor(`1)">
            <summary>
            实例化指定节点。
            </summary>
            <param name="item">节点数据项。</param>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Node`1.#ctor(`1,EIIP.Framework.Type.BinaryTree{`0}.Node{`1},EIIP.Framework.Type.BinaryTree{`0}.Node{`1})">
            <summary>
            实例化指定节点。
            </summary>
            <param name="item">节点数据项。</param>
            <param name="right">右节点</param>
            <param name="left">左节点</param>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Node`1.op_GreaterThan(EIIP.Framework.Type.BinaryTree{`0}.Node{`1},EIIP.Framework.Type.BinaryTree{`0}.Node{`1})">
            <summary>
            重载操作数。
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Type.BinaryTree`1.Node`1.op_LessThan(EIIP.Framework.Type.BinaryTree{`0}.Node{`1},EIIP.Framework.Type.BinaryTree{`0}.Node{`1})">
            <summary>
            重载操作数。
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Type.BitVector32">
            <summary>
            以 32 位内存存储布尔值和小整数。
            </summary>
        </member>
        <member name="F:EIIP.Type.BitVector32.Empty">
            <summary>
            获取只读空结构。
            </summary>
        </member>
        <member name="M:EIIP.Type.BitVector32.#ctor(System.Int32)">
            <summary>
            实例化简单结构，该实例包含以整数表示的数据。
            </summary>
            <param name="data">一个整数，它表示新 BitVector32 的数据。</param>
        </member>
        <member name="M:EIIP.Type.BitVector32.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化简单结构，该实例包含以整数表示的数据。
            </summary>
            <param name="data">一个整数，它表示新 BitVector32 的数据。</param>
            <param name="readOnly">设置一个值，该值指示本结构数据值是否是只读的。</param>
        </member>
        <member name="M:EIIP.Type.BitVector32.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            实例化简单结构，该实例包含以整数表示的数据。
            </summary>
            <param name="data">一个整数，它表示新 BitVector32 的数据。</param>
            <param name="readOnly">设置一个值，该值指示本结构数据值是否是只读的。</param>
            <param name="isInitialization">
            设置一个值，该值指示本结构是否做为初始化情况存在，该值设定后在结构生存期内不可更改。
            </param>
        </member>
        <member name="M:EIIP.Type.BitVector32.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化简单结构，该实例包含以整数表示的数据。
            </summary>
            <param name="data">一个整数，它表示新 BitVector32 的数据。</param>
            <param name="version">版本号</param>
        </member>
        <member name="M:EIIP.Type.BitVector32.#ctor(System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            实例化简单结构，该实例包含以整数表示的数据。
            </summary>
            <param name="data">一个整数，它表示新 BitVector32 的数据。</param>
            <param name="readOnly">设置一个值，该值指示本结构数据值是否是只读的。</param>
            <param name="isInitialization">
            设置一个值，该值指示本结构是否做为初始化情况存在，该值设定后在结构生存期内不可更改。
            </param>
            <param name="version">版本号</param>
        </member>
        <member name="M:EIIP.Type.BitVector32.Exists(System.Object)">
            <summary>
            测试整型值或枚举值。
            </summary>
            <param name="intValue">整型值或枚举值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.BitVector32.ExistsAny(System.Object)">
            <summary>
            测试整型值或枚举值，只要在任意位上被设置，就返回true，否则返回false。
            </summary>
            <param name="intValue">整型值或枚举值</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.BitVector32.Item(System.Int32)">
            <summary>
            获取或设置一个值，该值指示对应位数据是否存在。
            </summary>
        </member>
        <member name="P:EIIP.Type.BitVector32.Data">
            <summary>
            获取作为整数的 BitVector32 的值。
            </summary>
        </member>
        <member name="P:EIIP.Type.BitVector32.ReadOnly">
            <summary>
            获取一个值，该值指示本结构数据值是否是只读的。
            </summary>
        </member>
        <member name="P:EIIP.Type.BitVector32.IsInitialization">
            <summary>
            获取一个值，该值指示本结构是否做为初始化情况存在，该值在结构生存期内不会更改。
            </summary>
        </member>
        <member name="P:EIIP.Type.BitVector32.Version">
            <summary>
            获取或设置版本号。
            </summary>
        </member>
        <member name="T:EIIP.Type.ClientInfo">
            <summary>
            客户端信息。
            </summary>
        </member>
        <member name="F:EIIP.Type.ClientInfo.IPAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="F:EIIP.Type.ClientInfo.IPLocation">
            <summary>
            IP位置
            </summary>
        </member>
        <member name="F:EIIP.Type.ClientInfo.IPAddressInfo">
            <summary>
            IP地址及位置信息
            </summary>
        </member>
        <member name="F:EIIP.Type.ClientInfo.Browser">
            <summary>
            浏览器。
            </summary>
        </member>
        <member name="F:EIIP.Type.ClientInfo.OS">
            <summary>
            操作系统。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.ReadOnlyCollection">
            <summary>
            只读的集合
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyCollection.#ctor(System.Collections.ICollection)">
            <summary>
            实例化只读集合。
            </summary>
            <param name="source">集合对象</param>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyCollection.IndexOf(System.Object)">
            <summary>
            搜索指定的元素，并返回整个集合中第一个匹配项的从零开始的索引。
            </summary>
            <param name="value">元素对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyCollection.Contains(System.Object)">
            <summary>
            确定某个元素是否在集合中。
            </summary>
            <param name="value">元素对象</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyCollection.Item(System.Int32)">
            <summary>
            获取指定索引位置的元素。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.ReadOnlyDictionary">
            <summary>
            只读的IDictionary
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.#ctor(System.Collections.IDictionary)">
            <summary>
            实例化只读字典
            </summary>
            <param name="dictionary">要包装的字典实例</param>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.Remove(System.Object)">
            <summary>
            因是只读字典，故总是会抛出错误。
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.Contains(System.Object)">
            <summary>
            确定 IDictionary 是否包含带有指定键的元素。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.Clear">
            <summary>
            因是只读字典，故总是会抛出错误。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.Add(System.Object,System.Object)">
            <summary>
            因是只读字典，故总是会抛出错误。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定 System.Array 索引处开始将当前实例中的元素复制到 System.Array 中。
            </summary>
            <param name="array">作为从当前实例复制的元素的目标位置的一维 System.Array。</param>
            <param name="index">array 中的从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:EIIP.Type.Collections.ReadOnlyDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.IsReadOnly">
            <summary>
            获取一个值，该值指示字典是否是只读的。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.Item(System.Object)">
            <summary>
            获取指定索引的元素。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.Values">
            <summary>
            获取包含 IDictionary 中的值的 ICollection。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.Keys">
            <summary>
            获取包含 IDictionary 的键的 ICollection
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.IsFixedSize">
            <summary>
            获取一个值，该值指示 IDictionary 是否具有固定大小。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.IsSynchronized">
            <summary>
            获取一个值，指示对实例的访问是否同步（线程安全）。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.Count">
            <summary>
            获取当前实例中包含的元素数。 
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ReadOnlyDictionary.SyncRoot">
            <summary>
            获取可用于同步对当前实例的访问的对象。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.DictionarySet">
            <summary>
            不含重复元素的字典集。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.Set">
            <summary>
            不含重复元素的集合基类。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.ISet">
            <summary>
            <p>不含重复元素的集合Set基类的接口。
            在Set中元素的顺序可能会信赖于：a.实现的数据结构; b.不同的Set方法的实现。</p>
            </summary>
            <remarks>
            <p>Set重载Equals()方法以测试相等运算：是否两个Set实例包含相同的元素。
            设计中并未重载 == 与 != 运算符。
            同样，GetHashCode()方法也并未实现，
            因此做为规则，不要在Set实例中存储collection对象,而应用IDictionary来替代。</p>
            
            <p>除了用SynchronizedSet进行包装，任何Set实现都不是线程安全的。</p>
            </remarks>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Union(EIIP.Type.Collections.ISet)">
            <summary>
            当前Set实例与指定Set实例进行合并，并返回新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Intersect(EIIP.Type.Collections.ISet)">
            <summary>
            返回当前实例与指定Set实例的交集。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Minus(EIIP.Type.Collections.ISet)">
            <summary>
            返回当前实例中排除指定Set实例中元素的新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.ExclusiveOr(EIIP.Type.Collections.ISet)">
            <summary>
            返回不同时存在于当前实例与指定Set实例的元素的新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Contains(System.Object)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定的元素。
            </summary>
            <param name="o">要查询的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.ContainsAll(System.Collections.ICollection)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定集合内所有的元素。
            </summary>
            <param name="c">要查询的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Add(System.Object)">
            <summary>
            添加指定的元素。若该元素不存在返回True，否则返回False。
            </summary>
            <param name="o">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.AddAll(System.Collections.ICollection)">
            <summary>
            添加一指定集合内的所有元素。若有新元素添加返回True，否则返回False。
            </summary>
            <param name="c">要添加的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Remove(System.Object)">
            <summary>
            移除一指定元素。当成功移除时返回True。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.RemoveAll(System.Collections.ICollection)">
            <summary>
            移除一指定集合内的所有元素。若有元素被移除返回True，否则返回False。
            </summary>
            <param name="c">要移除的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.RetainAll(System.Collections.ICollection)">
            <summary>
            只保留存在于指定集合内的元素。若当前实例发生了更改返回True，否则返回False。
            </summary>
            <param name="c">要保留的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ISet.Clear">
            <summary>
            清除实例中所有元素。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ISet.IsEmpty">
            <summary>
             获取一个值，该值指示当前Set实例中是否未含任何元素。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Union(EIIP.Type.Collections.ISet)">
            <summary>
            当前Set实例与指定Set实例进行合并，并返回新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Union(EIIP.Type.Collections.ISet,EIIP.Type.Collections.ISet)">
            <summary>
            获取两个Set实例的并集。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.op_BitwiseOr(EIIP.Type.Collections.Set,EIIP.Type.Collections.Set)">
            <summary>
            获取两个Set实例的并集。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Intersect(EIIP.Type.Collections.ISet)">
            <summary>
            获取当前实例与指定Set实例的交集。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Intersect(EIIP.Type.Collections.ISet,EIIP.Type.Collections.ISet)">
            <summary>
            获取两个Set实例的交集。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.op_BitwiseAnd(EIIP.Type.Collections.Set,EIIP.Type.Collections.Set)">
            <summary>
            获取两个Set实例的交集。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Minus(EIIP.Type.Collections.ISet)">
            <summary>
            获取当前实例中排除指定Set实例中元素的新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Minus(EIIP.Type.Collections.ISet,EIIP.Type.Collections.ISet)">
            <summary>
            获取从第一个Set实例中排除第二个Set实例中元素的新Set实例。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.op_Subtraction(EIIP.Type.Collections.Set,EIIP.Type.Collections.Set)">
            <summary>
            获取从第一个Set实例中排除第二个Set实例中元素的新Set实例。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.ExclusiveOr(EIIP.Type.Collections.ISet)">
            <summary>
            获取不同时存在于当前实例与指定Set实例的元素的新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.ExclusiveOr(EIIP.Type.Collections.ISet,EIIP.Type.Collections.ISet)">
            <summary>
            获取不同时存在于两个Set实例的元素的新Set实例。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.op_ExclusiveOr(EIIP.Type.Collections.Set,EIIP.Type.Collections.Set)">
            <summary>
            获取不同时存在于两个Set实例的元素的新Set实例。
            </summary>
            <param name="a">第一个Set实例</param>
            <param name="b">第二个Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Add(System.Object)">
            <summary>
            添加指定的元素。若该元素不存在返回True，否则返回False。
            </summary>
            <param name="o">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.AddAll(System.Collections.ICollection)">
            <summary>
            添加一指定集合内的所有元素。若有新元素添加返回True，否则返回False。
            </summary>
            <param name="c">要添加的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Clear">
            <summary>
            清除实例中所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Contains(System.Object)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定的元素。
            </summary>
            <param name="o">要查询的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.ContainsAll(System.Collections.ICollection)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定集合内所有的元素。
            </summary>
            <param name="c">要查询的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Remove(System.Object)">
            <summary>
            移除一指定元素。当成功移除时返回True。
            </summary>
            <param name="o">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.RemoveAll(System.Collections.ICollection)">
            <summary>
            移除一指定集合内的所有元素。若有元素被移除返回True，否则返回False。
            </summary>
            <param name="c">要移除的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.RetainAll(System.Collections.ICollection)">
            <summary>
            只保留存在于指定集合内的元素。若当前实例发生了更改返回True，否则返回False。
            </summary>
            <param name="c">要保留的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Clone">
            <summary>
            获取当前实例的一个副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.CopyTo(System.Array,System.Int32)">
            <summary>
            将实例中所有元素复制至一维数据中。
            </summary>
            <param name="array">存放实例元素的一维数组</param>
            <param name="index">从数组开始存储第一个复制元素的索引</param>
        </member>
        <member name="M:EIIP.Type.Collections.Set.GetEnumerator">
            <summary>
            获取当前实例的枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.Equals(System.Object)">
            <summary>
            获取一个值，该值指示当前实例是否与指定对象相等。
            </summary>
            <param name="o">测试对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.Set.GetHashCode">
            <summary>
            获取实例哈希值。需要在派生类中实现。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.Set.IsEmpty">
            <summary>
             获取一个值，该值指示当前Set实例中是否未含任何元素。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.Set.Count">
            <summary>
            获取当前实例中元素的个数。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.Set.IsSynchronized">
            <summary>
            获取一个值，该值指示当前实例是否是线程安全的。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.Set.SyncRoot">
            <summary>
            获取可用于同步对 Set 的访问的对象。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.DictionarySet.InternalDictionary">
            <summary>
            提供Set元素的存储区。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.DictionarySet.PlaceholderObject">
            <summary>
            实例使用的占位符对象。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.Add(System.Object)">
            <summary>
            添加指定的元素。若该元素不存在返回True，否则返回False。
            </summary>
            <param name="o">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.AddAll(System.Collections.ICollection)">
            <summary>
            添加一指定集合内的所有元素。若有新元素添加返回True，否则返回False。
            </summary>
            <param name="c">要添加的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.Clear">
            <summary>
            清除实例中所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.Contains(System.Object)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定的元素。
            </summary>
            <param name="o">要查询的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.ContainsAll(System.Collections.ICollection)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定集合内所有的元素。
            </summary>
            <param name="c">要查询的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.Remove(System.Object)">
            <summary>
            移除一指定元素。当成功移除时返回True。
            </summary>
            <param name="o">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.RemoveAll(System.Collections.ICollection)">
            <summary>
            移除一指定集合内的所有元素。若有元素被移除返回True，否则返回False。
            </summary>
            <param name="c">要移除的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.RetainAll(System.Collections.ICollection)">
            <summary>
            只保留存在于指定集合内的元素。若当前实例发生了更改返回True，否则返回False。
            </summary>
            <param name="c">要保留的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.CopyTo(System.Array,System.Int32)">
            <summary>
            将实例中所有元素复制至一维数据中。
            </summary>
            <param name="array">存放实例元素的一维数组</param>
            <param name="index">从数组开始存储第一个复制元素的索引</param>
        </member>
        <member name="M:EIIP.Type.Collections.DictionarySet.GetEnumerator">
            <summary>
            获取当前实例的枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.DictionarySet.Placeholder">
            <summary>
            获取实例使用的占位符对象。用于所有Set实例的单实例全局对象。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.DictionarySet.IsEmpty">
            <summary>
             获取一个值，该值指示当前Set实例中是否未含任何元素。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.DictionarySet.Count">
            <summary>
            获取当前实例中元素的个数。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.DictionarySet.IsSynchronized">
            <summary>
            获取一个值，该值指示当前实例是否是线程安全的。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.DictionarySet.SyncRoot">
            <summary>
            获取可用于同步对 Set 的访问的对象。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.EventKey">
            <summary>
            使用 EventSet 时，为更多类型安全与代码可维护性而提供的类。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.EventSet">
            <summary>
            可重用的存放着事件标识符的字典（包括主键与委托值）类。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.EventSet.m_events">
            <summary>
            用于存储主键与委托值。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.EventSet.Add(EIIP.Type.Collections.EventKey,System.Delegate)">
            <summary>
            添加主键与委托值对。若该主键已有委托值，则将两个委托的调用列表连接在一起。
            </summary>
            <param name="eventKey">主键</param>
            <param name="handler">要添加的委托值</param>
        </member>
        <member name="M:EIIP.Type.Collections.EventSet.Remove(EIIP.Type.Collections.EventKey,System.Delegate)">
            <summary>
            从主键对应的委托链中移除指定最后一个委托值。当试图移除一个并不存在的主键的委托值时，不抛出错误。
            </summary>
            <param name="eventKey">主键</param>
            <param name="handler">要移除的委托值</param>
        </member>
        <member name="M:EIIP.Type.Collections.EventSet.Raise(EIIP.Type.Collections.EventKey,System.Object,System.EventArgs)">
            <summary>
            触发指定事件主键的事件。若主键不存在，不抛出错误。
            </summary>
            <param name="eventKey">主键</param>
            <param name="sender">调用者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Type.Collections.HashedSet">
            <summary>
            基于HashTable的Set类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.HashedSet.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.HashedSet.#ctor(System.Collections.ICollection)">
            <summary>
            以集合中的元素实例化。
            </summary>
            <param name="initialValues">含初始值的集合</param>
        </member>
        <member name="T:EIIP.Type.Collections.HybridSet">
            <summary>
            基于List或HashTable的混合集类。
            当集合较小时，使用ListDictionary，然后当集合变大时，切换到HashTable
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.HybridSet.#ctor">
            <summary>
            实例化HybridSet
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.HybridSet.#ctor(System.Collections.ICollection)">
            <summary>
            基于List或HashTable中元素实例化。
            </summary>
            <param name="initialValues">含初始值的集合</param>
        </member>
        <member name="T:EIIP.Type.Collections.ImmutableSet">
            <summary>
            只读Set集合类。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.ImmutableSet.m_BasisSet">
            <summary>
            原始集实例。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.#ctor(EIIP.Type.Collections.ISet)">
            <summary>
            构造指定Set集的只读实例。
            </summary>
            <param name="basisSet">要包装的Set集</param>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Add(System.Object)">
            <summary>
            因为是只读实例，所以始终会抛出错误。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.AddAll(System.Collections.ICollection)">
            <summary>
            因为是只读实例，所以始终会抛出错误。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Clear">
            <summary>
            因为是只读实例，所以始终会抛出错误。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Contains(System.Object)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定的元素。
            </summary>
            <param name="o">要查询的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定集合内所有的元素。
            </summary>
            <param name="c">要查询的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Remove(System.Object)">
            <summary>
            因为是只读实例，所以始终会抛出错误。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            因为是只读实例，所以始终会抛出错误。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.RetainAll(System.Collections.ICollection)">
            <summary>
            因为是只读实例，所以始终会抛出错误。
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.CopyTo(System.Array,System.Int32)">
            <summary>
            将实例中所有元素复制至一维数据中。
            </summary>
            <param name="array">存放实例元素的一维数组</param>
            <param name="index">从数组开始存储第一个复制元素的索引</param>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.GetEnumerator">
            <summary>
            获取当前实例的枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Clone">
            <summary>
            获取当前实例的一个副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Union(EIIP.Type.Collections.ISet)">
            <summary>
            当前Set实例与指定Set实例进行合并，并返回新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Intersect(EIIP.Type.Collections.ISet)">
            <summary>
            获取当前实例与指定Set实例的交集。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.Minus(EIIP.Type.Collections.ISet)">
            <summary>
            获取当前实例中排除指定Set实例中元素的新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.ImmutableSet.ExclusiveOr(EIIP.Type.Collections.ISet)">
            <summary>
            获取不同时存在于当前实例与指定Set实例的元素的新Set实例。
            </summary>
            <param name="a">Set实例</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.ImmutableSet.BasisSet">
            <summary>
            获取原始集实例。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ImmutableSet.IsEmpty">
            <summary>
            获取一个值，该值指示当前Set实例中是否未含任何元素。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ImmutableSet.Count">
            <summary>
            获取当前实例中元素的个数。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ImmutableSet.IsSynchronized">
            <summary>
            获取一个值，该值指示当前实例是否是线程安全的。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.ImmutableSet.SyncRoot">
            <summary>
            获取可用于同步对 Set 的访问的对象。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.LinkedList">
            <summary>
            链表类。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.LinkedList.m_NodeIndex">
            <summary>
            节点索引。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.LinkedList.m_RootNode">
            <summary>
            根节点。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.LinkedList.m_ModID">
            <summary>
            修改版本。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.#ctor">
            <summary>
            实例化链表。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.#ctor(System.Collections.IList)">
            <summary>
            实例化链表。
            </summary>
            <param name="list">包含初始节点值的列表</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.RemoveAt(System.Int32)">
            <summary>
            移除指定索引的节点。
            </summary>
            <param name="index">要查询的索引。</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.Insert(System.Int32,System.Object)">
            <summary>
            在指定索引处插入一个节点。
            </summary>
            <param name="index">要查询的索引</param>
            <param name="value">要插入的节点值。</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.Remove(System.Object)">
            <summary>
            移除指定节点值。
            </summary>
            <param name="value">要移除的值对象</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.Contains(System.Object)">
            <summary>
            测试是否包含指定值对象。
            </summary>
            <param name="value">要查询的值对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.Clear">
            <summary>
            移除所有节点。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.IndexOf(System.Object)">
            <summary>
            获取指定值对象的索引。不存在则返回-1。
            </summary>
            <param name="value">要查询的值对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.Add(System.Object)">
            <summary>
            追加指定节点值。
            </summary>
            <param name="value">要添加的值对象。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.AddAll(System.Collections.IList)">
            <summary>
            添加列表中元素。
            </summary>
            <param name="elements">列表</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.CheckUpdateState">
            <summary>
            检查当前链表是否能被修改。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.ValidateIndex(System.Int32)">
            <summary>
            检验指定索引是否合法。不合法抛出错误。
            </summary>
            <param name="index">要查询的索引。</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.GetNode(System.Int32)">
            <summary>
            获取指定索引的节点。
            </summary>
            <param name="index">要查询的索引。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.GetNode(System.Object)">
            <summary>
            获取指定节点值的节点容器。
            </summary>
            <param name="value">要查询的节点值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.RemoveNode(EIIP.Type.Collections.LinkedList.Node)">
            <summary>
            移除指定节点。
            </summary>
            <param name="node">要移除的节点</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.CopyTo(System.Array,System.Int32)">
            <summary>
            从特定 System.Array 索引处开始将链表的元素复制到 System.Array 中。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.IsReadOnly">
            <summary>
            获取一个值，该值指示链表是否是只读的。
            </summary>
            <value></value>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.Item(System.Int32)">
            <summary>
            获取或设置链表中指定索引的节点值。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.IsFixedSize">
            <summary>
            获取一个值，该值指示链表是否是固定大小的。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.IsSynchronized">
            <summary>
            获取一个值，指示对链表的访问是否同步（线程安全）。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.Count">
            <summary>
            获取链表中包含的节点数。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.SyncRoot">
            <summary>
            获取可用于同步对链表的访问的对象。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.LinkedList.Node">
            <summary>
            节点类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.Node.#ctor(System.Object,EIIP.Type.Collections.LinkedList.Node,EIIP.Type.Collections.LinkedList.Node)">
            <summary>
            实例化节点。
            </summary>
            <param name="val">节点值</param>
            <param name="previous">上一节点</param>
            <param name="next">下一节点</param>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.Node.Value">
            <summary>
            获取或设置节点值。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.Node.NextNode">
            <summary>
            获取或设置下一节点。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.Node.PreviousNode">
            <summary>
            获取或设置上一节点。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.LinkedList.NodeHolder">
            <summary>
            节点容器类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.NodeHolder.#ctor(EIIP.Type.Collections.LinkedList.Node,System.Int32)">
            <summary>
            实例化节点容器。
            </summary>
            <param name="node">节点</param>
            <param name="index">索引</param>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.NodeHolder.Index">
            <summary>
            获取节点容器索引。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.NodeHolder.Node">
            <summary>
            获取节点。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.LinkedList.LinkedListEnumerator">
            <summary>
            实现链表枚举功能。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.LinkedListEnumerator.#ctor(EIIP.Type.Collections.LinkedList)">
            <summary>
            实例化链表枚举
            </summary>
            <param name="ll">链表</param>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.LinkedListEnumerator.MoveNext">
            <summary>
            移向链表下一节点。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.LinkedList.LinkedListEnumerator.Reset">
            <summary>
            重置链表。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.LinkedList.LinkedListEnumerator.Current">
            <summary>
            获取当前节点值。
            </summary>
        </member>
        <member name="T:EIIP.Type.Collections.ListSet">
            <summary>
            基于ListDictionary的Set类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ListSet.#ctor">
            <summary>
            实例化基于ListDictionary的Set类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.ListSet.#ctor(System.Collections.ICollection)">
            <summary>
            以指定集合实例化基于ListDictionary的Set类。
            </summary>
            <param name="initialValues">含初始值的集合</param>
        </member>
        <member name="T:EIIP.Type.Collections.SortedSet">
            <summary>
            基于SortedList的Set类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.SortedSet.#ctor">
            <summary>
            实例化基于SortedList的Set类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.SortedSet.#ctor(System.Collections.ICollection)">
            <summary>
            以指定集合实例化基于SortedList的Set类。
            </summary>
            <param name="initialValues">含初始值的集合</param>
        </member>
        <member name="T:EIIP.Type.Collections.SynchronizedSet">
            <summary>
            实现线程安全的Set类。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.SynchronizedSet.m_BasisSet">
            <summary>
            原始集实例。
            </summary>
        </member>
        <member name="F:EIIP.Type.Collections.SynchronizedSet.m_SyncRoot">
            <summary>
            同步对象
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.#ctor(EIIP.Type.Collections.ISet)">
            <summary>
            构造线程安全的包装器。
            </summary>
            <param name="basisSet">原始集实例</param>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.Add(System.Object)">
            <summary>
            添加指定的元素。若该元素不存在返回True，否则返回False。
            </summary>
            <param name="o">要添加的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.AddAll(System.Collections.ICollection)">
            <summary>
            添加一指定集合内的所有元素。若有新元素添加返回True，否则返回False。
            </summary>
            <param name="c">要添加的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.Clear">
            <summary>
            清除实例中所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.Contains(System.Object)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定的元素。
            </summary>
            <param name="o">要查询的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.ContainsAll(System.Collections.ICollection)">
            <summary>
            获取一个值，该值指示当前Set实例中是否包含指定集合内所有的元素。
            </summary>
            <param name="c">要查询的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.Remove(System.Object)">
            <summary>
            移除一指定元素。当成功移除时返回True。
            </summary>
            <param name="o">要移除的元素</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.RemoveAll(System.Collections.ICollection)">
            <summary>
            移除一指定集合内的所有元素。若有元素被移除返回True，否则返回False。
            </summary>
            <param name="c">要移除的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.RetainAll(System.Collections.ICollection)">
            <summary>
            只保留存在于指定集合内的元素。若当前实例发生了更改返回True，否则返回False。
            </summary>
            <param name="c">要保留的所有元素所在的集合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.CopyTo(System.Array,System.Int32)">
            <summary>
            将实例中所有元素复制至一维数据中。
            </summary>
            <param name="array">存放实例元素的一维数组</param>
            <param name="index">从数组开始存储第一个复制元素的索引</param>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.GetEnumerator">
            <summary>
            获取当前实例的枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Collections.SynchronizedSet.Clone">
            <summary>
            获取当前实例的一个同步副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.Collections.SynchronizedSet.IsEmpty">
            <summary>
             获取一个值，该值指示当前Set实例中是否未含任何元素。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.SynchronizedSet.Count">
            <summary>
            获取当前实例中元素的个数。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.SynchronizedSet.IsSynchronized">
            <summary>
            获取一个值，该值指示当前实例是否是线程安全的。
            </summary>
        </member>
        <member name="P:EIIP.Type.Collections.SynchronizedSet.SyncRoot">
            <summary>
            获取可用于同步对 Set 的访问的对象。
            </summary>
        </member>
        <member name="T:EIIP.Type.CommonFileType">
            <summary>
            指定通用文件的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Type.CommonFileType.普通">
            <summary>
            普通文件
            </summary>
        </member>
        <member name="F:EIIP.Type.CommonFileType.电子印章">
            <summary>
            电子印章
            </summary>
        </member>
        <member name="T:EIIP.Framework.DescriptionAttribute">
            <summary>
            定义枚举值的描述信息。
            </summary>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor">
            <summary>
            实例化描述信息特性实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String)">
            <summary>
            实例化描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String,System.String)">
            <summary>
            实例化指定描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
            <param name="description">描述信息</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            实例化指定描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
            <param name="description">描述信息</param>
            <param name="isInner">该值指示属性是否为内部属性（即不能显示在外部UI）</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            实例化指定描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
            <param name="description">描述信息</param>
            <param name="isInner">该值指示属性是否为内部属性（即不能显示在外部UI）</param>
            <param name="type">属性类型值</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            实例化指定描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
            <param name="description">描述信息</param>
            <param name="description2">描述信息2</param>
            <param name="isInner">该值指示属性是否为内部属性（即不能显示在外部UI）</param>
            <param name="type">属性类型值</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化指定描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
            <param name="description">描述信息</param>
            <param name="description2">描述信息2</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            实例化指定描述信息特性实例。
            </summary>
            <param name="name">枚举名称</param>
            <param name="description">描述信息</param>
            <param name="description2">描述信息2</param>
            <param name="isInner">该值指示属性是否为内部属性（即不能显示在外部UI）</param>
        </member>
        <member name="M:EIIP.Framework.DescriptionAttribute.SetValue(System.Int32)">
            <summary>
            设置枚举值。
            </summary>
            <param name="value">枚举值</param>
        </member>
        <member name="P:EIIP.Framework.DescriptionAttribute.Value">
            <summary>
            获取枚举值。
            </summary>
        </member>
        <member name="P:EIIP.Framework.DescriptionAttribute.Type">
            <summary>
            获取类型值。
            </summary>
        </member>
        <member name="P:EIIP.Framework.DescriptionAttribute.Name">
            <summary>
            获取枚举名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.DescriptionAttribute.Description">
            <summary>
            获取描述信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.DescriptionAttribute.Description2">
            <summary>
            获取描述信息2。
            </summary>
        </member>
        <member name="P:EIIP.Framework.DescriptionAttribute.IsInner">
            <summary>
            获取一个值，该值指示属性是否为内部属性（即不能显示在外部UI）。
            </summary>
        </member>
        <member name="T:EIIP.PropertySet.FieldType">
            <summary>
            指示属性集字段某一类型。
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.NULL">
            <summary>
            非法类型。
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.STRING">
            <summary>
            字符串（最大长度255）
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.LIST">
            <summary>
            下拉列表
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.INT">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.LONG">
            <summary>
            长整型
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.DECIMAL">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.DATE">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.TIME">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.DATETIME">
            <summary>
            日期与时间
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.FILE">
            <summary>
            关联文档
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.TEXT">
            <summary>
            文本
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.OBJECT">
            <summary>
            对象
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.XML">
            <summary>
            XML
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.DATA">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.PROPERTIES">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.CheckList">
            <summary>
            多选列表
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.RadioList">
            <summary>
            单选列表
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.Tree">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.Person">
            <summary>
            关联个人
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.User">
            <summary>
            关联用户
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.TAG">
            <summary>
            关联对象
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.CRMSO">
            <summary>
            关联CRM销售跟单
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.CRMSrv">
            <summary>
            关联CRM服务
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.Product">
            <summary>
            关联产品
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.SKU">
            <summary>
            关联SKU
            </summary>
        </member>
        <member name="F:EIIP.PropertySet.FieldType.Order">
            <summary>
            关联订单
            </summary>
        </member>
        <member name="T:EIIP.ProductType">
            <summary>
            指定产品的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.ProductType.OA标准版">
            <summary>
            OA标准版
            </summary>
        </member>
        <member name="F:EIIP.ProductType.OA专业版">
            <summary>
            OA专业版
            </summary>
        </member>
        <member name="F:EIIP.ProductType.OA行业版">
            <summary>
            OA行业版
            </summary>
        </member>
        <member name="F:EIIP.ProductType.OA企业版">
            <summary>
            OA企业版
            </summary>
        </member>
        <member name="F:EIIP.ProductType.OAWeb版">
            <summary>
            OAWEB产品
            </summary>
        </member>
        <member name="F:EIIP.ProductType.WEB">
            <summary>
            WEB产品
            </summary>
        </member>
        <member name="F:EIIP.ProductType.WAP">
            <summary>
            WAP产品
            </summary>
        </member>
        <member name="F:EIIP.ProductType.SHOP">
            <summary>
            SHOP产品
            </summary>
        </member>
        <member name="F:EIIP.ProductType.CRM">
            <summary>
            CRM产品
            </summary>
        </member>
        <member name="F:EIIP.ProductType.ERP">
            <summary>
            ERP产品
            </summary>
        </member>
        <member name="T:EIIP.ProductClass">
            <summary>
            指定产品的某一类别。
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.OA">
            <summary>
            OA类别产品
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.CRM">
            <summary>
            CRM类别产品
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.WEB">
            <summary>
            WEB产品
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.WAP">
            <summary>
            WAP产品
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.SHOP">
            <summary>
            SHOP产品
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.Client">
            <summary>
            客户端产品
            </summary>
        </member>
        <member name="F:EIIP.ProductClass.ERP">
            <summary>
            ERP产品
            </summary>
        </member>
        <member name="T:EIIP.Type.Properties">
            <summary>
            属性集类。
            </summary>
        </member>
        <member name="F:EIIP.Type.Properties.Comments">
            <summary>
            注释
            </summary>
        </member>
        <member name="F:EIIP.Type.Properties.Separators">
            <summary>
            分隔符
            </summary>
        </member>
        <member name="F:EIIP.Type.Properties.Whitespace">
            <summary>
            空白字符
            </summary>
        </member>
        <member name="F:EIIP.Type.Properties.WhitespaceWithSeparators">
            <summary>
            空白字符与分隔符
            </summary>
        </member>
        <member name="M:EIIP.Type.Properties.#ctor">
            <summary>
            实例化属性集类。
            </summary>
        </member>
        <member name="M:EIIP.Type.Properties.#ctor(EIIP.Type.Properties)">
            <summary>
            以指定的初始属性实例化。
            </summary>
            <param name="p">初始属性集</param>
        </member>
        <member name="M:EIIP.Type.Properties.Load(System.IO.Stream)">
            <summary>
            从流中读取属性集。
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:EIIP.Type.Properties.Load(System.IO.TextReader)">
            <summary>
            从文本阅读器中读取属性集。
            </summary>
            <param name="textReader">文本阅读器</param>
        </member>
        <member name="M:EIIP.Type.Properties.Load(System.Collections.IDictionary,System.IO.Stream)">
            <summary>
            将流中的属性集加载至指定的属性集中。
            </summary>
            <param name="dictionary">要存放属性的集合</param>
            <param name="stream">提供属性的数据流</param>
        </member>
        <member name="M:EIIP.Type.Properties.Load(System.Collections.IDictionary,System.IO.TextReader)">
            <summary>
            将文本流中的属性集加载至指定的属性集中。
            </summary>
            <param name="dictionary">要存放属性的集合</param>
            <param name="textReader">提供属性的文本数据流</param>
        </member>
        <member name="M:EIIP.Type.Properties.ConvertEscapedCharacters(System.String)">
            <summary>
            字符转义。
            </summary>
            <param name="s">要进行字符转义的字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Properties.TrimStartWhitespace(System.String)">
            <summary>
            移除前导空白字符。
            </summary>
            <param name="line">字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Properties.SplitLine(System.String)">
            <summary>
            分离字符串为键值对，字符串前不能含空白字符。
            </summary>
            <param name="line">要分离的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Properties.GetProperty(System.String)">
            <summary>
            获取指定属性值。
            </summary>
            <param name="key">属性名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Properties.GetProperty(System.String,System.String)">
            <summary>
            获取指定属性值。
            </summary>
            <param name="key">属性名</param>
            <param name="def">缺省的属性值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.Properties.List(System.IO.Stream)">
            <summary>
            将属性列表写入指定流中。
            </summary>
            <param name="stream">输出流</param>
        </member>
        <member name="M:EIIP.Type.Properties.SetProperty(System.String,System.String)">
            <summary>
            设置属性
            </summary>
            <param name="key">属性名</param>
            <param name="theValue">属性值</param>
        </member>
        <member name="M:EIIP.Type.Properties.Store(System.IO.Stream,System.String)">
            <summary>
            将实例中的属性写入流(还未实现)。
            </summary>
            <param name="stream">属性名</param>
            <param name="header">任意的头部信息</param>
        </member>
        <member name="M:EIIP.Type.Properties.Remove(System.Object)">
            <summary>
            移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
        </member>
        <member name="M:EIIP.Type.Properties.Add(System.Object,System.Object)">
            <summary>
            将带有指定键和值的元素添加到属性集中。
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="value">要添加的元素的值。</param>
        </member>
        <member name="P:EIIP.Type.Properties.Item(System.Object)">
            <summary>
            获取或设置指定键值对。
            </summary>
        </member>
        <member name="T:EIIP.Type.SmartDate">
            <summary>
            提供一类可用于空值的日期型数据类型。
            </summary>
        </member>
        <member name="F:EIIP.Type.SmartDate.m_Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:EIIP.Type.SmartDate.m_EmptyIsMin">
            <summary>
            指示空值日期是否为日期最小值。
            </summary>
        </member>
        <member name="F:EIIP.Type.SmartDate.m_Format">
            <summary>
            格式化字串。
            </summary>
        </member>
        <member name="M:EIIP.Type.SmartDate.ToString">
            <summary>
            返回日期类型的文本描述。
            </summary>
        </member>
        <member name="M:EIIP.Type.SmartDate.#ctor">
            <summary>
            实例化日期。
            </summary>
        </member>
        <member name="M:EIIP.Type.SmartDate.#ctor(System.Boolean)">
            <summary>
            实例化日期。
            </summary>
            <param name="emptyIsMin">设置一个值，该值指示空值日期是否为日期最小值。</param>
        </member>
        <member name="M:EIIP.Type.SmartDate.#ctor(System.DateTime)">
            <summary>
            实例化日期。
            </summary>
            <param name="date">初始化日期实例</param>
        </member>
        <member name="M:EIIP.Type.SmartDate.#ctor(System.String)">
            <summary>
            实例化日期。
            </summary>
            <param name="date">初始化日期字串</param>
        </member>
        <member name="M:EIIP.Type.SmartDate.#ctor(System.DateTime,System.Boolean)">
            <summary>
            实例化日期。
            </summary>
            <param name="date">初始化日期实例</param>
            <param name="emptyIsMin">设置一个值，该值指示空值日期是否为日期最小值。</param>
        </member>
        <member name="M:EIIP.Type.SmartDate.#ctor(System.String,System.Boolean)">
            <summary>
            实例化日期。
            </summary>
            <param name="date">初始化日期字串</param>
            <param name="emptyIsMin">设置一个值，该值指示空值日期是否为日期最小值。</param>
        </member>
        <member name="M:EIIP.Type.SmartDate.StringToDate(System.String)">
            <summary>
            转换指定的日期字串为日期类型值。
            </summary>
            <param name="date">日期字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.SmartDate.StringToDate(System.String,System.Boolean)">
            <summary>
            转换指定的日期字串为日期类型值。
            </summary>
            <param name="date">日期字串</param>
            <param name="emptyIsMin">设置一个值，该值指示空值日期是否为日期最小值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.SmartDate.DateToString(System.DateTime,System.String)">
            <summary>
            转换日期类型值为指定格式的日期字串。
            </summary>
            <param name="date">要转换的日期</param>
            <param name="formatString">格式化文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.SmartDate.DateToString(System.DateTime,System.String,System.Boolean)">
            <summary>
            转换日期类型值为指定格式的日期字串。
            </summary>
            <param name="date">要转换的日期</param>
            <param name="formatString">格式化文本</param>
            <param name="emptyIsMin">设置一个值，该值指示空值日期是否为日期最小值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.SmartDate.CompareTo(EIIP.Type.SmartDate)">
            <summary>
            比较两个日期实例，并返回它们相对值的指示。
            </summary>
            <param name="date">SmartDate日期实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.SmartDate.Add(System.TimeSpan)">
            <summary>
            将指定的 System.TimeSpan 的值加到此实例的值上。
            </summary>
            <param name="span">要添加的时间间隔</param>
        </member>
        <member name="M:EIIP.Type.SmartDate.Subtract(System.TimeSpan)">
            <summary>
            从此实例中减去指定持续时间。
            </summary>
            <param name="span">时间间隔</param>
        </member>
        <member name="P:EIIP.Type.SmartDate.FormatString">
            <summary>
            获取或设置格式化字串。
            </summary>
        </member>
        <member name="P:EIIP.Type.SmartDate.Text">
            <summary>
            获取或设置日期文本描述。
            </summary>
        </member>
        <member name="P:EIIP.Type.SmartDate.Date">
            <summary>
            获取或设置日期值。
            </summary>
        </member>
        <member name="P:EIIP.Type.SmartDate.DBValue">
            <summary>
            获取可存储于数据库的当前日期值。
            </summary>
        </member>
        <member name="P:EIIP.Type.SmartDate.IsEmpty">
            <summary>
            获取一个值，该值指示当前日期实例是否为空值。
            </summary>
        </member>
        <member name="P:EIIP.Type.SmartDate.EmptyIsMin">
            <summary>
            获取一个值，该值指示空值日期是否为日期最小值。
            </summary>
        </member>
        <member name="T:EIIP.Type.StringDictionary">
            <summary>
            可序列化的字符串字典类，并提供按加入顺序获取键集的方式。
            </summary>
        </member>
        <member name="F:EIIP.Type.StringDictionary.Empty">
            <summary>
            获取只读空结构。
            </summary>
        </member>
        <member name="M:EIIP.Type.StringDictionary.#ctor">
            <summary>
            实例化可序列化的 System.Collections.Specialized.StringDictionary 对象
            </summary>
        </member>
        <member name="M:EIIP.Type.StringDictionary.#ctor(System.Int32)">
            <summary>
            实例化可序列化的 System.Collections.Specialized.StringDictionary 对象
            </summary>
            <param name="capacity">最初可包含的近似元素个数。</param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用需要将目标序列化所需的数据填充
            </summary>
            <param name="info">要填充数据的SerializationInfo</param>
            <param name="context">此序列化的目标</param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化
            </summary>
            <param name="info">填充数据的SerializationInfo</param>
            <param name="context">被序列化的源</param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.OnDeserialization(System.Object)">
            <summary>
            在整个对象图形已经反序列化时运行。
            </summary>
            <param name="sender">开始回调的对象。当前未实现该参数的功能。</param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.Add(System.String,System.String)">
            <summary>
            将带有指定键和值的项添加到 StringDictionary 中。
            </summary>
            <param name="key">要添加的项的键。键为null时不添加，重复键将替换。</param>
            <param name="value">要添加的项的值。该值可以为 null。 </param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.Add(EIIP.Framework.DescriptionAttribute)">
            <summary>
            将带有指定键和值的项添加到 StringDictionary 中。
            </summary>
            <param name="att">要添加的项对应的枚举描述。</param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.Clear">
            <summary>
            移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.Type.StringDictionary.ContainsKey(System.String)">
            <summary>
            确定是否包含特定键。 
            </summary>
            <param name="key">要定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.ContainsValue(System.String)">
            <summary>
            确定是否包含特定值。  
            </summary>
            <param name="value">要定位的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.GetEnumerator">
            <summary>
            获取具有按添加先后顺序组织的键集合的迭代器。推荐使用 KeyValuePairs()
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.KeyValuePairs">
            <summary>
            获取具有按添加先后顺序组织的键集合的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.Remove(System.String)">
            <summary>
            移除带有指定键的元素。 
            </summary>
            <param name="key">要移除的元素的键。</param>
        </member>
        <member name="M:EIIP.Type.StringDictionary.GetKeyEnumerator">
            <summary>
            返回可循环访问 具有先后顺序键集合 的枚举数。 
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.FromEnum(System.Type)">
            <summary>
            获取枚举字典数据。
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.FromEnum(System.Type,System.Int32,System.String)">
            <summary>
            获取枚举字典数据。
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="defFirstValue">需要额外添加的首个列表项值</param>
            <param name="defFirstText">需要额外添加的首个列表项文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.FromEnum(System.Type,System.Boolean)">
            <summary>
            获取枚举字典数据。
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="inner">枚举内部属性标志</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.FromEnum(System.Type,System.Int32)">
            <summary>
            获取枚举字典数据。
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="type">指定某一类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.FromEnum(System.Type,System.Int32,System.Int32,System.Boolean)">
            <summary>
            获取枚举字典数据。
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="typeMin">指定类型范围的最小值(包含)</param>
            <param name="typeMax">指定类型范围的最大值(包含)</param>
            <param name="exceptRang">指示是否排除范围内的值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Type.StringDictionary.FromEnum(System.Type,System.Int32[],System.Boolean)">
            <summary>
            获取枚举字典数据。
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="types">指定类型</param>
            <param name="exceptRang">指示是否排除范围内的值</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.StringDictionary.EnableDESC">
            <summary>
            获取一个值，该值指示是否使用描述字典功能。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.DESCs">
            <summary>
            获取描述字典。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.Keys">
            <summary>
            获取键集合。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.Values">
            <summary>
            获取值集合。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.SyncRoot">
            <summary>
            获取可用于同步对 StringDictionary 的访问的对象。 
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.Count">
            <summary>
            获取集合数量。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步对 StringDictionary 的访问（线程安全）。 
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.DefaultKey">
            <summary>
            获取默认键（最先加入的键），不存在则返回空串。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.LockMe">
            <summary>
            获取或设置一个值，该值指示是否将字典设置为只读（即暂时不能添加或删除元素）。
            </summary>
        </member>
        <member name="P:EIIP.Type.StringDictionary.Item(System.String)">
            <summary>
            获取或设置指定键值
            </summary>
        </member>
        <member name="T:EIIP.Type.UploadFolder">
            <summary>
            指定上传文件夹的某一类别。
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.共享">
            <summary>
            共享文件夹ID
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.公文格式">
            <summary>
            公文格式文件夹ID
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.公文模板">
            <summary>
            公文模板文件夹ID
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.信息">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.菜单">
            <summary>
            菜单
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.图片库">
            <summary>
            图片库
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.网站模板">
            <summary>
            网站模板
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.资料中心">
            <summary>
            资料中心
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定8">
            <summary>
            待定8 由 人物 替代，后续版本会移除本项
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.人物">
            <summary>
            人物
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.电子印章">
            <summary>
            电子印章
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.类别树">
            <summary>
            类别树
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.供求">
            <summary>
            供求
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.药材">
            <summary>
            药材
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.产品">
            <summary>
            产品
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.商铺">
            <summary>
            商铺
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.商品分类">
            <summary>
            商品分类
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.广告">
            <summary>
            广告
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定37">
            <summary>
            待定37 由 会议 替代，后续版本会移除本项
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.会议">
            <summary>
            会议
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定40">
            <summary>
            待定40
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定41">
            <summary>
            待定41
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定42">
            <summary>
            待定42
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定43">
            <summary>
            待定43
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定44">
            <summary>
            待定44
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.待定45">
            <summary>
            待定45
            </summary>
        </member>
        <member name="F:EIIP.Type.UploadFolder.个人">
            <summary>
            个人
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.AddHeaderAction">
            <summary>
            添加头部信息的动作类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.IRewriteAction">
            <summary>
            定义可执行的动作。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.IRewriteAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.AddHeaderAction.#ctor(System.String,System.String)">
            <summary>
            实例化添加头部信息的动作。
            </summary>
            <param name="header">头部名称。</param>
            <param name="value">头部值。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.AddHeaderAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.AddHeaderAction.Header">
            <summary>
            获取头部名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.AddHeaderAction.Value">
            <summary>
            获取头部值。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.ConditionalAction">
            <summary>
            条件动作类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.IRewriteCondition">
            <summary>
            定义重写条件的接口。注意条件必须是线程安全的。这意味着一旦条件被创建，就不能变更其字段属性。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.IRewriteCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.ConditionalAction.#ctor">
            <summary>
            实例化条件动作。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.ConditionalAction.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定动作是否匹配当前上下文。
            </summary>
            <param name="context">重写上下文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.ConditionalAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.ConditionalAction.Conditions">
            <summary>
            获取条件列表。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.ConditionalAction.Actions">
            <summary>
            获取动作列表。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.ForbiddenAction">
            <summary>
            返回一个 403 禁止错误的 HTTP 状态代码的动作类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.SetStatusAction">
            <summary>
            设置状态代码动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetStatusAction.#ctor(System.Net.HttpStatusCode)">
            <summary>
            实例化设置状态代码动作。
            </summary>
            <param name="statusCode">状态代码。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetStatusAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.SetStatusAction.StatusCode">
            <summary>
            获取状态代码。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.ForbiddenAction.#ctor">
            <summary>
            实例化返回 403 禁止错误的动作。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.GoneAction">
            <summary>
            返回 410 请求资源不再可用的 HTTP 状态代码动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.GoneAction.#ctor">
            <summary>
            实例化返回 410 请求资源不再可用的 HTTP 状态代码动作。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.MethodNotAllowedAction">
            <summary>
            返回一个 405 指示请求的资源上不允许请求方法的 HTTP 状态代码动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.MethodNotAllowedAction.#ctor">
            <summary>
            实例化返回一个 405 指示请求的资源上不允许请求方法的 HTTP 状态代码动作。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.NotFoundAction">
            <summary>
            返回一个 404 指示请求的资源不在服务器上 HTTP 状态代码的动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.NotFoundAction.#ctor">
            <summary>
            实例化返回一个 404 指示请求的资源不在服务器上 HTTP 状态代码的动作。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.NotImplementedAction">
            <summary>
            返回一个 501 指示服务器不支持请求的函数 HTTP 状态代码的动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.NotImplementedAction.#ctor">
            <summary>
            实例化返回一个 501 指示服务器不支持请求的函数 HTTP 状态代码的动作。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.RedirectAction">
            <summary>
            使用 302 临时重定向的重定向动作类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.SetLocationAction">
            <summary>
            设置位置的动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetLocationAction.#ctor(System.String)">
            <summary>
            实例化设置位置的动作。
            </summary>
            <param name="location">要设置的（正则）位置</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetLocationAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.SetLocationAction.Location">
            <summary>
            获取要设置的位置。
            可以含正则匹配的替换符（$1, $2, ... $n 与 ${group} 或 ${ServerVariable} 如 ${MapName:$1}）
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.RedirectAction.#ctor(System.String,System.Boolean)">
            <summary>
            实例化使用 302 临时重定向的重定向动作。
            </summary>
            <param name="location">要设置的位置</param>
            <param name="permanent">是否重定向是持久的</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.RedirectAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.RedirectAction.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.RedirectAction.Conditions">
            <summary>
            获取条件集。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.RewriteAction">
            <summary>
            在适当的位置进行重写的动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.RewriteAction.#ctor(System.String,EIIP.URLRewriter.RewriteProcessing)">
            <summary>
            实例化在适当的位置进行重写的动作。
            </summary>
            <param name="location">要设置的定位</param>
            <param name="processing">重写的处理类型</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.RewriteAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.RewriteAction.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.RewriteAction.Conditions">
            <summary>
            获取条件集。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.SetCookieAction">
            <summary>
            设置Cookie的动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetCookieAction.#ctor(System.String,System.String)">
            <summary>
            实例化设置Cookie的动作。
            </summary>
            <param name="cookieName">cookie 名称</param>
            <param name="cookieValue">cookie 值</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetCookieAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.SetCookieAction.Name">
            <summary>
            获取名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.SetCookieAction.Value">
            <summary>
            获取值。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Actions.SetPropertyAction">
            <summary>
            设置上下文属性的动作类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetPropertyAction.#ctor(System.String,System.String)">
            <summary>
            实例化设置上下文属性的动作。
            </summary>
            <param name="name">属性名称</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:EIIP.URLRewriter.Actions.SetPropertyAction.Execute(EIIP.URLRewriter.RewriteContext)">
            <summary>
            执行动作。返回的重写处理类型指示了重写器应该如何继续。
            </summary>
            <param name="context">执行动作的重写上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.SetPropertyAction.Name">
            <summary>
            获取属性名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Actions.SetPropertyAction.Value">
            <summary>
            获取属性值。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.AddressCondition">
            <summary>
            匹配当前远程IP地址的条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.AddressCondition.#ctor(System.String)">
            <summary>
            实例化匹配当前远程IP地址的条件。
            </summary>
            <param name="pattern">解析 IP 地址范围。
            <code>
            ddd.ddd.ddd.ddd - 单一
            ddd.ddd.ddd.* - C类
            ddd.ddd.* - B类
            ddd.* - A类
            ddd.ddd.ddd.ddd - ccc.ccc.ccc.ccc - 区间
            </code></param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.AddressCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.ExistsCondition">
            <summary>
            测试文件存在的条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.ExistsCondition.#ctor(System.String)">
            <summary>
            实例化测试文件存在的条件。
            </summary>
            <param name="location">URL位置</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.ExistsCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.FTPRoofCondition">
            <summary>
            匹配盗链检查的条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.FTPRoofCondition.#ctor(System.String)">
            <summary>
            实例化匹配盗链检查的条件。
            </summary>
            <param name="isCheck">设置是否检查</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.FTPRoofCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.MatchCondition">
            <summary>
            正则匹配条件基类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.MatchCondition.#ctor(System.String)">
            <summary>
            实例化正则匹配条件基类。
            </summary>
            <param name="pattern">要匹配的正则。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.MatchCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Conditions.MatchCondition.Pattern">
            <summary>
            获取要匹配的正则。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.MethodCondition">
            <summary>
            正则匹配条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.MethodCondition.#ctor(System.String)">
            <summary>
            实例化正则匹配条件。
            </summary>
            <param name="pattern">要匹配的正则。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.MethodCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.NegativeCondition">
            <summary>
            处理相反条件的条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.NegativeCondition.#ctor(EIIP.URLRewriter.IRewriteCondition)">
            <summary>
            实例化处理相反条件的条件。
            </summary>
            <param name="chainedCondition">指定条件</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.NegativeCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.PropertyMatchCondition">
            <summary>
            处理属性匹配的条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.PropertyMatchCondition.#ctor(System.String,System.String)">
            <summary>
            实例化处理属性匹配的条件。
            </summary>
            <param name="propertyName">属性名称。</param>
            <param name="pattern">要匹配的正则。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.PropertyMatchCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Conditions.PropertyMatchCondition.PropertyName">
            <summary>
            获取属性名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Conditions.UrlMatchCondition">
            <summary>
            匹配当前URL的条件类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.UrlMatchCondition.#ctor(System.String)">
            <summary>
            实例化匹配当前URL的条件。
            </summary>
            <param name="pattern">要匹配的正则。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Conditions.UrlMatchCondition.IsMatch(EIIP.URLRewriter.RewriteContext)">
            <summary>
            确定条件是否匹配。
            </summary>
            <param name="context">重写的上下文</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Conditions.UrlMatchCondition.Pattern">
            <summary>
            获取要匹配的正则。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Configuration.ActionParserFactory">
            <summary>
            动作解析器工厂类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.ActionParserFactory.AddParser(System.String)">
            <summary>
            添加动作解析器。
            </summary>
            <param name="parserType">动作解析器类型。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.ActionParserFactory.AddParser(EIIP.URLRewriter.IRewriteActionParser)">
            <summary>
            添加动作解析器。
            </summary>
            <param name="parser">动作解析器。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.ActionParserFactory.GetParsers(System.String)">
            <summary>
            获取指定解析器名称的解析器列表。不存在则返回null。
            </summary>
            <param name="verb">解析器名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Configuration.ConditionParserPipeline">
            <summary>
            创建条件解析器的管道类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.ConditionParserPipeline.AddParser(System.String)">
            <summary>
            添加条件解析器。
            </summary>
            <param name="parserType">条件解析器类型名称。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.ConditionParserPipeline.AddParser(EIIP.URLRewriter.IRewriteConditionParser)">
            <summary>
            添加条件解析器。
            </summary>
            <param name="parser">条件解析器。</param>
        </member>
        <member name="T:EIIP.URLRewriter.Configuration.RewriterConfiguration">
            <summary>
            URL重写配置类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfiguration.#ctor">
            <summary>
            实例化URL重写配置。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfiguration.Create">
            <summary>
            创建默认的URL重写配置实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfiguration.Load">
            <summary>
            从配置文件中加载URL重写配置，并进行缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfiguration.LoadFromFile(System.String)">
            <summary>
            从指定XML文件加载URL重写配置。不存在则返回null。
            </summary>
            <param name="filename">URL重写配置文件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfiguration.LoadFromNode(System.Xml.XmlNode)">
            <summary>
            从指定XML节点加载URL重写配置。
            </summary>
            <param name="node">URL重写配置XML节点。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.Rules">
            <summary>
            获取规则集。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.ActionParserFactory">
            <summary>
            获取动作解析器工厂。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.TransformFactory">
            <summary>
            获取转换解析器工厂。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.ConditionParserPipeline">
            <summary>
            获取条件解析器管道。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.ErrorHandlers">
            <summary>
            获取异常字典。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.DefaultDocuments">
            <summary>
            获取使用的默认文档名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Configuration.RewriterConfiguration.Current">
            <summary>
            获取当前URL重写配置实例。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Configuration.RewriterConfigurationReader">
            <summary>
            URL重写配置节点阅读器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfigurationReader.Read(System.Xml.XmlNode)">
            <summary>
            读取URL重写配置信息。
            </summary>
            <param name="section">XML 节点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.RewriterConfigurationReader.ReadRule(System.Xml.XmlNode,EIIP.URLRewriter.Configuration.RewriterConfiguration)">
            <summary>
            读取规则。
            </summary>
            <param name="node"></param>
            <param name="config"></param>
        </member>
        <member name="T:EIIP.URLRewriter.Configuration.TransformFactory">
            <summary>
            转换器工厂类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.TransformFactory.AddTransform(System.String)">
            <summary>
            添加转换器。
            </summary>
            <param name="transformType">转换器类型名称</param>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.TransformFactory.AddTransform(EIIP.URLRewriter.IRewriteTransform)">
            <summary>
            添加转换器。
            </summary>
            <param name="transform">转换器</param>
        </member>
        <member name="M:EIIP.URLRewriter.Configuration.TransformFactory.GetTransform(System.String)">
            <summary>
            获取指定名称的转换器。不存在则返回null。
            </summary>
            <param name="name">转换器名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Errors.DefaultErrorHandler">
            <summary>
            默认异常处理器类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.IRewriteErrorHandler">
            <summary>
            定义处理重写异常的异常器接口。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.IRewriteErrorHandler.HandleError(System.Web.HttpContext)">
            <summary>
            处理异常。
            </summary>
            <param name="context">HTTP 上下文</param>
        </member>
        <member name="M:EIIP.URLRewriter.Errors.DefaultErrorHandler.#ctor(System.String)">
            <summary>
            实例化默认异常处理器。
            </summary>
            <param name="url">错误信息页的URL</param>
        </member>
        <member name="M:EIIP.URLRewriter.Errors.DefaultErrorHandler.HandleError(System.Web.HttpContext)">
            <summary>
            处理异常。
            </summary>
            <param name="context">HTTP 上下文</param>
        </member>
        <member name="T:EIIP.URLRewriter.Form">
            <summary>
            提供对服务器上的 HTML &lt;asp:form&gt; 元素的编程访问。
            </summary>
            <remarks>
            <p>form应用于那些使用URL地址重写并有表单回传提交的页面窗体。
            如果使用通用的 ASP.NET <see cref="T:System.Web.UI.HtmlControls.HtmlForm">HtmlForm</see>,
            那么回传不能正确地将回传数据对应到表单数据。
            </p>
            <p>form 直接替换 &lt;asp:form&gt; 标签
            </p>
            <p>使用示例: </p>
            <code>
            &lt;%@ Page language="c#" Codebehind="MyPage.aspx.cs" AutoEventWireup="false" Inherits="MyPage" %&gt;
            &lt;%@ Register TagPrefix="url" Namespace="EIIP.URLRewriter" Assembly="EIIP.URLRewriter" %&gt;
            &lt;html&gt;
            ...
            &lt;body&gt;
            &lt;url:form id="MyForm" runat="server"&gt;
            ...
            &lt;/url:form&gt;
            &lt;/body&gt;
            &lt;/html&gt;
            </code>
            </remarks>
        </member>
        <member name="M:EIIP.URLRewriter.Form.RenderChildren(System.Web.UI.HtmlTextWriter)">
            <summary>
            呈现 Form 控件的子控件。
            </summary>
            <param name="writer">接收呈现内容的 System.Web.UI.HtmlTextWriter。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Form.RenderAttributes(System.Web.UI.HtmlTextWriter)">
            <summary>
            将 Form 控件的属性呈现给指定的 System.Web.UI.HtmlTextWriter 对象。
            </summary>
            <param name="writer">接收呈现内容的 System.Web.UI.HtmlTextWriter。</param>
        </member>
        <member name="T:EIIP.URLRewriter.FormRewriterControlAdapter">
            <summary>
            重写表单action的控件适配器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.FormRewriterControlAdapter.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            为附加了控件适配器的控件生成特定于目标的标记。
            </summary>
            <param name="writer">用于呈现特定于目标的输出的 System.Web.UI.HtmlTextWriter。</param>
        </member>
        <member name="T:EIIP.Framework.HtmlPageHandler">
            <summary>
            生成 HTML 静态页面的处理器。
            </summary>
        </member>
        <member name="M:EIIP.Framework.HtmlPageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            通过实现 System.Web.IHttpHandler 接口的自定义 HttpHandler 启用 HTTP Web 请求的处理。
            </summary>
            <param name="context">
            System.Web.HttpContext 对象，
            它提供对用于为 HTTP 请求提供服务的内部服务器对象（如 Request、Response、Session 和 Server）的引用。
            </param>
        </member>
        <member name="P:EIIP.Framework.HtmlPageHandler.IsReusable">
            <summary>
            获取一个值，该值指示其他请求是否可以使用 System.Web.IHttpHandler 实例。
            </summary>
        </member>
        <member name="T:EIIP.Framework.ResponseFilter.Big5Filter">
            <summary>
            一个包装筛选器，用于生成 html 静态页面。
            </summary>
        </member>
        <member name="F:EIIP.Framework.ResponseFilter.Big5Filter.SGB">
            <summary>
            SGB 和 TGB 是 GB2312 简繁体对应的库
            </summary>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.#ctor(System.IO.Stream)">
            <summary>
            实例化生成 html 静态页面的包装筛选器。
            </summary>
            <param name="sink">一个包装筛选器对象，该对象用于在传输之前修改 HTTP 实体主体。</param>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 origin 参数的字节偏移量。</param>
            <param name="direction">System.IO.SeekOrigin 类型的值，指示用于获取新位置的参考点。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="length">所需的当前流的长度（以字节表示）。</param>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.Flush">
            <summary>
            清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">
            字节数组。此方法返回时，该缓冲区包含指定的字符数组，
            该数组的 offset 和 (offset + count -1) 之间的值由从当前源中读取的字节替换。
            </param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.ResponseFilter.Big5Filter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 count 个字节从 buffer 复制到当前流。</param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
        </member>
        <member name="P:EIIP.Framework.ResponseFilter.Big5Filter.CanRead">
            <summary>
            可读。
            </summary>
        </member>
        <member name="P:EIIP.Framework.ResponseFilter.Big5Filter.CanSeek">
            <summary>
            不支持查找功能。
            </summary>
        </member>
        <member name="P:EIIP.Framework.ResponseFilter.Big5Filter.CanWrite">
            <summary>
            不能写。
            </summary>
        </member>
        <member name="P:EIIP.Framework.ResponseFilter.Big5Filter.Length">
            <summary>
            流长度为0。
            </summary>
        </member>
        <member name="P:EIIP.Framework.ResponseFilter.Big5Filter.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.GenerateHTMFilter">
            <summary>
            一个包装筛选器，用于生成 html 静态页面。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.#ctor(System.IO.Stream,System.String)">
            <summary>
            实例化生成 html 静态页面的包装筛选器。
            </summary>
            <param name="sink">一个包装筛选器对象，该对象用于在传输之前修改 HTTP 实体主体。</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 origin 参数的字节偏移量。</param>
            <param name="direction">System.IO.SeekOrigin 类型的值，指示用于获取新位置的参考点。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="length">所需的当前流的长度（以字节表示）。</param>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.Flush">
            <summary>
            清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">
            字节数组。此方法返回时，该缓冲区包含指定的字符数组，
            该数组的 offset 和 (offset + count -1) 之间的值由从当前源中读取的字节替换。
            </param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.GenerateHTMFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 count 个字节从 buffer 复制到当前流。</param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
        </member>
        <member name="P:EIIP.URLRewriter.GenerateHTMFilter.CanRead">
            <summary>
            可读。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.GenerateHTMFilter.CanSeek">
            <summary>
            不支持查找功能。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.GenerateHTMFilter.CanWrite">
            <summary>
            不能写。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.GenerateHTMFilter.Length">
            <summary>
            流长度为0。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.GenerateHTMFilter.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.CreateHTMLFilter">
            <summary>
            一个包装筛选器，用于生成 html 静态页面。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.#ctor(System.IO.Stream,System.String)">
            <summary>
            实例化生成 html 静态页面的包装筛选器。
            </summary>
            <param name="sink">一个包装筛选器对象，该对象用于在传输之前修改 HTTP 实体主体。</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置当前流中的位置。
            </summary>
            <param name="offset">相对于 origin 参数的字节偏移量。</param>
            <param name="direction">System.IO.SeekOrigin 类型的值，指示用于获取新位置的参考点。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.SetLength(System.Int64)">
            <summary>
            设置当前流的长度。
            </summary>
            <param name="length">所需的当前流的长度（以字节表示）。</param>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.Close">
            <summary>
            关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.Flush">
            <summary>
            清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从当前流读取字节序列，并将此流中的位置提升读取的字节数。
            </summary>
            <param name="buffer">
            字节数组。此方法返回时，该缓冲区包含指定的字符数组，
            该数组的 offset 和 (offset + count -1) 之间的值由从当前源中读取的字节替换。
            </param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
            <param name="count">要从当前流中最多读取的字节数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.CreateHTMLFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。
            </summary>
            <param name="buffer">字节数组。此方法将 count 个字节从 buffer 复制到当前流。</param>
            <param name="offset">buffer 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
            <param name="count">要写入当前流的字节数。</param>
        </member>
        <member name="P:EIIP.URLRewriter.CreateHTMLFilter.CanRead">
            <summary>
            可读。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.CreateHTMLFilter.CanSeek">
            <summary>
            不支持查找功能。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.CreateHTMLFilter.CanWrite">
            <summary>
            不能写。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.CreateHTMLFilter.Length">
            <summary>
            流长度为0。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.CreateHTMLFilter.Position">
            <summary>
            获取或设置当前流中的位置。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Big5PageFactoryHandler">
            <summary>
            页面工厂类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.Big5PageFactoryHandler.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            返回实现 IHttpHandler 接口的类的实例。
            </summary>
            <param name="context">上下文</param>
            <param name="requestType">客户端使用的 HTTP 数据传输方法（GET 或 POST）</param>
            <param name="url">所请求资源的 System.Web.HttpRequest.RawUrl。</param>
            <param name="pathTranslated">所请求资源的 System.Web.HttpRequest.PhysicalApplicationPath。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Big5PageFactoryHandler.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            使工厂可以重用现有的处理程序实例。
            </summary>
            <param name="handler">要重用的 System.Web.IHttpHandler 对象。</param>
        </member>
        <member name="T:EIIP.Framework.PageFactoryHandler">
            <summary>
            页面工厂类。
            </summary>
        </member>
        <member name="M:EIIP.Framework.PageFactoryHandler.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            返回实现 IHttpHandler 接口的类的实例。
            </summary>
            <param name="context">上下文</param>
            <param name="requestType">客户端使用的 HTTP 数据传输方法（GET 或 POST）</param>
            <param name="url">所请求资源的 System.Web.HttpRequest.RawUrl。</param>
            <param name="pathTranslated">所请求资源的 System.Web.HttpRequest.PhysicalApplicationPath。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.PageFactoryHandler.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            使工厂可以重用现有的处理程序实例。
            </summary>
            <param name="handler">要重用的 System.Web.IHttpHandler 对象。</param>
        </member>
        <member name="T:EIIP.URLRewriter.RewriterRule">
            <summary>
            提供 URL 地址的重写规则。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.RewriterRule.#ctor(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            实例化 URL 地址的重写规则。
            </summary>
            <param name="lookFor">搜索的正则</param>
            <param name="sendTo">定向的正则</param>
            <param name="iStatic">设置一个值，该值指示是否支持生成静态页面。</param>
            <param name="minutes">静态页面保持的时间（分钟）</param>
        </member>
        <member name="M:EIIP.URLRewriter.RewriterRule.GetResponseUrl(System.String)">
            <summary>
            获取特定访问请求的响应页面。
            </summary>
            <param name="requestRawUrl">原始访问请求页面</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.Minutes">
            <summary>
            获取或设置静态页面保持分钟数。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.LookFor">
            <summary>
            获取或设置搜索的正则。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.LookForUrl">
            <summary>
            获取或设置搜索的正则URL。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.LookForRegex">
            <summary>
            获取搜索的正则。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.SendTo">
            <summary>
            获取或设置重定向地址正则。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.SendToUrl">
            <summary>
            获取或设置重定向地址的正则URL。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterRule.StaticEnable">
            <summary>
            获取或设置一个值，该值指示是否支持生成静态页面。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.AddHeaderActionParser">
            <summary>
            AddHeaderAction动作解析器类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.RewriteActionParserBase">
            <summary>
            重写动作的解析基类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.IRewriteActionParser">
            <summary>
            定义解析重写动作的接口。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.IRewriteActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.IRewriteActionParser.Name">
            <summary>
            获取解析器名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.IRewriteActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.IRewriteActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.RewriteActionParserBase.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.RewriteActionParserBase.ParseConditions(System.Xml.XmlNode,System.Collections.IList,System.Boolean,System.Object)">
            <summary>
            解析条件。
            </summary>
            <param name="node">XML 节点</param>
            <param name="conditions">要接收新条件的条件列表对象</param>
            <param name="negative">设置条件是否应是逻辑非类型的</param>
            <param name="config">重写配置</param>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RewriteActionParserBase.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RewriteActionParserBase.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RewriteActionParserBase.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.AddHeaderActionParser.#ctor">
            <summary>
            实例化AddHeaderAction动作解析器。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.AddHeaderActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.AddHeaderActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.AddHeaderActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.AddHeaderActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.AddressConditionParser">
            <summary>
            AddressCondition的解析器类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.IRewriteConditionParser">
            <summary>
            定义重写条件的解析器的接口。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.IRewriteConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.AddressConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.ExistsConditionParser">
            <summary>
            ExistsCondition的条件解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.ExistsConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.ForbiddenActionParser">
            <summary>
            ForbiddenAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.ForbiddenActionParser.#ctor">
            <summary>
            实例化ForbiddenAction动作解析器。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.ForbiddenActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.ForbiddenActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.ForbiddenActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.ForbiddenActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.FTPRoofConditionParser">
            <summary>
            FTPRoofCondition条件解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.FTPRoofConditionParser.#ctor">
            <summary>
            实例化FTPRoofConditionParser条件解析器。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.FTPRoofConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.GoneActionParser">
            <summary>
            GoneAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.GoneActionParser.#ctor">
            <summary>
            实例化GoneAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.GoneActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.GoneActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.GoneActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.GoneActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.HeaderMatchConditionParser">
            <summary>
            HeaderMatchCondition的条件解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.HeaderMatchConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.IfConditionActionParser">
            <summary>
            IfConditionAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.IfConditionActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            Parses the action.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="config">The rewriter configuration.</param>
            <returns>The parsed action, null if no action parsed.</returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.IfConditionActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.IfConditionActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回true。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.IfConditionActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.MethodConditionParser">
            <summary>
            MethodCondition条件解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.MethodConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.NotAllowedActionParser">
            <summary>
            NotAllowedAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.NotAllowedActionParser.#ctor">
            <summary>
            实例化NotAllowedAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.NotAllowedActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotAllowedActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotAllowedActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotAllowedActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.NotFoundActionParser">
            <summary>
            NotFoundAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.NotFoundActionParser.#ctor">
            <summary>
            实例化NotFoundAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.NotFoundActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotFoundActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotFoundActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotFoundActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.NotImplementedActionParser">
            <summary>
            NotImplementedAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.NotImplementedActionParser.#ctor">
            <summary>
            实例化NotImplementedAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.NotImplementedActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotImplementedActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotImplementedActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.NotImplementedActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回false。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.PropertyMatchConditionParser">
            <summary>
            PropertyMatchCondition的条件解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.PropertyMatchConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.RedirectActionParser">
            <summary>
            RedirectAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.RedirectActionParser.#ctor">
            <summary>
            实例化RedirectAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.RedirectActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RedirectActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RedirectActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RedirectActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.RewriteActionParser">
            <summary>
            RewriteAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.RewriteActionParser.#ctor">
            <summary>
            实例化RewriteAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.RewriteActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RewriteActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RewriteActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.RewriteActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.SetCookieActionParser">
            <summary>
            SetCookieAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.SetCookieActionParser.#ctor">
            <summary>
            实例化SetCookieAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.SetCookieActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetCookieActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetCookieActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetCookieActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.SetPropertyActionParser">
            <summary>
            SetPropertyAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.SetPropertyActionParser.#ctor">
            <summary>
            实例化SetPropertyAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.SetPropertyActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetPropertyActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetPropertyActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetPropertyActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.SetStatusActionParser">
            <summary>
            SetStatusAction动作解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.SetStatusActionParser.#ctor">
            <summary>
            实例化SetStatusAction动作解析器
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.SetStatusActionParser.Parse(System.Xml.XmlNode,System.Object)">
            <summary>
            解析重写动作节点。不存在则返回null。
            </summary>
            <param name="node">要解析的XML节点</param>
            <param name="config">重写配置</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetStatusActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetStatusActionParser.AllowsNestedActions">
            <summary>
            获取一个值，该值指示该动作是否允许有嵌套动作。始终返回false。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.SetStatusActionParser.AllowsAttributes">
            <summary>
            获取一个值，该值指示该动作是否有属性。始终返回true。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.UnlessConditionActionParser">
            <summary>
            UnlessConditionAction动作解析器类。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Parsers.UnlessConditionActionParser.Name">
            <summary>
            获取动作名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Parsers.UrlMatchConditionParser">
            <summary>
            UrlMatchCondition的条件解析器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Parsers.UrlMatchConditionParser.Parse(System.Xml.XmlNode)">
            <summary>
            解析重写条件。不存在则返回null。
            </summary>
            <param name="node">要解析的节点</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.RewriteContext">
            <summary>
            封装一个重写请求的所有重写信息，并提供给动作与条件。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteContext.m_Method">
            <summary>
            请求方法(GET, PUT, POST, HEAD, DELETE)。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteContext.m_StatusCode">
            <summary>
            响应的状态代码。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteContext.m_Location">
            <summary>
            重写后的当前位置。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteContext.m_LastMatch">
            <summary>
            最近一次的正则匹配。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.RewriteContext.#ctor(EIIP.URLRewriter.RewriterEngine,System.String,System.String,EIIP.URLRewriter.Utility.MapPath,System.Collections.Specialized.NameValueCollection,System.Collections.Specialized.NameValueCollection,System.Web.HttpCookieCollection)">
            <summary>
            缺省构造器。
            </summary>
            <param name="engine">重写引擎</param>
            <param name="rawUrl">原始 URL</param>
            <param name="httpMethod">HTTP 模式 (GET, POST, ...)</param>
            <param name="mapPath">用于映射路径的方法</param>
            <param name="serverVariables">服务器变量集合</param>
            <param name="headers">头部集合</param>
            <param name="cookies">cookies集合</param>
        </member>
        <member name="M:EIIP.URLRewriter.RewriteContext.MapPath(System.String)">
            <summary>
            映射指定的URL至本地绝对地址。
            </summary>
            <param name="url">要映射的URL</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.RewriteContext.Expand(System.String)">
            <summary>
            扩展指定的输入。
            </summary>
            <param name="input">输入。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.RewriteContext.ResolveLocation(System.String)">
            <summary>
            解析指定位置为一个绝对引用。
            </summary>
            <param name="location">相对引用</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.Location">
            <summary>
            获取或设置当前位置。该属性由 Request.RawUrl 初始化，并由不同的动作修改。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.Method">
            <summary>
            获取请求方法(GET, PUT, POST, HEAD, DELETE)。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.Properties">
            <summary>
            获取上下文的属性集，包含头部信息及Cookie。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.Headers">
            <summary>
            获取输出的头部信息。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.StatusCode">
            <summary>
            获取或设置响应的状态代码。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.Cookies">
            <summary>
            获取输出的Cookie。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriteContext.LastMatch">
            <summary>
            获取或设置最近一次的正则匹配。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.RewriteFormHtmlTextWriter">
            <summary>
            用于重写表单action属性的HTML文本编写器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.RewriteFormHtmlTextWriter.#ctor(System.Web.UI.HtmlTextWriter)">
            <summary>
            实例化用于重写表单action属性的HTML文本编写器。
            </summary>
            <param name="writer">HTML文本编写器</param>
        </member>
        <member name="M:EIIP.URLRewriter.RewriteFormHtmlTextWriter.WriteAttribute(System.String,System.String,System.Boolean)">
            <summary>
            将指定的标记属性和值写入到输出流，并且如果指定了，还写入经过编码的值。
            </summary>
            <param name="name">要写入到输出流的标记属性。</param>
            <param name="value">分配给属性的值。</param>
            <param name="fEncode">若对属性及赋给它的值进行编码，则为 true；否则，为 false。</param>
        </member>
        <member name="T:EIIP.URLRewriter.RewriteProcessing">
            <summary>
            指示重写的某一处理类型。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteProcessing.Continue">
            <summary>
            继续处理
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteProcessing.Stop">
            <summary>
            挂起处理
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriteProcessing.Restart">
            <summary>
            重启处理
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.RewriterEngine">
            <summary>
            URL重写引擎类。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriterEngine.PROPERTIES_KEY">
            <summary>
            属性在HTTP上下文中存储项键的值。
            </summary>
        </member>
        <member name="F:EIIP.URLRewriter.RewriterEngine.m_Configuration">
            <summary>
            引擎使用的配置程序。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.RewriterEngine.#ctor(EIIP.URLRewriter.Utility.IContextFacade,EIIP.URLRewriter.Configuration.RewriterConfiguration)">
            <summary>
            实例化URL重写引擎。
            </summary>
            <param name="contextFacade">上下文外观模式实例</param>
            <param name="configuration">URL重写配置实例</param>
        </member>
        <member name="M:EIIP.URLRewriter.RewriterEngine.Rewrite">
            <summary>
            URL重写。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.RewriterEngine.Expand(EIIP.URLRewriter.RewriteContext,System.String)">
            <summary>
            基于当前重写上下文，扩展输入字串。返回扩展后的结果字符串。
            </summary>
            <param name="context">当前重写上下文</param>
            <param name="input">要扩展的输入字串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterEngine.RawUrl">
            <summary>
            获取或设置原始URL。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterEngine.OriginalQueryString">
            <summary>
            获取或设置原始查询字串。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.RewriterEngine.QueryString">
            <summary>
            获取或设置重写后的查询字串。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.Base64Transform">
            <summary>
            Base64解码转换器类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.IRewriteTransform">
            <summary>
            定义重写通配符转换器的接口。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.IRewriteTransform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.IRewriteTransform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.Base64Transform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.Base64Transform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.Base64DecodeTransform">
            <summary>
            Base64编码转换器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.Base64DecodeTransform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.Base64DecodeTransform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.DecodeTransform">
            <summary>
            URL解码转换器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.DecodeTransform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.DecodeTransform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.EncodeTransform">
            <summary>
            URL编码转换器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.EncodeTransform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.EncodeTransform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.LowerTransform">
            <summary>
            小写转换器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.LowerTransform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.LowerTransform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.StaticMappingTransform">
            <summary>
            静态映射转换器类。映射不区分大小写。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.StaticMappingTransform.#ctor(System.String,System.Collections.Specialized.StringDictionary)">
            <summary>
            实例化静态映射转换器。
            </summary>
            <param name="name">转换器的名称。</param>
            <param name="map">映射集</param>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.StaticMappingTransform.ApplyTransform(System.String)">
            <summary>
            获取指定输入的映射结果。不存在则返回null。
            </summary>
            <param name="input">要被映射的输入</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.StaticMappingTransform.Name">
            <summary>
            获取转换器的名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Transforms.UpperTransform">
            <summary>
            大写转换器类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Transforms.UpperTransform.ApplyTransform(System.String)">
            <summary>
            执行转换。
            </summary>
            <param name="input">待处理的字符串</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Transforms.UpperTransform.Name">
            <summary>
            获取转换器名称。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Utility.HttpContextFacade">
            <summary>
            HttpContext上下文的外观模式类。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Utility.IContextFacade">
            <summary>
            定义上下文的外观模式接口。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetApplicationPath">
            <summary>
            获取应用程序路径。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetRawUrl">
            <summary>
            获取原始URL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetRequestUrl">
            <summary>
            获取当前请求URL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.SetStatusCode(System.Int32)">
            <summary>
            设置响应状态代码。
            </summary>
            <param name="code">状态代码</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.RewritePath(System.String)">
            <summary>
            重写请求至新的URL。
            </summary>
            <param name="url">新的URL</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.SetRedirectLocation(System.String)">
            <summary>
            设置重定向地址。
            </summary>
            <param name="url">重定向地址。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.AppendHeader(System.String,System.String)">
            <summary>
            向响应中追加头部信息。
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.AppendCookie(System.Web.HttpCookie)">
            <summary>
            向响应中追加cookie。
            </summary>
            <param name="cookie">要追加的 cookie</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.HandleError(EIIP.URLRewriter.IRewriteErrorHandler)">
            <summary>
            以指定的异常处理器处理一个异常。
            </summary>
            <param name="handler">异常处理器</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.SetItem(System.Object,System.Object)">
            <summary>
            设置一个上下文项。
            </summary>
            <param name="item">项键</param>
            <param name="value">项值</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetItem(System.Object)">
            <summary>
            获取一个上下文项的项值。
            </summary>
            <param name="item">项键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetHttpMethod">
            <summary>
            获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetServerVariables">
            <summary>
            获取服务器变量集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetHeaders">
            <summary>
            获取头部信息集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IContextFacade.GetCookies">
            <summary>
            获取 cookies 集合。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Utility.IContextFacade.MapPath">
            <summary>
            获取映射路径的方法。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.#ctor">
            <summary>
            实例化HttpContext上下文外观模式。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.InternalMapPath(System.String)">
            <summary>
            映射URL至本地文件路径。
            </summary>
            <param name="url">要映射的URL</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetApplicationPath">
            <summary>
            获取应用程序路径。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetRawUrl">
            <summary>
            获取原始URL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetRequestUrl">
            <summary>
            获取当前请求URL。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.SetStatusCode(System.Int32)">
            <summary>
            设置响应状态代码。
            </summary>
            <param name="code">状态代码</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.RewritePath(System.String)">
            <summary>
            重写请求至新的URL。
            </summary>
            <param name="url">新的URL</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.SetRedirectLocation(System.String)">
            <summary>
            设置重定向地址。
            </summary>
            <param name="url">重定向地址。</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.AppendHeader(System.String,System.String)">
            <summary>
            向响应中追加头部信息。
            </summary>
            <param name="name">名称</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.AppendCookie(System.Web.HttpCookie)">
            <summary>
            向响应中追加cookie。
            </summary>
            <param name="cookie">要追加的 cookie</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.HandleError(EIIP.URLRewriter.IRewriteErrorHandler)">
            <summary>
            以指定的异常处理器处理一个异常。
            </summary>
            <param name="handler">异常处理器</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.SetItem(System.Object,System.Object)">
            <summary>
            设置一个上下文项。
            </summary>
            <param name="item">项键</param>
            <param name="value">项值</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetItem(System.Object)">
            <summary>
            获取一个上下文项的项值。
            </summary>
            <param name="item">项键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetHttpMethod">
            <summary>
            获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetServerVariables">
            <summary>
            获取服务器变量集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetHeaders">
            <summary>
            获取头部信息集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.HttpContextFacade.GetCookies">
            <summary>
            获取 cookies 集合。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Utility.HttpContextFacade.MapPath">
            <summary>
            获取映射路径方法。
            </summary>
        </member>
        <member name="T:EIIP.URLRewriter.Utility.MapPath">
            <summary>
            映射路径的委托。返回物理路径。
            </summary>
            <param name="url">要映射的URL</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.URLRewriter.Utility.IPRange">
            <summary>
            IP范围类。
            </summary>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IPRange.#ctor(System.Net.IPAddress)">
            <summary>
            实例化IP范围。
            </summary>
            <param name="address">IP地址</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IPRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            实例化IP范围。
            </summary>
            <param name="minimumAddress">最小的IP地址</param>
            <param name="maximumAddress">最大的IP地址</param>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IPRange.Parse(System.String)">
            <summary>
            解析 IP 地址范围。
            <code>
            ddd.ddd.ddd.ddd - 单一
            ddd.ddd.ddd.* - C类
            ddd.ddd.* - B类
            ddd.* - A类
            ddd.ddd.ddd.ddd - ccc.ccc.ccc.ccc - 区间
            </code>
            </summary>
            <param name="pattern">正则</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IPRange.InRange(System.Net.IPAddress)">
            <summary>
            确定指定IP地址是否在区间内。
            </summary>
            <param name="address">IP地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.URLRewriter.Utility.IPRange.Compare(System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            比较两个IP地址。
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.URLRewriter.Utility.IPRange.MinimumAddress">
            <summary>
            获取最小的IP地址(包含)。
            </summary>
        </member>
        <member name="P:EIIP.URLRewriter.Utility.IPRange.MaximumAddress">
            <summary>
            获取最大的IP地址(包含)。
            </summary>
        </member>
        <member name="T:EIIP.Helper.TypeHelper">
            <summary>
            类型处理助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.TypeHelper.Activate(System.String,System.Object[])">
            <summary>
            加载并返回指定类型实例。
            </summary>
            <param name="fullTypeName">要实例化的类型名称。格式为 "TypeName, AssemblyName"</param>
            <param name="args">构造器参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.TypeHelper.Activate(System.String,System.String,System.Object[])">
            <summary>
            加载并返回指定类型实例。
            </summary>
            <param name="assemblyName">程序集名称</param>
            <param name="typeName">类型名称</param>
            <param name="args">构造器参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.TypeHelper.CreateInstance(System.String)">
            <summary>
            创建指定类型的实例。失败返回null。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.TypeHelper.CreateInstance(System.Type)">
            <summary>
            创建指定类型的实例。失败返回null。 
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.TypeHelper.CreateInstance(System.Type,System.String)">
            <summary>
            创建指定类型的实例。失败返回null。 
            </summary>
            <param name="type">类型</param>
            <param name="assemblyFile">程序集文件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.TypeHelper.GetType(System.String,System.String)">
            <summary>
            获取指定类型。若未找到该类则为 null。
            </summary>
            <param name="assemblyFile">程序集文件</param>
            <param name="typeName">该类型的全名。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.User.CacheDataType">
            <summary>
            指定用户缓存数据的某一键名。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.CacheDataType.Permission_ResType">
            <summary>
            对特定资源类型的许可访问项。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.CacheDataType.ProductClass">
            <summary>
            登录帐户登录的产品类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.CacheDataType.WorkflowsDesigned">
            <summary>
            工作流设计时。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.CacheDataType.MySpecialFolder">
            <summary>
            个人专用特殊文件夹
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.CacheDataType.BLLTools">
            <summary>
            逻辑层工具对象
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.CacheDataType.Other">
            <summary>
            其它。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.DefaultLoginUser">
            <summary>
            登录用户类。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserSkeleton">
            <summary>
            用户架构类。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.IUser">
            <summary>
            定义用户接口。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUser.SetClientInfo(System.String,System.String,System.Boolean)">
            <summary>
            设置客户端信息。
            </summary>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
        </member>
        <member name="M:EIIP.Framework.User.IUser.InitializePermissionSetting">
            <summary>
            初始化权限验证环境。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.GetCacheData(EIIP.Framework.User.CacheDataType,System.String)">
            <summary>
            获取用户的缓存数据。
            </summary>
            <param name="type">缓存数据类型</param>
            <param name="postfix">附加的关键字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.SetCacheData(EIIP.Framework.User.CacheDataType,System.String,System.Object)">
            <summary>
            设置用户的缓存数据。
            </summary>
            <param name="type">缓存数据类型</param>
            <param name="postfix">附加的关键字</param>
            <param name="target">要缓存的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.HasRight(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取对特定资源的操作权限。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <param name="operateKey">特定操作值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.HasRight(System.Int32)">
            <summary>
            获取对特定资源类型的许可访问项。返回资源项ID字串集(前后均有分隔符)。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.PermissionRight(System.Int32,System.Int32)">
            <summary>
            获取对特定资源的操作许可。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Logon(EIIP.Type.LogonWay,System.String,System.String,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="pwd">密码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Logon(System.Guid,System.Guid,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Logon(System.Guid,System.String,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="smsVCode">手机激活验证码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Logon(System.String,System.String@)">
            <summary>
            重建登录信息。
            </summary>
            <param name="guid">唯一身份标识</param>
            <param name="error">重建登录信息失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Logout(EIIP.Framework.User.UserInfoRemovedReason)">
            <summary>
            注销退出。
            </summary>
            <param name="reason">注销的原因</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.OnlineInit">
            <summary>
            初始化在线信息。通常只在首次登录时调用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUser.OnlineRegist(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            登记用户在线信息。并设置登记后取回的附加信息。
            </summary>
            <param name="nodeParent">设置返回信息的XML节点集的上级节点</param>
            <param name="atInfo">所在系统位置</param>
            <param name="atHref">所在系统位置URL</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.SetOnlineState(System.Int32)">
            <summary>
            设置在线状态。
            </summary>
            <param name="stateID">在线状态ID</param>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Logout(EIIP.Framework.User.UserInfoRemovedReason,System.String)">
            <summary>
            注销退出。
            </summary>
            <param name="reason">注销的原因</param>
            <param name="reasonDetail">原因详情</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.HandOneLicence(EIIP.ProductClass)">
            <summary>
            获取一个值，该值指示用户是否占用指定产品的许可。
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.CanWorkIn(EIIP.ProductType)">
            <summary>
            获取一个值，该值指示登录用户能否工作在指定产品中
            </summary>
            <param name="productType">产品类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.IsInAllRoles(System.Int32[])">
            <summary>
            检查当前用户是否拥有指定的所有身份。
            </summary>
            <param name="roleIDs">要匹配的身份序列</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.IsInAnyRoles(System.Int32[])">
            <summary>
            检查当前用户是否拥有指定的任一身份。
            </summary>
            <param name="roleIDs">要匹配的身份序列</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Certificate(System.Boolean)">
            <summary>
            获取CA密钥
            </summary>
            <param name="includePrivate">设置一个值,该值指示是否要包含私钥</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.Certificate(System.Int32)">
            <summary>
            获取CA公钥
            </summary>
            <param name="userID">指定用户帐户ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUser.SendEventMessage(System.String)">
            <summary>
            发送系统事件(通知EIIP事件组)。
            </summary>
            <param name="msg">消息内容</param>
        </member>
        <member name="M:EIIP.Framework.User.IUser.GetRoleNames(System.String,System.Boolean)">
            <summary>
            查询指定身份ID的所有名称。返回名称字串以","分隔。
            </summary>
            <param name="roleIDs">角色ID集，以","分隔</param>
            <param name="link2">设置一个值，该值指定是否要包含链接信息</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.IUser.GUID">
            <summary>
            获取全局唯一标识(GUID)。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.UserID">
            <summary>
            获取用户ID。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.MemTypeID">
            <summary>
            获取会员类型ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.MemRank">
            <summary>
            获取会员级别
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.ClientInfo">
            <summary>
            获取客户端信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.Name">
            <summary>
            获取用户登录名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.Password">
            <summary>
            获取或设置用户密码。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.PerName">
            <summary>
            获取真实姓名。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.PerID">
            <summary>
            获取个人ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.PerId">
            <summary>
            获取个人GUID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.PerTypeID">
            <summary>
            获取个人类型ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.AccountInfo">
            <summary>
            获取或设置登录帐套信息
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.Repository">
            <summary>
            获取附加在用户实例上的用户库。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.Begin2UpdatePermissionSetting">
            <summary>
            设置开始更新权限验证环境时间。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.Permission">
            <summary>
            获取权限验证实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUser.IsOvertime">
            <summary>
            获取一个值，该值指示用户是否已超时。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.IUser.Identity">
            <summary>
            获取登录标识。
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.IUser.UserWorking">
            <summary>
            工作时事件成员
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_GUID">
            <summary>
            全局唯一标识(GUID)。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_HashCode">
            <summary>
            实例哈希值。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_UserID">
            <summary>
            用户ID。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_MemTypeID">
            <summary>
            会员类型ID。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_MemRank">
            <summary>
            会员级别。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_Name">
            <summary>
            用户的登录名称。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_LogonWay">
            <summary>
            登录系统的方式。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_EDate">
            <summary>
            有效日期时间。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_PerName">
            <summary>
            用户的个人名称。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_Password">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_hierarchy">
            <summary>
            用户所在组织结构。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_Permission">
            <summary>
            权限验证实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_AccountInfo">
            <summary>
            登录帐套信息
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_bvProduct">
            <summary>
            用户产品类型值
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_PerId">
            <summary>
            个人GUID。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_SMSVCode">
            <summary>
            手机验证码。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_ACode">
            <summary>
            激活码。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_PerID">
            <summary>
            个人ID
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_PerTypeID">
            <summary>
            个人类型ID
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_GuestPerID">
            <summary>
            最近一次个人ID。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_ActiveTime">
            <summary>
            活动时间
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_ClientInfo">
            <summary>
            客户端信息。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_CacheData">
            <summary>
            缓存数据。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_RightDictionary">
            <summary>
            按键排序的权限字典。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_Roles">
            <summary>
            用户所有隶属身份集。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserSkeleton.m_Identity">
            <summary>
            登录身份标识。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.#ctor">
            <summary>
            实例化用户。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.InitializePermissionSetting">
            <summary>
            初始化权限验证环境。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.GetCacheData(EIIP.Framework.User.CacheDataType,System.String)">
            <summary>
            获取用户的缓存数据。
            </summary>
            <param name="type">缓存数据类型</param>
            <param name="postfix">附加的关键字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.SetCacheData(EIIP.Framework.User.CacheDataType,System.String,System.Object)">
            <summary>
            设置用户的缓存数据。
            </summary>
            <param name="type">缓存数据类型</param>
            <param name="postfix">附加的关键字</param>
            <param name="target">要缓存的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.GetCacheDataKey(EIIP.Framework.User.CacheDataType,System.String)">
            <summary>
            获取用户的缓存数据所对应的键。
            </summary>
            <param name="type">缓存数据类型</param>
            <param name="postfix">附加的关键字</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.OnlineInit">
            <summary>
            初始化在线信息。通常只在首次登录时调用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.OnlineInit2">
            <summary>
            初始化在线信息。通常只在恢复登录时调用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.OnlineRegist(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            登记用户在线信息。并设置登记后取回的附加信息。
            </summary>
            <param name="nodeParent">设置返回信息的XML节点集的上级节点</param>
            <param name="atInfo">所在系统位置</param>
            <param name="atHref">所在系统位置URL</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.OnlineRegist(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            登记移动终端用户在线信息。并设置登记后取回的附加信息。
            </summary>
            <param name="nodeParent">设置返回信息的XML节点集的上级节点</param>
            <param name="atInfo">所在系统位置</param>
            <param name="atHref">所在系统位置URL</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.SetClientInfo(System.String,System.String,System.Boolean)">
            <summary>
            设置客户端信息。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.SetOnlineState(System.Int32)">
            <summary>
            设置在线状态。
            </summary>
            <param name="stateID">在线状态ID</param>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.HasRight(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取对特定资源的操作权限。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <param name="operateKey">特定操作值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.HasRight(System.Int32)">
            <summary>
            获取对特定资源类型的许可访问项。返回资源项ID字串集(前后均有分隔符)。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.PermissionRight(System.Int32,System.Int32)">
            <summary>
            获取对特定资源的操作许可。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Logon(EIIP.Type.LogonWay,System.String,System.String,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="pwd">密码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Logon(System.Guid,System.Guid,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Logon(System.Guid,System.String,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="smsVCode">手机激活验证码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Logon(System.String,System.String@)">
            <summary>
            重建登录信息。
            </summary>
            <param name="guid">唯一身份标识</param>
            <param name="error">重建登录信息失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Certificate(System.Boolean)">
            <summary>
            获取CA密钥
            </summary>
            <param name="includePrivate">设置一个值,该值指示是否要包含私钥</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Certificate(System.Int32)">
            <summary>
            获取CA公钥
            </summary>
            <param name="userID">指定用户帐户ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.SendEventMessage(System.String)">
            <summary>
            发送系统事件(通知EIIP事件组)。
            </summary>
            <param name="msg">消息内容</param>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.GetRoleNames(System.String,System.Boolean)">
            <summary>
            查询指定身份ID的所有名称。返回名称字串以","分隔。
            </summary>
            <param name="roleIDs">角色ID集，以","分隔</param>
            <param name="link2">设置一个值，该值指定是否要包含链接信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Logout(EIIP.Framework.User.UserInfoRemovedReason)">
            <summary>
            注销退出。但并不移除身份验证票。
            </summary>
            <param name="reason">注销的原因</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Logout(EIIP.Framework.User.UserInfoRemovedReason,System.String)">
            <summary>
            注销退出。但并不移除身份验证票。
            </summary>
            <param name="reason">注销的原因</param>
            <param name="reasonDetail">原因详情</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.HandOneLicence(EIIP.ProductClass)">
            <summary>
            获取一个值，该值指示用户是否占用指定产品的许可。
            </summary>
            <param name="product">指定产品类别</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.CanWorkIn(EIIP.ProductType)">
            <summary>
            获取一个值,该值指示登录用户能否工作在指定产品中。
            </summary>
            <param name="product">指定产品</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.IsInAllRoles(System.Int32[])">
            <summary>
            检查当前用户是否拥有指定的所有身份。
            </summary>
            <param name="roleIDs">要匹配的身份序列</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.IsInAnyRoles(System.Int32[])">
            <summary>
            检查当前用户是否拥有指定的任一身份。
            </summary>
            <param name="roleIDs">要匹配的身份序列</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.MakeMeActive">
            <summary>
            用户激活。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.OnWorking(EIIP.Framework.User.UserWorkingEventArgs)">
            <summary>
            处理工作时触发的事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.RaiseWorking(EIIP.Framework.User.UserWorkingEventArgs)">
            <summary>
            触发工作事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Hierarchy_UserRepositoryReset(System.Object,EIIP.Framework.User.UserRepositoryResetEventArgs)">
            <summary>
            对每个用户触发重置事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Hierarchy_UserRepositoryChanged(System.Object,EIIP.Framework.User.UserRepositoryChangedEventArgs)">
            <summary>
            对每个用户触发更改事件。
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.DisposeResource">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserSkeleton.GetHashCode">
            <summary>
            获取用户实例的 GUID 哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Roles">
            <summary>
            获取用户直属身份角色集。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.LogonWay">
            <summary>
            获取登录系统的方式。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.PerID">
            <summary>
            获取个人ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.GuestPerID">
            <summary>
            获取最近一次个人ID。（在来宾登录身份时有意义）
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.PerId">
            <summary>
            获取个人GUID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.SMSVCode">
            <summary>
            获取或设置手机验证(激活)码。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.ACode">
            <summary>
            获取或设置激活码。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.PerTypeID">
            <summary>
            获取个人类型ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.MemTypeID">
            <summary>
            获取会员类型ID
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.MemRank">
            <summary>
            获取会员级别
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.EDate">
            <summary>
            获取有效日期时间。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Hierarchy">
            <summary>
            获取或设置用户实例树。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.IsOvertime">
            <summary>
            获取一个值，该值指示用户是否已超时。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Identity">
            <summary>
            获取登录身份标识。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.ConnectionStr">
            <summary>
            获取登录帐套连接字串信息
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserSkeleton.m_UserWorking">
            <summary>
            工作时事件成员
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.ProductValue">
            <summary>
            登录用户可登录的产品值。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.GUID">
            <summary>
            获取全局唯一标识(GUID)。重写该属性时，需重写 GetHashCode() 方法。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.UserID">
            <summary>
            获取用户ID。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.ClientInfo">
            <summary>
            获取客户端信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.PerName">
            <summary>
            获取或设置个人名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Name">
            <summary>
            获取或设置用户的名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Password">
            <summary>
            获取或设置用户的密码
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Repository">
            <summary>
            获取用户实例附加的库。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.AccountInfo">
            <summary>
            获取或设置登录帐套信息
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Begin2UpdatePermissionSetting">
            <summary>
            设置开始更新权限验证环境时间。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserSkeleton.Permission">
            <summary>
            获取权限验证实例。
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserSkeleton.UserWorking">
            <summary>
            库关闭时事件成员
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.#ctor(EIIP.Framework.AccountInfo)">
            <summary>
            实例化登录用户。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.#ctor(EIIP.Framework.AccountInfo,System.String)">
            <summary>
            实例化登录用户。
            </summary>
            <param name="accountInfo">帐套信息</param>
            <param name="guid"></param>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.#ctor(EIIP.Framework.AccountInfo,System.String,EIIP.Core.Contract.LoginUser)">
            <summary>
            实例化登录用户。
            </summary>
            <param name="accountInfo">帐套信息</param>
            <param name="guid"></param>
            <param name="loginUser"></param>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.SetClientInfo(System.String,System.String,System.Boolean)">
            <summary>
            设置客户端信息。仅供WCF环境调用设置。
            </summary>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.SetOnlineState(System.Int32)">
            <summary>
            设置在线状态。
            </summary>
            <param name="stateID">在线状态ID</param>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.OnlineInit">
            <summary>
            初始化在线信息。通常只在首次登录时调用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.OnlineInit2">
            <summary>
            初始化在线信息。通常只在恢复登录时调用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.OnlineRegist(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            登记用户在线信息。并设置登记后取回的附加信息。
            </summary>
            <param name="nodeParent">设置返回信息的XML节点集的上级节点</param>
            <param name="atInfo">所在系统位置</param>
            <param name="atHref">所在系统位置URL</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.OnlineRegist(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            登记移动终端用户在线信息。并设置登记后取回的附加信息。
            </summary>
            <param name="nodeParent">设置返回信息的XML节点集的上级节点</param>
            <param name="atInfo">所在系统位置</param>
            <param name="atHref">所在系统位置URL</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Logon(EIIP.Type.LogonWay,System.String,System.String,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="pwd">密码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Logon(System.Guid,System.String,System.Guid,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="smsVCode">手机验证码，当设置为null需要指定 aCode 参数。</param>
            <param name="aCode">激活码，当设置了 smsVCode = null 时，本参数有效</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Logon(System.Guid,System.Guid,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Logon(System.Guid,System.String,System.String@)">
            <summary>
            登录系统。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="smsVCode">手机激活验证码</param>
            <param name="error">登录失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Logon(System.String,System.String@)">
            <summary>
            重建登录信息。
            </summary>
            <param name="guid">唯一身份标识</param>
            <param name="error">重建登录信息失败时输出信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Logout(EIIP.Framework.User.UserInfoRemovedReason)">
            <summary>
            注销登录信息。
            </summary>
            <param name="reason">注销的原因</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.InitializePermissionSetting">
            <summary>
            初始化权限验证环境。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.HasRight(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取对特定资源的操作权限。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <param name="operateKey">特定操作值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.PermissionRight(System.Int32,System.Int32)">
            <summary>
            获取对特定资源的操作许可。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <param name="resID">资源项ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.HasRight(System.Int32)">
            <summary>
            获取对特定资源类型的许可访问项。返回资源项ID字串集(前后均有分隔符)。
            </summary>
            <param name="resTypeID">资源类型ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.DisposeResource">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Certificate(System.Boolean)">
            <summary>
            获取CA密钥
            </summary>
            <param name="includePrivate">设置一个值,该值指示是否要包含私钥</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.Certificate(System.Int32)">
            <summary>
            获取CA公钥
            </summary>
            <param name="userID">指定用户帐户ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.SendEventMessage(System.String)">
            <summary>
            发送系统事件(通知EIIP事件组)。该方法仅供系统调用。
            </summary>
            <param name="msg">消息内容</param>
        </member>
        <member name="M:EIIP.Framework.User.DefaultLoginUser.GetRoleNames(System.String,System.Boolean)">
            <summary>
            查询指定身份ID的所有名称。
            </summary>
            <param name="roleIDs">角色ID集，以","分隔</param>
            <param name="link2">设置一个值，该值指定是否要包含链接信息</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.DefaultLoginUser.Begin2UpdatePermissionSetting">
            <summary>
            设置开始更新时间。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.DefaultLoginUser.ClientInfo">
            <summary>
            获取客户端信息。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.DefaultUserFactory">
            <summary>
            缺省用户工厂。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.IUserFactory">
            <summary>
            创建用户工厂接口。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUserFactory.CreateUser(EIIP.Type.LogonWay,System.String,System.String,EIIP.Framework.AccountInfo,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该实例，失败返回null。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="accountInfo">登录帐套</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserFactory.CreateUser(System.Guid,System.Guid,EIIP.Framework.AccountInfo,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该实例，失败返回null。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="accountInfo">登录帐套</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserFactory.CreateUser(System.String,EIIP.Framework.AccountInfo,System.String@)">
            <summary>
            恢复创建指定的用户实例。成功返回该实例，失败返回null。
            </summary>
            <param name="guid">登录标识</param>
            <param name="accountInfo">登录帐套</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultUserFactory.#ctor">
            <summary>
            实例化用户工厂。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.DefaultUserFactory.CreateUser(EIIP.Type.LogonWay,System.String,System.String,EIIP.Framework.AccountInfo,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="accountInfo">登录帐套</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultUserFactory.CreateUser(System.Guid,System.Guid,EIIP.Framework.AccountInfo,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="accountInfo">登录帐套</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.DefaultUserFactory.CreateUser(System.String,EIIP.Framework.AccountInfo,System.String@)">
            <summary>
            恢复创建指定的用户实例。成功返回该实例，失败返回null。
            </summary>
            <param name="guid">登录标识</param>
            <param name="accountInfo">登录帐套</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.User.Hierarchy">
            <summary>
            某登录帐套下的登录用户信息树。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositorySkeleton">
            <summary>
            用户库架构基类。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.IUserRepository">
            <summary>
            定义用户库的接口。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.Exists(System.String)">
            <summary>
            检测指定登录名称的用户是否在库中存在。存在返回该用户，不存在返回null。
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.GetCurrentUsers">
            <summary>
            获取当前所有的用户。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.CreateUser(EIIP.Type.LogonWay,System.String,System.String,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.CreateUser(System.Guid,System.Guid,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.CreateUser(EIIP.Framework.User.LogonIdentity,System.String@)">
            <summary>
            恢复创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="identity">登录标识</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.RemoveUser(System.String)">
            <summary>
            从库中移除指定登录名称的用户实例，成功返回该用户实例。
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.RemoveUser(System.Int32)">
            <summary>
            从库中移除指定登录ID的用户实例，成功返回该用户实例。
            </summary>
            <param name="userID">用户登录ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.RemoveUser(System.Collections.ArrayList)">
            <summary>
            从库中移除所有指定登录ID的用户实例。
            </summary>
            <param name="aryUserID">用户登录ID集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.RemoveUser(EIIP.Framework.User.UserSkeleton)">
            <summary>
            从库中移除指定用户实例。
            </summary>
            <param name="user">登录用户实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.Shutdown">
            <summary>
            关闭库。当应用程序结束时调用。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.Reset">
            <summary>
            重置库于缺省状态。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUserRepository.RaiseChanged(EIIP.Framework.User.UserRepositoryChangedEventArgs)">
            <summary>
            触发库更改事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="P:EIIP.Framework.User.IUserRepository.Name">
            <summary>
            获取或设置用户库的名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUserRepository.HoldOnMinute">
            <summary>
            获取或设置保持时间（分钟）
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUserRepository.AccountInfo">
            <summary>
            获取登录数据库信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUserRepository.UserCount">
            <summary>
            获取库中用户数
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUserRepository.Changed">
            <summary>
            获取或设置一个值，该值指示该库是否已发生更改。
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.IUserRepository.UserRepositoryShutdown">
            <summary>
            库关闭时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.IUserRepository.UserRepositoryReset">
            <summary>
            库配置重置时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.IUserRepository.UserRepositoryChanged">
            <summary>
            库更改时事件成员
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositorySkeleton.m_name">
            <summary>
            用户库名称
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositorySkeleton.m_HoldOnMinute">
            <summary>
            保持时间（分钟）
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositorySkeleton.m_Changed">
            <summary>
            指示是否已经更改。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.#ctor">
            <summary>
            实例化
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.Exists(System.String)">
            <summary>
            检测指定登录名称的用户是否在库中存在。存在返回该用户，不存在返回null。
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.GetCurrentUsers">
            <summary>
            获取当前所有的用户。由继承类实现。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.CreateUser(EIIP.Type.LogonWay,System.String,System.String,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.CreateUser(System.Guid,System.Guid,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.CreateUser(EIIP.Framework.User.LogonIdentity,System.String@)">
            <summary>
            恢复创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="identity">登录标识</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.RemoveUser(System.String)">
            <summary>
            从库中移除指定登录名称的用户实例，成功返回该用户实例。
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.RemoveUser(System.Int32)">
            <summary>
            从库中移除指定登录ID的用户实例，成功返回该用户实例。
            </summary>
            <param name="userID">用户登录ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.RemoveUser(System.Collections.ArrayList)">
            <summary>
            从库中移除所有指定登录ID的用户实例。
            </summary>
            <param name="aryUserID">用户登录ID集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.RemoveUser(EIIP.Framework.User.UserSkeleton)">
            <summary>
            从库中移除指定用户实例。
            </summary>
            <param name="user">登录用户实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.Shutdown">
            <summary>
            关闭库。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.Reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.Clear">
            <summary>
            清除重置事件成员。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.RaiseChanged(EIIP.Framework.User.UserRepositoryChangedEventArgs)">
            <summary>
            触发库更改事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.OnShutdown(System.EventArgs)">
            <summary>
            当库关闭时，处理关闭事件。
            </summary>
            <param name="e">空参数</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.OnReset(EIIP.Framework.User.UserRepositoryResetEventArgs)">
            <summary>
            处理重置库时触发的事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositorySkeleton.OnChanged(EIIP.Framework.User.UserRepositoryChangedEventArgs)">
            <summary>
            处理库更改时触发的事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="E:EIIP.Framework.User.UserRepositorySkeleton.m_UserRepositoryShutdown">
            <summary>
            库关闭事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserRepositorySkeleton.m_UserRepositoryReset">
            <summary>
            库重置事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserRepositorySkeleton.m_UserRepositoryChanged">
            <summary>
            库更改事件成员
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositorySkeleton.Name">
            <summary>
            获取或设置用户库的名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositorySkeleton.HoldOnMinute">
            <summary>
            获取或设置保持时间（分钟）
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositorySkeleton.AccountInfo">
            <summary>
            获取登录数据库信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositorySkeleton.UserCount">
            <summary>
            获取库中用户数。由继承类实现。
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserRepositorySkeleton.UserRepositoryShutdown">
            <summary>
            库关闭时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserRepositorySkeleton.UserRepositoryReset">
            <summary>
            库重置时事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.UserRepositorySkeleton.UserRepositoryChanged">
            <summary>
            更改时事件成员
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositorySkeleton.Changed">
            <summary>
            获取或设置一个值，该值指示该库是否已更改过。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.Hierarchy.m_Factory">
            <summary>
            用户工厂。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.Hierarchy.m_ht">
            <summary>
            用户缓存池。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.Hierarchy.m_AccountInfo">
            <summary>
            登录数据库信息。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.Hierarchy.m_CleanUpTime">
            <summary>
            清理当前无效用户实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.Hierarchy.m_EventBaseTime">
            <summary>
            事件基准时间。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.#ctor">
            <summary>
            实例化用户组织结构。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.#ctor(EIIP.Framework.User.IUserFactory)">
            <summary>
            以指定工厂实例化用户组织结构。
            </summary>
            <param name="userFactory">日志记录器工厂</param>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.Exists(System.String)">
            <summary>
            检测指定登录名称的用户是否在库中存在。存在返回该用户，不存在返回null。
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.GetCurrentUsers">
            <summary>
            获取当前所有的用户。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.CreateUser(EIIP.Type.LogonWay,System.String,System.String,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.CreateUser(System.Guid,System.Guid,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.CreateUser(EIIP.Framework.User.LogonIdentity,System.String@)">
            <summary>
            恢复创建指定的用户实例。成功返回该用户实例。
            </summary>
            <param name="identity">登录标识</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.RemoveUser(System.String)">
            <summary>
            从库中移除指定登录名称的用户实例，成功返回该用户实例。
            </summary>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.RemoveUser(System.Int32)">
            <summary>
            从库中移除指定登录ID的用户实例，成功返回该用户实例。
            </summary>
            <param name="userID">用户登录ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.RemoveUser(System.Collections.ArrayList)">
            <summary>
            从库中移除所有指定登录ID的用户实例。
            </summary>
            <param name="aryUserID">用户登录ID集</param>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.RemoveUser(EIIP.Framework.User.UserSkeleton)">
            <summary>
            从库中移除指定登录名称的用户实例
            </summary>
            <param name="user">用户实例</param>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.Reset">
            <summary>
            重置配置。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.Clear">
            <summary>
            清除缓存池中所有的用户实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.CreateUser(EIIP.Framework.User.IUserFactory,EIIP.Type.LogonWay,System.String,System.String,EIIP.ProductClass,System.String@)">
            <summary>
            使用指定的工厂创建新的指定名称的用户实例。
            </summary>
            <param name="factory">工厂</param>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.CreateUser(EIIP.Framework.User.IUserFactory,System.Guid,System.Guid,EIIP.ProductClass,System.String@)">
            <summary>
            使用指定的工厂创建新的指定名称的用户实例。
            </summary>
            <param name="factory">工厂</param>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.Hierarchy.CreateUser(EIIP.Framework.User.IUserFactory,EIIP.Framework.User.LogonIdentity,System.String@)">
            <summary>
            使用指定的工厂创建新的指定名称的用户实例。
            </summary>
            <param name="factory">工厂</param>
            <param name="identity">登录身份</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.Hierarchy.UserFactory">
            <summary>
            获取或设置用户工厂实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.Hierarchy.UserCount">
            <summary>
            获取用户实例数。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.Hierarchy.AccountInfo">
            <summary>
            获取或设置登录数据库信息。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryCreationEventHandler">
            <summary>
            当用户库创建时的处理通知。
            </summary>
            <param name="sender">创建库的库选择器 IRepositorySelector</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryCreationEventArgs">
            <summary>
            提供创建用户库事件的参数。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryCreationEventArgs.m_repository">
            <summary>
            被创建的库
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryCreationEventArgs.#ctor(EIIP.Framework.User.IUserRepository)">
            <summary>
            以指定库实例化参数。
            </summary>
            <param name="repository">被创建的库</param>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryCreationEventArgs.UserRepository">
            <summary>
            获取被创建的库
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.IRepositorySelector">
            <summary>
            库选择器接口。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IRepositorySelector.GetRepository(EIIP.Framework.AccountInfo)">
            <summary>
            获取指定登录帐套的用户库。
            </summary>
            <param name="dbInfo">登录帐套信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IRepositorySelector.GetRepository(System.String)">
            <summary>
            获取指定名称的用户库。
            </summary>
            <param name="repositoryName">用户库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IRepositorySelector.CreateRepository(EIIP.Framework.AccountInfo,System.Type)">
            <summary>
            创建指定登录帐套的特定库实例。
            </summary>
            <param name="dbInfo">登录帐套信息</param>
            <param name="repositoryType">用户库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IRepositorySelector.ExistsRepository(System.String)">
            <summary>
            测试指定名称库的存在性。
            </summary>
            <param name="repositoryName">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IRepositorySelector.GetAllRepositories">
            <summary>
            获取所有库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.IRepositorySelector.GetUser(System.String)">
            <summary>
            获取指定GUID的登录用户。
            </summary>
            <param name="guid">登录用户的GUID</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.IRepositorySelector.UserFactory">
            <summary>
            获取或设置库选择器中库成员的创建工厂。
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.IRepositorySelector.UserRepositoryCreatedEvent">
            <summary>
            用户库被创建时的事件成员。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserWorkingEventHandler">
            <summary>
            处理用户工作时事件委托。
            </summary>
            <param name="sender">库</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Framework.User.IUserOperation">
            <summary>
            用户操作类。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.IUserWrapper">
            <summary>
            用户包装器。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.IUserWrapper.User">
            <summary>
            获取包装器的用户实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.IUserOperation.Register">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryShutdownEventHandler">
            <summary>
            处理用户库关闭时事件委托。
            </summary>
            <param name="sender">被关闭的 IUserRepository 库对象</param>
            <param name="e">Empty</param>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryResetEventHandler">
            <summary>
            处理用户库重置时事件委托。
            </summary>
            <param name="sender">重置的 IUserRepository 库对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryChangedEventHandler">
            <summary>
            处理用户库更改时事件委托。
            </summary>
            <param name="sender">更改的 IUserRepository 库对象</param>
            <param name="e">事件参数</param>
        </member>
        <member name="T:EIIP.Framework.User.LogonIdentity">
            <summary>
            登录身份标识。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.LogonIdentity.m_GUID">
            <summary>
            登录标识。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.LogonIdentity.m_AccountID">
            <summary>
            登录帐套ID。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.LogonIdentity.m_ProductValue">
            <summary>
            登录产品数据。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.LogonIdentity.m_User">
            <summary>
            登录用户。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.LogonIdentity.Version">
            <summary>
            获取或设置序列化版本号。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.#ctor(System.String,System.String,System.Int32)">
            <summary>
            实例化登录身份标识。
            </summary>
            <param name="guid">登录标识。</param>
            <param name="accountID">登录帐套ID。</param>
            <param name="productValue">登录产品数据。</param>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.#ctor(EIIP.Framework.User.UserSkeleton)">
            <summary>
            实例化登录身份标识。
            </summary>
            <param name="user">登录用户</param>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.#ctor(System.String)">
            <summary>
            实例化登录身份标识。
            </summary>
            <param name="infoString">以逗号或下垂线分隔的登录身份字串。</param>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            反序列化。
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.ToString">
            <summary>
            获取登录身份字串。分隔符为逗号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.ToString2">
            <summary>
            获取登录身份字串。分隔符为下垂线。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.LogonIdentity.ToString(System.Char)">
            <summary>
            获取登录身份字串。
            </summary>
            <param name="separator">分隔符，标准分隔符为逗号</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.User.LogonIdentity.GUID">
            <summary>
            获取登录标识。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.LogonIdentity.AccountID">
            <summary>
            获取登录帐套ID。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.LogonIdentity.ProductValue">
            <summary>
            获取登录产品数据。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.LogonIdentity.AuthenticationType">
            <summary>
            获取所使用的身份验证的类型。始终返回 "Forms" 字串。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.LogonIdentity.IsAuthenticated">
            <summary>
            获取一个值，该值指示是否验证了用户。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.LogonIdentity.Name">
            <summary>
            获取当前用户的名称。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.RemovedUserInfo">
            <summary>
            被移除的用户信息类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfo.GUID">
            <summary>
            移除用户的GUID。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfo.Name">
            <summary>
            移除用户的登录名称。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfo.When">
            <summary>
            删除时间
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfo.m_Reason">
            <summary>
            被删除的原因
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfo.m_ReasonDetail">
            <summary>
            被删除的原因细节。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfo.#ctor(EIIP.Framework.User.UserInfoRemovedReason,EIIP.Framework.User.IUser)">
            <summary>
            实例化被移除的用户信息。
            </summary>
            <param name="reason">设置移除用户信息的某一原因。</param>
            <param name="user">用户信息</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfo.#ctor(EIIP.Framework.User.UserInfoRemovedReason,System.String,EIIP.Framework.User.IUser)">
            <summary>
            实例化被移除的用户信息。
            </summary>
            <param name="reason">设置移除用户信息的某一原因。</param>
            <param name="reasonDetail">原因详情</param>
            <param name="user">用户信息</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfo.ToString">
            <summary>
            获取删除原因。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.User.UserInfoRemovedReason">
            <summary>
            指示移除用户信息的某一原因。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.Logout">
            <summary>
            退出系统
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.Pushouted">
            <summary>
            该帐号已经被再次登录。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.Expired">
            <summary>
            时间到期。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.RemovedByAdmin">
            <summary>
            被管理员删除。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.RemovedBySystem">
            <summary>
            被系统删除。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.More">
            <summary>
            有详细的原因
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserInfoRemovedReason.Exception">
            <summary>
            数据异常
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.RemovedUserInfoCollection">
            <summary>
            提供 被删除用户信息 对象集合。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfoCollection.dictionary">
            <summary>
            按键排序的字典
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RemovedUserInfoCollection.m_buffer">
            <summary>
            被删除用户GUID缓存。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.#ctor">
            <summary>
            实例化被删除用户信息集合。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.#ctor(System.Int32)">
            <summary>
            实例化被删除用户信息集合。
            </summary>
            <param name="maxSize">缓存中最大容量</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.GetRemovedUserInfo(System.String)">
            <summary>
            获取指定 用户GUID 的被删除用户信息。不存在返回null。
            </summary>
            <param name="guid">用户GUID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.Add(EIIP.Framework.User.UserInfoRemovedReason,System.String,EIIP.Framework.User.IUser)">
            <summary>
            添加被删除用户信息。
            </summary>
            <param name="reason">设置移除用户信息的某一原因。</param>
            <param name="reasonDetail">原因详情</param>
            <param name="user">用户信息</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.Add(EIIP.Framework.User.UserInfoRemovedReason,EIIP.Framework.User.IUser)">
            <summary>
            添加被删除用户信息。
            </summary>
            <param name="reason">设置移除用户信息的某一原因。</param>
            <param name="user">用户信息</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.Add(EIIP.Framework.User.RemovedUserInfo)">
            <summary>
            添加被删除用户信息。
            </summary>
            <param name="item">被删除用户信息对象。</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.Insert(System.Int32,EIIP.Framework.User.RemovedUserInfo)">
            <summary>
            在指定索引位置插入被删除用户信息。
            </summary>
            <param name="index">索引</param>
            <param name="item">被删除用户信息</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.Remove(System.String)">
            <summary>
            从集合中移除指定用户GUID的被删除用户信息。
            </summary>
            <param name="guid">用户GUID</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.IndexOf(EIIP.Framework.User.RemovedUserInfo)">
            <summary>
            确定集合中特定被删除用户信息项的索引。 
            </summary>
            <param name="item">被删除用户信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.Contains(System.String)">
            <summary>
            确定集合中是否包含特定的用户GUID。
            </summary>
            <param name="guid">用户GUID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.CopyTo(EIIP.Framework.User.RemovedUserInfo[],System.Int32)">
            <summary>
            从特定索引处开始将集合的元素复制到数组中。 
            </summary>
            <param name="array">作为从集合复制的元素的目标位置的一维数组。</param>
            <param name="index">数组中的从零开始的索引，从此处开始复制。</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.OnClearComplete">
            <summary>
            移除所有成员。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            在向集合实例中插入新被删除用户信息之前，进行存在性检查。若已存在则抛出错误。
            </summary>
            <param name="index">从零开始的索引，在该处插入 value。</param>
            <param name="value">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            在向集合实例中插入新被删除用户信息之后，调整缓存内容。若已存在则抛出错误。
            </summary>
            <param name="index">从零开始的索引，在该处插入 value。</param>
            <param name="value">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            在向集合实例中移除元素之后，进行元素与集合之间的引用取消操作。
            </summary>
            <param name="index">value 在集合中从零开始的索引。</param>
            <param name="value">在 index 处的集合中元素。</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.OnValidate(System.Object)">
            <summary>
            当验证值时执行类型判定。
            </summary>
            <param name="value">要添加的被删除用户信息对象</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            当在集合实例中设置值后，用新值更新集合中的字典。 
            </summary>
            <param name="index">从零开始的索引，可在该位置找到 oldValue。</param>
            <param name="oldValue">要用 newValue 替换的值。</param>
            <param name="newValue">在 index 处的元素的新值。</param>
        </member>
        <member name="M:EIIP.Framework.User.RemovedUserInfoCollection.RemoveItem(EIIP.Framework.User.RemovedUserInfo)">
            <summary>
            移除指定被删除用户信息。
            </summary>
            <param name="olditem">移除的被删除用户信息</param>
        </member>
        <member name="P:EIIP.Framework.User.RemovedUserInfoCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引的被删除用户信息。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.RemovedUserInfoCollection.Item(System.String)">
            <summary>
            获取或设置指定 GUID 的被删除用户信息。不存在返回null。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.RepositorySelector">
            <summary>
            用户库选择器类。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RepositorySelector.m_name2repositoryMap">
            <summary>
            库的名称池，包含以名称为键的库对象。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RepositorySelector.m_account2repositoryMap">
            <summary>
            库的帐套集池，包含以帐套为键的库对象。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RepositorySelector.m_Users">
            <summary>
            所有登录帐户用户缓存池。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RepositorySelector.m_RepositoryType">
            <summary>
            缺省库类型
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.RepositorySelector.m_UserFactory">
            <summary>
            工厂实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.#ctor(System.Type)">
            <summary>
            创建新的库选择器实例。
            </summary>
            <param name="repositoryType">库的类型</param>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.GetRepository(EIIP.Framework.AccountInfo)">
            <summary>
            获取指定登录帐套的用户库。
            </summary>
            <param name="dbInfo">登录帐套信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.GetRepository(System.String)">
            <summary>
            获取指定名称的用户库。
            </summary>
            <param name="repositoryName">用户库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.CreateRepository(EIIP.Framework.AccountInfo,System.Type)">
            <summary>
            创建指定登录帐套的特定库实例。
            </summary>
            <param name="dbInfo">登录帐套信息</param>
            <param name="repositoryType">用户库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.ExistsRepository(System.String)">
            <summary>
            测试指定名称库的存在性。
            </summary>
            <param name="repositoryName">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.GetAllRepositories">
            <summary>
            获取所有库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.GetUser(System.String)">
            <summary>
            获取指定GUID的登录用户。
            </summary>
            <param name="guid">登录用户的GUID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.OnUserRepositoryCreatedEvent(EIIP.Framework.User.IUserRepository)">
            <summary>
            当库被创建时进行事件通知。
            </summary>
            <param name="repository">被创建的库</param>
        </member>
        <member name="M:EIIP.Framework.User.RepositorySelector.ConfirmSystemUploadPath(System.String)">
            <summary>
            确认系统文件夹已被创建
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.RepositorySelector.m_UserRepositoryCreated">
            <summary>
            用户库创建事件成员
            </summary>
        </member>
        <member name="E:EIIP.Framework.User.RepositorySelector.UserRepositoryCreatedEvent">
            <summary>
            当用户库创建时的事件处理。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.RepositorySelector.UserFactory">
            <summary>
            获取或设置库选择器中库成员的创建工厂。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserKey">
            <summary>
            用户键类，用于加速哈希表搜索。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserKey.#ctor(System.String)">
            <summary>
            实例化用户键
            </summary>
            <param name="name">用户唯一键，一般为GUID</param>
        </member>
        <member name="M:EIIP.Framework.User.UserKey.GetHashCode">
            <summary>
            返回当前实例的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserKey.Equals(System.Object)">
            <summary>
            比较两实例是否相等。
            </summary>
            <param name="obj">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserKey.ToString">
            <summary>
            获取键名。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserKey.Equals(EIIP.Framework.User.UserKey)">
            <summary>
            比较两实例是否相等。
            </summary>
            <param name="other">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.User.UserManager">
            <summary>
            用户管理器。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserManager.s_repositorySelector">
            <summary>
            初始化的默认库选择器。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.#cctor">
            <summary>
            实例构造器。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.GetRepository(System.String)">
            <summary>
            获取指定名称的用户实例库实例。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.GetRepository(EIIP.Framework.AccountInfo)">
            <summary>
            获取指定帐套的用户库实例。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.Exists(System.String,System.String)">
            <summary>
            获取库中指定登录名称的用户实例。未找到返回null。
            </summary>
            <param name="repository">库名称</param>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.Exists(EIIP.Framework.AccountInfo,System.String)">
            <summary>
            获取指定帐套中的用户实例。未找到返回null。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="loginName">用户实例登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.GetUser(System.String)">
            <summary>
            获取指定GUID的用户实例，不存在返回null。
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.CreateUser(EIIP.Framework.AccountInfo,EIIP.Type.LogonWay,System.String,System.String,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。(正常登录使用)
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="logonWay">指定特定的登录系统方式</param>
            <param name="loginName">登录名称</param>
            <param name="password">登录密码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.CreateUser(EIIP.Framework.AccountInfo,System.Guid,System.Guid,EIIP.ProductClass,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。(正常登录使用)
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="perId">个人GUID</param>
            <param name="aCode">激活码</param>
            <param name="product">进入产品类型</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.CreateUser(EIIP.Framework.User.LogonIdentity,System.String@)">
            <summary>
            创建指定的用户实例。成功返回该用户实例。(恢复登录使用)
            </summary>
            <param name="identity">登录标识</param>
            <param name="error">返回的错误信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.GetCurrentUsers(System.String)">
            <summary>
            获取指定库中所有的用户实例。
            </summary>
            <param name="repository">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.GetCurrentUsers(EIIP.Framework.AccountInfo)">
            <summary>
            获取指定帐套中中所有的用户实例。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.RemoveUser(EIIP.Framework.AccountInfo,System.String)">
            <summary>
            从库中移除指定登录名称的用户实例，成功返回该用户实例。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="loginName">用户实例登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.RemoveUser(EIIP.Framework.AccountInfo,System.Int32)">
            <summary>
            从库中移除指定登录ID的用户实例，成功返回该用户实例。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="userID">用户实例登录ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.RemoveUser(EIIP.Framework.AccountInfo,System.Collections.ArrayList)">
            <summary>
            从库中移除所有指定登录ID的用户实例。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="aryUserID">用户登录ID集</param>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.SignOutMe">
            <summary>
            注销当前登录用户
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.Shutdown">
            <summary>
            关闭所有用户库。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.ShutdownRepository(System.String)">
            <summary>
            关闭指定库。
            </summary>
            <param name="repository">要关闭的库名</param>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.ShutdownRepository(EIIP.Framework.AccountInfo)">
            <summary>
            关闭指定帐套中的库。
            </summary>
            <param name="dbInfo">登录帐套</param>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.Reset(System.String)">
            <summary>
            重置指定库。
            </summary>
            <param name="repositoryName">库名称</param>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.Reset(EIIP.Framework.AccountInfo)">
            <summary>
            重置指定登录帐套的用户库。
            </summary>
            <param name="dbInfo">登录帐套</param>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.CreateRepository(EIIP.Framework.AccountInfo)">
            <summary>
            创建指定帐套的库。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.AddRepository(EIIP.Framework.AccountInfo,System.Type)">
            <summary>
            附加指定名称的用户库。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="repositoryType">用户库类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.GetAllRepositories">
            <summary>
            获取当前定义的所有的库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserManager.RaisChangeAllRepositories(EIIP.Framework.User.UserRepositoryChangedEventArgs)">
            <summary>
            触发系统所有用户库的更改事件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:EIIP.Framework.User.UserManager.RepositorySelector">
            <summary>
            获取或设置库选择器。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserOperationImpl">
            <summary>
            用户业务接口。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserWrapperImpl">
            <summary>
            用户包装器实体。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserWrapperImpl.m_User">
            <summary>
            包装的用户。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserWrapperImpl.#ctor(EIIP.Framework.User.IUser)">
            <summary>
            以指定的用户实例化包装器实体。
            </summary>
            <param name="user">包装的用户</param>
        </member>
        <member name="P:EIIP.Framework.User.UserWrapperImpl.User">
            <summary>
            获取包装器的用户实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationImpl.#ctor(EIIP.Framework.User.IUser)">
            <summary>
            实例化用户业务。
            </summary>
            <param name="user">用户</param>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationImpl.Register">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserOperationManager">
            <summary>
            用户业务管理器。由客户端通过提供的静态方法（GetUser）获取用户实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserOperationManager.s_wrapperMap">
            <summary>
            用户实体对象的包装池。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.Exists(System.String,System.String)">
            <summary>
            确定给定登录名称的用户是否存在。存在就返回该用户，不存在则返回null。
            </summary>
            <param name="repositoryName">要查询的库</param>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.Exists(EIIP.Framework.AccountInfo,System.String)">
            <summary>
            确定并返回指定登录名称的用户，不存在则返回null。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <param name="loginName">用户登录名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.GetCurrentUsers(System.String)">
            <summary>
            获取指定库中所有的用户。
            </summary>
            <param name="repositoryName">要查询的库</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.GetCurrentUsers(EIIP.Framework.AccountInfo)">
            <summary>
            获取指定登录帐套库中所有的用户。
            </summary>
            <param name="dbInfo">登录帐套</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.Shutdown">
            <summary>
            关闭所有用户库。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.ShutdownRepository(System.String)">
            <summary>
            关闭指定名称用户库。
            </summary>
            <param name="repositoryName">要关闭的库名称</param>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.ShutdownRepository(EIIP.Framework.AccountInfo)">
            <summary>
            关闭指定名称用户库。
            </summary>
            <param name="dbInfo">要关闭的库对应的登录帐套</param>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.Reset(System.String)">
            <summary>
            重置指定库。
            </summary>
            <param name="repositoryName">库名称</param>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.Reset(EIIP.Framework.AccountInfo)">
            <summary>
            重置指定程序集中库配置。
            </summary>
            <param name="dbInfo">库对应的登录帐套</param>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.GetRepository(System.String)">
            <summary>
            获取指定名称的用户库实例。
            </summary>
            <param name="repositoryName">库名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.GetRepository(EIIP.Framework.AccountInfo)">
            <summary>
            获取指定登录帐套的用户库实例。
            </summary>
            <param name="dbInfo">库对应的登录帐套</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.CreateRepository(EIIP.Framework.AccountInfo)">
            <summary>
            创建指定名称的库。
            </summary>
            <param name="dbInfo">库对应的登录帐套</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.GetAllRepositories">
            <summary>
            获取所有库。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.WrapUser(EIIP.Framework.User.IUser)">
            <summary>
            获取指定用户的包装器。
            </summary>
            <param name="user">用户</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.WrapUsers(EIIP.Framework.User.IUser[])">
            <summary>
            获取指定用户实例的包装器。
            </summary>
            <param name="users">用户实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.UserOperationManager.WrapperCreationHandler(EIIP.Framework.User.IUser)">
            <summary>
            创建用户包装器对象。
            </summary>
            <param name="user">要包装的用户</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryChangedEventArgs">
            <summary>
            提供用户实例变更（创建或删除）事件的参数。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedEventArgs.m_User">
            <summary>
            用户实例。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedEventArgs.m_Data">
            <summary>
            事件数据。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedEventArgs.m_UserChangedType">
            <summary>
            用户信息变更类型。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryChangedEventArgs.#ctor(EIIP.Framework.User.UserSkeleton,EIIP.Framework.User.UserRepositoryChangedType)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="user">变更的用户实例</param>
            <param name="changedType">用户信息变更类型</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryChangedEventArgs.#ctor(EIIP.Framework.User.UserRepositoryChangedType,System.Int32)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="changedType">用户信息变更类型</param>
            <param name="data">事件关联数据</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryChangedEventArgs.#ctor(EIIP.Framework.User.UserSkeleton,EIIP.Framework.User.UserRepositoryChangedType,System.Int32)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="user">变更的用户实例</param>
            <param name="changedType">用户信息变更类型</param>
            <param name="data">事件关联数据</param>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryChangedEventArgs.User">
            <summary>
            获取变更的用户实例。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryChangedEventArgs.UserRepositoryChangedType">
            <summary>
            获取用户信息变更类型。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryChangedEventArgs.Data">
            <summary>
            获取事件关联数据。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryChangedType">
            <summary>
            指定用户信息变更的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.UserCreated">
            <summary>
            用户已创建
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.UserRestore">
            <summary>
            用户恢复重建
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.UserRemoved">
            <summary>
            用户已删除
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.Cleared">
            <summary>
            清除所有用户
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.UserUpdate">
            <summary>
            用户更新
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.ChangedRight">
            <summary>
            更改了权限
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.OnlyCloseTempUser">
            <summary>
            仅关闭临时用户实例。（系统处理）
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryChangedType.None">
            <summary>
            无变化，供默认调用
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryResetEventArgs">
            <summary>
            提供重置用户库事件的参数。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryResetEventArgs.m_UserRepositoryResetType">
            <summary>
            用户库重置类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryResetEventArgs.m_Data">
            <summary>
            事件数据
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryResetEventArgs.m_ObjID">
            <summary>
            事件关联对象ID
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryResetEventArgs.m_Item">
            <summary>
            事件关联对象
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryResetEventArgs.#ctor(EIIP.Framework.User.UserRepositoryResetType)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="resetType">用户库重置类型</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryResetEventArgs.#ctor(EIIP.Framework.User.UserRepositoryResetType,System.Int32)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="resetType">用户库重置类型</param>
            <param name="data">事件数据</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryResetEventArgs.#ctor(EIIP.Framework.User.UserRepositoryResetType,System.Int32,System.Int32)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="resetType">用户库重置类型</param>
            <param name="data">事件数据</param>
            <param name="objID">事件关联对象ID</param>
        </member>
        <member name="M:EIIP.Framework.User.UserRepositoryResetEventArgs.#ctor(EIIP.Framework.User.UserRepositoryResetType,System.Int32,System.Int32,System.Object)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="resetType">用户库重置类型</param>
            <param name="data">事件数据</param>
            <param name="objID">事件关联对象ID</param>
            <param name="item">事件关联对象</param>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryResetEventArgs.UserRepositoryResetType">
            <summary>
            获取用户库重置类型。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryResetEventArgs.Data">
            <summary>
            获取事件数据。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryResetEventArgs.ObjID">
            <summary>
            获取事件关联对象ID。
            </summary>
        </member>
        <member name="P:EIIP.Framework.User.UserRepositoryResetEventArgs.Item">
            <summary>
            获取事件关联对象。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserRepositoryResetType">
            <summary>
            指定用户库重置的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryResetType.None">
            <summary>
            无变化，供默认调用
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserRepositoryResetType.Overtime">
            <summary>
            用户超时
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserWorkingEventArgs">
            <summary>
            提供用户工作事件的参数。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserWorkingEventArgs.m_UserWorkingType">
            <summary>
            用户工作类型。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.UserWorkingEventArgs.#ctor(EIIP.Framework.User.UserWorkingType)">
            <summary>
            实例化用户创建事件参数。
            </summary>
            <param name="workingType">用户工作类型</param>
        </member>
        <member name="P:EIIP.Framework.User.UserWorkingEventArgs.UserWorkingType">
            <summary>
            获取用户工作类型。
            </summary>
        </member>
        <member name="T:EIIP.Framework.User.UserWorkingType">
            <summary>
            指定用户工作的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserWorkingType.Overtime">
            <summary>
            超时处理
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.UserWorkingType.None">
            <summary>
            无变化，供默认调用
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.IdentityInterceptor">
            <summary>
            身份认证拦截器。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.OperationIdentityAttribute">
            <summary>
            操作身份认证特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.OperationIdentityAttribute.CreateInvoker(System.ServiceModel.Dispatcher.IOperationInvoker)">
            <summary>
            创建包装了旧调用者的通用调用者。
            </summary>
            <param name="oldInvoker">旧调用者</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.IdentityBehaviorAttribute">
            <summary>
            身份认证行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityBehaviorAttribute.CreateOperationInterceptor">
            <summary>
            创建操作拦截器特性。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.LogonService">
            <summary>
            登录认证服务端。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogonService.GetPassport(System.String)">
            <summary>
            获取通行证。
            </summary>
            <param name="addInfo">附加信息，不使用则设置为null</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.ServiceAuthorizationManager">
            <summary>
            提供对服务操作的授权访问检查。
            </summary>
        </member>
        <member name="M:EIIP.Framework.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)">
            <summary>
            基于策略评估，检查给定操作上下文和可选消息的授权。如果授予了访问权，则为 true；否则为 false。
            </summary>
            <param name="operationContext">当前授权请求的操作上下文。</param>
            <returns>如果授予了访问权，则为 true；否则为 false。</returns>
        </member>
        <member name="M:EIIP.Framework.ServiceAuthorizationManager.GetIdentityFromOperationContext">
            <summary>
            获取身份信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.ServiceAuthorizationManager.SetClientInfo(EIIP.Framework.User.UserSkeleton)">
            <summary>
            设置WCF当前登录用户的客户端信息（userAgent、userHostAddress等）。
            </summary>
            <param name="user">当前登录用户</param>
        </member>
        <member name="T:EIIP.Framework.User.WrapperCreationHandler">
            <summary>
            用户包装器创建的处理事件。
            </summary>
            <param name="user">要包装的用户</param>
        </member>
        <member name="T:EIIP.Framework.User.WrapperMap">
            <summary>
            用户包装器池类。映射用户及其用户包装器。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.WrapperMap.m_repositories">
            <summary>
            以库为键的,包装器池为值的哈希表。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.WrapperMap.m_createWrapperHandler">
            <summary>
            处理用户包装器创建事件的方法。
            </summary>
        </member>
        <member name="F:EIIP.Framework.User.WrapperMap.m_shutdownHandler">
            <summary>
            处理用户库关闭事件的方法。
            </summary>
        </member>
        <member name="M:EIIP.Framework.User.WrapperMap.#ctor(EIIP.Framework.User.WrapperCreationHandler)">
            <summary>
            实例化用户包装器池类。
            </summary>
            <param name="createWrapperHandler">处理日志记录包装器创建事件的方法</param>
        </member>
        <member name="M:EIIP.Framework.User.WrapperMap.GetWrapper(EIIP.Framework.User.IUser)">
            <summary>
            获取指定用户的包装器。如用户为null，则返回null。
            </summary>
            <param name="user">用户</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.WrapperMap.CreateNewWrapperObject(EIIP.Framework.User.IUser)">
            <summary>
            创建指定用户的包装器对象。
            </summary>
            <param name="user">用户</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.User.WrapperMap.RepositoryShutdown(EIIP.Framework.User.IUserRepository)">
            <summary>
            当监视到库被关闭时，要调用的方法。
            </summary>
            <param name="repository">要关闭的库</param>
        </member>
        <member name="M:EIIP.Framework.User.WrapperMap.IUserRepository_Shutdown(System.Object,System.EventArgs)">
            <summary>
            当库关闭时的事件处理方法。
            </summary>
            <param name="sender">被关闭的 IUserRepository 库</param>
            <param name="e">事件参数</param>
        </member>
        <member name="P:EIIP.Framework.User.WrapperMap.Repositories">
            <summary>
            获取用户的库池。
            </summary>
        </member>
        <member name="T:EIIP.Utility">
            <summary>
            实用静态函数类。
            </summary>
            <summary>
            
            </summary>
            <summary>
            默认值
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.Utility.IDCARD_P">
            <summary>
            身份证省份代码。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt32(System.String)">
            <summary>
            转换整型数据。发生错误时，会抛出错误。
            </summary>
            <param name="value">文本值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToLong(System.String)">
            <summary>
            转换长整型数据。发生错误时，会抛出错误。
            </summary>
            <param name="value">文本值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt64(System.String)">
            <summary>
            转换长整型数据。发生错误时，会抛出错误。
            </summary>
            <param name="value">文本值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToDecimal(System.String)">
            <summary>
            转换小数数据。发生错误时，会抛出错误。
            </summary>
            <param name="value">文本值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsGuid(System.String)">
            <summary>
            测试指定字符串是否可转换为GUID类型数据。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToGuid(System.String)">
            <summary>
            转换为Guid。
            </summary>
            <param name="value">文本值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TryParse(System.String,System.Guid@)">
            <summary>
            将Guid的字符串表示形式转换为它的等效Guid。一个指示转换是否成功的返回值。
            </summary>
            <param name="s">包含要转换的字符串。</param>
            <param name="result">当此方法返回时，如果转换成功，则包含与 s 所包含的数字等效的Guid；如果转换失败，则包含Guid.Empty。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToString(System.Guid)">
            <summary>
            转换为不含“-”的长度为32的字符串。
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToGuidList(System.String,System.Char)">
            <summary>
            转换为Guid列表。
            </summary>
            <param name="strValue">多个值间以","分隔</param>
            <param name="separator">多个值间的分隔字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToGuidList(System.String)">
            <summary>
            转换为Guid列表。
            </summary>
            <param name="strValue">多个值间以","分隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToString(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            转换为以","分隔的字串。
            </summary>
            <param name="value">Guid 枚举</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToString(System.Collections.Generic.IEnumerable{System.Guid},System.String)">
            <summary>
            转换为以separator分隔的字串。
            </summary>
            <param name="value">Guid 枚举</param>
            <param name="separator">分隔字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToString``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
            转换为以separator分隔的字串。
            </summary>
            <param name="value">int 枚举</param>
            <param name="separator">分隔字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt32(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            转换整型数据。
            </summary>
            <param name="value">文本值</param>
            <param name="minValue">允许的最小值</param>
            <param name="maxValue">允许的最大值</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt64(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            转换长整型数据。
            </summary>
            <param name="value">文本值</param>
            <param name="minValue">允许的最小值</param>
            <param name="maxValue">允许的最大值</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToBoolean(System.String,System.Boolean)">
            <summary>
            转换布尔量数据。
            </summary>
            <param name="strValue">文本值,"True"或"False"</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToBoolean(System.Object)">
            <summary>
            从指定的表达式获取 Boolea 型结果。
            </summary>
            <param name="obj">任何有效的表达式。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt32Array(System.String)">
            <summary>
            转换为整型数组。
            </summary>
            <param name="strValue">多个值间以","分隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt32Array(System.String,System.Char)">
            <summary>
            转换为整型数组。
            </summary>
            <param name="strValue">多个值间以","分隔</param>
            <param name="separator">多个值间的分隔字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToUInt32Array(System.String,System.Boolean)">
            <summary>
            转换为正整型数组(不含负数与零)。
            </summary>
            <param name="value">多个值间以","分隔</param>
            <param name="single">设置一个值，该值指示返回的数组值是唯一的</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt64Array(System.String)">
            <summary>
            转换为长整型数组。
            </summary>
            <param name="strValue">多个值间以","分隔</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt64Array(System.String,System.Char)">
            <summary>
            转换为整型数组。
            </summary>
            <param name="strValue">多个值间以","分隔</param>
            <param name="separator">多个值间的分隔字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToUInt64Array(System.String,System.Boolean)">
            <summary>
            转换为正长整型数组(不含负数与零)。
            </summary>
            <param name="value">多个值间以","分隔</param>
            <param name="single">设置一个值，该值指示返回的数组值是唯一的</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToString(System.Int32[])">
            <summary>
            转换为以","分隔的字串。
            </summary>
            <param name="value">整型数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToString(System.Int64[])">
            <summary>
            转换为以","分隔的字串。
            </summary>
            <param name="value">长整型数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToByteArray(System.Int32)">
            <summary>
            将整型数据转换为字节数组。
            </summary>
            <remarks>
            使用 AND 位运算和移位运算 转换成数组
            
            也可以使用System.BitConverter类，下面是一些常用的方法：
            GetBytes() 以字节数组的形式返回其他数据类型的值。 
            ToBoolean() 返回由字节数组中指定位置的一个字节转换来的布尔值。 
            ToChar() 返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。 
            ToDouble() 返回由字节数组中指定位置的八个字节转换来的双精度浮点数。 
            ToInt16() 返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。 
            ToInt32() 返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。 
            ToInt64() 返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。 
            ToSingle() 返回由字节数组中指定位置的四个字节转换来的单精度浮点数。 
            ToString() 已重载。 返回由字节数组的元素转换来的 String。
            </remarks>
            <param name="value">要转换的整型数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ConvertToInt32(System.Byte[])">
            <summary>
            将整型数据转换为字节数组。
            </summary>
            <remarks>使用移位运算还原为整数</remarks>
            <param name="value">要转换的整型数据字节数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CreateRSAProvider">
            <summary>
            创建新的 RSACryptoServiceProvider 实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CreateRSAProvider(System.String)">
            <summary>
            创建指定 RSACryptoServiceProvider 实例。
            </summary>
            <param name="xmlString">用于重新构造 System.Security.Cryptography.RSA 对象的 XML 字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CreateCA_EncryptKey(System.Byte[]@,System.Byte[]@)">
            <summary>
            获取新电子证书的加密公钥和加密私钥
            </summary>
            <param name="keyPubEncrypted">加密公钥</param>
            <param name="keyPvtEncrypted">加密私钥</param>
        </member>
        <member name="M:EIIP.Utility.Certificate_DecryptKey(System.Byte[])">
            <summary>
            获取指定加密CA数据的密钥字串。
            </summary>
            <param name="encryptedKey">已加密密钥数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CreateSymmetricAlgorithm(EIIP.Framework.Security.Algorithm)">
            <summary>
            创建指定对称算法实例
            </summary>
            <param name="algorithm">对称算法标识</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CreateTicket">
            <summary>
            创建安全的随机票据字串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.FillRandomData(System.Byte[])">
            <summary>
            用加密型强随机值序列填充字节数组
            </summary>
            <param name="dataBytes"></param>
        </member>
        <member name="M:EIIP.Utility.GenerateBytes(System.Int32)">
            <summary>
            获取指定长度含有随机数据的字节数组
            </summary>
            <param name="byteLength"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.HashPasswordSHA1(System.String)">
            <summary>
            获取SHA1哈希密码。
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.HashPasswordMD5(System.String)">
            <summary>
            获取MD5哈希密码。
            </summary>
            <param name="text">待加密文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetSystemUploadPath(System.String,EIIP.Type.UploadFolder)">
            <summary>
            获取系统文件上传相对路径(相对于EIIP所在目录),以"/"结尾,如:"upload/[dbname]/system/f[xxx]/"
            </summary>
            <param name="dbName">所在数据库</param>
            <param name="folder">系统上传文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetSystemUploadPhysicalPath(System.String,EIIP.Type.UploadFolder)">
            <summary>
            获取系统文件上传绝对路径(并确认路径存在), 以"\"结尾。
            </summary>
            <param name="dbName">所在数据库</param>
            <param name="folder">系统上传文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetPhysicalPath(System.String)">
            <summary>
            获取指定相对路径文件夹的物理路径, 以"\"结尾。若不存在则创建这个文件夹。
            </summary>
            <param name="pathFromRoot">相对于系统所在目录的位置,如:"upload/2005/05/"</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.MapFilePath(System.String)">
            <summary>
            获取系统配置物理文件位置。(WebForm 与 WinForm 均适用)
            </summary>
            <param name="keyAppSettings">web.config中相关键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.MapPath(System.String)">
            <summary>
            返回指定虚拟路径相对应的物理文件路径。(WebForm 与 WinForm 均适用)
            </summary>
            <param name="path">虚拟路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SaveFile(System.String,System.Byte[],System.Boolean,System.Boolean)">
            <summary>
            将字节数组内容保存至指定的文件,成功返回保存文件名
            </summary>
            <param name="pathFile">文件物理路径</param>
            <param name="bytContent">字节数组内容</param>
            <param name="bCheckFileType">指定一个值，该值指示是否检查文件扩展名</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SaveCommonFile(System.String,System.Byte[],System.Boolean,System.String)">
            <summary>
            将字节数组内容保存为文件,成功返回文件的相对路径,如:"[path]\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"
            </summary>
            <param name="pathFromRoot">相对于根所在目录的位置,如:"upload/2007/01/"</param>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <param name="extension">保存文件的扩展名,如".eiip"</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SaveCommonFile(System.Byte[],System.Boolean,EIIP.Type.CommonFileType)">
            <summary>
            将字节数组内容保存为通用文件,成功返回文件的相对路径,如:"upload\2007\01\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"
            </summary>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <param name="fileType">设置以指定的通用类型文件保存</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SaveCommonFile(System.Byte[],System.Boolean)">
            <summary>
            将字节数组内容保存为通用文件,成功返回文件的相对路径,如:"upload\2007\01\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"
            </summary>
            <param name="bytContent">字节数组内容</param>
            <param name="bUpdate">指定一个值，该值指示在存在相同文件名时，是否进行替换操作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SaveStamper(System.Byte[])">
            <summary>
            将字节数组内容保存为电子印章文件,成功返回文件的相对路径,如:"upload\stamper\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiipx"
            </summary>
            <param name="bytContent">字节数组内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.DeleteCommonFile(System.String)">
            <summary>
            删除上传的通用文件
            </summary>
            <param name="vPathFile">文件的相对路径,如:"upload\2007\01\9b5fbee1-bd2f-4ca5-8258-8d5376baeb6f.eiip"</param>
        </member>
        <member name="M:EIIP.Utility.GetCommonUploadPath(System.String)">
            <summary>
            获取通用上传文件夹的相对于OA所在目录的位置, 以"/"结尾,如:"upload/2007/01/"
            </summary>
            <param name="folderName">所在文件夹名称,不指定则默认为日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetMimeType(System.String)">
            <summary>
            获取系统支持的文件MIME类型(需要注册表读取权限，否则始终返回"application/octet-stream")
            </summary>
            <param name="fileExtension">文件扩展名,如".doc"</param>
            <returns>MIME类型,如"text/plain"</returns>
        </member>
        <member name="M:EIIP.Utility.DeleteFolder(System.String)">
            <summary>
            安全删除文件夹及其文件(不包括子文件夹)
            </summary>
            <param name="directory">路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TranslateToClient(System.String)">
            <summary>
            为客户端脚本转义。
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ToolTipEncode(System.String)">
            <summary>
            获取编码后的Tip
            </summary>
            <param name="tip">提示信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.HtmlAttributeEncode(System.String)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="s">要编码的字符串。</param>
        </member>
        <member name="M:EIIP.Utility.HtmlAttributeEncode(System.String,System.Text.StringBuilder)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串，并将已编码的字符串发送给 StringBuilder 缓存区。
            </summary>
            <param name="s">要编码的字符串。</param>
            <param name="builder">缓存区</param>
        </member>
        <member name="M:EIIP.Utility.IsValidPassword(System.String)">
            <summary>
            检查是否合法(安全)的密码。
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsPhone(System.String)">
            <summary>
            检查是否手机或电话(带0的11位)号码。如要仅测试手机号码，请使用 IsMobile() 方法测试。
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsMobile(System.String)">
            <summary>
            检查是否移动手机号码
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsDate(System.String)">
            <summary>
            检查是否日期类型
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsDateTime(System.String)">
            <summary>
            检查是否日期类型
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsTime(System.String)">
            <summary>
            检查是否时间类型
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsNumerical(System.String)">
            <summary>
            检查是否数值
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsInteger(System.String)">
            <summary>
            检查是否整数值
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsUInteger(System.String)">
            <summary>
            检查是否非负整数值
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsEmail(System.String)">
            <summary>
            检查是否电子邮件
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsHttpUrl(System.String)">
            <summary>
            检查是否URL，格式如 http://....
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsIPAddress(System.String)">
            <summary>
            检查是否IP
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsDoubleByteWord(System.String)">
            <summary>
            检查是否含有双字节字。
            </summary>
            <param name="test">测试字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsValidFileType(System.String)">
            <summary>
            是否合法的文件类型
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsValidFileName(System.String)">
            <summary>
            检查文件名字符是否都是合法的。
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsValidVariableName(System.String)">
            <summary>
            判断指定的变量标签名称是否合法。
            </summary>
            <param name="name">包含变量标签名称的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsValidNamespace(System.String)">
            <summary>
            判断指定的命名空间名称是否合法。
            </summary>
            <param name="nameSpace">包含命名空间名称的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsPictureFile(System.String)">
            <summary>
            是否图片文件。
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsPictureExtension(System.String)">
            <summary>
            是否图片文件扩展名。
            </summary>
            <param name="extension">文件扩展名。如".gif"</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsExecutableASPFileName(System.String)">
            <summary>
            检查文件名是否是ASP.NET可执行文件。
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsIDCard(System.String,System.DateTime@)">
            <summary>
            验证身份证号码
            </summary>
            <param name="idCard">身份证号</param>
            <param name="birthday">提取身份证中的生日数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CheckIDCard18(System.String,System.DateTime@)">
            <summary>
            验证18位身份证号。
            </summary>
            <param name="idCard">身份证号</param>
            <param name="birthday">提取身份证中的生日数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CheckIDCard15(System.String,System.DateTime@)">
            <summary>
            验证15位身份证号
            </summary>
            <param name="idCard">身份证号</param>
            <param name="birthday">提取身份证中的生日数据</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsOdd(System.Int32)">
            <summary>
            测试是否奇数。
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsEven(System.Int32)">
            <summary>
            测试是否偶数。
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IsHexDigit(System.Char)">
            <summary>
            测试是否是十六进制数据字符。
            </summary>
            <param name="c">要测试的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetValidSMSPhone(System.String,System.Int32@)">
            <summary>
            获取合法的短信接收号码，以","分隔多个号码。
            </summary>
            <param name="phone">短信接收号码，以","分隔多个号码</param>
            <param name="count">返回合法的号码个数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ParsePhones(System.String,System.Boolean,System.Boolean)">
            <summary>
            提取合法的电话号码(至少8位)。
            </summary>
            <param name="phones">要处理的电话号码，多个号码以逗号分隔</param>
            <param name="onlyMobile">设置是否只提取手机号码</param>
            <param name="trimSpecialChars">设置是否去除除数字外的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SetOSAndBrowserVer(EIIP.Type.ClientInfo)">
            <summary>
            设置客户端系统平台与浏览器名称。
            </summary>
            <param name="ci">客户端信息实例</param>
        </member>
        <member name="M:EIIP.Utility.GetBrowser_Mobile(System.String)">
            <summary>
            获取客户端（浏览器）名称。用于移动设备。
            </summary>
            <param name="userAgent">客户端（浏览器）的原始用户代理信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetBrowserVer(System.Web.HttpBrowserCapabilities,System.String)">
            <summary>
            获取客户端浏览器名称。
            </summary>
            <param name="bc">在客户端运行的浏览器功能的信息</param>
            <param name="userAgent">客户端浏览器的原始用户代理信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetSystemVer(System.Web.HttpBrowserCapabilities,System.String)">
            <summary>
            获取客户端系统平台名称。
            </summary>
            <param name="bc">在客户端运行的浏览器功能的信息</param>
            <param name="userAgent">客户端浏览器的原始用户代理信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CompareByteArray(System.Byte[],System.Byte[])">
            <summary>
            比较字节数组，相等返回true。
            </summary>
            <param name="array1">源</param>
            <param name="array2">目标</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.SaveThumbnailImage(System.Drawing.Image,System.Int32,System.Int32,System.String,System.String,System.Drawing.Font)">
            <summary>
            保存缩略图
            </summary>
            <param name="img">图像对象</param>
            <param name="thumbWidth">缩略图的宽度（以像素为单位）。</param>
            <param name="thumbHeight">缩略图的高度（以像素为单位）。</param>
            <param name="fileName">保存文件名</param>
            <param name="text">要加在缩略图上的文本信息</param>
            <param name="font">文本字体对象。</param>
        </member>
        <member name="M:EIIP.Utility.SaveThumbnailImage(System.Drawing.Image,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            保存缩略图
            </summary>
            <param name="img">图像对象</param>
            <param name="thumbWidth">缩略图的宽度（以像素为单位）。</param>
            <param name="thumbHeight">缩略图的高度（以像素为单位）。</param>
            <param name="fileName">保存文件名</param>
            <param name="text">要加在缩略图上的文本信息</param>
        </member>
        <member name="M:EIIP.Utility.SaveThumbnailImage(System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            保存缩略图
            </summary>
            <param name="imgContent">图像字节数组</param>
            <param name="thumbWidth">缩略图的宽度（以像素为单位）。</param>
            <param name="thumbHeight">缩略图的高度（以像素为单位）。</param>
            <param name="fileName">保存文件名</param>
            <param name="text">要加在缩略图上的文本信息</param>
        </member>
        <member name="M:EIIP.Utility.SaveThumbnailStamper(System.Byte[],System.String)">
            <summary>
            保存印章缩略图
            </summary>
            <param name="imgContent">图像字节数组</param>
            <param name="fileName">保存文件名</param>
        </member>
        <member name="M:EIIP.Utility.RunCMD(System.String)">
            <summary>
            执行CMD命令。返回响应内容。
            </summary>
            <param name="command">DOS命令行</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IEVisit(System.String)">
            <summary>
            在IE浏览器中访问。
            </summary>
            <param name="url">网址</param>
        </member>
        <member name="M:EIIP.Utility.ObjectToBytes(System.Object)">
            <summary>
            将一个object对象序列化，返回一个byte[]
            </summary>
            <param name="value">能序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.BytesToObject(System.Byte[])">
            <summary>
            将一个序列化后的byte[]数组还原
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ParseURL(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            分析 url 字符串中的参数信息
            </summary>
            <param name="url">输入的 URL</param>
            <param name="baseUrl">输出 URL 的基础部分</param>
            <param name="nvc">输出分析后得到的(参数名,参数值) 的集合</param>
        </member>
        <member name="M:EIIP.Utility.ReDim(System.Array,System.Int32)">
            <summary>
            更改一维数组的大小。
            </summary>
            <param name="array">一维数组</param>
            <param name="newLength">一维数组的新长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetConnStr(System.String,System.String)">
            <summary>
            获取数据库连接字串(信任连接)
            </summary>
            <param name="sqlServer">SQL Server数据库地址</param>
            <param name="database">数据库名</param>
        </member>
        <member name="M:EIIP.Utility.GetConnStr(System.String,System.String,System.String,System.String)">
            <summary>
            获取数据库连接字串
            </summary>
            <param name="sqlServer">SQL Server数据库地址</param>
            <param name="database">数据库名</param>
            <param name="userID">帐户</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetConnStr(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            获取数据库连接字串
            </summary>
            <param name="security">指示是否采用Windows集成验证</param>
            <param name="sqlServer">SQL Server数据库地址</param>
            <param name="database">数据库名</param>
            <param name="userID">帐户</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetConnStr(System.Boolean,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            获取数据库连接字串
            </summary>
            <param name="security">指示是否采用Windows集成验证</param>
            <param name="sqlServer">SQL Server数据库地址</param>
            <param name="database">数据库名</param>
            <param name="userID">帐户</param>
            <param name="password">密码</param>
            <param name="connectTimeout">连接超时时间。一般设为60</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TestDBConnect(System.String)">
            <summary>
            测试连接字串正确性
            </summary>
            <param name="connStr">连接字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            将指定异常发生时调用堆栈上的帧的字符串表示形式写入文本流(缓冲)。
            </summary>
            <param name="throwable">抛出的异常</param>
            <param name="stream">文本流</param>
        </member>
        <member name="M:EIIP.Utility.Deserialize(System.IO.BinaryReader)">
            <summary>
            将指定的流反序列化为对象图形。
            </summary>
            <param name="binaryReader">要从其中反序列化对象图形的流。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Serialize(System.IO.Stream,System.Object)">
            <summary>
            将对象或具有指定顶级（根）的对象图形序列化为给定流。
            </summary>
            <param name="stream">图形要序列化为的流。</param>
            <param name="objectToSend">位于要序列化图形的根位置的对象。</param>
        </member>
        <member name="M:EIIP.Utility.Serialize(System.IO.BinaryWriter,System.Object)">
            <summary>
            将对象或具有指定顶级（根）的对象图形序列化为给定流。
            </summary>
            <param name="binaryWriter">图形要序列化为的流。</param>
            <param name="objectToSend">位于要序列化图形的根位置的对象。</param>
        </member>
        <member name="M:EIIP.Utility.ToSByteArray(System.Byte[])">
            <summary>
            转换为无符号字节数组。
            </summary>
            <param name="byteArray">要转换的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ToByteArray(System.SByte[])">
            <summary>
            转换为带符号字节数组。
            </summary>
            <param name="sbyteArray">要转换的无符号字节数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ToByteArray(System.String)">
            <summary>
            转换字符串为字节数组。
            </summary>
            <param name="sourceString">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ToCharArray(System.SByte[])">
            <summary>
            转换无符号字节数组为字符数组。
            </summary>
            <param name="sByteArray">要转换的无符号字节数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ToCharArray(System.Byte[])">
            <summary>
            转换字节数组为字符数组。
            </summary>
            <param name="byteArray">要转换的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.PutElement(System.Collections.Hashtable,System.Object,System.Object)">
            <summary>
            设置新的键值，并返回旧的键值。
            </summary>
            <param name="hashTable"></param>
            <param name="key">键名</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.CreateNewInstance(System.Type)">
            <summary>
            通过调用无参构造器创建指定类型的新实例。
            </summary>
            <param name="classType">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetValue(System.String,System.String)">
            <summary>
            获取Web.config配置值
            </summary>
            <param name="key">键名</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.WriteSQLCondition(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            输出SQL条件。建议使用 Helper.SqlHelper.WriteSQLCondition 代替。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
        </member>
        <member name="M:EIIP.Utility.WriteSQLCondition(System.Text.StringBuilder,System.String,System.String,System.Boolean,System.String)">
            <summary>
            输出SQL条件。建议使用 Helper.SqlHelper.WriteSQLCondition 代替。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Utility.WriteSQLConditionPY(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
            <summary>
            输出SQL条件(支持拼音查询)。建议使用 Helper.SqlHelper.WriteSQLCondition 代替。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
        </member>
        <member name="M:EIIP.Utility.WriteSQLConditionPY(System.Text.StringBuilder,System.String,System.String,System.Boolean,System.String)">
            <summary>
            输出SQL条件(支持拼音查询)。建议使用 Helper.SqlHelper.WriteSQLCondition 代替。
            </summary>
            <param name="writer">输出流</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
            <param name="prefix">条件前缀字串</param>
        </member>
        <member name="M:EIIP.Utility.WriteSQLCondition(System.Text.StringBuilder,System.Boolean,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            输出SQL条件。建议使用 Helper.SqlHelper.WriteSQLCondition 代替。
            </summary>
            <param name="writer">输出流</param>
            <param name="supportPinyin">设置一个值,该值指示是否支持拼音查询</param>
            <param name="fildName">数据库字段名</param>
            <param name="value">数据字串</param>
            <param name="isExact">设置是否精确查找</param>
            <param name="prefix">条件前缀字串</param>
            <param name="postfix">条件后缀字串</param>
        </member>
        <member name="F:EIIP.Utility.aryMonthName">
            <summary>
            月份名称
            </summary>
        </member>
        <member name="M:EIIP.Utility.WeekdayName(System.DateTime)">
            <summary>
            获取日期为一周的星期几
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ChineseDate(System.DateTime)">
            <summary>
            获取完整中文日期（含星期）
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.MonthName(System.Int32)">
            <summary>
            获取指定月份名称。
            </summary>
            <param name="month">基于1的月份数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.MonthName(System.DateTime)">
            <summary>
            获取指定日期的月份
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.WeekdaysIn(System.DayOfWeek,System.DateTime,System.DateTime)">
            <summary>
            获取任意时段内的 指定星期 的个数(周日是当周的最后一天)
            </summary>
            <param name="weekDay">星期</param>
            <param name="startDate">起始日期</param>
            <param name="endDate">结束日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.GetWeekOfYear(System.DateTime)">
            <summary>
            获取指定日期的周数
            </summary>
            <param name="date">日期</param>
            <returns>返回周数</returns>
        </member>
        <member name="M:EIIP.Utility.GetWeekRange(System.Int32,System.Int32)">
            <summary>
            获取指定周的日期范围
            </summary>
            <param name="year">指定年份</param>
            <param name="week">指定周</param>
            <returns>一个包含起始日期和结束日期的DateTime数组</returns>
        </member>
        <member name="M:EIIP.Utility.GetWeekRange(System.DateTime)">
            <summary>
            获取指定日期所在周的日期范围
            </summary>
            <param name="date">日期</param>
            <returns>一个包含起始日期和结束日期的DateTime数组</returns>
        </member>
        <member name="M:EIIP.Utility.GetFirstDayInWeek(System.DateTime)">
            <summary>
            获取指定日期所在周的第一天(基准: 星期一为一周的第一天)
            </summary>
        </member>
        <member name="M:EIIP.Utility.Days(System.DateTime)">
            <summary>
            获取基于基准时间的整天数。
            </summary>
            <param name="target">要计算的时间</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Utility.IDCard">
            <summary>
            公民身份证号码类
            </summary> 
        </member>
        <member name="M:EIIP.Utility.IDCard.GetVerifyChar(System.String)">
            <summary>
            获取新身份证前位字符的校验码。
            </summary>
            <param name="id">17位字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.IDCard.Upgrade(System.String)">
            <summary>
            公民身份号码 15 位升级为 18 位
            </summary>
            <param name="id">15 位公民身份号码</param>
            <returns>18 位公民身份号码</returns>
        </member>
        <member name="M:EIIP.Utility.IDCard.IsValid(System.String)">
            <summary>
            验证 18 位公民身份号码是否有效。
            </summary>
            <param name="id">18 位公民身份号码</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Utility.URLConnectionSupport">
            <summary>
            URL连接支持
            </summary>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.SetRequestProperty(System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            设置请求属性。
            </summary>
            <param name="connection"></param>
            <param name="key"></param>
            <param name="keyValue"></param>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetRequestProperty(System.Net.HttpWebRequest,System.String)">
            <summary>
            获取请求属性。
            </summary>
            <param name="connection"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetDefaultRequestProperty(System.String)">
            <summary>
            获取缺省请求属性。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetContentEncoding(System.Net.HttpWebRequest)">
            <summary>
            获取Content-Encoding头部属性值。不存在返回null。
            </summary>
            <param name="request">HTTP请求实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetSendingDate(System.Net.HttpWebRequest)">
            <summary>
            获取HttpRequest的发送日期。
            </summary>
            <param name="request">HTTP请求实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetHeaderFieldKey(System.Net.HttpWebRequest,System.Int32)">
            <summary>
            获取指定索引的请求头部字段值。
            </summary>
            <param name="request">HTTP请求实例</param>
            <param name="indexField">头部字段索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetLastModifiedHeaderField(System.Net.HttpWebRequest)">
            <summary>
            获取Last-Modified头部属性值。
            </summary>
            <param name="request">HTTP请求实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.URLConnectionSupport.GetHeaderFieldDate(System.Net.HttpWebRequest,System.String,System.Int64)">
            <summary>
            获取指定字段属性作为日期时间的毫秒值。
            </summary>
            <param name="request">HTTP请求实例</param>
            <param name="fieldName">字段名</param>
            <param name="defaultValue">缺省值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Utility.Tokenizer">
            <summary>
            凭证类
            </summary>
        </member>
        <member name="F:EIIP.Utility.Tokenizer.delimiters">
            <summary>
            凭证使用的分隔符
            </summary>
        </member>
        <member name="M:EIIP.Utility.Tokenizer.#ctor(System.String)">
            <summary>
            实例化凭证。
            </summary>
            <param name="source">凭证源字串</param>
        </member>
        <member name="M:EIIP.Utility.Tokenizer.#ctor(System.String,System.String)">
            <summary>
            实例化凭证。
            </summary>
            <param name="source">凭证源字串</param>
            <param name="delimiters">凭证使用的分隔符</param>
        </member>
        <member name="M:EIIP.Utility.Tokenizer.HasMoreTokens">
            <summary>
            获取一个值，该值指示是否含有凭证。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Tokenizer.NextToken">
            <summary>
            取回首个凭证，并将该凭证从凭证池中移除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Tokenizer.NextToken(System.String)">
            <summary>
            取回首个凭证，并将该凭证从凭证池中移除。
            </summary>
            <param name="delimiters">凭证使用的分隔符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Tokenizer.RemoveEmptyStrings">
            <summary>
            移除空字串元素。
            </summary>
        </member>
        <member name="P:EIIP.Utility.Tokenizer.Count">
            <summary>
            获取凭证个数。
            </summary>
        </member>
        <member name="T:EIIP.Utility.ThreadClass">
            <summary>
            线程类。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.#ctor">
            <summary>
            实例化线程类。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.#ctor(System.Threading.ThreadStart)">
            <summary>
            实例化线程类。
            </summary>
            <param name="p1">线程启动的方法</param>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Run">
            <summary>
            运行线程。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Start">
            <summary>
            启动线程。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Join">
            <summary>
            阻塞调用线程，直到某个线程终止时为止。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Join(System.Int64)">
            <summary>
            阻塞调用线程，直到某个线程终止或者经过了指定的时间为止。
            </summary>
            <param name="p1">等待线程终止的毫秒数。</param>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Join(System.Int64,System.Int32)">
            <summary>
            阻塞调用线程，直到某个线程终止或者经过了指定的时间为止。
            </summary>
            <param name="p1">等待线程终止的毫秒数。</param>
            <param name="p2">等待线程终止的纳秒数。</param>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Abort">
            <summary>
            在调用此方法的线程上引发 System.Threading.ThreadAbortException，以开始终止此线程的过程。
            调用此方法通常会终止线程。
            </summary>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Abort(System.Object)">
            <summary>
            终止线程。
            </summary>
            <param name="stateInfo">一个对象，它包含应用程序特定的信息（如状态），该信息可供正被中止的线程使用。</param>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.ToString">
            <summary>
            获取当前实例的字符串表示信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.ThreadClass.Current">
            <summary>
            获取当前线程。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Utility.ThreadClass.Instance">
            <summary>
            获取或设置线程实例。
            </summary>
        </member>
        <member name="P:EIIP.Utility.ThreadClass.Name">
            <summary>
            获取或设置线程的名称。
            </summary>
        </member>
        <member name="P:EIIP.Utility.ThreadClass.Priority">
            <summary>
            获取或设置一个值，该值指示线程的调度优先级。
            </summary>
        </member>
        <member name="P:EIIP.Utility.ThreadClass.IsAlive">
            <summary>
            获取一个值，该值指示当前线程的执行状态。
            </summary>
        </member>
        <member name="P:EIIP.Utility.ThreadClass.IsBackground">
            <summary>
            获取或设置一个值，该值指示某个线程是否为后台线程。
            </summary>
        </member>
        <member name="T:EIIP.Utility.TransactionManager">
            <summary>
            事务管理器。
            </summary>
        </member>
        <member name="F:EIIP.Utility.TransactionManager.manager">
            <summary>
            连接池。
            </summary>
        </member>
        <member name="T:EIIP.Utility.TransactionManager.ConnectionHashTable">
            <summary>
            连接池类。
            </summary>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.CreateStatement(System.Data.OleDb.OleDbConnection)">
            <summary>
            创建命令对象。
            </summary>
            <param name="connection">数据源上的连接</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.Commit(System.Data.OleDb.OleDbConnection)">
            <summary>
            提交事务。
            </summary>
            <param name="connection">数据源上的连接</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.RollBack(System.Data.OleDb.OleDbConnection)">
            <summary>
            回滚事务。
            </summary>
            <param name="connection">数据源上的连接</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.SetAutoCommit(System.Data.OleDb.OleDbConnection,System.Boolean)">
            <summary>
            设置自动提交事务属性。
            </summary>
            <param name="connection">数据源上的连接</param>
            <param name="autoCommit">设置一个值，该值指示事务是否为自动提交。</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.PrepareStatement(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            准备事务状态。
            </summary>
            <param name="connection">数据源上的连接</param>
            <param name="sql">要对数据源执行的 SQL 语句或存储过程。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.PrepareCall(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            准备事务状态。
            </summary>
            <param name="connection">数据源上的连接</param>
            <param name="sql">要对数据源执行的 SQL 语句或存储过程。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.SetTransactionIsolation(System.Data.OleDb.OleDbConnection,System.Int32)">
            <summary>
            设置指定连接的事务锁定行为级别
            </summary>
            <param name="connection">数据源上的连接</param>
            <param name="level">指定连接的事务锁定行为级别</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.GetTransactionIsolation(System.Data.OleDb.OleDbConnection)">
            <summary>
            获取指定连接的事务锁定行为级别
            </summary>
            <param name="connection">数据源上的连接</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.GetAutoCommit(System.Data.OleDb.OleDbConnection)">
            <summary>
            获取一个值，该值指示该值指示事务是否为自动提交
            </summary>
            <param name="connection">数据源上的连接</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.SetValue(System.Data.OleDb.OleDbCommand,System.Int32,System.Object)">
            <summary>
            设置命令参数数据值。
            </summary>
            <param name="command">命令对象</param>
            <param name="parameterIndex">参数索引</param>
            <param name="parameter">参数数据值</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.SetNull(System.Data.OleDb.OleDbCommand,System.Int32,System.Int32)">
            <summary>
            设置命令参数空数据值。
            </summary>
            <param name="command">命令对象</param>
            <param name="parameterIndex">参数索引</param>
            <param name="sqlType">参数数据类型</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.SetObject(System.Data.OleDb.OleDbCommand,System.Int32,System.Object,System.Int32)">
            <summary>
            设置命令参数数据值。
            </summary>
            <param name="command">命令对象</param>
            <param name="parameterIndex">参数索引</param>
            <param name="parameter">参数数据值</param>
            <param name="targetSqlType">参数数据类型</param>
        </member>
        <member name="M:EIIP.Utility.TransactionManager.ConnectionHashTable.SetObject(System.Data.OleDb.OleDbCommand,System.Int32,System.Object)">
            <summary>
            设置命令参数数据值。
            </summary>
            <param name="command">命令对象</param>
            <param name="parameterIndex">参数索引</param>
            <param name="parameter">参数数据值</param>
        </member>
        <member name="T:EIIP.Utility.TransactionManager.ConnectionHashTable.ConnectionProperties">
            <summary>
            连接属性类。
            </summary>
        </member>
        <member name="F:EIIP.Utility.TransactionManager.ConnectionHashTable.ConnectionProperties.AutoCommit">
            <summary>
            指示是否自动提交。
            </summary>
        </member>
        <member name="F:EIIP.Utility.TransactionManager.ConnectionHashTable.ConnectionProperties.Transaction">
            <summary>
            要在数据源上执行的事务。
            </summary>
        </member>
        <member name="F:EIIP.Utility.TransactionManager.ConnectionHashTable.ConnectionProperties.TransactionLevel">
            <summary>
            连接的事务锁定行为。
            </summary>
        </member>
        <member name="T:EIIP.Utility.DT">
            <summary>
            日期时间操作。
            </summary>
        </member>
        <member name="M:EIIP.Utility.DT.ChineseDateAndWeek(System.String,System.DateTime)">
            <summary>
            获取完整中文日期（含星期）
            </summary>
            <param name="format">格式字符串。</param>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.DT.ChineseDateTimeWeek(System.DateTime)">
            <summary>
            获取完整中文日期（日期 小时:分钟 星期）
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.DT.ChineseDateWeek(System.DateTime)">
            <summary>
            获取完整中文日期（日期 星期）
            </summary>
            <param name="date">日期</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Utility.Default">
            <summary>
            默认值的类
            </summary>
        </member>
        <member name="M:EIIP.Utility.Default.Int32(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取指定值的合法整型值。
            </summary>
            <param name="input">输入值</param>
            <param name="minValue">可以取的最小值</param>
            <param name="maxValue">可以取的最大值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.Int32(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取指定值的合法整型值。
            </summary>
            <param name="input">输入值</param>
            <param name="minValue">可以取的最小值</param>
            <param name="maxValue">可以取的最大值</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.Int32(System.String,System.Int32)">
            <summary>
            获取指定值的合法整型值。
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.Int64(System.String,System.Int64)">
            <summary>
            获取指定值的合法长整型值。
            </summary>
            <param name="input">输入值</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.Boolean(System.String,System.Boolean)">
            <summary>
            转换布尔量数据。
            </summary>
            <param name="input">文本值,"True"或"False"</param>
            <param name="defaultValue">转换失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.ParseDecimal(System.String,System.Decimal)">
            <summary>
            解析 Decimal 类型的数值。
            </summary>
            <param name="input">要解析的字串</param>
            <param name="defaultValue">解析失败应返回的缺省值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.ParseSingle(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="style">
            System.Globalization.NumberStyles 值的按位组合，指示 s 允许使用的格式。
            一个用来指定的典型值为 System.Globalization.NumberStyles.Float
            与 System.Globalization.NumberStyles.AllowThousands 的组合。
            </param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 s 的区域性特定的格式设置信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.ParseSingle(System.String,System.IFormatProvider)">
            <summary>
            将具有指定样式格式的数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="provider">一个 System.IFormatProvider 对象，提供有关 s 的区域性特定的格式设置信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.ParseSingle(System.String,System.Globalization.NumberStyles)">
            <summary>
            将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <param name="style">
            System.Globalization.NumberStyles 值的按位组合，指示 s 允许使用的格式。
            一个用来指定的典型值为 System.Globalization.NumberStyles.Float
            与 System.Globalization.NumberStyles.AllowThousands 的组合。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Default.ParseSingle(System.String)">
            <summary>
            将数字的字符串表示形式转换为它的等效单精度浮点数字。
            </summary>
            <param name="s">表示要转换的数字的字符串。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Utility.Default.InstanceName">
            <summary>
            获取EIIP默认实例名称。
            </summary>
        </member>
        <member name="T:EIIP.Utility.Log">
            <summary>
            事件日志
            </summary>
        </member>
        <member name="M:EIIP.Utility.Log.Writer(System.String,System.Exception,System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
            把异常写入系统日志。
            </summary>
            <param name="name">事件名称</param>
            <param name="exp">要写入的异常</param>
            <param name="type">事件级别</param>
            <param name="message">事件消息</param>
        </member>
        <member name="M:EIIP.Utility.Log.Writer(System.String,System.String,System.Exception,System.Diagnostics.EventLogEntryType,System.String)">
            <summary>
            把异常写入系统日志。
            </summary>
            <param name="logSource">在写入事件日志时要注册和使用的源名称。</param>
            <param name="name">事件名称</param>
            <param name="exp">要写入的异常</param>
            <param name="type">事件级别</param>
            <param name="message">附加信息</param>
        </member>
        <member name="M:EIIP.Utility.Log.Writer(System.Exception)">
            <summary>
            把异常写入时间日志
            </summary>
            <param name="exp">要写入的异常</param>
        </member>
        <member name="T:EIIP.Utility.SC">
            <summary>
            智能客户端专用工具类。
            </summary>
            <remarks>
            部分需要 .NET Framework 3.5 的支持，定义为 DOTNET_FRAMEWORK_3_5 标识。
            </remarks>
        </member>
        <member name="F:EIIP.Utility.SC.SMS_CMD_MAX_LENGTH">
            <summary>
            短信指令最大长度。
            </summary>
        </member>
        <member name="M:EIIP.Utility.SC.ParseSMSCMD(System.String)">
            <summary>
            从指定短信内容中解析出指令。
            </summary>
            <param name="content">短信内容</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Utility.Web">
            <summary>
            WEB 专用工具类
            </summary>
        </member>
        <member name="F:EIIP.Utility.Web.HTML_Extension">
            <summary>
            静态页面扩展名。
            </summary>
        </member>
        <member name="M:EIIP.Utility.Web.GetNewestCookie(System.Web.HttpCookieCollection,System.String)">
            <summary>
            获取最新的Cookie。适用于启用二级域名时，存在多个同名Cookie的情况。
            </summary>
            <param name="cookies"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetNewestCookie(System.Web.HttpCookieCollection,System.String,System.Boolean)">
            <summary>
            获取最新的Cookie。适用于启用二级域名时，存在多个同名Cookie的情况。
            </summary>
            <param name="cookies"></param>
            <param name="name"></param>
            <param name="removeW3DomainWhenDuplicate">当出现重复键时，移除www域名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.RemoveCookieW3DomainWhenDuplicate(System.String)">
            <summary>
            移除指定名称的 Cookie。
            </summary>
            <param name="cookieName">要移除的 Cookie 名称</param>
        </member>
        <member name="M:EIIP.Utility.Web.GetRootDomain(System.String)">
            <summary>
            获取主域名。如 eiip.net
            </summary>
            <param name="host">URL中的主机部分</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.InSameDomain(System.String,System.String)">
            <summary>
            测试是否是在同一主域内。
            </summary>
            <param name="host1">URL中的主机部分</param>
            <param name="host2">URL中的主机部分</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.ResolveUrl(System.String)">
            <summary>
            解析为请求的 URL 地址。
            </summary>
            <param name="url">可能含有 ~ 的URL（~必须为首个字符）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.ResolveLocation(System.String)">
            <summary>
            获取相对路径对应的绝对路径。
            </summary>
            <param name="location">可能含有 ~ 的相对路径（~不一定为首个字符）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.RewriteUrl(System.Web.HttpContext,System.String)">
            <summary>
            重写 URL 地址。
            </summary>
            <param name="context">上下文</param>
            <param name="sendToUrl">要重写的地址</param>
        </member>
        <member name="M:EIIP.Utility.Web.RewriteUrl(System.Web.HttpContext,System.String,System.String@,System.String@)">
            <summary>
            重写 URL 地址。
            </summary>
            <param name="context">上下文</param>
            <param name="sendToUrl">要重写的地址</param>
            <param name="sendToUrlWithoutQString">返回不含查询字串的 sendToUrl</param>
            <param name="filePath">返回请求页面的物理文件路径</param>
        </member>
        <member name="M:EIIP.Utility.Web.RemoveCookie(System.String)">
            <summary>
            移除指定名称的 Cookie。
            </summary>
            <param name="cookieName">要移除的 Cookie 名称</param>
        </member>
        <member name="M:EIIP.Utility.Web.RemoveCookieWithDomain(System.String)">
            <summary>
            移除指定名称的 Cookie。
            </summary>
            <param name="cookieName">要移除的 Cookie 名称</param>
        </member>
        <member name="M:EIIP.Utility.Web.RenderControlAsString(System.Web.UI.Control)">
            <summary>
            将指定控件呈现为字符串。
            </summary>
            <param name="control">Web 控件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.IsDangerousUrl(System.String)">
            <summary>
            测试指定字符串是否是危险的URL格式地址。注意这里空串是安全的URL地址。
            </summary>
            <param name="s">要测试的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetReturnUrl">
            <summary>
            获取 GET 或 POST 方式提交的 ReturnUrl 返回地址。允许跨域转向。
            缺省页为 FormsAuthentication.DefaultUrl 。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetReturnUrl(System.String)">
            <summary>
            获取 GET 或 POST 方式提交的 ReturnUrl 返回地址。允许跨域转向。
            </summary>
            <param name="defaultUrlIfAbsent">
            当 GET 或 POST 方式提交的数据中不存在 ReturnUrl 时，取代其值的默认转向页面。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetReturnUrl(System.Boolean,System.String)">
            <summary>
            获取 GET 或 POST 方式提交的 ReturnUrl 返回地址。
            </summary>
            <param name="enableCrossAppRedirects">
            设置一个值，该值指示是否允许跨域转向。若设为false，则当发现 ReturnUrl 存在跨域可能时，就抛出错误。
            </param>
            <param name="defaultUrlIfAbsent">
            当 GET 或 POST 方式提交的数据中不存在 ReturnUrl 时，取代其值的默认转向页面。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetTargetPage(System.String)">
            <summary>
            获取带 ReturnUrl 返回地址的目标页。允许跨域转向。
            </summary>
            <param name="targetUrl">要添加返回地址的目标页</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetTargetPage(System.String,System.String)">
            <summary>
            获取带 ReturnUrl 返回地址的目标页。允许跨域转向。
            </summary>
            <param name="targetUrl">要添加返回地址的目标页</param>
            <param name="extraQueryString">在最终的URL尾部，要额外添加的地址参数，如 "rid=1"</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetTargetPage(System.String,System.String,System.Boolean)">
            <summary>
            获取带 ReturnUrl 返回地址的目标页。允许跨域转向。
            </summary>
            <param name="targetUrl">要添加返回地址的目标页</param>
            <param name="extraQueryString">在最终的URL尾部，要额外添加的地址参数，如 "rid=1"</param>
            <param name="reuseReturnUrl">设置一个值，该值指示是否重用ReturnUrl</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetTargetPage(System.Boolean,System.String,System.String,System.Boolean)">
            <summary>
            获取带 ReturnUrl 返回地址的目标页。
            </summary>
            <param name="enableCrossAppRedirects">设置一个值，该值指示是否允许跨域转向</param>
            <param name="targetUrl">要添加返回地址的目标页</param>
            <param name="extraQueryString">在最终的URL尾部，要额外添加的地址参数，如 "rid=1"</param>
            <param name="reuseReturnUrl">设置一个值，该值指示是否重用ReturnUrl</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetTargetPage(System.Boolean,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            获取带 ReturnUrl 返回地址的目标页。
            </summary>
            <param name="enableCrossAppRedirects">设置一个值，该值指示是否允许跨域转向</param>
            <param name="targetUrl">要添加返回地址的目标页</param>
            <param name="extraQueryString">在最终的URL尾部，要额外添加的地址参数，如 "rid=1"</param>
            <param name="reuseReturnUrl">设置一个值，该值指示是否重用ReturnUrl</param>
            <param name="useRawUrlAsReturnUrl">设置是否使用当前页面的原始（URLRewriter转发前的地址）URL地址作为ReturnUrl参数地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.GetRawUrl(System.Web.HttpRequest)">
            <summary>
            获取当前页面的原始（URLRewriter转发前的地址）URL地址。
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.RemoveQueryStringVariableFromUrl(System.String,System.String)">
            <summary>
            从指定URL中移除指定URL参数及其值。
            </summary>
            <param name="url">URL地址</param>
            <param name="QSVar">要移除的参数键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.AspxToHtml(System.String)">
            <summary>
            获取 Aspx 到 Html 的转换地址。
            </summary>
            <param name="url">aspx的URL地址。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Utility.Web.HtmlToAspx(System.String)">
            <summary>
            获取 Html 到 Aspx 的转换地址。
            </summary>
            <param name="url">html的URL地址。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Utility.Web.Config">
            <summary>
            获取 EIIP 配置实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.CachedTypeResolver">
            <summary>
            提供可缓存已解析类型的类型解析器。
            </summary>
        </member>
        <member name="T:EIIP.Util.ITypeResolver">
            <summary>
            提供类型名称解析的接口
            </summary>
        </member>
        <member name="M:EIIP.Util.ITypeResolver.Resolve(System.String)">
            <summary>
            解析指定的类型名称，返回该类型实例。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.Util.CachedTypeResolver.typeCache">
            <summary>
            类型缓存池。
            </summary>
        </member>
        <member name="F:EIIP.Util.CachedTypeResolver.typeResolver">
            <summary>
            类型解析器。
            </summary>
        </member>
        <member name="M:EIIP.Util.CachedTypeResolver.#ctor(EIIP.Util.ITypeResolver)">
            <summary>
            包装一个可缓存已解析类型的类型解析器。
            </summary>
            <param name="typeResolver">类型解析器。</param>
        </member>
        <member name="M:EIIP.Util.CachedTypeResolver.Resolve(System.String)">
            <summary>
            解析指定的类型名称，返回该类型实例。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.CachedTypeResolver.BuildTypeLoadException(System.String)">
            <summary>
            构造类型加载异常。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.CachedTypeResolver.BuildTypeLoadException(System.String,System.Exception)">
            <summary>
            构造类型加载异常。
            </summary>
            <param name="typeName">类型名称</param>
            <param name="exp">加载抛出的异常</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.BaseDynamicMember">
            <summary>
            基本动态成员类。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.BaseDynamicMember.METHOD_ATTRIBUTES">
            <summary>
            方法标识。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.BaseDynamicMember.m_InvalidOperationException">
            <summary>
            非法操作异常。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.BaseDynamicMember.SetupTargetInstance(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            设置目标实例。
            </summary>
            <param name="il">MSIL指令</param>
            <param name="targetType">目标类型</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.BaseDynamicMember.SetupArgument(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            设置参数。
            </summary>
            <param name="il">MSIL指令</param>
            <param name="argumentType">参数类型</param>
            <param name="argumentPosition">参数索引</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.BaseDynamicMember.InvokeMethod(System.Reflection.Emit.ILGenerator,System.Boolean,System.Boolean,System.Reflection.MethodInfo)">
            <summary>
            调用方法。
            </summary>
            <param name="il">MSIL指令</param>
            <param name="isStatic">设置是否是静态成员</param>
            <param name="isValueType">设置是否是值类型</param>
            <param name="method">方法</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.BaseDynamicMember.ProcessReturnValue(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            处理返回值。
            </summary>
            <param name="il">MSIL指令</param>
            <param name="returnValueType">返回值类型</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.BaseDynamicMember.ThrowInvalidOperationException(System.Reflection.Emit.ILGenerator,System.String)">
            <summary>
            抛出非法操作异常。
            </summary>
            <param name="il">MSIL指令</param>
            <param name="message">异常信息</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.DynamicConstructor">
            <summary>
            动态构造器工厂。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicConstructor.Create(System.Reflection.ConstructorInfo)">
            <summary>
            创建指定构造器的动态构造器。
            </summary>
            <param name="constructor">构造器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicConstructor.GenerateInvoke(System.Reflection.Emit.TypeBuilder,System.Reflection.ConstructorInfo)">
            <summary>
            生成调用。
            </summary>
            <param name="tb">类型生成器</param>
            <param name="constructor">构造器</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicConstructor.SetupConstructorArgument(System.Reflection.Emit.ILGenerator,System.Type,System.Int32)">
            <summary>
            设置构造器参数。
            </summary>
            <param name="il">MSIL指令</param>
            <param name="argumentType">参数类型</param>
            <param name="argumentPosition">参数索引</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.IDynamicField">
            <summary>
            定义动态字段要实现的方法接口。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicField.GetValue(System.Object)">
            <summary>
            获取动态字段值。
            </summary>
            <param name="target">动态字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicField.SetValue(System.Object,System.Object)">
            <summary>
            设置动态字段值。
            </summary>
            <param name="target">动态字段</param>
            <param name="value">字段值</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.SafeField">
            <summary>
            动态字段的一个安全包装。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeField.#ctor(System.Reflection.FieldInfo)">
            <summary>
            安全包装动态字段的实例。
            </summary>
            <param name="field">字段信息</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeField.GetValue(System.Object)">
            <summary>
            获取指定动态字段值。
            </summary>
            <param name="target">动态字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeField.SetValue(System.Object,System.Object)">
            <summary>
            设置动态字段值。
            </summary>
            <param name="target">动态字段</param>
            <param name="value">字段值</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.DynamicField">
            <summary>
            动态字段工厂。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicField.Create(System.Reflection.FieldInfo)">
            <summary>
            创建指定动态字段。
            </summary>
            <param name="field">字段信息</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.IDynamicIndexer">
            <summary>
            定义动态索引器要实现的方法接口。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicIndexer.GetValue(System.Object,System.Int32)">
            <summary>
            获取指定索引的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicIndexer.GetValue(System.Object,System.Object)">
            <summary>
            获取指定索引的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicIndexer.GetValue(System.Object,System.Object[])">
            <summary>
            获取指定索引的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicIndexer.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            设置动态索引器的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicIndexer.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            设置动态索引器的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicIndexer.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            设置动态索引器的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.SafeIndexer">
            <summary>
            动态索引器的安全包装。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            安全包装动态索引器实例。
            </summary>
            <param name="indexer">要包装的索引器</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.GetValue(System.Object,System.Int32)">
            <summary>
            获取指定索引的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.GetValue(System.Object,System.Object)">
            <summary>
            获取指定索引的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.GetValue(System.Object,System.Object[])">
            <summary>
            获取指定索引的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.SetValue(System.Object,System.Int32,System.Object)">
            <summary>
            设置动态索引器的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.SetValue(System.Object,System.Object,System.Object)">
            <summary>
            设置动态索引器的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeIndexer.SetValue(System.Object,System.Object[],System.Object)">
            <summary>
            设置动态索引器的值。
            </summary>
            <param name="target">目标对象</param>
            <param name="index">索引</param>
            <param name="value">值</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.DynamicIndexer">
            <summary>
            动态索引器工厂。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicIndexer.Create(System.Reflection.PropertyInfo)">
            <summary>
            创建指定的动态索引器。
            </summary>
            <param name="indexer"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.IDynamicMethod">
            <summary>
            定义动态方法要实现的方法接口。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicMethod.Invoke(System.Object,System.Object[])">
            <summary>
            功能调用。
            </summary>
            <param name="target">目标对象</param>
            <param name="arguments">方法参数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.SafeMethod">
            <summary>
            动态方法的一个安全包装。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeMethod.#ctor(System.Reflection.MethodInfo)">
            <summary>
            安全包装动态方法的实例。
            </summary>
            <param name="method">方法信息</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeMethod.Invoke(System.Object,System.Object[])">
            <summary>
            调用动态方法。
            </summary>
            <param name="target">目标对象</param>
            <param name="arguments">方法参数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.DynamicMethod">
            <summary>
            动态方法工厂。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicMethod.Create(System.Reflection.MethodInfo)">
            <summary>
            创建指定的动态方法。
            </summary>
            <param name="method">方法信息</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.IDynamicProperty">
            <summary>
            定义动态属性要实现的方法接口。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicProperty.GetValue(System.Object)">
            <summary>
            获取目标对象的动态属性值。
            </summary>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicProperty.SetValue(System.Object,System.Object)">
            <summary>
            设置目标对象的动态属性值。
            </summary>
            <param name="target">目标对象</param>
            <param name="value">动态属性值</param>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.SafeProperty">
            <summary>
            动态属性的安全包装。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeProperty.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            安全包装动态属性实例。
            </summary>
            <param name="property">属性信息</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeProperty.GetValue(System.Object)">
            <summary>
            获取目标对象的动态属性值。
            </summary>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeProperty.SetValue(System.Object,System.Object)">
            <summary>
            设置目标对象的动态属性值。
            </summary>
            <param name="target">目标对象</param>
            <param name="value">动态属性值</param>
        </member>
        <member name="P:EIIP.Util.DynamicReflection.SafeProperty.PropertyInfo">
            <summary>
            获取属性信息(供程序集内调用)。
            </summary>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.DynamicProperty">
            <summary>
            动态属性工厂。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicProperty.Create(System.Reflection.PropertyInfo)">
            <summary>
            创建指定的动态属性。
            </summary>
            <param name="property">属性信息</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.DynamicReflectionManager">
            <summary>
            动态反射管理器。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.ASSEMBLY_NAME">
            <summary>
            定义要创建的反射类型所在的程序集。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.TYPE_ATTRIBUTES">
            <summary>
            要创建的反射类型的属性。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_Assembly">
            <summary>
            要创建的反射类型所在的动态程序集。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_Module">
            <summary>
            要创建的代理类型所在的动态模块。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_PropertyCache">
            <summary>
            动态属性类型的缓冲池。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_FieldCache">
            <summary>
            动态字段类型的缓冲池。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_IndexerCache">
            <summary>
            动态索引器类型的缓冲池。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_MethodCache">
            <summary>
            动态方法类型的缓冲池。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.DynamicReflectionManager.m_ConstructorCache">
            <summary>
            动态构造器类型的缓冲池。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.#cctor">
            <summary>
            初始化程序集与模块生成器，它们将被用于动态地创建代理包装器。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.CreateTypeBuilder(System.String)">
            <summary>
            创建类型生成器。
            </summary>
            <param name="name">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.GetDynamicProperty(System.Reflection.PropertyInfo)">
            <summary>
            获取动态属性类型。
            </summary>
            <param name="property">要查询的属性</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.CacheDynamicProperty(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            缓存动态属性类型。
            </summary>
            <param name="property">要缓存的属性</param>
            <param name="type">动态属性类型</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.GetDynamicField(System.Reflection.FieldInfo)">
            <summary>
            获取动态字段类型。
            </summary>
            <param name="field">要查询的字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.CacheDynamicField(System.Reflection.FieldInfo,System.Type)">
            <summary>
            缓存动态字段类型。
            </summary>
            <param name="field">要缓存的字段</param>
            <param name="type"></param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.GetDynamicIndexer(System.Reflection.PropertyInfo)">
            <summary>
            获取动态索引器类型。
            </summary>
            <param name="indexer">要查询的索引器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.CacheDynamicIndexer(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            缓存动态索引器类型。
            </summary>
            <param name="indexer">要缓存的索引器</param>
            <param name="type"></param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.GetDynamicMethod(System.Reflection.MethodInfo)">
            <summary>
            获取动态方法类型。
            </summary>
            <param name="method">要查询的方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.CacheDynamicMethod(System.Reflection.MethodInfo,System.Type)">
            <summary>
            缓存动态方法类型。
            </summary>
            <param name="method">要缓存的方法</param>
            <param name="type"></param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.GetDynamicConstructor(System.Reflection.ConstructorInfo)">
            <summary>
            获取动态构造器类型。
            </summary>
            <param name="constructor">要查询的构造器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.CacheDynamicConstructor(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
            缓存动态构造器类型。
            </summary>
            <param name="constructor">要缓存的构造器</param>
            <param name="type"></param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.DynamicReflectionManager.SaveAssembly">
            <summary>
            保存动态产生的程序集至磁盘。当为调试模式时，才能被调用。
            </summary>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.IDynamicConstructor">
            <summary>
            定义要实现的动态构造器接口。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.IDynamicConstructor.Invoke(System.Object[])">
            <summary>
            调用动态的构造器。
            </summary>
            <param name="arguments">构造器参数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.DynamicReflection.SafeConstructor">
            <summary>
            动态构造器的安全包装。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.SafeConstructor.m_Constructor">
            <summary>
            构造器。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.SafeConstructor.m_DynamicConstructor">
            <summary>
            动态构造器。
            </summary>
        </member>
        <member name="F:EIIP.Util.DynamicReflection.SafeConstructor.m_IsOptimized">
            <summary>
            指示是否进行优化。
            </summary>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeConstructor.#ctor(System.Reflection.ConstructorInfo)">
            <summary>
            实例化线程安全的动态构造器。
            </summary>
            <param name="constructor">构造器</param>
        </member>
        <member name="M:EIIP.Util.DynamicReflection.SafeConstructor.Invoke(System.Object[])">
            <summary>
            调用动态构造器。
            </summary>
            <param name="arguments">构造器参数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Helper.IsoStoreSettingsHelper">
            <summary>
            使用独立存储区存储强类型的配置的助手类。
            </summary>
        </member>
        <member name="M:EIIP.Helper.IsoStoreSettingsHelper.Read``2(System.String,``0)">
            <summary>
            从独立存储区读取配置。
            </summary>
            <param name="fileName">配置文件名</param>
            <param name="key">要查询的键名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Helper.IsoStoreSettingsHelper.Write``2(System.String,``0,``1)">
            <summary>
            将一条配置写入独立存储区。
            </summary>
            <param name="fileName">配置文件名</param>
            <param name="key">键名</param>
            <param name="value">键值</param>
        </member>
        <member name="T:EIIP.Util.TypeResolver">
            <summary>
            类型解析器类。
            </summary>
        </member>
        <member name="M:EIIP.Util.TypeResolver.Resolve(System.String)">
            <summary>
            解析指定的类型名称，返回该类型实例。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.TypeResolver.ResolveGenericType(System.String)">
            <summary>
            解析指定的泛型类型名称，返回该类型实例。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.TypeResolver.ResolveType(System.String)">
            <summary>
            解析指定的类型名称，返回该类型实例。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.TypeResolver.LoadTypeDirectlyFromAssembly(EIIP.Util.TypeResolver.TypeAssemblyInfo)">
            <summary>
            直接从程序集中加载类型。失败返回null。
            </summary>
            <param name="typeInfo">要加载类型的类型程序集信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.TypeResolver.LoadTypeByIteratingOverAllLoadedAssemblies(EIIP.Util.TypeResolver.TypeAssemblyInfo)">
            <summary>
            遍历所有加载的程序集，并尝试加载指定类型。
            </summary>
            <param name="typeInfo">要加载类型的类型程序集信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.TypeResolver.BuildTypeLoadException(System.String)">
            <summary>
            构造类型加载异常。
            </summary>
            <param name="typeName">类型名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Util.TypeResolver.BuildTypeLoadException(System.String,System.Exception)">
            <summary>
            构造类型加载异常。
            </summary>
            <param name="typeName">类型名称</param>
            <param name="exp">加载抛出的异常</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Util.TypeResolver.GenericArgumentsInfo">
            <summary>
            泛型程序集信息类。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.GenericArgumentsInfo.GenericArgumentsPrefix">
            <summary>
            泛型参数前缀。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.GenericArgumentsInfo.GenericArgumentsSuffix">
            <summary>
            泛型参数后缀。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.GenericArgumentsInfo.GenericArgumentsSeparator">
            <summary>
            泛型参数分隔符。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.GenericArgumentsInfo.m_UnResolvedGenericTypeName">
            <summary>
            未解析的泛型类型名称。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.GenericArgumentsInfo.m_UnResolvedGenericMethodName">
            <summary>
            未解析的泛型方法名称。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.GenericArgumentsInfo.m_UnResolvedGenericArguments">
            <summary>
            未解析的泛型方法参数。
            </summary>
        </member>
        <member name="M:EIIP.Util.TypeResolver.GenericArgumentsInfo.#ctor(System.String)">
            <summary>
            实例化泛型程序集信息。
            </summary>
            <param name="value">要解析的泛型类型字串</param>
        </member>
        <member name="M:EIIP.Util.TypeResolver.GenericArgumentsInfo.GetGenericArguments">
            <summary>
            获取未解析的泛型类型参数。
            </summary>
        </member>
        <member name="M:EIIP.Util.TypeResolver.GenericArgumentsInfo.ParseGenericArguments(System.String)">
            <summary>
            解析泛型类型参数。
            </summary>
            <param name="originalString">要解析的类型字串</param>
        </member>
        <member name="M:EIIP.Util.TypeResolver.GenericArgumentsInfo.SplitGenericArguments(System.String)">
            <summary>
            分离参数。
            </summary>
            <param name="originalArgs">要分离的参数字串</param>
        </member>
        <member name="P:EIIP.Util.TypeResolver.GenericArgumentsInfo.GenericTypeName">
            <summary>
            获取泛型类型名称。
            </summary>
        </member>
        <member name="P:EIIP.Util.TypeResolver.GenericArgumentsInfo.GenericMethodName">
            <summary>
            获取泛型方法名称。
            </summary>
        </member>
        <member name="P:EIIP.Util.TypeResolver.GenericArgumentsInfo.ContainsGenericArguments">
            <summary>
            获取一个值，该值指示是否有泛型参数。
            </summary>
        </member>
        <member name="P:EIIP.Util.TypeResolver.GenericArgumentsInfo.IsGenericDefinition">
            <summary>
            获取一个值，该值指示泛型参数中是否含有类型定义。
            </summary>
        </member>
        <member name="T:EIIP.Util.TypeResolver.TypeAssemblyInfo">
            <summary>
            类型程序集信息类。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.TypeAssemblyInfo.TypeAssemblySeparator">
            <summary>
            类型程序集分隔符。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.TypeAssemblyInfo.m_UnResolvedAssemblyName">
            <summary>
            未解析的程序集名称。
            </summary>
        </member>
        <member name="F:EIIP.Util.TypeResolver.TypeAssemblyInfo.m_UnResolvedTypeName">
            <summary>
            未解析的类型名称。
            </summary>
        </member>
        <member name="M:EIIP.Util.TypeResolver.TypeAssemblyInfo.#ctor(System.String)">
            <summary>
            实例化类型程序集信息类。
            </summary>
            <param name="unresolvedTypeName">未解析的类型名称</param>
        </member>
        <member name="P:EIIP.Util.TypeResolver.TypeAssemblyInfo.TypeName">
            <summary>
            获取未解析的类型名称。
            </summary>
        </member>
        <member name="P:EIIP.Util.TypeResolver.TypeAssemblyInfo.AssemblyName">
            <summary>
            获取未解析的程序集名称。
            </summary>
        </member>
        <member name="P:EIIP.Util.TypeResolver.TypeAssemblyInfo.IsAssemblyQualified">
            <summary>
            获取一个值，该值指示类型名称是否要由程序集完全限定名来解析。
            </summary>
        </member>
        <member name="T:EIIP.Type.XmlSerializableHashtable">
            <summary>
            提供一个可 XML 序列化的哈希表。
            </summary>
        </member>
        <member name="M:EIIP.Type.XmlSerializableHashtable.#ctor">
            <summary>
            实例化可 XML 序列化的哈希表。
            </summary>
        </member>
        <member name="M:EIIP.Type.XmlSerializableHashtable.#ctor(System.Collections.Hashtable)">
            <summary>
            实例化可 XML 序列化的哈希表。
            </summary>
            <param name="existingHashTable">哈希表</param>
        </member>
        <member name="M:EIIP.Type.XmlSerializableHashtable.Save(System.IO.Stream)">
            <summary>
            保存可序列化的哈希表至指定输出流。
            </summary>
            <param name="outputStream">输出流</param>
        </member>
        <member name="M:EIIP.Type.XmlSerializableHashtable.Load(System.IO.Stream)">
            <summary>
            从输入流加载可序列化的哈希表。
            </summary>
            <param name="inputStream">输入流</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.Type.XmlSerializableHashtable.Item(System.Object)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:EIIP.Type.XmlSerializableHashtable.InnerHashtable">
            <summary>
            获取内联哈希表。
            </summary>
        </member>
        <member name="P:EIIP.Type.XmlSerializableHashtable.Entries">
            <summary>
            获取或设置实体集。(用于序列化)
            </summary>
        </member>
        <member name="T:EIIP.Type.XmlSerializableHashtable.Entry">
            <summary>
            哈希表的实体类。
            </summary>
        </member>
        <member name="M:EIIP.Type.XmlSerializableHashtable.Entry.#ctor">
            <summary>
            实例化实体。
            </summary>
        </member>
        <member name="M:EIIP.Type.XmlSerializableHashtable.Entry.#ctor(System.Object,System.Object)">
            <summary>
            实例化指定实体。
            </summary>
            <param name="entryKey">键</param>
            <param name="entryValue">值</param>
        </member>
        <member name="P:EIIP.Type.XmlSerializableHashtable.Entry.EntryKey">
            <summary>
            获取或设置键名。
            </summary>
        </member>
        <member name="P:EIIP.Type.XmlSerializableHashtable.Entry.EntryValue">
            <summary>
            获取或设置键值。
            </summary>
        </member>
        <member name="T:EIIP.Framework.VirtualDirectory">
            <summary> 
            IIS 虚拟目录操作类 
            </summary> 
            <remarks> 
            <para>有关IIS的属性设置，请参考: http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/html/bb9c0d25-d003-4ddd-8adb-8662de0a24ee.asp</para> 
            <para>虚拟目录名区分大小写。</para> 
            </remarks> 
        </member>
        <member name="F:EIIP.Framework.VirtualDirectory.SERVER_ACTIVESTATE">
            <summary>
            WEB服务器活动状态。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectory.rootEntry">
            <summary>
            虚拟目录根节点
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectory.m_verCLR">
            <summary>
            当前CLR版本
            </summary>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.#ctor">
            <summary> 
            实例化默认本地 IIS 虚拟目录。
            </summary> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.#ctor(System.String,System.String,System.String)">
            <summary> 
            实例化指定服务器 IIS 虚拟目录 
            </summary> 
            <param name="path">路径(如: IIS://server1/W3SVC/1/root)</param> 
            <param name="username">用户名</param> 
            <param name="password">密码</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.#ctor(System.String,System.Boolean)">
            <summary> 
            实例化指定服务器 IIS 虚拟目录 
            </summary> 
            <param name="portNumber">端口号</param>
            <param name="isNullThrow">指示站点不存在时，是否抛出错误。</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.#ctor(System.String,System.String)">
            <summary> 
            实例化指定服务器 IIS 虚拟目录 
            </summary> 
            <param name="portNumber">活动端口号</param>
            <param name="machineName">WEB 服务器名称，本机可设置为"localhost"</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.#ctor(System.String)">
            <summary> 
            实例化指定服务器 IIS 虚拟目录 
            </summary> 
            <param name="portNumber">活动端口号</param>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetWebSiteIdentifier(System.String,System.Boolean)">
            <summary> 
            获取网站的标识符,若不存在则返回默认为“默认网站”的标识符("1")
            </summary> 
            <param name="portNumber">端口号</param> 
            <param name="isNullThrow">指示站点不存在时，是否抛出错误。</param> 
            <returns></returns> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.FindWebSiteIdentifier(System.String,System.String)">
            <summary>
            查找含指定端口网站的标识符,若不存在则抛出错误。
            </summary>
            <param name="machineName">WEB 服务器名称</param> 
            <param name="portNumber">活动端口号</param> 
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.Exists(System.String)">
            <summary> 
            获取一个值,该值指示是否存在指定的虚拟目录 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <returns></returns> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.Create(System.String,System.String)">
            <summary> 
            创建虚拟目录,若已存在则返回false
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="path">对应物理路径</param> 
            <returns></returns> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.Delete(System.String)">
            <summary> 
            删除虚拟目录
            </summary> 
            <param name="name">虚拟目录名</param> 
            <returns></returns> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetProperties(System.String)">
            <summary> 
            获取虚拟目录属性 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <returns></returns> 
            <example> 
            VirtualDirectory vd = new VirtualDirectory(); 
            DirectoryEntry entry = vd.GetProperties("Temp1"); 
            foreach(string s in entry.Properties.PropertyNames) 
            { 
                   Console.WriteLine("{0}:{1}({2})", s, entry.Properties[s].Value, entry.Properties[s].Value.GetType()); 
                   foreach(object o in entry.Properties[s]) 
                   { 
                       Console.WriteLine("\t{0}", o); 
                   } 
            } 
            </example> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetProperty(System.String,System.String)">
            <summary> 
            获取属性
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="property">属性名</param> 
            <returns></returns> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.SetProperty(System.String,System.String,System.Object)">
            <summary> 
            设置属性 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="property">属性名</param> 
            <param name="value">值</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.SetDefaultDoc(System.String,System.String[])">
            <summary> 
            设置默认文档 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="filename">文件名</param> 
            <example> 
            VirtualDirectory vd = new VirtualDirectory(); 
            vd.SetDefaultDoc("test", "default.aspx", "index.aspx"); 
            </example> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.AddScriptMap(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary> 
            添加应用程序映射 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="ext">扩展名,以"."开始</param> 
            <param name="app">应用程序路径</param> 
            <param name="method">动作(OPTIONS,GET,HEAD,POST,PUT,DELETE,TRACE  为空时表示全部动作。)</param> 
            <param name="script">脚本引擎</param> 
            <param name="checkExists">检查文件是否存在</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.DeleteScriptMap(System.String,System.String)">
            <summary> 
            删除应用程序映射 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="ext">扩展名</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.EnabledAccessWrite(System.String)">
            <summary> 
            允许写入 
            </summary> 
            <param name="name">虚拟目录名</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.EnabledDirBrowse(System.String)">
            <summary> 
            允许目录浏览 
            </summary> 
            <param name="name">虚拟目录名</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetPath(System.String,System.Boolean)">
            <summary>
            获取虚拟目录物理路径,不存在则返回 string.Empty
            </summary>
            <param name="name">虚拟目录名</param>
            <param name="bEIIP">设置一个值,该值指示是否仅查找EIIP所属虚拟目录</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetPath(System.String,System.String)">
            <summary> 
            获取虚拟目录的物理路径,不存在则返回 string.Empty
            </summary> 
            <param name="identifier">虚拟目录所属网站的标识符,"默认网站"的标识符为"1"</param> 
            <param name="name">虚拟目录名称</param> 
            <returns></returns> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.SetPath(System.String,System.String)">
            <summary> 
            设置路径 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="path">物理路径</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetVirDirList(System.Boolean)">
            <summary>
            获取虚拟目录列表
            </summary>
            <param name="bEIIP">设置一个值,该值指示是否仅查找EIIP所属虚拟目录</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.GetVirDirList">
            <summary>
            获取虚拟目录列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.IsEIIP(System.DirectoryServices.DirectoryEntry)">
            <summary>
            获取一个值,该值指示虚拟目录是否是EIIP项目
            </summary>
            <param name="entry">虚拟目录</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.SetSessionTimeout(System.String,System.Int32)">
            <summary> 
            设置会话超时 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="timeout">超时时间(分钟)</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.SetScriptTimeout(System.String,System.Int32)">
            <summary> 
            设置脚本超时 
            </summary> 
            <param name="name">虚拟目录名</param> 
            <param name="timeout">超时时间(秒)</param> 
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.ISetupASPNET(System.Boolean)">
            <summary>
            检测服务器是否注册ASP.Net。
            当仅查找EIIP所属虚拟目录时，仅检查查找到的第一个虚拟目录；
            否则将论询所有的虚拟目录
            </summary>
            <param name="bEIIP">设置一个值,该值指示是否仅查找EIIP所属虚拟目录</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.ISetupASPNET(System.String)">
            <summary>
            检测指定得虚拟目录是否注册ASP.Net
            </summary>
            <param name="name">虚拟目录名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectory.ISetupASPNET(System.DirectoryServices.DirectoryEntry)">
            <summary>
            检测指定得虚拟目录是否注册ASP.Net
            </summary>
            <param name="entry">虚拟目录</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.Framework.VirtualDirectoryType">
            <summary>
            指示虚拟目录的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectoryType.FTP_DIR">
            <summary>
            FTP目录
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectoryType.WEB_IIS_DIR">
            <summary>
            WEB目录
            </summary>
        </member>
        <member name="T:EIIP.Framework.VirtualDirectoryEntity">
            <summary>
            IIS 虚拟目录实体类。可用于创建、删除指定虚拟目录。 
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectoryEntity.m_DirectoryType">
            <summary>
            虚拟目录的类型。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectoryEntity.m_PhysicalPath">
            <summary>
            映射至虚拟目录的物理路径。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectoryEntity.m_VDirName">
            <summary>
            虚拟目录名称。
            </summary>
        </member>
        <member name="F:EIIP.Framework.VirtualDirectoryEntity.m_ServerName">
            <summary>
            服务器名称。
            </summary>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.#ctor">
            <summary>
            实例化默认WEB类型虚拟目录实例。
            </summary>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.#ctor(EIIP.Framework.VirtualDirectoryType)">
            <summary>
            实例化指定类型的虚拟目录实例。
            </summary>
            <param name="vDirType">虚拟目录的类型</param>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.Create">
            <summary>
            创建虚拟目录。
            </summary>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.Create(System.String,System.String,System.String)">
            <summary>
            创建虚拟目录。
            </summary>
            <param name="serverName">服务器名称</param>
            <param name="vDirName">虚拟目录名称</param>
            <param name="path">物理路径</param>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.Delete">
            <summary>
            删除虚拟目录。
            </summary>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.Delete(System.String,System.String)">
            <summary>
            删除虚拟目录。
            </summary>
            <param name="serverName">服务器名称</param>
            <param name="vDirName">虚拟目录名称</param>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.CreateAppPool(System.String,System.String)">
            <summary>
            创建应用程序池。创建的应用程序池为 metabasePath/appPoolName 。
            </summary>
            <param name="metabasePath">格式为"IIS://&lt;servername&gt;/W3SVC/AppPools"</param>
            <param name="appPoolName">应用程序池名称</param>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.CreateVDir(System.String,System.String,System.String)">
            <summary>
            创建虚拟目录。
            </summary>
            <param name="metabasePath">
            格式为 "IIS://&lt;servername&gt;/&lt;service&gt;/&lt;siteID&gt;/Root[/&lt;vdir&gt;]"
            </param>
            <param name="vDirName">虚拟目录名称</param>
            <param name="physicalPath">
            物理路径, 为格式中的 "&lt;drive&gt;:\&lt;path&gt;", 如, "C:\Inetpub\wwwroot"
            </param>
        </member>
        <member name="M:EIIP.Framework.VirtualDirectoryEntity.AssignVDirToAppPool(System.String,System.String)">
            <summary>
            将虚拟目录指定至应用程序池。
            </summary>
            <param name="metabasePath">
            格式为 "IIS://&lt;servername&gt;/&lt;service&gt;/&lt;siteID&gt;/Root[/&lt;vdir&gt;]"
            </param>
            <param name="appPoolName"></param>
        </member>
        <member name="P:EIIP.Framework.VirtualDirectoryEntity.DirectoryType">
            <summary>
            获取或设置虚拟目录的类型。
            </summary>
        </member>
        <member name="P:EIIP.Framework.VirtualDirectoryEntity.PhysicalPath">
            <summary>
            获取或设置映射至虚拟目录的物理路径。
            </summary>
        </member>
        <member name="P:EIIP.Framework.VirtualDirectoryEntity.VDirName">
            <summary>
            获取或设置虚拟目录名称。
            </summary>
        </member>
        <member name="P:EIIP.Framework.VirtualDirectoryEntity.ServerName">
            <summary>
            获取或设置服务器名称。
            </summary>
        </member>
        <member name="T:EIIP.Web.ConfigSettings">
            <summary>
            Web 配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.Web.ConfigSettings.#ctor">
            <summary>
            实例化 Web 配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.Web.ConfigSettings.#ctor(EIIP.Framework.Configuration.Settings)">
            <summary>
            实例化 Web 配置设置类。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.Web.ConfigSettings.LoadFrom(EIIP.Framework.Configuration.Settings)">
            <summary>
            加载配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="M:EIIP.Web.ConfigSettings.SaveTo(EIIP.Framework.Configuration.Settings)">
            <summary>
            保存配置设置。
            </summary>
            <param name="st">配置设置</param>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.Extend">
            <summary>
            获取或设置扩展 Web 配置设置。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.MetaDescriptionContent">
            <summary>
            获取或设置页面 META 节描述内容。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.EnableSubDomain">
            <summary>
            获取或设置一个值，该值指示是否启用二级域名。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.EnableURLRewrite">
            <summary>
            获取或设置一个值，该值指示是否启用地址重写功能。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.Domain">
            <summary>
            获取或设置网站域名。如www.eiip.net中的.eiip.net。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.DomainWithoutDot">
            <summary>
            获取除去前导“.”的网站域名。如www.eiip.net中的eiip.net。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.DomainKey">
            <summary>
            获取网站域名关键字。如www.eiip.net中的eiip。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.AntiExtLinkImgFile">
            <summary>
            获取因盗链引用返回给客户端的错误信息图片。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.EnableAntiExtLinkImg">
            <summary>
            获取或设置一个值，该值指示是否启用反盗链。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.HTMLHeadContent">
            <summary>
            获取或设置要加入所有页面 HEAD 标签内的内容。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.RejectCrawler">
            <summary>
            获取或设置一个值，该值指示是否拒绝 Web 爬行遍历搜索引擎。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.FootContent">
            <summary>
            获取或设置 Web 页脚内容。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.AllowWeakPassword">
            <summary>
            获取或设置一个值，该值指示是否允许使用弱密码。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.EnableSystemLog">
            <summary>
            获取或设置一个值，该值指示是否启用系统日志功能。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.ImageDomain">
            <summary>
            获取或设置 Web 网站图片专用域名。以"/"结尾。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.ImageURL">
            <summary>
            获取或设置 Web 网站图片专用URL。以"http://"开始,以"/"结尾。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.DefaultHomePage">
            <summary>
            获取或设置 Web 网站默认首页地址。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.AccessConnectionString">
            <summary>
            获取Access数据库连接字串。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.ChartStoragePhysicalPath">
            <summary>
            获取或设置图表物理存储路径，以'\'结尾。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.ChartStorageVerNO">
            <summary>
            获取或设置图表物理存储版本号。
            </summary>
        </member>
        <member name="P:EIIP.Web.ConfigSettings.UseWholeUrl">
            <summary>
            获取或设置一个值，该值指示是否使用完整链接地址。
            </summary>
        </member>
        <member name="T:EIIP.Framework.Management.WMIPath">
            <summary>
            WMI路径
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Processor">
            <summary>
             CPU 处理器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_PhysicalMemory">
            <summary>
            物理内存条
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Keyboard">
            <summary>
            键盘
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_PointingDevice">
            <summary>
            点输入设备，包括鼠标。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_FloppyDrive">
            <summary>
            软盘驱动器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_DiskDrive">
            <summary>
            硬盘驱动器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_CDROMDrive">
            <summary>
            光盘驱动器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_BaseBoard">
            <summary>
            主板
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_BIOS">
            <summary>
            BIOS 芯片
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_ParallelPort">
            <summary>
            并口
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_SerialPort">
            <summary>
            串口
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_SerialPortConfiguration">
            <summary>
            串口配置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_SoundDevice">
            <summary>
            多媒体设置，一般指声卡。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_SystemSlot">
            <summary>
            主板插槽(ISA, PCI, AGP)
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_USBController">
            <summary>
            USB 控制器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_NetworkAdapter">
            <summary>
            网络适配器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_NetworkAdapterConfiguration">
            <summary>
            网络适配器设置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Printer">
            <summary>
            打印机
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_PrinterConfiguration">
            <summary>
            打印机设置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_PrintJob">
            <summary>
            打印机任务
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_TCPIPPrinterPort">
            <summary>
            打印机端口
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_POTSModem">
            <summary>
            MODEM
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_POTSModemToSerialPort">
            <summary>
            MODEM 端口
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_DesktopMonitor">
            <summary>
            显示器
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_DisplayConfiguration">
            <summary>
            显卡
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_DisplayControllerConfiguration">
            <summary>
            显卡设置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_VideoController">
            <summary>
            显卡细节。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_VideoSettings">
            <summary>
            显卡支持的显示模式。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_TimeZone">
            <summary>
            时区
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_SystemDriver">
            <summary>
            驱动程序
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_DiskPartition">
            <summary>
            磁盘分区
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_LogicalDisk">
            <summary>
            逻辑磁盘
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_LogicalDiskToPartition">
            <summary>
            逻辑磁盘所在分区及始末位置。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_LogicalMemoryConfiguration">
            <summary>
            逻辑内存配置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_PageFile">
            <summary>
            系统页文件信息
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_PageFileSetting">
            <summary>
            页文件设置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_BootConfiguration">
            <summary>
            系统启动配置
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_ComputerSystem">
            <summary>
            计算机信息简要
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_OperatingSystem">
            <summary>
            操作系统信息
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_StartupCommand">
            <summary>
            系统自动启动程序
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Service">
            <summary>
            系统安装的服务
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Group">
            <summary>
            系统管理组
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_GroupUser">
            <summary>
            系统组帐号
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_UserAccount">
            <summary>
            用户帐号
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Process">
            <summary>
            系统进程
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Thread">
            <summary>
            系统线程
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_Share">
            <summary>
            共享
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_NetworkClient">
            <summary>
            已安装的网络客户端
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMIPath.Win32_NetworkProtocol">
            <summary>
            已安装的网络协议
            </summary>
        </member>
        <member name="T:EIIP.Framework.Management.WMI">
            <summary>
            获取系统信息
            </summary>
            <example>
            <code>
            WMI w = new WMI(WMIPath.Win32_NetworkAdapterConfiguration);
            for(int i=0; i &lt; w.Count; i++)
            {
               if((bool)w[i, "IPEnabled"])
               {
                 Console.WriteLine("Caption:{0}", w[i, "Caption"]);
                 Console.WriteLine("MAC Address:{0}", w[i, "MACAddress"]);
               }
            }
            </code>
            </example>
        </member>
        <member name="F:EIIP.Framework.Management.WMI.m_mocs">
            <summary>
            信息集合
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMI.m_Names">
            <summary>
            用来存储属性名，便于忽略大小写查询正确名称。
            </summary>
        </member>
        <member name="F:EIIP.Framework.Management.WMI.m_Cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="M:EIIP.Framework.Management.WMI.#ctor(EIIP.Framework.Management.WMIPath)">
            <summary>
            构造函数
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:EIIP.Framework.Management.WMI.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">WMI路径</param>
        </member>
        <member name="M:EIIP.Framework.Management.WMI.PropertyNames(System.Int32)">
            <summary>
            返回所有属性名称。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.Framework.Management.WMI.ToString">
            <summary>
            获取信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.Framework.Management.WMI.Count">
            <summary>
            获取信息集合数量
            </summary>
        </member>
        <member name="P:EIIP.Framework.Management.WMI.Item(System.Int32,System.String)">
            <summary>
            获取指定属性值，注意某些结果可能是数组。
            </summary>
        </member>
    </members>
</doc>
