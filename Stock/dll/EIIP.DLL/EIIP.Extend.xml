<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EIIP.Extend</name>
    </assembly>
    <members>
        <member name="T:EIIP.IIS.IISWebServer">
            <summary>
            通过 ADSI 实现对 IIS 的管理
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerStateForeColor">
            <summary>
            推荐用于 ListView 的前景颜色
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerStateBackColor">
            <summary>
            推荐用于 ListView 的背景颜色
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerStateFont">
            <summary>
            推荐用于 ListView 的字体样式
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.State">
            <summary>
            标识当前网站的运行状态
            </summary>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.GetServerState(System.String)">
            <summary>
            通过状态码判断网站运行状态的方法
            </summary>
            <param name="statecode">网站运行状态码</param>
            <returns>string</returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.#ctor">
            <summary>
            初始化 IIS ADSI 连接
            </summary>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.#ctor(System.String)">
            <summary>
            初始化 IIS ADSI 连接
            </summary>
            <param name="path">ADSI 路径</param>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.GetDirectoryEntry(System.String)">
            <summary>
            构造DirectoryEntry实例。
            </summary>
            <param name="entPath">DirectoryEntry路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.GetDirectoryEntryByIndex(System.String)">
            <summary>
            根据网站编号构造 DirectoryEntry。失败返回null。
            </summary>
            <param name="m_Index">网站标识</param>
            <returns>如果网站存在则返回 DirectoryEntry，如果网站不存在则返回 null。</returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.CreateWebServer">
            <summary>
            创建一个新的网站。
            </summary>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.SetDirAcl(System.String,System.String)">
            <summary>
            为指定的用户设置在目录的权限。成功返回true。
            </summary>
            <param name="path">路径</param>
            <param name="user">用户名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.ResetDirAcl(System.String)">
            <summary>
            为指定的文件夹重置权限设置。成功返回true。
            </summary>
            <param name="strSitePath">路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.SetDiskQuota(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            在驱动器上设置帐户的磁盘配额。成功则返回 true。
            </summary>
            <param name="disk">盘符（注意此分区必须开启磁盘配额功能）</param>
            <param name="userName">用户名</param>
            <param name="limit">磁盘配额</param>
            <param name="warningLimit">警告额度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.ResetDiskQuota(System.String,System.String)">
            <summary>
            在驱动器上重置用户的配额信息。成功返回true。
            </summary>
            <param name="disk">盘符（注意此分区必须开启磁盘配额功能）</param>
            <param name="userName">用户名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.DeleteWebServerByName(System.String,System.Boolean)">
            <summary>
            删除指定名称的网站。
            </summary>
            <param name="siteName">网站名称</param>
            <param name="delFiles">是否同时删除站点文件</param>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.DeleteWebServerByIndex(System.String,System.Boolean)">
            <summary>
            删除指定编号的网站。
            </summary>
            <param name="siteIndex">网站编号</param>
            <param name="delFiles">是否同时删除站点文件</param>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.GetWebServerStatus(System.String)">
            <summary>
            获取当前站点的运行状态。
            </summary>
            <param name="siteName">网站名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.SetWebServerStatus(System.String,EIIP.IIS.IISWebServer.ServerState)">
            <summary>
            设置站点状态。
            </summary>
            <param name="siteName">网站名称</param>
            <param name="state">状态代码（0=停止;1=启动;2=暂停;3=继续;）</param>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.Contains(System.String)">
            <summary>
            确定一个新的网站与现有的网站没有相同的。这样防止将非法的数据存放到 IIS 里面去。如果存在则返回 true。
            </summary>
            <param name="bindStr">网站绑定信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.GetWebServerIndex(System.String)">
            <summary>
            获取一个网站的编号。根据网站的 ServerBindings 或者 ServerComment 来确定网站编号。
            </summary>
            <param name="siteName">网站的 ServerBindings 或者 ServerComment</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.GetNewWebServerIndex">
            <summary>
            获取网站系统里面可以使用的最小的ID。
            这是因为每个网站都需要有一个唯一的编号，而且这个编号越小越好。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.BackWebServer(System.String)">
            <summary>
            备份站点信息。如果备份成功则返回 true，否则返回 false。
            </summary>
            <param name="siteIndex">站点索引ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.IISWebServer.RestoreWebServer(System.String)">
            <summary>
            从文件恢复站点。如果恢复成功则返回 true。
            </summary>
            <param name="fileName">完整的文件名</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.FtpUserName">
            <summary>
            设置或获取网站 FTP 帐号
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.FtpUserPass">
            <summary>
            设置或获取网站 FTP 密码
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerIndex">
            <summary>
            设置或获取当前网站的标识
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.ServerHostName">
            <summary>
            设置或获取服务器名称
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.ServerIPAddress">
            <summary>
            设置或获取服务器 IP 地址
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.ServerUserName">
            <summary>
            设置或获取服务器登录帐号
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.ServerUserPass">
            <summary>
            设置或获取服务器登录密码
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.BackupFileName">
            <summary>
            设置或获取备份文件的路径，含文件名
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IusrUserName">
            <summary>
            设置或获取网站来宾帐户
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IusrUserPass">
            <summary>
            设置或获取网站来宾帐户密码
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IusrFullName">
            <summary>
            设置或获取网站来宾帐户全名
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IusrComment">
            <summary>
            设置或获取网站来宾帐户注释
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IwamUserName">
            <summary>
            设置获取网站 IIS 进程帐户
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IwamUserPass">
            <summary>
            设置获取网站 IIS 进程帐户密码
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IwamFullName">
            <summary>
            设置获取网站 IIS 进程帐户全名
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IwamComment">
            <summary>
            设置获取网站 IIS 进程帐户注释
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.IisSecurityUserGroup">
            <summary>
            设置或获取 IIS 安全帐号用户组
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.FtpSecurityUserGroup">
            <summary>
            设置或获取 FTP 安全帐号用户组
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerExpires">
            <summary>
            设置或获取网站过期时间。对应的帐号过期时间也使用此设置
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerComment">
            <summary>
            设置或获取网站注释
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerMainPath">
            <summary>
            设置或获取网站虚拟目录关联的物理路径
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerRootDir">
            <summary>
            设置或获取网站内容主目录，通常为 wwwtoot
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerExpandDir">
            <summary>
            设置或获取网站扩展内容目录，默认提供：LogFiles,Others,Databases
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerTemplateDir">
            <summary>
            设置或获取网站初始化模板的目录，比如网站创建之后要放置什么应用程序进去。以\结尾。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerMaxBandwidth">
            <summary>
            设置或获取网站可使用的网络带宽
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerMaxConnections">
            <summary>
            设置或获取网站的最大并发连接数
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerServerSize">
            <summary>
            设置或获取网站根据每天处理的客户端请求数指定服务器的常规大小。值 0 代表预计每天接收少于 10,000 个请求的小型网站；值 1 代表每天处理 10,000 到 100,000 个请求的中型站点；值 2 则代表每天处理多于 100,000 个请求的大型站点。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerAccessFlags">
            <summary>
            设置或获取网站用于配置文件访问权限的标志
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerAuthFlags">
            <summary>
            设置或获取网站作为有效方案返回给客户端的 Windows 验证方案的设置。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerDirBrowseFlags">
            <summary>
            设置或获取控制网站是否启用目录浏览等的权限标志
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.UseDiskQuotaLimit">
            <summary>
            设置或获取是否启用磁盘配额
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerDiskQuotaLimit">
            <summary>
            设置或获取磁盘配额额度
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerDiskQuotaWarningLimit">
            <summary>
            设置或获取磁盘配额警告额度
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerDefaultDoc">
            <summary>
            设置或获取网站默认文档的文件名
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerAppFriendlyName">
            <summary>
            设置或获取网站应用程序池软件包或应用程序的用户好记名称
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerAppIsolated">
            <summary>
            设置或获取网站应用程序是在进程内、进程外还是在进程池中运行。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerAppPoolId">
            <summary>
            设置或获取网站应用程序在其中路由的应用程序池。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerHttpCustomHeaders">
            <summary>
            设置或获取网站自定义 HTTP 头
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerAppRoot">
            <summary>
            获取到网站应用程序根目录的配置数据库路径。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.AutoInitTemplates">
            <summary>
            设置或获取是否开启智能模版重建。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerDontLog">
            <summary>
            设置或获取网站是否打开日志记录功能
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerContentIndexed">
            <summary>
            设置或获取安装的目录索引程序是否应该检索该网站目录树下的内容
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerBindings">
            <summary>
            设置或获取网站主机头名的绑定信息
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.WebServerHttpErrors">
            <summary>
            设置或获取网站自定义错误列表
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.BackupItems">
            <summary>
            设置或获取要备份的项目
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.DefaultHttpErrors">
            <summary>
            获取 IIS 默认的 HttpErrors 配置
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.DefaultScriptMaps">
            <summary>
            获取 IIS 默认的 ScriptMaps 配置
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.CreateAppPool">
            <summary>
            设置或获取是否新建进程池。
            </summary>
        </member>
        <member name="P:EIIP.IIS.IISWebServer.NewAppPoolId">
            <summary>
            设置或获取要创建的进程池的名称。
            </summary>
        </member>
        <member name="T:EIIP.IIS.IISWebServer.ServerState">
            <summary>
            表示网站运行状态
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Starting">
            <summary>
            服务器正在启动。
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Started">
            <summary>
            服务器已启动。
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Stopping">
            <summary>
            服务器正在停止。
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Stopped">
            <summary>
            服务器已停止。
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Pausing">
            <summary>
            服务器正在暂停。
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Paused">
            <summary>
            服务器已暂停。
            </summary>
        </member>
        <member name="F:EIIP.IIS.IISWebServer.ServerState.Continuing">
            <summary>
            服务器正在继续。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AccessToken">
            <summary>
            封装一个 Win32 标识处理类。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.DisposableObject">
            <summary>
            可释放资源的对象的基类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.DisposableObject.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.DisposableObject.Dispose">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.DisposableObject.Dispose(System.Boolean)">
            <summary>
            执行与释放或重置非托管资源相关的应用程序定义的任务。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:Microsoft.Win32.Security.AccessToken._handle">
            <summary>
            win32标识处理。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessToken.#ctor(System.IntPtr)">
            <summary>
            实例化 Win32 标识处理。
            </summary>
            <param name="handle">win32标识处理的资源句柄</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessToken.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessToken.GetTokenInformation(Microsoft.Win32.Security.TokenInformationClass)">
            <summary>
            获取非托管的令牌信息(需要调用者析构该对象)。
            </summary>
            <param name="TokenInformationClass">令牌信息类别</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessToken.EnablePrivilege(Microsoft.Win32.Security.TokenPrivilege)">
            <summary>
            启用一个指定的权限。当该权限不在权限列表中时，则抛出错误。
            </summary>
            <param name="privilege">令牌权限</param>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.Handle">
            <summary>
            获取一个win32标识处理托管包装对象。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.DefaultDacl">
            <summary>
            获取默认的自由决定的管制对象访问对象。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.Groups">
            <summary>
            获取令牌组集合。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.Privileges">
            <summary>
            获取权限集。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.ImpersonationLevel">
            <summary>
            获取安全模拟级别。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.Owner">
            <summary>
            获取所有者（安全性标识符，即系统的信任成员帐户）。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.PrimaryGroup">
            <summary>
            获取默认组（安全性标识符，即系统的信任成员帐户）。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.TerminalServicesSessionId">
            <summary>
            获取终端服务会话ID。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.Source">
            <summary>
            获取令牌源。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.Statistics">
            <summary>
            获取令牌统计数据。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.TokenType">
            <summary>
            获取令牌类型。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.User">
            <summary>
            获取用户。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AccessToken.IsRestricted">
            <summary>
            获取一个值，该值指示是否受限。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AccessTokenProcess">
            <summary>
            过程的访问令牌类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessTokenProcess.#ctor(System.Int32,Microsoft.Win32.Security.TokenAccessType)">
            <summary>
            实例化过程的访问令牌。
            </summary>
            <param name="pid"></param>
            <param name="desiredAccess">令牌访问类型。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessTokenProcess.TryOpenToken(System.Int32,Microsoft.Win32.Security.TokenAccessType)">
            <summary>
            尝试打开令牌。不存在则返回null。
            </summary>
            <param name="pid"></param>
            <param name="desiredAccess">令牌访问类型。</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Win32.Security.AccessTokenThread">
            <summary>
            线程的访问令牌类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessTokenThread.#ctor(System.Int32,Microsoft.Win32.Security.TokenAccessType)">
            <summary>
            实例化线程的访问令牌。
            </summary>
            <param name="threadId"></param>
            <param name="desiredAccess">令牌访问类型。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessTokenThread.TryOpenThreadToken(System.Int32,Microsoft.Win32.Security.TokenAccessType)">
            <summary>
            尝试打开线程令牌。不存在则返回null。
            </summary>
            <param name="threadId">系统线程ID</param>
            <param name="desiredAccess">令牌访问类型。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessTokenThread.HasToken(System.Int32)">
            <summary>
            测试指定线程ID的线程是否有令牌。
            </summary>
            <param name="tid">系统线程ID</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AccessTokenThread.TryOpenToken(System.Int32,Microsoft.Win32.Security.TokenAccessType)">
            <summary>
            尝试打开线程令牌。不存在则返回null。
            </summary>
            <param name="pid"></param>
            <param name="desiredAccess">令牌访问类型。</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Win32.Security.Ace">
            <summary>
            访问控制项类。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Ace._header">
            <summary>
            访问控制项头部数据。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Ace._accessType">
            <summary>
            访问控制项标志。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Ace._sid">
            <summary>
            安全性标志符。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Ace.Create(Microsoft.Win32.Security.MemoryMarshaler)">
            <summary>
            创建访问控制项。
            </summary>
            <param name="m">内存引用包装</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Ace.BaseInit(Microsoft.Win32.Security.AceType,System.Int32,Microsoft.Win32.Security.AceFlags,Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.AccessType)">
            <summary>
            初始化基本数据。
            </summary>
            <param name="type">访问控制项类型</param>
            <param name="size">访问控制项长度</param>
            <param name="flags">访问控制项标志</param>
            <param name="sid">访问控制项的安全性标志符。</param>
            <param name="accessType">访问控制项的访问类型</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Ace.BaseInit(Microsoft.Win32.Security.Win32Structs.ACE_HEADER,Microsoft.Win32.Security.AccessType,Microsoft.Win32.Security.Sid)">
            <summary>
            初始化基本数据。
            </summary>
            <param name="header">访问控制项头部数据</param>
            <param name="accessType">访问控制项的访问类型</param>
            <param name="sid">访问控制项的安全性标志符</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Ace.CheckInvariant">
            <summary>
            检查成员状态。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Ace.GetNativeACE">
            <summary>
            获取原生ACE的数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Ace.OffsetOfSid">
            <summary>
            获取ACE中SID结构的偏移量。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.Ace.Type">
            <summary>
            获取访问控制项类型。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Ace.Flags">
            <summary>
            获取访问控制项标志。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Ace.Size">
            <summary>
            获取访问控制项尺寸。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Ace.AccessType">
            <summary>
            获取访问控制项的访问类型。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Ace.Sid">
            <summary>
            获取访问控制项的安全性标志符。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AceAccess">
            <summary>
            访问控制基类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccess.#ctor(Microsoft.Win32.Security.MemoryMarshaler,System.Boolean)">
            <summary>
            实例化访问控制基类。
            </summary>
            <param name="m"></param>
            <param name="allowed">设置是否允许。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccess.#ctor(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.AceFlags,Microsoft.Win32.Security.AccessType,System.Boolean)">
            <summary>
            实例化访问控制基类。
            </summary>
            <param name="sid">安全性标志符。</param>
            <param name="flags">访问控制项标志。</param>
            <param name="accessType">访问控制项类型。</param>
            <param name="allowed">设置是否允许。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccess.GetNativeACE">
            <summary>
            获取原生ACE的数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccess.OffsetOfSid">
            <summary>
            获取ACE中SID结构的偏移量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccess.UnsafeCopyAceToNativeArray(System.Byte[])">
            <summary>
            复制ACE数据至原生ACE数组中。
            </summary>
            <param name="aceBytes">ACE数据</param>
        </member>
        <member name="P:Microsoft.Win32.Security.AceAccess.IsAllowed">
            <summary>
            获取一个值，该值指示是否允许。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AceAccess.IsInherited">
            <summary>
            获取一个值，该值指示是否继承。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.AceAccess.IsObjectAce">
            <summary>
            获取一个值，该值指示是否支持 Object ACE。始终返回false。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AceAccessAllowed">
            <summary>
            ACE允许访问控制类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccessAllowed.#ctor(Microsoft.Win32.Security.MemoryMarshaler)">
            <summary>
            实例化ACE允许访问控制。
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccessAllowed.#ctor(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.AccessType,Microsoft.Win32.Security.AceFlags)">
            <summary>
            实例化ACE允许访问控制。
            </summary>
            <param name="sid">合法的安全性标志符。</param>
            <param name="accessType">访问类型</param>
            <param name="flags">ACE标识</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccessAllowed.#ctor(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.AccessType)">
            <summary>
            实例化ACE允许访问控制。
            </summary>
            <param name="sid">合法的安全性标志符。</param>
            <param name="accessType">访问类型</param>
        </member>
        <member name="T:Microsoft.Win32.Security.AceAccessDenied">
            <summary>
            ACE拒绝访问控制类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccessDenied.#ctor(Microsoft.Win32.Security.MemoryMarshaler)">
            <summary>
            实例化ACE拒绝访问控制。
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccessDenied.#ctor(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.AccessType,Microsoft.Win32.Security.AceFlags)">
            <summary>
            实例化ACE拒绝访问控制。
            </summary>
            <param name="sid">合法的安全性标志符。</param>
            <param name="accessType">访问类型</param>
            <param name="flags">ACE标识</param>
        </member>
        <member name="M:Microsoft.Win32.Security.AceAccessDenied.#ctor(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.AccessType)">
            <summary>
            实例化ACE拒绝访问控制。
            </summary>
            <param name="sid">合法的安全性标志符。</param>
            <param name="accessType">访问类型</param>
        </member>
        <member name="T:Microsoft.Win32.Security.Aces">
            <summary>
            访问控制项集合类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Aces.#ctor">
            <summary>
            实例化访问控制项集合。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Aces.SetAce(System.Int32,Microsoft.Win32.Security.Ace)">
            <summary>
            设置指定索引位置的访问控制项。
            </summary>
            <param name="i">索引位置</param>
            <param name="ace">访问控制项</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Aces.Add(Microsoft.Win32.Security.Ace)">
            <summary>
            添加指定访问控制项。
            </summary>
            <param name="ace">访问控制项</param>
        </member>
        <member name="P:Microsoft.Win32.Security.Aces.Item(System.Int32)">
            <summary>
            获取指定索引的访问控制项。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.Acl">
            <summary>
            DACL 与 SACL 的访问控制列表基类。
            一个系统通过ACL来判断用户对资源的何种程度的访问。
            由两种类型的ACL：DACL（Discretionary Access Control List）和SACL（System Access Control List）。
            DACL包括户和组的列表，以及相应的权限，允许或是拒绝，用来确定对资源的访问权限。
            SACL则用来确定安全资源的审核策略。
            ACL由零个或多个ACE（Access Control Entries）组成，一个ACE包括一个SID和该SID可访问资源的描述，
            比如允许和拒绝，拒绝优先于允许。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.#ctor(System.IntPtr)">
            <summary>
            实例化访问控制列表基类。
            </summary>
            <param name="pacl"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.#ctor">
            <summary>
            实例化默认版本的访问控制列表实例。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.#ctor(Microsoft.Win32.Security.AclRevision)">
            <summary>
            实例化指定版本的访问控制列表实例。
            </summary>
            <param name="revision">版本</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.SetEmpty">
            <summary>
            设置访问控制项集合为空。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.SetNull">
            <summary>
            设置访问控制项集合为null。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.GetAce(System.Int32)">
            <summary>
            获取指定索引的访问控制项集合。
            </summary>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.RemoveAces(Microsoft.Win32.Security.Sid)">
            <summary>
            移除所有具有指定安全性标志符的访问控制项。有移除操作则返回true。
            </summary>
            <param name="sid">安全性标志符。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.AddAce(Microsoft.Win32.Security.Ace)">
            <summary>
            添加指定访问控制项。
            </summary>
            <param name="ace">访问控制项</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.GetNativeACL">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.SetAce(System.Int32,Microsoft.Win32.Security.Ace)">
            <summary>
            设置指定索引位置的访问控制项。
            </summary>
            <param name="i">索引位置</param>
            <param name="ace">访问控制项。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.PrepareAcesForACL">
            <summary>
            若必要则重新排序ACE集合。(仅DACL) 继承类实现。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Acl.GetEnumerator">
            <summary>
            返回一个循环访问集合的枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.Acl.IsEmpty">
            <summary>
            获取一个值，该值指示访问控制项集合是否为空。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Acl.IsNull">
            <summary>
            获取一个值，该值指示访问控制项集合是否为null。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Acl.AceCount">
            <summary>
            获取访问控制项数量。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.OrderAceAccess">
            <summary>
            访问控制项访问排序类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.OrderAceAccess.Compare(System.Object,System.Object)">
            <summary>
            比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。
            </summary>
            <param name="o1">要比较的第一个对象。</param>
            <param name="o2">要比较的第二个对象。</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Win32.Security.Dacl">
            <summary>
            自由决定的管制对象访问类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Dacl.#ctor(System.IntPtr)">
            <summary>
            实例化自由决定的管制对象访问。
            </summary>
            <param name="pacl"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Dacl.#ctor">
            <summary>
            实例化自由决定的管制对象访问。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Dacl.PrepareAcesForACL">
            <summary>
            重新排序ACE集合。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Dacl.AddAce(Microsoft.Win32.Security.AceAccess)">
            <summary>
            添加ACE访问控制。
            </summary>
            <param name="ace">ACE访问控制。</param>
        </member>
        <member name="T:Microsoft.Win32.Security.Luid">
            <summary>
            定义长整型的用户ID数据类型。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Luid.#ctor(Microsoft.Win32.Security.Win32Structs.LUID)">
            <summary>
            实例化长整型的用户ID数据类型。
            </summary>
            <param name="luid"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Luid.GetNativeLUID">
            <summary>
            获取内置的原生数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.Luid.Value">
            <summary>
            获取长整型数据。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.MemoryMarshaler">
            <summary>
            一个内存引用包装器类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.#ctor(System.IntPtr)">
            <summary>
            实例化内存引用包装器。
            </summary>
            <param name="ptr">句柄。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.Advance(System.Int32)">
            <summary>
            向前移动指针。
            </summary>
            <param name="cbLength">要移动的长度</param>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.ParseStruct(System.Type)">
            <summary>
            解析为指定类型的数据。
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.ParseStruct(System.Type,System.Boolean)">
            <summary>
            解析为指定类型的数据。
            </summary>
            <param name="type">类型</param>
            <param name="moveOffset">设置是否同时移动指针</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.ParseUInt8">
            <summary>
            解析byte类型数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.ParseUInt16">
            <summary>
            解析UInt16类型数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.ParseUInt32">
            <summary>
            解析UInt32类型数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.MemoryMarshaler.ParseUInt64">
            <summary>
            解析UInt64类型数据。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.MemoryMarshaler.Ptr">
            <summary>
            获取或设置句柄。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.NoThreadTokenException">
            <summary>
            尝试附加未实例的线程标识时发生的异常类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.NoThreadTokenException.#ctor(System.String)">
            <summary>
            实例化尝试附加未实例的线程标识时发生的异常。
            </summary>
            <param name="msg">异常消息</param>
        </member>
        <member name="M:Microsoft.Win32.Security.NoThreadTokenException.#ctor(System.String,System.Exception)">
            <summary>
            实例化尝试附加未实例的线程标识时发生的异常。
            </summary>
            <param name="msg">异常消息</param>
            <param name="innerException">关联异常</param>
        </member>
        <member name="T:Microsoft.Win32.Security.Sacl">
            <summary>
            系统的管制审核类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Sacl.#ctor(System.IntPtr)">
            <summary>
            实例化系统的管制审核。
            </summary>
            <param name="pacl"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Sacl.#ctor">
            <summary>
            实例化系统的管制审核。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Sacl.PrepareAcesForACL">
            <summary>
            无需排序。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.SecurityAttributes">
            <summary>
            安全属性类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributes.#ctor">
            <summary>
            实例化安全属性。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributes.Parse(System.IntPtr)">
            <summary>
            解析安全属性。
            </summary>
            <param name="pSecAttr"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributes.GetSECURITY_ATTRIBUTES">
            <summary>
            获取安全属性。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityAttributes.InheridHandles">
            <summary>
            获取或设置一个值，该值指示是否继承处理。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityAttributes.SecurityDescriptor">
            <summary>
            获取或设置安全描述器。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.SecurityAttributesMarshaler">
            <summary>
            安全属性封装器。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributesMarshaler.GetInstance(System.String)">
            <summary>
            获取封装实例。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributesMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            将非托管数据转换为托管数据。
            </summary>
            <param name="pNativeData">指向要包装的非托管数据的指针。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributesMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            将托管数据转换为非托管数据。
            </summary>
            <param name="ManagedObj">要转换的托管对象。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributesMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            对不再需要的托管数据进行必要的清理。
            </summary>
            <param name="ManagedObj">要销毁的托管对象。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributesMarshaler.GetNativeDataSize">
            <summary>
            返回要封送的本机数据的大小。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityAttributesMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            对不再需要的非托管数据进行必要的清理。
            </summary>
            <param name="pNativeData">指向要销毁的非托管数据的指针。</param>
        </member>
        <member name="T:Microsoft.Win32.Security.SecurityDescriptor">
            <summary>
            安全描述器类。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SecurityDescriptor._secDesc">
            <summary>
            安全描述器的非托管指针。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.#ctor(System.IntPtr)">
            <summary>
            实例化安全描述器。
            </summary>
            <param name="secDesc">安全描述器的非托管指针</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.#ctor">
            <summary>
            实例化空的安全描述器。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            实例化安全描述器。
            </summary>
            <param name="secDesc">安全描述器的非托管指针</param>
            <param name="useLocalFree"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetSecurityInfo(System.IntPtr,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            获取安全信息描述器。
            </summary>
            <param name="handle"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetNamedSecurityInfo(System.String,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            获取命名的安全信息描述器。
            </summary>
            <param name="objectName"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetRegistryKeySecurity(System.IntPtr,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            获取注册键的安全信息描述器。
            </summary>
            <param name="hKey"></param>
            <param name="secInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetFileSecurity(System.String)">
            <summary>
            获取指定文件的安全信息(包含DACL, GROUP 与 OWNER信息)。
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetFileSecurity(System.String,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            获取指定文件的安全信息(包含DACL, GROUP 与 OWNER信息)。
            </summary>
            <param name="fileName">文件名</param>
            <param name="secInfo">安全信息类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetKernelObjectSecurity(System.IntPtr)">
            <summary>
            获取Kernel Object的安全信息。
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.GetKernelObjectSecurity(System.IntPtr,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            获取Kernel Object的安全信息。
            </summary>
            <param name="handle"></param>
            <param name="secInfo">安全类型</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.MakeSeflRelative">
            <summary>
            创建自引用关系。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.MakeAbsolute">
            <summary>
            创建绝对关系。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetOwner(Microsoft.Win32.Security.Sid)">
            <summary>
            设置指定拥有者。
            </summary>
            <param name="owner">拥有者。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetOwner(Microsoft.Win32.Security.Sid,System.Boolean)">
            <summary>
            设置指定拥有者。
            </summary>
            <param name="owner">拥有者。</param>
            <param name="bDefaulted">是否为默认的</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetGroup(Microsoft.Win32.Security.Sid)">
            <summary>
            设置组。
            </summary>
            <param name="group">组。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetGroup(Microsoft.Win32.Security.Sid,System.Boolean)">
            <summary>
            设置组。
            </summary>
            <param name="group">组。</param>
            <param name="defaulted">是否为默认的。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetSacl(Microsoft.Win32.Security.Sacl)">
            <summary>
            设置SACL。
            </summary>
            <param name="sacl"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetSacl(Microsoft.Win32.Security.Sacl,System.Boolean)">
            <summary>
            设置SACL。
            </summary>
            <param name="sacl"></param>
            <param name="defaulted"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetDacl(Microsoft.Win32.Security.Dacl)">
            <summary>
            设置DACL。
            </summary>
            <param name="dacl"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetDacl(Microsoft.Win32.Security.Dacl,System.Boolean)">
            <summary>
            设置DACL。
            </summary>
            <param name="dacl"></param>
            <param name="defaulted"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetNullDacl(System.Boolean)">
            <summary>
            设置空的DACL。
            </summary>
            <param name="defaulted"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetFileSecurity(System.String,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            设置文件安全。
            </summary>
            <param name="fileName">文件名</param>
            <param name="secInfo">安全信息类型</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetKernelObjectSecurity(System.IntPtr,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            设置Kernel对象安全。
            </summary>
            <param name="handle"></param>
            <param name="secInfo">安全信息类型</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetRegistryKeySecurity(System.IntPtr,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            设置注册键安全。
            </summary>
            <param name="hKey"></param>
            <param name="secInfo">安全信息类型</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetSecurityInfo(System.IntPtr,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            设置安全信息。
            </summary>
            <param name="handle"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptor.SetNamedSecurityInfo(System.String,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION)">
            <summary>
            设置命名的安全信息。
            </summary>
            <param name="objectName"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsDaclDefaulted">
            <summary>
            获取一个值，该值指示是否是默认的DACL。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsDaclPresent">
            <summary>
            获取一个值，该值指示是否是当前的DACL。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsGroupDefaulted">
            <summary>
            获取一个值，该值指示是否是默认的组。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsOwnerDefaulted">
            <summary>
            获取一个值，该值指示是否是默认所有者。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsSaclDefaulted">
            <summary>
            获取一个值，该值指示是否是默认的SACL。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsSaclPresent">
            <summary>
            获取一个值，该值指示是否是当前的SACL。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Dacl">
            <summary>
            获取或设置自由决定的管制对象访问。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Sacl">
            <summary>
            获取或设置系统的管制审核。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Owner">
            <summary>
            获取或设置所有者。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Group">
            <summary>
            获取或设置组。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Size">
            <summary>
            获取尺寸。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsValid">
            <summary>
            获取一个值，该值指示是否是合法的。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.IsNull">
            <summary>
            获取一个值，该值指示是否为空。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.ControlFlags">
            <summary>
            获取安全描述器控制标志。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Revision">
            <summary>
            获取安全描述器修订版。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.SecurityDescriptor.Ptr">
            <summary>
            获取安全描述器的非托管指针。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.SecurityDescriptorMarshaler">
            <summary>
            安全描述包装器类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptorMarshaler.GetInstance(System.String)">
            <summary>
            获取包装实例。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptorMarshaler.MarshalNativeToManaged(System.IntPtr)">
            <summary>
            将非托管数据转换为托管数据。
            </summary>
            <param name="pNativeData">指向要包装的非托管数据的指针。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptorMarshaler.MarshalManagedToNative(System.Object)">
            <summary>
            将托管数据转换为非托管数据。
            </summary>
            <param name="ManagedObj">要转换的托管对象。</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptorMarshaler.CleanUpManagedData(System.Object)">
            <summary>
            对不再需要的托管数据进行必要的清理。
            </summary>
            <param name="ManagedObj">要销毁的托管对象。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptorMarshaler.GetNativeDataSize">
            <summary>
            返回要封送的本机数据的大小。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.SecurityDescriptorMarshaler.CleanUpNativeData(System.IntPtr)">
            <summary>
            对不再需要的非托管数据进行必要的清理。
            </summary>
            <param name="pNativeData">指向要销毁的非托管数据的指针。</param>
        </member>
        <member name="T:Microsoft.Win32.Security.Sid">
            <summary>
            安全性标志符。
            SID是在创建一个用户或组的时候由系统分配的，是唯一的。
            当一个本地用户登录时，SID将由系统从SAM中的用户数据库中取出。
            SID是个可变长度的二进制结构，它指出系统的信任成员帐户。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Sid.UnknownAccountName">
            <summary>
            未知帐户名称。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.#ctor(System.IntPtr,System.String)">
            <summary>
            实例化安全性标志符。
            </summary>
            <param name="psid"></param>
            <param name="machineName">机器名称</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.#ctor(System.String,System.String)">
            <summary>
            实例化安全性标志符。
            </summary>
            <param name="userName">用户名称</param>
            <param name="machineName">机器名称</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.#ctor(System.IntPtr)">
            <summary>
            实例化安全性标志符。
            </summary>
            <param name="psid"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.#ctor(System.String)">
            <summary>
            实例化安全性标志符。
            </summary>
            <param name="userName">机器名称</param>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.Create(Microsoft.Win32.Security.Win32Structs.SID_IDENTIFIER_AUTHORITY,System.UInt32[])">
            <summary>
            创建安全性标志符。
            </summary>
            <param name="identifierAuthority">身份验证</param>
            <param name="subAuthorities">子授权</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.Create(System.String,Microsoft.Win32.Security.Win32Structs.SID_IDENTIFIER_AUTHORITY,System.UInt32[])">
            <summary>
            创建安全性标志符。
            </summary>
            <param name="machineName">机器名称</param>
            <param name="identifierAuthority">身份验证</param>
            <param name="subAuthorities">子授权</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.UnsafeCreateSid(System.String,Microsoft.Win32.Security.Win32Structs.SID_IDENTIFIER_AUTHORITY,System.UInt32[])">
            <summary>
            创建安全性标志符。
            </summary>
            <param name="machineName">机器名称</param>
            <param name="IdentifierAuthority">身份验证</param>
            <param name="SubAuthorities">子授权</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.GetSubAuthorityCount">
            <summary>
            获取子权限数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.GetSubAuthority(System.Int32)">
            <summary>
            获取子权限。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.GetSID_IDENTIFIER_AUTHORITY">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.GetNativeSID">
            <summary>
            获取原生安全性标志符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.Equals(System.Object)">
            <summary>
            比较相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.op_Equality(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.Sid)">
            <summary>
            
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.op_Inequality(Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.Sid)">
            <summary>
            
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Win32.Security.Sid.EqualsPrefix(Microsoft.Win32.Security.Sid)">
            <summary>
            比较前缀。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.Sid.DomainName">
            <summary>
            获取域名。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sid.AccountName">
            <summary>
            获取帐户名称。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sid.CanonicalName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sid.SidString">
            <summary>
            获取安全性标志符字串。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sid.IsValid">
            <summary>
            获取一个值，该值指示是否是合法的。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sid.Size">
            <summary>
            获取尺寸。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.Sids">
            <summary>
            多个安全性标志符。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Null">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.World">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Local">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.CreatorOwner">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.CreatorGroup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.CreatorOwnerServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.CreatorGroupServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Dialup">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Network">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Batch">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Interactive">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Service">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.AnonymousLogon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Proxy">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.ServerLogon">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Self">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.AuthenticatedUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.RestrictedCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.TerminalServer">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.System">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Admins">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Users">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Guests">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.PowerUsers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.AccountOps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.SystemOps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.PrintOps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.BackupOps">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.Replicator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.RasServers">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.Sids.PreW2KAccess">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenGroup">
            <summary>
            令牌组。
            令牌.当用户登录到Windows NT/2000/XP，同时通过了身份认证，此时将会由系统为该用户分配一个令牌。
            令牌是一个数据结构，用于由所有该用户激活的进程和线程。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenGroup.#ctor(Microsoft.Win32.Security.MemoryMarshaler)">
            <summary>
            实例化令牌组。
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenGroup.Sid">
            <summary>
            获取安全性标志符。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenGroup.Attributes">
            <summary>
            获取令牌组属性。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenGroups">
            <summary>
            令牌组类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenGroups.#ctor(Microsoft.Win32.Security.UnmanagedHeapAlloc)">
            <summary>
            实例化指定令牌组。
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenGroups.Item(System.Int32)">
            <summary>
            获取指定索引的令牌组。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenPrivilege">
            <summary>
            令牌权限类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivilege.#ctor(Microsoft.Win32.Security.MemoryMarshaler)">
            <summary>
            实例化令牌权限。
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivilege.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            实例化指定令牌权限。
            </summary>
            <param name="systemName">系统名称</param>
            <param name="privilege">权限名称</param>
            <param name="enabled">设置是否允许</param>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivilege.#ctor(System.String,System.Boolean)">
            <summary>
            实例化指定令牌权限。
            </summary>
            <param name="privilege">权限名称</param>
            <param name="enabled">设置是否允许</param>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivilege.GetNativeLUID_AND_ATTRIBUTES">
            <summary>
            获取原生的用户ID与属性。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenPrivilege.Luid">
            <summary>
            获取长整型的用户ID。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenPrivilege.Attributes">
            <summary>
            获取权限属性。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenPrivilege.Name">
            <summary>
            获取名称。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenPrivileges">
            <summary>
            令牌权限集类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivileges.#ctor(Microsoft.Win32.Security.UnmanagedHeapAlloc)">
            <summary>
            实例化令牌权限集。
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivileges.#ctor">
            <summary>
            实例化令牌权限集。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivileges.Add(Microsoft.Win32.Security.TokenPrivilege)">
            <summary>
            添加令牌权限。
            </summary>
            <param name="privilege">令牌权限。</param>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenPrivileges.GetNativeTOKEN_PRIVILEGES">
            <summary>
            获取原生令牌权限。
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenPrivileges.Item(System.Int32)">
            <summary>
            获取指定索引位置的令牌权限。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenSource">
            <summary>
            令牌源。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenSource.#ctor(System.IntPtr)">
            <summary>
            实例化令牌源。
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenSource.Name">
            <summary>
            获取名称。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.TokenSource.Luid">
            <summary>
            获取长整型的用户ID。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenStatistics">
            <summary>
            令牌统计数据类。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._tokenId">
            <summary>
            令牌。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._authenticationId">
            <summary>
            授权者。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._expirationTime">
            <summary>
            过期时间。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._tokenType">
            <summary>
            令牌类型。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._impersonationLevel">
            <summary>
            安全身份级别。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._dynamicCharged">
            <summary>
            动态填充数。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._dynamicAvailable">
            <summary>
            动态有效数。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._groupCount">
            <summary>
            组数。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._privilegeCount">
            <summary>
            权限数量。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.TokenStatistics._modifiedId">
            <summary>
            修改者。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.TokenStatistics.#ctor(System.IntPtr)">
            <summary>
            实例化令牌统计数据。
            </summary>
            <param name="ptr"></param>
        </member>
        <member name="T:Microsoft.Win32.Security.UnmanagedHeapAlloc">
            <summary>
            封装非托管堆的类。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.UnmanagedHeapAlloc.#ctor(System.UInt32)">
            <summary>
            包装非托管堆。
            </summary>
            <param name="cbLength"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.UnmanagedHeapAlloc.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Microsoft.Win32.Security.UnmanagedHeapAlloc.Ptr">
            <summary>
            获取句柄。
            </summary>
        </member>
        <member name="P:Microsoft.Win32.Security.UnmanagedHeapAlloc.Size">
            <summary>
            获取长度。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.Win32Consts">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.SecurityImpersonationLevel">
            <summary>
            指示安全模拟的某一级别。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SecurityImpersonationLevel.SecurityAnonymous">
            <summary>
            匿名。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SecurityImpersonationLevel.SecurityIdentification">
            <summary>
            身份
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SecurityImpersonationLevel.SecurityImpersonation">
            <summary>
            模拟
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SecurityImpersonationLevel.SecurityDelegation">
            <summary>
            委托
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.PrivilegeAttributes">
            <summary>
            指定权限的某一属性。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.PrivilegeAttributes.Disabled">
            <summary>
            不可用。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.PrivilegeAttributes.EnabledByDefault">
            <summary>
            默认允许。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.PrivilegeAttributes.Enabled">
            <summary>
            允许。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.PrivilegeAttributes.UsedForAccess">
            <summary>
            用于访问。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AccessType">
            <summary>
            指示访问控制项的某一访问类型。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.TokenInformationClass">
            <summary>
            指示令牌信息的某一类别。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AceType">
            <summary>
            指示访问控制项的某一类型。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.AceFlags">
            <summary>
            指示访问控制项的某一标志。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.GroupAttributes">
            <summary>
            指示令牌组的某一属性。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.SECURITY_INFORMATION">
            <summary>
            安全信息的某一类型。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SECURITY_INFORMATION.PROTECTED_DACL_SECURITY_INFORMATION">
            <summary>
            仅Win2k
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SECURITY_INFORMATION.PROTECTED_SACL_SECURITY_INFORMATION">
            <summary>
            仅Win2k
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SECURITY_INFORMATION.UNPROTECTED_DACL_SECURITY_INFORMATION">
            <summary>
            仅Win2k
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.SECURITY_INFORMATION.UNPROTECTED_SACL_SECURITY_INFORMATION">
            <summary>
            仅Win2k
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.Win32Helpers">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Win32Helpers.GetSecurityInfo(System.IntPtr,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION,Microsoft.Win32.Security.Sid@,Microsoft.Win32.Security.Sid@,Microsoft.Win32.Security.Dacl@,Microsoft.Win32.Security.Sacl@,Microsoft.Win32.Security.SecurityDescriptor@)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
            <param name="sidOwner"></param>
            <param name="sidGroup"></param>
            <param name="dacl"></param>
            <param name="sacl"></param>
            <param name="secDesc"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Win32Helpers.GetNamedSecurityInfo(System.String,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION,Microsoft.Win32.Security.Sid@,Microsoft.Win32.Security.Sid@,Microsoft.Win32.Security.Dacl@,Microsoft.Win32.Security.Sacl@,Microsoft.Win32.Security.SecurityDescriptor@)">
            <summary>
            
            </summary>
            <param name="objectName"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
            <param name="sidOwner"></param>
            <param name="sidGroup"></param>
            <param name="dacl"></param>
            <param name="sacl"></param>
            <param name="secDesc"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Win32Helpers.SetSecurityInfo(System.IntPtr,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION,Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.Dacl,Microsoft.Win32.Security.Sacl)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <param name="ObjectType"></param>
            <param name="SecurityInfo"></param>
            <param name="sidOwner"></param>
            <param name="sidGroup"></param>
            <param name="dacl"></param>
            <param name="sacl"></param>
        </member>
        <member name="M:Microsoft.Win32.Security.Win32Helpers.SetNamedSecurityInfo(System.String,Microsoft.Win32.Security.SE_OBJECT_TYPE,Microsoft.Win32.Security.SECURITY_INFORMATION,Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.Sid,Microsoft.Win32.Security.Dacl,Microsoft.Win32.Security.Sacl)">
            <summary>
            
            </summary>
            <param name="objectName"></param>
            <param name="objectType"></param>
            <param name="securityInfo"></param>
            <param name="sidOwner"></param>
            <param name="sidGroup"></param>
            <param name="dacl"></param>
            <param name="sacl"></param>
        </member>
        <member name="T:Microsoft.Win32.Security.Win32">
            <summary>
            Win32Interop类。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.FALSE">
            <summary>
            逻辑假。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.TRUE">
            <summary>
            逻辑真。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.SUCCESS">
            <summary>
            成功。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_SUCCESS">
            <summary>
            异常-成功。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_ACCESS_DENIED">
            <summary>
            异常-访问拒绝。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_BAD_LENGTH">
            <summary>
            异常-错误的长度。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_INSUFFICIENT_BUFFER">
            <summary>
            异常-缓冲不足。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_NO_TOKEN">
            <summary>
            异常-无标识。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_NOT_ALL_ASSIGNED">
            <summary>
            异常-未完全分配。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32.ERROR_NONE_MAPPED">
            <summary>
            异常-无映射。
            </summary>
        </member>
        <member name="M:Microsoft.Win32.Security.Win32.SetLastError(System.UInt32)">
            KERNEL32.DLL
        </member>
        <member name="M:Microsoft.Win32.Security.Win32.OpenProcessToken(System.IntPtr,Microsoft.Win32.Security.TokenAccessType,System.IntPtr@)">
            
             ADVAPI32.DLL
            
        </member>
        <member name="M:Microsoft.Win32.Security.Win32.UnloadUserProfile(System.IntPtr,System.IntPtr)">
            
             USERENV.DLL (NT4+ only) 
            
        </member>
        <member name="T:Microsoft.Win32.Security.Win32Structs.TOKEN_DEFAULT_DACL">
            <summary>
            默认的自由决定的管制对象访问令牌结构。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32Structs.TOKEN_DEFAULT_DACL.DefaultDacl">
            <summary>
            默认的自由决定的管制对象访问。
            </summary>
        </member>
        <member name="T:Microsoft.Win32.Security.Win32Structs.ACE_HEADER">
            <summary>
            访问控制项头部结构。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32Structs.ACE_HEADER.SizeOf">
            <summary>
            访问控制项头部结构长度。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32Structs.ACE_HEADER.AceType">
            <summary>
            访问控制项类型。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32Structs.ACE_HEADER.AceFlags">
            <summary>
            访问控制项标志。
            </summary>
        </member>
        <member name="F:Microsoft.Win32.Security.Win32Structs.ACE_HEADER.AceSize">
            <summary>
            访问控制项长度。
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.Account">
            <summary>
            帐户操作类
            </summary>
        </member>
        <member name="M:EIIP.IIS.Windows.Account.CreateLocalUser(System.String,System.String,System.String,System.String,System.String,System.DateTime)">
            <summary>
            创建本地帐号
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <param name="group">用户组</param>
            <param name="fullName">全名</param>
            <param name="userComment">描述</param>
            <param name="expires">过期时间</param>
        </member>
        <member name="M:EIIP.IIS.Windows.Account.setLocalUserState(System.String,System.Int32)">
            <summary>
            设置本地帐号状态
            </summary>
            <param name="username">帐号</param>
            <param name="p_Type">状态</param>
        </member>
        <member name="P:EIIP.IIS.Windows.Account.SecurityUserGroup">
            <summary>
            设置或获取自定义用户组名称
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.API">
            <summary>
            常用的 API
            </summary>
        </member>
        <member name="M:EIIP.IIS.Windows.API.AnimateWindow(System.IntPtr,System.Int32,EIIP.IIS.Windows.API.AnimateType)">
            <summary>
            为指定的窗体添加启动效果。
            </summary>
            <param name="hwnd">窗体handle</param>
            <param name="dwTime">持续时间</param>
            <param name="dwFlags">呈现效果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.ShowWindowAsync(System.IntPtr,System.Int32)">
            <summary>
            与ShowWindow相似，只是这时的ShowWindow命令会投递到指定的窗口，然后进行异步处理。
            这样一来，就可控制从属于另一个进程的窗口的可视情况。
            同时无须担心另一个进程挂起的时候，自己的应用程序也会牵连其中
            </summary>
            <param name="hWnd">窗体handle</param>
            <param name="nCmdShow">要设置的窗体状态</param>
            <returns>如窗口之前是可见的，则返回TRUE，否则返回FALSE</returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.ShowWindow(System.IntPtr,System.Int64)">
            <summary>
            控制窗口的可见性。Long，如窗口之前是可见的，则返回TRUE（非零），否则返回FALSE（零）
            </summary>
            <param name="hwnd">窗体handle</param>
            <param name="nCmdShow">要设置的窗体状态</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.SetWindowPos(System.IntPtr,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            为窗口指定一个新位置和状态。非零表示成功，零表示失败。
            </summary>
            <param name="hwnd">窗体handle</param>
            <param name="hWndInsertAfter">窗口句柄。在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。</param>
            <param name="x">窗口新的x坐标。如hwnd是一个子窗口，则x用父窗口的客户区坐标表示</param>
            <param name="y">窗口新的y坐标。如hwnd是一个子窗口，则y用父窗口的客户区坐标表示</param>
            <param name="cx">指定新的窗口宽度</param>
            <param name="cy">指定新的窗口高度</param>
            <param name="wFlags">包含了旗标的一个整数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.SetForegroundWindow(System.IntPtr)">
            <summary>
            将窗口设为系统的前台窗口。这个函数可用于改变用户目前正在操作的应用程序
            </summary>
            <param name="hWnd">窗体handle</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.SendMessage(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            调用一个窗口的窗口函数，将一条消息发给那个窗口。Long，由具体的消息决定
            </summary>
            <param name="hwnd">要接收消息的那个窗口的句柄</param>
            <param name="wMsg">消息的标识符</param>
            <param name="wParam">具体取决于消息</param>
            <param name="lParam">具体取决于消息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.HandleRunningInstance(System.Diagnostics.Process)">
            <summary>
            设定指定Process为当前进程
            </summary>
            <param name="instance">已经存在的Process</param>
        </member>
        <member name="M:EIIP.IIS.Windows.API.RunningInstance(System.String)">
            <summary>
            获取当前已经运行的实例。先前已经存在的实例
            </summary>
            <param name="FileName">需要验证的程序集的加载的文件路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.GetInstance(System.String)">
            <summary>
            获取系统中已经存在的包含指定文件名的进程。返回可能从该文件加载的进程实例。
            </summary>
            <param name="FileName">需要验证的文件名称，可包含路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.ReBuildIconCache">
            <summary>
            重建图标缓存。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.RegistryRW(System.String,System.String,System.String)">
            <summary>
            读取或写入指定的注册表项目。
            </summary>
            <param name="RegPath">完整的注册表路径</param>
            <param name="RegItem">要读取或者写入的注册表项</param>
            <param name="NewValue">要写入的值，如果为空则表示读取</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.API.GetRegistryKey(System.String,System.Boolean)">
            <summary>
            根据注册表路径自动获取RegistryKey对象
            </summary>
            <param name="regPath">完整的注册表路径</param>
            <param name="canWrite">设置是否可写</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.IIS.Windows.API.hWndInsertAfter">
            <summary>
            窗口句柄。在窗口列表中，窗口hwnd会置于这个窗口句柄的后面。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.hWndInsertAfter.HWND_BOTTOM">
            <summary>
            将窗口置于窗口列表底部
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.hWndInsertAfter.HWND_TOP">
            <summary>
            将窗口置于Z序列的顶部；Z序列代表在分级结构中，窗口针对一个给定级别的窗口显示的顺序
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.hWndInsertAfter.HWND_TOPMOST">
            <summary>
            将窗口置于列表顶部，并位于任何最顶部窗口的前面
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.hWndInsertAfter.HWND_NOTOPMOST">
            <summary>
            将窗口置于列表顶部，并位于任何最顶部窗口的后面
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.API.wFlags">
            <summary>
            包含了旗标的一个整数
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_DRAWFRAME">
            <summary>
            围绕窗口画一个框
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_HIDEWINDOW">
            <summary>
            隐藏窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_NOACTIVATE">
            <summary>
            不激活窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_NOMOVE">
            <summary>
            保持当前位置（x和y设定将被忽略）
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_NOREDRAW">
            <summary>
            窗口不自动重画
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_NOSIZE">
            <summary>
            保持当前大小（cx和cy会被忽略）
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_NOZORDER">
            <summary>
            保持窗口在列表的当前位置（hWndInsertAfter将被忽略）
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_SHOWWINDOW">
            <summary>
            显示窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.wFlags.SWP_FRAMECHANGED">
            <summary>
            强迫一条WM_NCCALCSIZE消息进入窗口，即使窗口的大小没有改变
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.API.nCmdShow">
            <summary>
            要设置的窗体状态
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_HIDE">
            <summary>
            隐藏窗口，活动状态给令一个窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_MINIMIZE">
            <summary>
            最小化窗口，活动状态给令一个窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_RESTORE">
            <summary>
            用原来的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOW">
            <summary>
            用当前的大小和位置显示一个窗口，同时令其进入活动状态
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOWMAXIMIZED">
            <summary>
            最大化窗口，并将其激活
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOWMINIMIZED">
            <summary>
            最小化窗口，并将其激活
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOWMINNOACTIVE">
            <summary>
            最小化一个窗口，同时不改变活动窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOWNA">
            <summary>
            用当前的大小和位置显示一个窗口，不改变活动窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOWNOACTIVATE">
            <summary>
            用最近的大小和位置显示一个窗口，同时不改变活动窗口
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.nCmdShow.SW_SHOWNORMAL">
            <summary>
            与SW_RESTORE相同
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.API.AnimateType">
            <summary>
            标识动画效果
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_HOR_POSITIVE">
            <summary>
            水平平铺，从左到右
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_HOR_NEGATIVE">
            <summary>
            水平平铺，从右到左
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_VER_POSITIVE">
            <summary>
            垂直平铺，从上到下
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_VER_NEGATIVE">
            <summary>
            垂直平铺，从下到上
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_CENTER">
            <summary>
            矩形扩散（由中间向四周扩散）
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_HIDE">
            <summary>
            在窗体卸载时若想使用本函数就得加上此常量
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_ACTIVATE">
            <summary>
            正常，但是打开口把焦点放在该窗体上
            在窗体通过本函数打开后，默认情况下会失去焦点，除非加上本常量
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_SLIDE">
            <summary>
            正常，看不出任何效果
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.API.AnimateType.AW_BLEND">
            <summary>
            淡入淡出
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.INI">
            <summary>
            .INI文件操作类。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.INI.Path">
            <summary>
            设置或获取INI文件的路径。
            </summary>
        </member>
        <member name="M:EIIP.IIS.Windows.INI.Write(System.String,System.String,System.String)">
            <summary>
            为INI文件指定小节写入一个项和值
            </summary>
            <param name="Section">小节名，不区分大小写</param>
            <param name="Key">项名，不区分大小写</param>
            <param name="value">值，如果取值为null该项会被删除</param>
        </member>
        <member name="M:EIIP.IIS.Windows.INI.Read(System.String,System.String)">
            <summary>
            读取INI文件指定小节的项值
            </summary>
            <param name="Section">小节名，不区分大小写</param>
            <param name="Key">项名，不区分大小写</param>
            <returns>值</returns>
        </member>
        <member name="T:EIIP.IIS.Windows.PMU">
            <summary>
            Windows(x86) 电源管理
            </summary>
        </member>
        <member name="M:EIIP.IIS.Windows.PMU.ExitWindows(System.Int32,System.Boolean)">
            <summary>
            退出Windows。
            </summary>
            <param name="how">退出的选项。</param>
            <param name="force">设置是否强制</param>
        </member>
        <member name="M:EIIP.IIS.Windows.PMU.ExitWindows(EIIP.IIS.Windows.PMU.ExitOptions,System.Boolean)">
            <summary>
            退出Windows。
            </summary>
            <param name="how">退出选项。</param>
            <param name="force">设置是否强制</param>
        </member>
        <member name="M:EIIP.IIS.Windows.PMU.EnableToken(System.String)">
            <summary>
            启用令牌。
            </summary>
            <param name="privilege">权限字串。</param>
        </member>
        <member name="M:EIIP.IIS.Windows.PMU.SuspendSystem(System.Boolean,System.Boolean)">
            <summary>
            挂起系统。
            </summary>
            <param name="hibernate">设置是否休眠。</param>
            <param name="force">设置是否强制</param>
        </member>
        <member name="M:EIIP.IIS.Windows.PMU.CheckEntryPoint(System.String,System.String)">
            <summary>
            检查实体点。
            </summary>
            <param name="library"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.IIS.Windows.PMU.FormatError(System.Int32)">
            <summary>
            格式化错误号字串。
            </summary>
            <param name="number">错误号。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.IIS.Windows.PMU.ExitOptions">
            <summary>
            指示退出的某一选项。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.PMU.ExitOptions.LogOff">
            <summary>
            注销。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.PMU.ExitOptions.PowerOff">
            <summary>
            关闭电源。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.PMU.ExitOptions.Reboot">
            <summary>
            重新启动。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.PMU.ExitOptions.ShutDown">
            <summary>
            关机。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.PMU.ExitOptions.Suspend">
            <summary>
            挂起。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.PMU.ExitOptions.Hibernate">
            <summary>
            休眠。
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.PrivilegeException">
            <summary>
            权限异常。
            </summary>
        </member>
        <member name="M:EIIP.IIS.Windows.PrivilegeException.#ctor">
            <summary>
            实例化权限异常。
            </summary>
        </member>
        <member name="M:EIIP.IIS.Windows.PrivilegeException.#ctor(System.String)">
            <summary>
            实例化权限异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:EIIP.IIS.Windows.LUID">
            <summary>
            UID结构。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.LUID.LowPart">
            <summary>
            低位。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.LUID.HighPart">
            <summary>
            高位。
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.LUID_AND_ATTRIBUTES">
            <summary>
            UID及属性结构。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.LUID_AND_ATTRIBUTES.pLuid">
            <summary>
            UID
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.LUID_AND_ATTRIBUTES.Attributes">
            <summary>
            属性
            </summary>
        </member>
        <member name="T:EIIP.IIS.Windows.TOKEN_PRIVILEGES">
            <summary>
            令牌权限结构。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.TOKEN_PRIVILEGES.PrivilegeCount">
            <summary>
            权限数量。
            </summary>
        </member>
        <member name="F:EIIP.IIS.Windows.TOKEN_PRIVILEGES.Privileges">
            <summary>
            权限。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.Analyzer">
            <summary>
            构建分词流的分析器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Analyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Analyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Analyzer.GetPreviousTokenStream">
            <summary>
            获取之前的分词流。 
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Analyzer.SetPreviousTokenStream(System.Object)">
            <summary>
            设置之前的分词流。
            </summary>
            <param name="obj">要设置的分词流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Analyzer.GetPositionIncrementGap(System.String)">
            <summary>
            获取要添加的下一分词的增量间隙。索引一个字段实例时调用。
            这允许自定义分析器在(使用相同字段名的)字段实例间的一个自动增量间隙进行放置。
            默认增量间隙为0。
            若增量间隙为0且典型默认分词位置增量为1时，所有在一个字段的词，包括交叉字段实例，都处于一个连续序列中，
            并允许精确查询匹配。比如交叉字段实例边界。
            </summary>
            <param name="fieldName">要被索引的字段名称。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.CHAnalyzer">
            <summary>
            中文分析器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CHAnalyzer.#ctor">
            <summary>
            实例化中文分析器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CHAnalyzer.#ctor(System.Boolean)">
            <summary>
            实例化中文分析器。
            </summary>
            <param name="originalResult">设置是否使用原始文本</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CHAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的分词流。
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略。</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.CHTokenizer">
            <summary>
            中文分词器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.Tokenizer">
            <summary>
            分词器基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.TokenStream">
            <summary>
            一个来自文档字段或查询文本的顺序枚举标识的分词流基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenStream.Next">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenStream.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenStream.Reset">
            <summary>
            重置流至起始位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenStream.Close">
            <summary>
            关闭流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Tokenizer.input">
            <summary>
            文本源。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Tokenizer.#ctor">
            <summary>
            实例化空输入流的分词器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Tokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化指定输入流的分词器基类。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Tokenizer.Close">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Tokenizer.Reset(System.IO.TextReader)">
            <summary>
            重置分词器。
            </summary>
            <param name="input">新的分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CHTokenizer.InitCHSegment(System.String)">
            <summary>
            初始化中文分词段。
            </summary>
            <param name="fileName">中文分词配置文件(.xml)路径</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CHTokenizer.#ctor">
            <summary>
            实例化中文分词器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CHTokenizer.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            实例化中文分词器。
            </summary>
            <param name="input">文本阅读器。</param>
            <param name="originalResult">设置是否使用原始文本。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CHTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化中文分词器。
            </summary>
            <param name="input">文本阅读器。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CHTokenizer.Next">
            <summary>
            实现Tokenizer的Next方法，把分解出来的每一个词构造为一个Token，因为Token是DotLucene分词的基本单位。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CHTokenizer.SegmentToWordInfos(System.String)">
            <summary>
            将段转换为分词信息列表。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.CharArraySet">
            <summary>
            字符数组集类。将字符串以字符数组的方式存储于哈希表。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化字符数组集。
            </summary>
            <param name="startSize">指定起始的集尺寸</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.#ctor(System.Collections.ICollection,System.Boolean)">
            <summary>
            实例化字符数组集。
            </summary>
            <param name="c">提供源数据的集合</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.Contains(System.Char[],System.Int32,System.Int32)">
            <summary>
            true if the <code>len</code> chars of <code>text</code> starting at <code>off</code>
            are in the set 
            测试集中是否包含指定的字符。
            </summary>
            <param name="text">提供测试源字符的数组</param>
            <param name="off">要测试字符的起始索引</param>
            <param name="len">要测试的字符数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.Add(System.String)">
            <summary>
            添加字符串。
            </summary>
            <param name="text">要添加的字符串。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.Add(System.Char[])">
            <summary>
            添加字符数组。
            </summary>
            <param name="text">字符数组。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.Contains(System.Object)">
            <summary>
            确定集合是否包含特定键。
            </summary>
            <param name="o">要定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.Add(System.Object)">
            <summary>
            添加键。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.GetEnumerator">
            <summary>
            获取迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Analysis.CharArraySet.Count">
            <summary>
            获取键/值对的数目。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.CharArraySet.Size">
            <summary>
            获取键/值对的数目。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.CharArraySet.IsEmpty">
            <summary>
            获取一个值，该值指示集是否是空的。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator">
            <summary>
            字符数组集迭代器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.#ctor(EIIP.SE.Analysis.CharArraySet)">
            <summary>
            实例化字符数组集迭代器。
            </summary>
            <param name="set">字符数组集。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.MoveNext">
            <summary>
            测试是否能移至下一位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.NextCharArray">
            <summary>
            获取下一字符数组。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.Remove">
            <summary>
            始终抛出异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.Reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.Current">
            <summary>
            获取当前元素。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.CharArraySet.CharArraySetIterator.CharArraySet">
            <summary>
            获取内置字符数组集。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.CachingTokenFilter">
            <summary>
            可缓存的分词过滤器类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.TokenFilter">
            <summary>
            分词过滤器基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.TokenFilter.input">
            <summary>
            关联的源分词流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenFilter.#ctor(EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化分词过滤器基类。
            </summary>
            <param name="input">要关联的源分词流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenFilter.Close">
            <summary>
            关闭流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.TokenFilter.Reset">
            <summary>
            重置流至起始位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CachingTokenFilter.#ctor(EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化可缓存的分词过滤器。
            </summary>
            <param name="input">要关联的源分词流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CachingTokenFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CachingTokenFilter.Reset">
            <summary>
            重置流至起始位置。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.ISOLatin1AccentFilter">
            <summary>
            ISO拉丁字符集(ISO-8859-1)中的注音字符的分词过滤器类。如'ξagrave;'会被'a'替换。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.ISOLatin1AccentFilter.#ctor(EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化ISO拉丁字符集(ISO-8859-1)中的注音字符的分词过滤器。
            </summary>
            <param name="input">要关联的源分词流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.ISOLatin1AccentFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.ISOLatin1AccentFilter.RemoveAccents(System.Char[],System.Int32)">
            <summary>
            以等价的无重音字符替换重音字符。
            </summary>
            <param name="input">输入</param>
            <param name="length">长度</param>
        </member>
        <member name="T:EIIP.SE.Analysis.LengthFilter">
            <summary>
            特定长度的分词过滤器类。从流中移除太长或太短的词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.LengthFilter.#ctor(EIIP.SE.Analysis.TokenStream,System.Int32,System.Int32)">
            <summary>
            实例化特定长度的分词过滤器。
            </summary>
            <param name="input">源分词流。</param>
            <param name="min">分词的最小长度</param>
            <param name="max">分词的最大长度</param>
        </member>
        <member name="M:EIIP.SE.Analysis.LengthFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.LowerCaseFilter">
            <summary>
            小写转换过滤器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.LowerCaseFilter.#ctor(EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化小写转换过滤器。
            </summary>
            <param name="input">标识输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.LowerCaseFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.PorterStemFilter">
            <summary>
            使用 Porter Stemming 算法还原英文单词的词性、词形变化，去掉前缀、后缀等的分词过滤器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemFilter.#ctor(EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化使用 Porter Stemming 算法还原英文单词的词性、词形变化，去掉前缀、后缀等的分词过滤器。
            </summary>
            <param name="input">源分词流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.PorterStemmer">
            <summary> 
            实现 Porter Stemming 算法的类。
            用来还原英文单词的词性、词形变化，去掉前缀、后缀等。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.PorterStemmer.INC">
            <summary>
            字符数组b的最大容量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.#ctor">
            <summary>
            实例化实现 Porter Stemming 算法的类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Add(System.Char)">
            <summary>
            添加指定字符。当添加完字符后，可以调用 Stem(void) 以处理这个单词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.ToString">
            <summary>
            获取还原后的英文单词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Cons(System.Int32)">
            <summary>
            测试是否是辅音字符。
            </summary>
            <param name="i">单词中的字符索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.M">
            <summary>
            测量k0-j间元音辅音重复次数。
            若c:辅音 v:元音，则
            <c></c>       返回 0
            <c>vc</c>     返回 1
            <c>vcvc</c>   返回 2
            <c>vcvcvc</c> 返回 3
            ...
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Vowelinstem">
            <summary>
            测试k0-j间是否含有元音。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Doublec(System.Int32)">
            <summary>
            测试指定索引位置是否存在两个连续的辅音字符。
            </summary>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Cvc(System.Int32)">
            <summary>
            测试指定索引位置是否存在 辅音-元音-辅音 字符组合。
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Stem(System.String)">
            <summary>
            还原英文单词的词性、词形变化，去掉前缀、后缀等。
            </summary>
            <param name="s">要还原的单词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Stem(System.Char[])">
            <summary>
            还原英文单词的词性、词形变化，去掉前缀、后缀等。若存在还原则返回true。
            可使用 getResultLength()/getResultBuffer() 或 toString() 获取结果单词。
            </summary>
            <param name="word">待还原单词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Stem(System.Char[],System.Int32,System.Int32)">
            <summary>
            还原英文单词的词性、词形变化，去掉前缀、后缀等。若存在还原则返回true。
            可使用 getResultLength()/getResultBuffer() 或 toString() 获取结果单词。
            </summary>
            <param name="wordBuffer">待还原单词</param>
            <param name="offset">起始下标</param>
            <param name="wordLen">最后一个单词的下标</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Stem(System.Char[],System.Int32)">
            <summary>
            还原英文单词的词性、词形变化，去掉前缀、后缀等。若存在还原则返回true。
            可使用 getResultLength()/getResultBuffer() 或 toString() 获取结果单词。
            </summary>
            <param name="word">待还原单词</param>
            <param name="wordLen">最后一个单词的下标</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Stem">
            <summary>
            还原英文单词的词性、词形变化，去掉前缀、后缀等。若存在还原则返回true。
            可使用 getResultLength()/getResultBuffer() 或 toString() 获取结果单词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PorterStemmer.Stem(System.Int32)">
            <summary>
            还原英文单词的词性、词形变化，去掉前缀、后缀等。若存在还原则返回true。
            可使用 getResultLength()/getResultBuffer() 或 toString() 获取结果单词。
            </summary>
            <param name="i0">起始下标</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Analysis.PorterStemmer.ResultLength">
            <summary>
            获取还原后的英文单词的长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.PorterStemmer.ResultBuffer">
            <summary>
            获取还原后的英文单词字符数组。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.Standard.StandardFilter">
            <summary>
            标准过滤器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardFilter.APOSTROPHE_TYPE">
            <summary>
            省略符号类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardFilter.ACRONYM_TYPE">
            <summary>
            缩写字类型。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardFilter.#ctor(EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化标准过滤器。
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            实例化分词过滤器基类。
            </summary>
            <param name="reusableToken">重用的分词。</param>
        </member>
        <member name="T:EIIP.SE.Analysis.StopFilter">
            <summary>
            停用词过滤器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.#ctor(EIIP.SE.Analysis.TokenStream,System.String[])">
            <summary>
            实例化停用词过滤器。
            </summary>
            <param name="input">输入标识流</param>
            <param name="stopWords">要过滤的停用词数组</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.#ctor(EIIP.SE.Analysis.TokenStream,System.String[],System.Boolean)">
            <summary>
            实例化停用词过滤器。
            </summary>
            <param name="input">输入标识流</param>
            <param name="stopWords">要过滤的停用词数组</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.#ctor(EIIP.SE.Analysis.TokenStream,System.Collections.Hashtable,System.Boolean)">
            <summary>
            实例化停用词过滤器。
            </summary>
            <param name="input">输入标识流</param>
            <param name="stopWords">要过滤的停用词表</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.#ctor(EIIP.SE.Analysis.TokenStream,System.Collections.Hashtable)">
            <summary>
            实例化停用词过滤器。
            </summary>
            <param name="input">输入标识流</param>
            <param name="stopWords">要过滤的停用词表</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.MakeStopSet(System.String[])">
            <summary>
            构建停用词集。
            </summary>
            <param name="stopWords">要过滤的停用词数组</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.MakeStopSet(System.String[],System.Boolean)">
            <summary>
            构建停用词集。
            </summary>
            <param name="stopWords">要过滤的停用词数组</param>
            <param name="ignoreCase">设置是否忽略大小写</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Analysis.StopFilter.EnablePositionIncrementsDefault">
            <summary>
            获取或设置一个值，该值指示是否设置缺省位置增量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.StopFilter.EnablePositionIncrements">
            <summary>
            获取或设置一个值，该值指示是否设置位置增量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.TeeTokenFilter">
            <summary>
            连接词分词过滤器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.TeeTokenFilter.#ctor(EIIP.SE.Analysis.TokenStream,EIIP.SE.Analysis.SinkTokenizer)">
            <summary>
            实例化特定长度的分词过滤器。
            </summary>
            <param name="input">源分词流。</param>
            <param name="sink"></param>
        </member>
        <member name="M:EIIP.SE.Analysis.TeeTokenFilter.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.KeywordAnalyzer">
            <summary>
            构建关键字分词流的分析器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.KeywordAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的关键字分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.KeywordAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的关键字分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.PerFieldAnalyzerWrapper">
            <summary>
            构建分词流的有预字段处理能力的分析器包装类。
            <p>示例:
            <pre>
            PerFieldAnalyzerWrapper wrapper = new PerFieldAnalyzerWrapper(new StandardAnalyzer());
            wrapper.addAnalyzer("firstname", new KeywordAnalyzer());
            wrapper.addAnalyzer("lastname", new KeywordAnalyzer());
            </pre>
            </p>StandardAnalyzer会使用"firstname"与"lastname"字段时，取而代之的是KeywordAnalyzer。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.PerFieldAnalyzerWrapper.#ctor(EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化构建分词流的有预字段处理能力的分析器包装。
            </summary>
            <param name="defaultAnalyzer">要包装的分析器</param>
        </member>
        <member name="M:EIIP.SE.Analysis.PerFieldAnalyzerWrapper.AddAnalyzer(System.String,EIIP.SE.Analysis.Analyzer)">
            <summary>
            关联指定字段的分析器。
            </summary>
            <param name="fieldName">要关联的字段名称</param>
            <param name="analyzer">要关联的分析器</param>
        </member>
        <member name="M:EIIP.SE.Analysis.PerFieldAnalyzerWrapper.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的有预字段处理能力的分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PerFieldAnalyzerWrapper.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的有预字段处理能力的分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PerFieldAnalyzerWrapper.GetPositionIncrementGap(System.String)">
            <summary>
            获取指定字段名称的位置增量因子。
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.PerFieldAnalyzerWrapper.ToString">
            <summary>
            输出包装信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.SimpleAnalyzer">
            <summary>
            构建小写字母分词流的分析器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.SimpleAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的小写字母分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.SimpleAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的小写字母分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.Standard.StandardAnalyzer">
            <summary>
            标准分析器类。使用了英文停用词。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardAnalyzer.DEFAULT_MAX_TOKEN_LENGTH">
            <summary>
            缺省最大允许的分词长度(255)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardAnalyzer.STOP_WORDS">
            <summary>
            包含一些通用英文单词的停用词数组。停用词指对搜索无用的词，如and，or等。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.#ctor">
            <summary>
            实例化使用默认英文停用词的标准分析器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.#ctor(System.Collections.Hashtable)">
            <summary>
            实例化使用指定英文停用词的标准分析器。
            </summary>
            <param name="stopWords">英文停用词表</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.#ctor(System.String[])">
            <summary>
            实例化使用指定英文停用词的标准分析器。
            </summary>
            <param name="stopWords">英文停用词数组</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.#ctor(System.IO.FileInfo)">
            <summary>
            实例化使用指定英文停用词的标准分析器。
            </summary>
            <param name="stopwords">提供英文停用词的文件</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.#ctor(System.IO.TextReader)">
            <summary>
            实例化使用指定英文停用词的标准分析器。
            </summary>
            <param name="stopwords">提供英文停用词的文本阅读器</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的标识流。依次包装标准过滤器、小写过滤器与停用词过滤器。
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的分词流。 依次包装标准过滤器、小写过滤器与停用词过滤器。
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardAnalyzer.MaxTokenLength">
            <summary>
            获取或设置最大分词长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.Standard.StandardTokenizer">
            <summary>
            标准分词器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.ALPHANUM">
            <summary>
            字母数字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.APOSTROPHE">
            <summary>
            省略符号
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.ACRONYM">
            <summary>
            缩写字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.COMPANY">
            <summary>
            公司
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.EMAIL">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.HOST">
            <summary>
            主机
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.NUM">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.CJ">
            <summary>
            接头
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.ACRONYM_DEP">
            <summary>
            缩写字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizer.TOKEN_TYPES">
            <summary>
            分词类型。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化标准分词器。
            </summary>
            <param name="input">字符输入流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizer.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizer.Reset">
            <summary>
            重置流至起始位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizer.Reset(System.IO.TextReader)">
            <summary>
            重置分词器。
            </summary>
            <param name="reader">新的分词输入流</param>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardTokenizer.MaxTokenLength">
            <summary>
            获取或设置最大分词长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardTokenizer.Input">
            <summary>
            设置分词输入源。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.Standard.StandardTokenizerImpl">
            <summary>
            标准化分词实体类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.YYEOF">
            <summary>
            指示文件结尾。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_BUFFERSIZE">
            <summary>
            预取缓存的初始化尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.YYINITIAL">
            <summary>
            语法初始化状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_CMAP_PACKED">
            <summary>
            传输字符集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ALPHANUM">
            <summary>
            字母数字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.APOSTROPHE">
            <summary>
            省略符号
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ACRONYM">
            <summary>
            缩写字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.COMPANY">
            <summary>
            公司
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.EMAIL">
            <summary>
            电子邮件
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.HOST">
            <summary>
            主机
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.NUM">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.CJ">
            <summary>
            接头
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ACRONYM_DEP">
            <summary>
            缩写字
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_CMAP">
            <summary>
            传输字符集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_ACTION">
            <summary>
            DFA状态集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_ROWMAP">
            <summary>
            行索引集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_TRANS">
            <summary>
            DFA转换表。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_ERROR_MSG">
            <summary>
            与异常代码对应的异常信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZZ_ATTRIBUTE">
            <summary>
            状态的属性集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzReader">
            <summary>
            输入设备。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzState">
            <summary>
            DFA的当前状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzLexicalState">
            <summary>
            当前语法状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzBuffer">
            <summary>
            缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzMarkedPos">
            <summary>
            最后标记的位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzPushbackPos">
            <summary>
            回压的位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzCurrentPos">
            <summary>
            缓存中当前文本位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzStartRead">
            <summary>
            缓存中开始读取的位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzEndRead">
            <summary>
            缓存中结束读取的位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.yyline">
            <summary>
            匹配文本的行号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.yychar">
            <summary>
            匹配文本的列号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.zzAtEOF">
            <summary>
            指示是否是尾部。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.TOKEN_TYPES">
            <summary>
            分词类型。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.#ctor(System.IO.TextReader)">
            <summary>
            实例化标准化分词实体。
            </summary>
            <param name="tr">文本阅读器</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.#ctor(System.IO.Stream)">
            <summary> 
            实例化标准化分词实体。
            </summary>
            <param name="sm">输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.GetText(EIIP.SE.Analysis.Token)">
            <summary> 
            设置当前分词文本。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZzUnpackCMap(System.String)">
            <summary>
            展开压缩字符。
            </summary>
            <param name="packed">压缩的传输字符表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZzRefill">
            <summary>
            重新填充缓存。当有新的输入时，返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yyclose">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yyreset(System.IO.TextReader)">
            <summary>
            重置输入流。
            </summary>
            <param name="reader">新的输入流。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yytext">
            <summary>
            获取匹配当前正则表达式的文本。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yycharat(System.Int32)">
            <summary>
            获取匹配文本中指定索引位置的字符。
            </summary>
            <param name="pos">匹配文本中指定索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.ZzScanError(System.Int32)">
            <summary> 
            报告异常。
            </summary>
            <param name="errorCode">异常代码</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yypushback(System.Int32)">
            <summary>
            压入指定数量的字符至输入流。
            </summary>
            <param name="number">要重新读取的字符数量。不能大于匹配文本长度。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.GetNextToken">
            <summary>
            获取下一分词。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yychar">
            <summary>
            获取匹配文本的列号。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yystate">
            <summary>
            获取或设置当前语法状态。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yybegin">
            <summary>
            设置语法状态。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Standard.StandardTokenizerImpl.Yylength">
            <summary>
            获取匹配的文本长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.StopAnalyzer">
            <summary>
            英文单词的停用词分析器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.StopAnalyzer.ENGLISH_STOP_WORDS">
            <summary>
            包含一些通用英文单词的停用词数组。停用词指对搜索无用的词，如and，or等。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.#ctor">
            <summary>
            实例化英文单词的停用词分析器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.#ctor(System.Collections.Hashtable)">
            <summary>
            实例化英文单词的停用词分析器。
            </summary>
            <param name="stopWords">停用词</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.#ctor(System.String[])">
            <summary>
            实例化英文单词的停用词分析器。
            </summary>
            <param name="stopWords">停用词</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.#ctor(System.IO.FileInfo)">
            <summary>
            实例化英文单词的停用词分析器。
            </summary>
            <param name="stopwordsFile">停用词文件</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.#ctor(System.IO.TextReader)">
            <summary>
            实例化英文单词的停用词分析器。
            </summary>
            <param name="stopwords">停用词文件流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的小写字母分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.StopAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的小写字母分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.Token">
            <summary>
            分词类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.DEFAULT_TYPE">
            <summary>
            缺省类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.termText">
            <summary>
            源文本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.termBuffer">
            <summary>
            分词缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.termLength">
            <summary>
            缓存中分词的存储长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.startOffset">
            <summary>
            源文本起始偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.endOffset">
            <summary>
            源文本结束偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.type">
            <summary>
            语句类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.payload">
            <deprecated>
            有效负载。
            </deprecated>
        </member>
        <member name="F:EIIP.SE.Analysis.Token.positionIncrement">
            <deprecated>
            位置步进增量。
            </deprecated>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor">
            <summary>
            实例化缺省分词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
            <param name="typ">语句类型。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
            <param name="flags">标识</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="text">源文本</param>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="text">源文本</param>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
            <param name="type">语句类型。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="text">源文本</param>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
            <param name="flags">标识</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.#ctor(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化指定分词。
            </summary>
            <param name="termBuffer">分词缓存</param>
            <param name="termBufferOffset">分词缓存偏移量</param>
            <param name="termBufferLength">分词缓存长度</param>
            <param name="start">源文本起始偏移量。</param>
            <param name="end">源文本结束偏移量。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.SetTermBuffer(System.Char[],System.Int32,System.Int32)">
            <summary>
            设置分词缓存。
            </summary>
            <param name="buffer">分词缓存</param>
            <param name="offset">偏移量</param>
            <param name="length">长度</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.SetTermBuffer(System.String)">
            <summary>
            设置分词缓存。
            </summary>
            <param name="buffer">分词</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.SetTermBuffer(System.String,System.Int32,System.Int32)">
            <summary>
            设置分词缓存。
            </summary>
            <param name="buffer">分词缓存</param>
            <param name="offset">偏移量</param>
            <param name="length">长度</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.ResizeTermBuffer(System.Int32)">
            <summary>
            扩展分词缓存容量。
            </summary>
            <param name="newSize">最小的尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.GrowTermBuffer(System.Int32)">
            <summary>
            扩展分词缓存尺寸。
            </summary>
            <param name="newSize">新的最小尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.ToString">
            <summary>
            输入分词信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Clear">
            <summary>
            重置实例。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Clone">
            <summary>
            深层克隆。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Clone(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            克隆分词深层副本。
            </summary>
            <param name="newTermBuffer">新分词缓存</param>
            <param name="newTermOffset">新分词偏移量</param>
            <param name="newTermLength">新分词长度</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="newTermBuffer">新分词缓存</param>
            <param name="newTermOffset">新分词偏移量</param>
            <param name="newTermLength">新分词长度</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <param name="newType">新的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(System.Char[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="newTermBuffer">新分词缓存</param>
            <param name="newTermOffset">新分词偏移量</param>
            <param name="newTermLength">新分词长度</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="newTerm">新分词</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <param name="newType">新的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="newTerm">新分词</param>
            <param name="newTermOffset">新分词偏移量</param>
            <param name="newTermLength">新分词长度</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <param name="newType">新的类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(System.String,System.Int32,System.Int32)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="newTerm">新分词</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="newTerm">新分词</param>
            <param name="newTermOffset">新分词偏移量</param>
            <param name="newTermLength">新分词长度</param>
            <param name="newStartOffset">新分词起始偏移量</param>
            <param name="newEndOffset">新分词结束偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(EIIP.SE.Analysis.Token)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="prototype">分词原型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(EIIP.SE.Analysis.Token,System.String)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="prototype">分词原型</param>
            <param name="newTerm">新分词</param>
        </member>
        <member name="M:EIIP.SE.Analysis.Token.Reinit(EIIP.SE.Analysis.Token,System.Char[],System.Int32,System.Int32)">
            <summary>
            重新初始化分词。
            </summary>
            <param name="prototype">分词原型</param>
            <param name="newTermBuffer">新分词缓存</param>
            <param name="offset">偏移量</param>
            <param name="length">长度</param>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.PositionIncrement">
            <summary>
            获取或设置分词位置增量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.TermText">
            <summary>
            获取源文本。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.Term">
            <summary>
            获取分词文本。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.TermLength">
            <summary>
            获取或设置分词长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.TermBuffer">
            <summary>
            获取分词缓存。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.StartOffset">
            <summary>
            获取或设置源文本起始偏移量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.EndOffset">
            <summary>
            获取或设置源文本结束偏移量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.Type">
            <summary>
            获取或设置语句类型。默认为"word"
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.Flags">
            <summary>
            获取或设置标识。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.Token.Payload">
            <summary>
            获取或设置有效负载。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.CharTokenizer">
            <summary>
            字符分词器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CharTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化字符分词器。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.CharTokenizer.IsTokenChar(System.Char)">
            <summary>
            检测指定字符是否是在分词内。
            </summary>
            <param name="c">要测试的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharTokenizer.Normalize(System.Char)">
            <summary>
            标准化加入分词前的指定字符。在每个分词上进行调用。派生类可使用本方法来进行大小写的转换操作等。
            </summary>
            <param name="c">要标准化的字符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.CharTokenizer.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回流中下一分词。如流已结束则返回null。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.CharTokenizer.Reset(System.IO.TextReader)">
            <summary>
            重置分词器。
            </summary>
            <param name="input">新的分词输入流</param>
        </member>
        <member name="T:EIIP.SE.Analysis.KeywordTokenizer">
            <summary>
            关键字分词器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.KeywordTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化指定输入流的关键字分词器。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.KeywordTokenizer.#ctor(System.IO.TextReader,System.Int32)">
            <summary>
            实例化指定输入流的关键字分词器。
            </summary>
            <param name="input">分词输入流</param>
            <param name="bufferSize">缓存最大尺寸，一般为单词的最大长度</param>
        </member>
        <member name="M:EIIP.SE.Analysis.KeywordTokenizer.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.KeywordTokenizer.Reset(System.IO.TextReader)">
            <summary>
            重置分词器。
            </summary>
            <param name="input">新的分词输入流</param>
        </member>
        <member name="T:EIIP.SE.Analysis.LetterTokenizer">
            <summary>
            字母分词器类。以字母为基准分词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.LetterTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化指定输入流的字母分词器。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.LetterTokenizer.IsTokenChar(System.Char)">
            <summary>
            检测指定字符是否是在分词内。
            </summary>
            <param name="c">要测试的字符</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.LowerCaseTokenizer">
            <summary>
            小写字母分词类。以字母为基准分词，并转换为小写。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.LowerCaseTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化指定输入流的小写字母分词器。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.LowerCaseTokenizer.Normalize(System.Char)">
            <summary>
            标准化为小写字母。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.SinkTokenizer">
            <summary>
            可缓冲的分词器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.SinkTokenizer.lst">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.SE.Analysis.SinkTokenizer.iter">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.#ctor">
            <summary>
            实例化缺省的可缓冲的分词器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.#ctor(System.Collections.IList)">
            <summary>
            实例化指定输入流的可缓冲的分词器。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.#ctor(System.Int32)">
            <summary>
            实例化可缓冲的分词器。
            </summary>
            <param name="initCap">设置可包含的分词数。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.Next(EIIP.SE.Analysis.Token)">
            <summary>
            返回分词流中的下一分词。不存在则返回null。
            </summary>
            <param name="reusableToken">可指定一个基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.Add(EIIP.SE.Analysis.Token)">
            <summary>
            添加指定分词。
            </summary>
            <param name="t">分词。</param>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.SinkTokenizer.Reset">
            <summary>
            重置流至起始位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Analysis.SinkTokenizer.Tokens">
            <summary>
            获取内置分词。
            </summary>
        </member>
        <member name="T:EIIP.SE.Analysis.WhitespaceTokenizer">
            <summary>
            空格分词类。以空格为基准分词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.WhitespaceTokenizer.#ctor(System.IO.TextReader)">
            <summary>
            实例化指定输入流的空格分词器。
            </summary>
            <param name="input">分词输入流</param>
        </member>
        <member name="M:EIIP.SE.Analysis.WhitespaceTokenizer.IsTokenChar(System.Char)">
            <summary>
            检测指定字符是否是在分词内。
            </summary>
            <param name="c">要测试的字符</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.WhitespaceAnalyzer">
            <summary>
            构建空格分词流的分析器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.WhitespaceAnalyzer.TokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建只读向前的空格分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.WhitespaceAnalyzer.ReusableTokenStream(System.String,System.IO.TextReader)">
            <summary>
            创建可重用的只读向前的空格分词流。 
            </summary>
            <param name="fieldName">文档或字段名。允许分析器据此可选择合适的策略</param>
            <param name="reader">文本阅读器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Analysis.WordlistLoader">
            <summary>
            停用词列表加载器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Analysis.WordlistLoader.GetWordSet(System.IO.FileInfo)">
            <summary>
            获取停用词列表。
            </summary>
            <param name="wordfile">停用词文件</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.WordlistLoader.GetWordSet(System.IO.TextReader)">
            <summary>
            获取停用词列表。
            </summary>
            <param name="reader">停用词文件流</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Analysis.WordlistLoader.GetStemDict(System.IO.FileInfo)">
            <summary>
            获取停用词字典。每行包含: <pre>word<b>\t</b>stem</pre>(即两个被 tab 分隔的词)
            </summary>
            <param name="wordstemfile">停用词文件流</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Dict.ChsName">
            <summary>
            匹配中文人名
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.ChsName.ChsSingleNameFileName">
            <summary>
            中文单姓文件名。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.ChsName.ChsDoubleName1FileName">
            <summary>
            中文复姓文件名。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.ChsName.ChsDoubleName2FileName">
            <summary>
            中文复姓文件名2。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.ChsName.FAMILY_NAMES">
            <summary>
            没有明显歧异的姓氏
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Dict.ChsName.#ctor">
            <summary>
            实例化匹配中文人名。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Dict.DictionaryLoader">
            <summary>
            字典加载器。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Dict.DictionaryLoader.DictionaryDir">
            <summary>
            获取字典所在文件夹。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Dict.PositionLength">
            <summary>
            位置长度信息结构。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.PositionLength.Level">
            <summary>
            级
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.PositionLength.Position">
            <summary>
            偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.PositionLength.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.PositionLength.WordAttr">
            <summary>
            分词特性
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Dict.PositionLength.#ctor(System.Int32,System.Int32,EIIP.SE.CH.WordAttribute)">
            <summary>
            实例化位置长度信息结构。
            </summary>
            <param name="position">偏移量。</param>
            <param name="length">长度</param>
            <param name="wordAttr">分词特性</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.PositionLength.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Dict.SearchWordResult">
            <summary>
            搜索的分词结果类。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.SearchWordResult.Word">
            <summary>
            分词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.SearchWordResult.SimilarRatio">
            <summary>
            相似度
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Dict.SearchWordResult.ToString">
            <summary>
            输出分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Dict.SearchWordResult.CompareTo(System.Object)">
            <summary>
            比较对象。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Dict.StopWord">
            <summary>
            停用词类。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Dict.StopWord.IsStopWord(System.String,System.Boolean,System.Int32,System.Boolean,System.Int32)">
            <summary>
            测试是否是停用词。
            </summary>
            <param name="word">要测试的词</param>
            <param name="filterEnglish">设置是否过滤英文</param>
            <param name="filterEnglishLength">过滤英文的长度</param>
            <param name="filterNumeric">设置是否过滤数字</param>
            <param name="filterNumericLength">过滤数字的长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Dict.StopWord.LoadStopwordsDict(System.String)">
            <summary>
            加载中文停用词
            </summary>
            <param name="fileName">中文停用词文件</param>
        </member>
        <member name="T:EIIP.SE.CH.Dict.Synonym">
            <summary>
            同义词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.Synonym.SynonymFileName">
            <summary>
            同义词字典文件名。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.Synonym._GroupList">
            <summary>
            同义词组，文件中一行为一组，一组同义词以 “,” 分割
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.Synonym._WordToGroupId">
            <summary>
            单词到同义词组的对应关系，一个单词可能对于多个同义词组
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Dict.Synonym.Load(System.String)">
            <summary>
            加载指定字典。
            </summary>
            <param name="dictPath">字典所在路径。</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.Synonym.GetSynonyms(System.String)">
            <summary>
            获取同义词列表。
            </summary>
            <param name="word">要匹配的词</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Dict.Synonym.Inited">
            <summary>
            获取一个值，该值指示是否已初始化。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Dict.Wildcard">
            <summary>
            通配符词汇
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.Wildcard._WildcardList">
            <summary>
            通配符词汇列表
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Dict.Wildcard.WildcardInfo">
            <summary>
            通配符词汇信息类。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Dict.WordDictionaryFile">
            <summary>
            分词字典文件。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Dict.WordDictionaryFile.Dicts">
            <summary>
            字典文件列表。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Dict.WordDictionary">
            <summary>
            分词字典类。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.GetWordAttr(System.String)">
            <summary>
            获取指定分词的特性。
            </summary>
            <param name="word">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.GetAllMatchs(System.String,System.Boolean)">
            <summary>
            获取所有的文本匹配。
            </summary>
            <param name="text"></param>
            <param name="chineseNameIdentify">设置是否中文名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.Load(System.String)">
            <summary>
            加载指定字典。
            </summary>
            <param name="fileName">字典文件名。</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.Load(System.String,System.String@)">
            <summary>
            加载指定字典。
            </summary>
            <param name="fileName">字典文件名</param>
            <param name="version">返回字典版本</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.Load(System.String,System.Boolean,System.String@)">
            <summary>
            加载指定字典。
            </summary>
            <param name="fileName">字典文件名。</param>
            <param name="textFile">是否文本文件。</param>
            <param name="version">输出字典的版本号。</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.Save(System.String)">
            <summary>
            保存字典。
            </summary>
            <param name="fileName">字典文件名</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.Save(System.String,System.String)">
            <summary>
            保存字典。
            </summary>
            <param name="fileName">字典文件名</param>
            <param name="version">字典版本号</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.SaveToText(System.String)">
            <summary>
            以文本方式保存字典。
            </summary>
            <param name="fileName">字典文件名</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.InsertWord(System.String,System.Double,EIIP.SE.CH.POS)">
            <summary>
            插入分词。
            </summary>
            <param name="word">分词</param>
            <param name="frequency">词频</param>
            <param name="pos">词性</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.UpdateWord(System.String,System.Double,EIIP.SE.CH.POS)">
            <summary>
            更新分词。
            </summary>
            <param name="word">分词</param>
            <param name="frequency">词频</param>
            <param name="pos">词性</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.DeleteWord(System.String)">
            <summary>
            删除分词。
            </summary>
            <param name="word">分词</param>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.Search(System.String)">
            <summary>
            通过遍历方式搜索
            </summary>
            <param name="key">关键词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.SearchByLength(System.Int32)">
            <summary>
            按长度搜索。
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Dict.WordDictionary.SearchByPos(EIIP.SE.CH.POS)">
            <summary>
            按词性搜索。
            </summary>
            <param name="Pos">词性</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Dict.WordDictionary.Count">
            <summary>
            获取字典数量。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.AppendList`1">
            <summary>
            可追加的列表。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.#ctor">
            <summary>
            实例化可追加的列表。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.#ctor(System.Int32)">
            <summary>
            实例化可追加的列表。
            </summary>
            <param name="capacity">初始容量</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.ReduceSize(System.Int32)">
            <summary>
            调整列表尺寸。
            </summary>
            <param name="targetSize">目标尺寸</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Sort">
            <summary>
            列表排序。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            列表排序。
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            列表排序。
            </summary>
            <param name="index">要排序的起始索引位置</param>
            <param name="count">要排序的数量</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.ToArray">
            <summary>
            转换为数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.IndexOf(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Insert(System.Int32,`0)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Remove(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.Capacity">
            <summary>
            获取或设置列表容量。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.Items">
            <summary>
            获取列表项数组。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.AppendList`1.Enumerator">
            <summary>
            枚举数。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.AppendList`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Framework.AppendList`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.DFAResult">
            <summary>
            指示DFA的某一结果。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAResult.Continue">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAResult.Quit">
            <summary>
            退出。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAResult.ElseQuit">
            <summary>
            其他退出
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAResult.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.DFAState`2">
            <summary>
            DFA状态基类。
            </summary>
            <typeparam name="Token">词元</typeparam>
            <typeparam name="Function">函数</typeparam>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.NoFunction">
            <summary>
            指示无函数。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.m_Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.Func">
            <summary>
            函数
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.IsQuitState">
            <summary>
            指示是否退出状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.NextStateIdDict">
            <summary>
            状态字典
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.NextStateIds">
            <summary>
            后一状态
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFAState`2.ElseStateId">
            <summary>
            其它状态
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAState`2.AddNextState(System.Int32,System.Int32)">
            <summary>
            添加下一状态。
            </summary>
            <param name="action">动作序号</param>
            <param name="nextstate">下一状态</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAState`2.AddNextState(System.Int32,System.Int32,System.Int32)">
            <summary>
            添加下一状态。
            </summary>
            <param name="beginAction">起始动作序号</param>
            <param name="endAction">结束动作序号</param>
            <param name="nextstate">下一状态</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAState`2.AddNextState(System.Int32[],System.Int32)">
            <summary>
            添加下一状态。
            </summary>
            <param name="actions">动作序号数组</param>
            <param name="nextstate">下一状态</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAState`2.AddElseState(System.Int32)">
            <summary>
            添加其他状态。
            </summary>
            <param name="nextstate">下一状态</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAState`2.NextState(System.Int32,EIIP.SE.CH.Framework.DFA{`0,`1},System.Boolean@)">
            <summary>
            获取下一状态。
            </summary>
            <param name="action">动作序号.若小于0，表示其他状态</param>
            <param name="dfa">DFA</param>
            <param name="isElseAction">返回一个值，该值指示是否是其它动作</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAState`2.DoThings(System.Int32,EIIP.SE.CH.Framework.DFA{`0,`1})">
            <summary>
            执行。
            </summary>
            <param name="action">动作序号</param>
            <param name="dfa">DFA实例</param>
        </member>
        <member name="P:EIIP.SE.CH.Framework.DFAState`2.Id">
            <summary>
            获取ID。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.DFA`2">
            <summary>
            DFA基类。
            </summary>
            <typeparam name="Token">词元</typeparam>
            <typeparam name="Function">函数</typeparam>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.States">
            <summary>
            DFA状态字典。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.Inited">
            <summary>
            指示是否已初始化。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.InitLockObj">
            <summary>
            锁对象。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.EofAction">
            <summary>
            结束动作序号。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFA`2.Init">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.OldState">
            <summary>
            旧状态
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.CurrentState">
            <summary>
            当前状态
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.QuitManually">
            <summary>
            指示是否手工退出。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.DFA`2.CurrentToken">
            <summary>
            当前词元。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFA`2.AddState(EIIP.SE.CH.Framework.DFAState{`0,`1})">
            <summary>
            添加DFA状态。并返回该状态。
            </summary>
            <param name="state">DFA状态</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFA`2.Input(System.Int32,`0)">
            <summary>
            输出动作。
            </summary>
            <param name="action">动作序号</param>
            <param name="token">词元</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Framework.DFAException">
            <summary>
            DFA异常类。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.DFAException.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            实例化DFA异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="action">动作序号</param>
            <param name="state">状态</param>
        </member>
        <member name="P:EIIP.SE.CH.Framework.DFAException.Action">
            <summary>
            获取动作序号。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Framework.DFAException.State">
            <summary>
            获取状态。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.LexicalFunction">
            <summary>
            指示某一语法功能。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.OutputIdentifier">
            <summary>
            输出标识符。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.DoSpace">
            <summary>
            留间隔
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.OutputSpace">
            <summary>
            输出空隔
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.OutputNumeric">
            <summary>
            输出数字
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.OutputChinese">
            <summary>
            输出中文
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.LexicalFunction.Other">
            <summary>
            其它
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.LexicalState">
            <summary>
            语法状态。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.Lexical">
            <summary>
            语法类。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lexical.beginIndex">
            <summary>
            起始索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lexical.InputText">
            <summary>
            输入文本。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lexical.OutputToken">
            <summary>
            输出词元。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.Lexical.#ctor(System.String)">
            <summary>
            实例化语法。
            </summary>
            <param name="inputText">输入文本</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.Lexical.Initialize">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.Lexical.Init">
            <summary>
            初始化。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.Lexical.Input(System.Int32,System.Int32)">
            <summary>
            输出动作。
            </summary>
            <param name="action">动作序号</param>
            <param name="token">词元</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Framework.Lock">
            <summary>
            锁。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Framework.Lock.Enter(EIIP.SE.CH.Framework.Lock.Mode)">
            <summary>
            进入锁。
            </summary>
            <param name="mode">锁模式</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.Lock.Leave">
            <summary>
            退出锁。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.Lock.Mode">
            <summary>
            指示锁的某一类型模式。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lock.Mode.Share">
            <summary>
            共享模式
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lock.Mode.Mutex">
            <summary>
            互斥模式
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.Lock.State">
            <summary>
            指示锁的某一状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lock.State.Share">
            <summary>
            共享状态
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Framework.Lock.State.Mutex">
            <summary>
            互斥状态
            </summary>
        </member>
        <member name="F:porter.Stemmer.i">
            <summary>
            字符数组b的偏移量。
            </summary>
        </member>
        <member name="F:porter.Stemmer.i_end">
            <summary>
            语法后缀的结束偏移量。
            </summary>
        </member>
        <member name="F:porter.Stemmer.INC">
            <summary>
            b的增量尺寸。
            </summary>
        </member>
        <member name="M:porter.Stemmer.add(System.Char)">
            <summary>
            添加（去语法后缀前的）字符。
            </summary>
            <param name="ch"></param>
        </member>
        <member name="M:porter.Stemmer.add(System.Char[],System.Int32)">
            <summary>
            批量添加（去语法后缀前的）字符。
            </summary>
            <param name="w">要添加的字符数组</param>
            <param name="wLen">要添加的数量</param>
        </member>
        <member name="M:porter.Stemmer.ToString">
            <summary>
            输出去后缀单词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:porter.Stemmer.getResultLength">
            <summary>
            获取去后缀的结果长度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:porter.Stemmer.getResultBuffer">
            <summary>
            获取结果字符缓存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:porter.Stemmer.stem">
            <summary>
            去语法后缀。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Framework.QuickSort`1">
            <summary>
            快速排序。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.SE.CH.Framework.QuickSort`1.TopSort(`0[],System.Int32)">
            <summary>
            对前几项进行排序。
            </summary>
            <param name="array">要排序的数组</param>
            <param name="top">针对前几项排序</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.QuickSort`1.TopSort(`0[],System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            对前几项进行排序。
            </summary>
            <param name="array">要排序的数组</param>
            <param name="top">针对前几项排序</param>
            <param name="comparer">排序要使用的比较器</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.QuickSort`1.TopSort(`0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            对前几项进行排序。
            </summary>
            <param name="array">要排序的数组</param>
            <param name="arrayLen">要排序的数组长度</param>
            <param name="top">针对前几项排序</param>
            <param name="comparer">排序要使用的比较器</param>
        </member>
        <member name="M:EIIP.SE.CH.Framework.QuickSort`1.PartitionInt(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            整型部分
            </summary>
            <param name="array"></param>
            <param name="low"></param>
            <param name="high"></param>
            <param name="pivotIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.QuickSort`1.PartitionLong(System.Int64[],System.Int32,System.Int32,System.Int32)">
            <summary>
            长整型部分
            </summary>
            <param name="array"></param>
            <param name="low"></param>
            <param name="high"></param>
            <param name="pivotIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Framework.QuickSort`1.Partition(`0[],System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            通用部分
            </summary>
            <param name="array"></param>
            <param name="low"></param>
            <param name="high"></param>
            <param name="pivotIndex"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:System.Collections.Generic.SuperLinkedList`1">
            <summary>
            双链表类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:System.Collections.Generic.SuperLinkedList`1.head">
            <summary>
            双链表。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.#ctor">
            <summary>
            实例化双链表。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化双链表。
            </summary>
            <param name="collection">集合</param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddAfter(System.Collections.Generic.SuperLinkedListNode{`0},`0)">
            <summary>
            在指定节点后面添加节点，并返回该节点。
            </summary>
            <param name="node">定位节点。</param>
            <param name="value">要添加的节点值</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddAfter(System.Collections.Generic.SuperLinkedListNode{`0},System.Collections.Generic.SuperLinkedListNode{`0})">
            <summary>
            在指定节点后面添加节点。
            </summary>
            <param name="node">定位节点。</param>
            <param name="newNode">要添加的节点</param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddAfter(System.Collections.Generic.SuperLinkedListNode{`0},System.Collections.Generic.SuperLinkedList{`0})">
            <summary>
            在指定节点后面添加多个节点，并返回最后一个节点。
            </summary>
            <param name="node">定位节点。</param>
            <param name="newLinkedList">要添加的节点列表</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddBefore(System.Collections.Generic.SuperLinkedListNode{`0},`0)">
            <summary>
            在指定节点前面添加节点，并返回该节点。
            </summary>
            <param name="node">定位节点。</param>
            <param name="value">要添加的节点值</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddBefore(System.Collections.Generic.SuperLinkedListNode{`0},System.Collections.Generic.SuperLinkedListNode{`0})">
            <summary>
            在指定节点前面添加节点。
            </summary>
            <param name="node">定位节点。</param>
            <param name="newNode">要添加的节点</param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddFirst(`0)">
            <summary>
            在头部添加节点。
            </summary>
            <param name="value">要添加的节点值</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddFirst(System.Collections.Generic.SuperLinkedListNode{`0})">
            <summary>
            在头部添加节点。
            </summary>
            <param name="node">要添加的节点</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddLast(`0)">
            <summary>
            在尾部添加节点。
            </summary>
            <param name="value">要添加的节点值</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.AddLast(System.Collections.Generic.SuperLinkedListNode{`0})">
            <summary>
            在尾部添加节点。
            </summary>
            <param name="node">要添加的节点</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Clear">
            <summary>
            清除所有节点。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Contains(`0)">
            <summary>
            测试是否包含指定节点值。
            </summary>
            <param name="value">节点值。</param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制节点至指定数组。
            </summary>
            <param name="array">数组。</param>
            <param name="index">数组的起始索引位置</param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Find(`0)">
            <summary>
            查找含指定节点值的节点。不存在则返回null。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.FindLast(`0)">
            <summary>
            查找含指定节点值的最后一个节点。不存在则返回null。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.GetEnumerator">
            <summary>
            获取枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Remove(`0)">
            <summary>
            移除指定节点值。成功返回true。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Remove(System.Collections.Generic.SuperLinkedListNode{`0})">
            <summary>
            移除指定节点。
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.RemoveFirst">
            <summary>
            从头部移除一个节点。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.RemoveLast">
            <summary>
            从尾部移除一个节点。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.OnDeserialization(System.Object)">
            <summary>
            
            </summary>
            <param name="sender"></param>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedList`1.Count">
            <summary>
            获取列表尺寸。
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedList`1.First">
            <summary>
            获取首个节点。
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedList`1.Last">
            <summary>
            获取尾部节点。
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            获取一个值，该值指示是否是只读的。
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SuperLinkedList`1.Enumerator">
            <summary>
            枚举数。
            </summary>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Enumerator.MoveNext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedList`1.Enumerator.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedList`1.Enumerator.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Collections.Generic.SuperLinkedListNode`1">
            <summary>
            链接表节点类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:System.Collections.Generic.SuperLinkedListNode`1.#ctor(`0)">
            <summary>
            实例化链接表节点。
            </summary>
            <param name="value">节点值</param>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedListNode`1.List">
            <summary>
            获取列表。
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedListNode`1.Next">
            <summary>
            获取下一节点。
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedListNode`1.Previous">
            <summary>
            获取上一节点。
            </summary>
        </member>
        <member name="P:System.Collections.Generic.SuperLinkedListNode`1.Value">
            <summary>
            获取或设置节点值。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.HighLight.IFormatter">
            <summary>
            定义高亮的格式化器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.IFormatter.HighlightTerm(System.String)">
            <summary>
            高亮项目。
            </summary>
            <param name="originalText">原始文本。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.HighLight.Fragment">
            <summary>
            段类。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.Fragment.#ctor(System.Int32,System.Int32,System.Collections.Generic.List{EIIP.SE.CH.WordInfo})">
            <summary>
            实例化段。
            </summary>
            <param name="start">分词信息链表中的起始位置。</param>
            <param name="end">分词信息链表中的结束位置。</param>
            <param name="wordInfos">分词信息链表</param>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.Fragment.CompareTo(EIIP.SE.CH.HighLight.Fragment)">
            <summary>
            比较。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.HighLight.Fragment.Start">
            <summary>
            获取或设置分词信息链表中的起始位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.HighLight.Fragment.End">
            <summary>
            获取或设置分词信息链表中的结束位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.HighLight.Fragment.Rank">
            <summary>
            获取或设置段权重。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.HighLight.Highlighter">
            <summary>
            高亮器。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.Highlighter.#ctor(EIIP.SE.CH.Segment)">
            <summary>
            实例化高亮器。
            </summary>
            <param name="segment">段实例</param>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.Highlighter.#ctor(EIIP.SE.CH.HighLight.IFormatter,EIIP.SE.CH.Segment)">
            <summary>
            实例化高亮器。
            </summary>
            <param name="formatter">格式化器</param>
            <param name="segment">段实例</param>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.Highlighter.GetBestFragment(System.String,System.String)">
            <summary>
            获取最优处理的片断。不存在则返回空串。
            </summary>
            <param name="keywords">关键字</param>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.Highlighter.GetFragments(System.String,System.String,System.Int32)">
            <summary>
            获取片断。
            </summary>
            <param name="keywords">关键字</param>
            <param name="content">内容</param>
            <param name="maxFragments">设置要输出的最大片断数量</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.HighLight.Highlighter.FragmentSize">
            <summary>
            获取或设置片断尺寸。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.HighLight.SimpleHTMLFormatter">
            <summary>
            简单的HTML高亮格式化器。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.SimpleHTMLFormatter.#ctor">
            <summary>
            实例化简单的HTML高亮格式化器。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.SimpleHTMLFormatter.#ctor(System.String,System.String)">
            <summary>
            实例化简单的HTML高亮格式化器。
            </summary>
            <param name="preTag">高亮前缀标签。</param>
            <param name="postTag">高亮后缀标签。</param>
        </member>
        <member name="M:EIIP.SE.CH.HighLight.SimpleHTMLFormatter.HighlightTerm(System.String)">
            <summary>
            高亮项目。
            </summary>
            <param name="originalText">原始文本。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.HighLight.SimpleHTMLFormatter.PreTag">
            <summary>
            获取或设置高亮前缀标签。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.HighLight.SimpleHTMLFormatter.PostTag">
            <summary>
            获取或设置高亮后缀标签。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.ICustomRule">
            <summary>
            用户自定义规则接口
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.ICustomRule.AfterSegment(System.Collections.Generic.SuperLinkedList{EIIP.SE.CH.WordInfo})">
            <summary>
            
            </summary>
            <param name="result">分词信息链表</param>
        </member>
        <member name="M:EIIP.SE.CH.CustomRule.GetCustomRule(System.String,System.String)">
            <summary>
            获取算定义过滤规则。
            </summary>
            <param name="assemblyFilePath"></param>
            <param name="classFullName"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Match.ChsFullTextMatch">
            <summary>
            中文的全文匹配。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Match.IChsFullTextMatch">
            <summary>
            定义中文的全文匹配接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Match.IChsFullTextMatch.Match(EIIP.SE.CH.Dict.PositionLength[],System.String,System.Int32)">
            <summary>
            获取匹配结果。
            </summary>
            <param name="positionLenArr">位置长度信息</param>
            <param name="orginalText">原始文本</param>
            <param name="count">要使用的位置长度信息数量</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Match.IChsFullTextMatch.Options">
            <summary>
            获取或设置匹配选项。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Match.IChsFullTextMatch.Parameters">
            <summary>
            获取或设置匹配参数。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Match.ChsFullTextMatch.BuildTree(EIIP.SE.CH.Match.ChsFullTextMatch.Node,System.Int32)">
            <summary>
            创建树。
            </summary>
            <param name="parent">父节点</param>
            <param name="curIndex">在位置长度列表中的当前索引</param>
        </member>
        <member name="M:EIIP.SE.CH.Match.ChsFullTextMatch.#ctor(EIIP.SE.CH.Dict.WordDictionary)">
            <summary>
            实例化中文的全文匹配。
            </summary>
            <param name="wordDict">分词字典</param>
        </member>
        <member name="M:EIIP.SE.CH.Match.ChsFullTextMatch.GetLeafNodeArray(EIIP.SE.CH.Dict.PositionLength[],System.Int32,System.Int32)">
            <summary>  
            根据孤立点拆分长句，然后再分别对各个句子的片段进行分词
            </summary>  
            <param name="positionLenArr">保护位置和长度信息的单词分量数组</param>  
            <param name="orginalTextLength">原始字符串长度</param>  
            <param name="count">positionLenArr 的 count</param>  
            <returns></returns>  
        </member>
        <member name="M:EIIP.SE.CH.Match.ChsFullTextMatch.GetLeafNodeArrayCore(EIIP.SE.CH.Dict.PositionLength[],System.Int32,System.Int32)">
            <summary>
            最底层算法，获取叶子节点集合
            </summary>
            <param name="positionLenArr"></param>
            <param name="orginalTextLength"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Match.ChsFullTextMatch.Match(EIIP.SE.CH.Dict.PositionLength[],System.String,System.Int32)">
            <summary>
            获取匹配结果。
            </summary>
            <param name="positionLenArr">位置长度信息</param>
            <param name="orginalText">原始文本</param>
            <param name="count">要使用的位置长度信息数量</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Match.ChsFullTextMatch.Options">
            <summary>
            获取或设置匹配选项。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Match.ChsFullTextMatch.Parameters">
            <summary>
            获取或设置匹配参数。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Match.MatchOptions">
            <summary>
            匹配选项。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.ChineseNameIdentify">
            <summary>
            中文人名识别
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.FrequencyFirst">
            <summary>
            词频优先
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.MultiDimensionality">
            <summary>
            多元分词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.FilterStopWords">
            <summary>
            过滤停用词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.IgnoreSpace">
            <summary>
            忽略空格、回车、Tab
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.ForceSingleWord">
            <summary>
            强制一元分词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.TraditionalChineseEnabled">
            <summary>
            繁体中文开关
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.OutputSimplifiedTraditional">
            <summary>
            同时输出简体和繁体
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.UnknownWordIdentify">
            <summary>
            未登录词识别
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.FilterEnglish">
            <summary>
            过滤英文，这个选项只有在过滤停用词选项生效时才有效
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.FilterNumeric">
            <summary>
            过滤数字，这个选项只有在过滤停用词选项生效时才有效
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.IgnoreCapital">
            <summary>
            忽略英文大小写
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.EnglishSegment">
            <summary>
            英文分词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.SynonymOutput">
            <summary>
            同义词输出
            </summary>
            <remarks>
            同义词输出功能一般用于对搜索字符串的分词，不建议在索引时使用
            </remarks>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.WildcardOutput">
            <summary>
            通配符匹配输出
            </summary>
            <remarks>
            同义词输出功能一般用于对搜索字符串的分词，不建议在索引时使用
            </remarks>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.WildcardSegment">
            <summary>
            对通配符匹配的结果分词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchOptions.CustomRule">
            <summary>
            是否进行用户自定义规则匹配
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Match.MatchOptions.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.Match.MatchParameter">
            <summary>
            匹配参数。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.UnknowRank">
            <summary>
            未登录词权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.BestRank">
            <summary>
            最匹配词权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.SecRank">
            <summary>
            次匹配词权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.ThirdRank">
            <summary>
            再次匹配词权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.SingleRank">
            <summary>
            强行输出的单字的权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.NumericRank">
            <summary>
            数字的权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.EnglishRank">
            <summary>
            英文词汇权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.EnglishLowerRank">
            <summary>
            英文词汇小写的权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.EnglishStemRank">
            <summary>
            英文词汇词根的权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.SymbolRank">
            <summary>
            符号的权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.SimplifiedTraditionalRank">
            <summary>
            强制同时输出简繁汉字时，非原来文本的汉字输出权值。
            比如原来文本是简体，这里就是输出的繁体字的权值，反之亦然。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.SynonymRank">
            <summary>
            同义词权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.WildcardRank">
            <summary>
            通配符匹配结果的权值
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.FilterEnglishLength">
            <summary>
            过滤英文选项生效时，过滤大于这个长度的英文。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.FilterNumericLength">
            <summary>
            过滤数字选项生效时，过滤大于这个长度的数字。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.CustomRuleAssemblyFileName">
            <summary>
            用户自定义规则的配件文件名
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Match.MatchParameter.CustomRuleFullClassName">
            <summary>
            用户自定义规则的类的完整名，即带名字空间的名称
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Match.MatchParameter.Clone">
            <summary>
            获取匹配参数的克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.CH.Match.MatchParameter.Redundancy">
            <summary>
            多元分词冗余度
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.POS">
            <summary>
            指示分词的某一词性。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_A">
            <summary>
            形容词 形语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_B">
            <summary>
            区别词 区别语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_C">
            <summary>
            连词 连语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_D">
            <summary>
            副词 副语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_E">
            <summary>
            叹词 叹语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_F">
            <summary>
            方位词 方位语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_I">
            <summary>
            成语
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_L">
            <summary>
            习语
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_M">
            <summary>
            数词 数语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_MQ">
            <summary>
            数量词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_N">
            <summary>
            名词 名语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_O">
            <summary>
            拟声词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_P">
            <summary>
            介词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_Q">
            <summary>
            量词 量语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_R">
            <summary>
            代词 代语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_S">
            <summary>
            处所词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_T">
            <summary>
            时间词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_U">
            <summary>
            助词 助语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_V">
            <summary>
            动词 动语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_W">
            <summary>
            标点符号
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_X">
            <summary>
            非语素字
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_Y">
            <summary>
            语气词 语气语素
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_Z">
            <summary>
            状态词
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_NR">
            <summary>
            人名
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_NS">
            <summary>
            地名
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_NT">
            <summary>
            机构团体
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_NX">
            <summary>
            外文字符
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_A_NZ">
            <summary>
            其他专名
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_H">
            <summary>
            前接成分
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_D_K">
            <summary>
            后接成分
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.POS.POS_UNK">
            <summary>
            未知词性
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Segment">
            <summary>
            段类。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.Segment.INFINITIVE">
            <summary>
            不定词
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Segment.MergeEnglishSpecialWord(System.String,System.Collections.Generic.SuperLinkedList{EIIP.SE.CH.WordInfo},System.Collections.Generic.SuperLinkedListNode{EIIP.SE.CH.WordInfo}@)">
            <summary>
            合并英文专用词。
            如果字典中有英文专用词如U.S.A, C++.C#等
            需要对初步分词后的英文和字母进行合并
            </summary>
            <param name="orginalText">原始文本</param>
            <param name="wordInfoList">分词信息列表</param>
            <param name="current">当前分词信息列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Segment.DoSegment(System.String)">
            <summary>
            分段。
            </summary>
            <param name="text">要分段的文本。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Segment.DoSegment(System.String,EIIP.SE.CH.Match.MatchOptions)">
            <summary>
            分段。
            </summary>
            <param name="text">要分段的文本。</param>
            <param name="options">匹配选项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Segment.DoSegment(System.String,EIIP.SE.CH.Match.MatchOptions,EIIP.SE.CH.Match.MatchParameter)">
            <summary>
            分段。
            </summary>
            <param name="text">要分段的文本。</param>
            <param name="options">匹配选项</param>
            <param name="parameters">匹配参数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.Segment.LoadDictionary">
            <summary>
            加载字典。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Segment.Init">
            <summary>
            初始化段。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Segment.Init(System.String)">
            <summary>
            初始化段。
            </summary>
            <param name="fileName">配置文件名</param>
        </member>
        <member name="T:EIIP.SE.CH.Setting.SettingLoader">
            <summary>
            设置加载器。
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.Setting.Settings">
            <summary>
            配置设置类。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.Setting.Settings.Load(System.String)">
            <summary>
            加载配置信息。
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:EIIP.SE.CH.Setting.Settings.Save(System.String)">
            <summary>
            保存配置为指定文件。
            </summary>
            <param name="fileName">配置文件名。</param>
        </member>
        <member name="P:EIIP.SE.CH.Setting.Settings.Config">
            <summary>
            获取配置信息。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Setting.Settings.MatchOptions">
            <summary>
            获取或设置匹配选项。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Setting.Settings.Parameters">
            <summary>
            获取或设置匹配参数。
            </summary>
        </member>
        <member name="P:EIIP.SE.CH.Setting.Settings.DictionaryPath">
            <summary>
            获取字典路径。以"\"结尾
            </summary>
        </member>
        <member name="T:EIIP.SE.CH.WordAttribute">
            <summary>
            词的特性类。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordAttribute.Word">
            <summary>
            词。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordAttribute.Pos">
            <summary>
            词性
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordAttribute.Frequency">
            <summary>
            词频。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.WordAttribute.#ctor">
            <summary>
            实例化词的特性。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.WordAttribute.#ctor(System.String,EIIP.SE.CH.POS,System.Double)">
            <summary>
            实例化词的特性。
            </summary>
            <param name="word">分词</param>
            <param name="pos">分词的词性</param>
            <param name="frequency">词频</param>
        </member>
        <member name="M:EIIP.SE.CH.WordAttribute.ToString">
            <summary>
            输出分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.WordAttribute.CompareTo(EIIP.SE.CH.WordAttribute)">
            <summary>
            比较。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.WordAttributeStruct">
            <summary>
            词的特性结构。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordAttributeStruct.Word">
            <summary>
            词。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordAttributeStruct.Pos">
            <summary>
            词性
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordAttributeStruct.Frequency">
            <summary>
            词频。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.WordAttributeStruct.#ctor(EIIP.SE.CH.WordAttribute)">
            <summary>
            实例化词的特性结构。
            </summary>
            <param name="wa">词的特性。</param>
        </member>
        <member name="M:EIIP.SE.CH.WordAttributeStruct.#ctor(System.String,EIIP.SE.CH.POS,System.Double)">
            <summary>
            实例化词的特性结构。
            </summary>
            <param name="word">分词</param>
            <param name="pos">分词的词性</param>
            <param name="frequency">词频</param>
        </member>
        <member name="M:EIIP.SE.CH.WordAttributeStruct.ToString">
            <summary>
            输出分词。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.WordInfo">
            <summary>
            分词信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordInfo.WordType">
            <summary>
            当前分词类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordInfo.OriginalWordType">
            <summary>
            原始分词类型
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordInfo.Position">
            <summary>
            分词偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordInfo.Rank">
            <summary>
            单词权重
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.#ctor">
            <summary>
            实例化分词信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.#ctor(System.String,System.Int32,EIIP.SE.CH.POS,System.Double,System.Int32,EIIP.SE.CH.WordType,EIIP.SE.CH.WordType)">
            <summary>
            实例化分词信息。
            </summary>
            <param name="word">分词</param>
            <param name="position">分词偏移量</param>
            <param name="pos">分词词性</param>
            <param name="frequency">词频</param>
            <param name="rank">权重</param>
            <param name="wordTye">当前分词类型</param>
            <param name="originalWordType">原始分词类型</param>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.#ctor(System.String,EIIP.SE.CH.POS,System.Double)">
            <summary>
            实例化分词信息。
            </summary>
            <param name="word">分词</param>
            <param name="pos">分词词性</param>
            <param name="frequency">词频</param>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.#ctor(EIIP.SE.CH.WordAttribute)">
            <summary>
            实例化分词信息。
            </summary>
            <param name="wordAttr">分词特性</param>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.#ctor(EIIP.SE.CH.Dict.PositionLength,System.String,EIIP.SE.CH.Match.MatchParameter)">
            <summary>
            实例化分词信息。
            </summary>
            <param name="pl">位置长度信息</param>
            <param name="oringinalText">原始文本</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.GetEndPositon">
            <summary>
            获取结尾位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.CH.WordInfo.CompareTo(EIIP.SE.CH.WordInfo)">
            <summary>
            比较。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.CH.WordType">
            <summary>
            指示词的某一类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.English">
            <summary>
            英文
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.SimplifiedChinese">
            <summary>
            简体中文
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.TraditionalChinese">
            <summary>
            繁体中文
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.Numeric">
            <summary>
            数字
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.Symbol">
            <summary>
            符号
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.Space">
            <summary>
            空白
            </summary>
        </member>
        <member name="F:EIIP.SE.CH.WordType.Synonym">
            <summary>
            同义词
            </summary>
        </member>
        <member name="T:EIIP.SE.Documents.AbstractField">
            <summary> 
            字段基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Documents.IFieldable">
            <summary>
            提供一个可字段化的接口。使用该接口与使用字段相似。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.IFieldable.GetBinaryValue">
            <summary>
            获取原始二进制值。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.IFieldable.GetBinaryValue(System.Byte[])">
            <summary>
            获取二进制值。返回原始二进制数组。
            </summary>
            <param name="result">（返回）用于存储字段二进制值的缓存</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.Boost">
            <summary>
            获取或设置字段点击的提升因子。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.Name">
            <summary>
            获取字段名称。如"date", "title", "body", ...
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.StringValue">
            <summary>
            获取字段的字符串值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.ReaderValue">
            <summary>
            获取字段的文本阅读器值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.BinaryValue">
            <summary>
            获取字段的二进制值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.TokenStreamValue">
            <summary>
            获取字段的分词流值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsStored">
            <summary>
            获取一个值，该值指示字段是否已存储于索引中。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsIndexed">
            <summary>
            获取一个值，该值指示字段是否已索引。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsTokenized">
            <summary>
            获取一个值，该值指示字段是否已标记化。未标记化的字段索引为单一的词并不能被读取值。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsCompressed">
            <summary>
            获取一个值，该值指示字段是否已压缩存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsTermVectorStored">
            <summary>
            获取一个值，该值指示用于索引字段的分词是否作为分词向量存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsStoreOffsetWithTermVector">
            <summary>
            获取一个值，该值指示作为分词向量存储的分词，是否同时存储了偏移量（在源文本中的开始及结束位置）。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsStorePositionWithTermVector">
            <summary>
            获取一个值，该值指示作为分词向量存储的分词，是否同时存储了标记位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsBinary">
            <summary>
            获取一个值，该值指示字段的值是否作为二进制对象存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.OmitNorms">
            <summary>
            获取或设置一个值，该值指示索引了的字段是否省略标准化。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.OmitTf">
            <summary>
            获取或设置一个值，该值指示索引了的字段是否省略tf。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.IsLazy">
            <summary>
            获取一个值，该值指示字段是否延迟加载。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.BinaryOffset">
            <summary>
            获取原始二进制值的偏移量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.IFieldable.BinaryLength">
            <summary>
            获取原始二进制值的长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.name">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.storeTermVector">
            <summary>
            指示用于索引字段的分词是否作为分词向量存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.storeOffsetWithTermVector">
            <summary>
            指示作为分词向量存储的分词，是否同时存储了偏移量（在源文本中的开始及结束位置）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.storePositionWithTermVector">
            <summary>
            指示作为分词向量存储的分词，是否同时存储了标记位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.omitNorms">
            <summary>
            指示索引了的字段是否省略标准化。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.isStored">
            <summary>
            指示字段是否已存储于索引中。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.isIndexed">
            <summary>
            指示字段是否已索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.isTokenized">
            <summary>
            指示字段是否已标记化。未标记化的字段索引为单一的词并不能被读取值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.isBinary">
            <summary>
            指示字段的值是否作为二进制对象存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.isCompressed">
            <summary>
            指示字段是否已压缩存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.lazy">
            <summary>
            指示字段是否延迟加载。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.omitTf">
            <summary>
            指示索引了的字段是否省略tf。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.boost">
            <summary>
            字段点击的提升因子。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.fieldsData">
            <summary>
            字段值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.binaryLength">
            <summary>
            原始二进制值的长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.AbstractField.binaryOffset">
            <summary>
            原始二进制值的偏移量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.AbstractField.#ctor">
            <summary>
            实例化字段基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.AbstractField.#ctor(System.String,EIIP.SE.Documents.Field.Store,EIIP.SE.Documents.Field.Index,EIIP.SE.Documents.Field.TermVector)">
            <summary>
            实例化字段基类。
            </summary>
            <param name="name">字段名称。</param>
            <param name="store">字段存储</param>
            <param name="index">字段索引</param>
            <param name="termVector">分词向量</param>
        </member>
        <member name="M:EIIP.SE.Documents.AbstractField.SetStoreTermVector(EIIP.SE.Documents.Field.TermVector)">
            <summary>
            设置存储的分词向量。
            </summary>
            <param name="termVector">分词向量。</param>
        </member>
        <member name="M:EIIP.SE.Documents.AbstractField.GetBinaryValue">
            <summary>
            获取原始二进制值。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.AbstractField.GetBinaryValue(System.Byte[])">
            <summary>
            获取二进制值。返回原始二进制数组。
            </summary>
            <param name="result">（返回）用于存储字段二进制值的缓存</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.AbstractField.ToString">
            <summary>
            输出字段信息。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.Boost">
            <summary>
            获取或设置字段点击的提升因子。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.Name">
            <summary>
            获取字段名称。如"date", "title", "body", ...
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsStored">
            <summary>
            获取一个值，该值指示字段是否已存储于索引中。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsIndexed">
            <summary>
            获取一个值，该值指示字段是否已索引。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsTokenized">
            <summary>
            获取一个值，该值指示字段是否已标记化。未标记化的字段索引为单一的词并不能被读取值。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsCompressed">
            <summary>
            获取一个值，该值指示字段是否已压缩存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsTermVectorStored">
            <summary>
            获取一个值，该值指示用于索引字段的分词是否作为分词向量存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsStoreOffsetWithTermVector">
            <summary>
            获取一个值，该值指示作为分词向量存储的分词，是否同时存储了偏移量（在源文本中的开始及结束位置）。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsStorePositionWithTermVector">
            <summary>
            获取一个值，该值指示作为分词向量存储的分词，是否同时存储了标记位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsBinary">
            <summary>
            获取一个值，该值指示字段的值是否作为二进制对象存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.BinaryLength">
            <summary>
            获取原始二进制值的长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.BinaryOffset">
            <summary>
            获取原始二进制值的偏移量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.OmitNorms">
            <summary>
            获取或设置一个值，该值指示索引了的字段是否省略标准化。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.OmitTf">
            <summary>
            获取或设置一个值，该值指示索引了的字段是否省略tf。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.IsLazy">
            <summary>
            获取一个值，该值指示字段是否延迟加载。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.BinaryValue">
            <summary>
            获取字段的二进制值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.ReaderValue">
            <summary>
            获取字段的文本阅读器值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.StringValue">
            <summary>
            获取字段的字符串值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.AbstractField.TokenStreamValue">
            <summary>
            获取字段的分词流值。不存在则返回null。
            </summary>
        </member>
        <member name="T:EIIP.SE.Documents.Document">
            <summary>
            文档基类。文档是索引与搜索的基本单位。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Document.#ctor">
            <summary>
            实例化无字段的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Document.Add(EIIP.SE.Documents.IFieldable)">
            <summary>
            添加指定字段。
            </summary>
            <param name="field">字段。</param>
        </member>
        <member name="M:EIIP.SE.Documents.Document.RemoveField(System.String)">
            <summary>
            移除指定字段。
            </summary>
            <param name="name">字段名称。</param>
        </member>
        <member name="M:EIIP.SE.Documents.Document.RemoveFields(System.String)">
            <summary>
            移除所有具有指定字段名称的字段。
            </summary>
            <param name="name">字段名称。</param>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetField(System.String)">
            <summary>
            获取具有指定字段名称的字段。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetFieldable(System.String)">
            <summary>
            获取具有指定字段名称的字段。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.Get(System.String)">
            <summary>
            获取具有指定字段名称的字段值。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.FieldsEnumerator">
            <summary>
            获取字段枚举。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetFields(System.String)">
            <summary>
            获取具有指定字段名称的字段。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetFieldables(System.String)">
            <summary>
            获取具有指定字段名称的字段。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetValues(System.String)">
            <summary>
            获取具有指定字段名称的字段值。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetBinaryValues(System.String)">
            <summary>
            获取具有指定字段名称的字段值。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.GetBinaryValue(System.String)">
            <summary>
            获取具有指定字段名称的字段值。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.Document.ToString">
            <summary>
            获取文档信息。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.Document.Boost">
            <summary>
            获取或设置文档字段点击率的推进因子。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.Document.FieldsCount">
            <summary>
            获取文档的字段数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.Document.Fields">
            <summary>
            获取字段列表。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Documents.Field">
            <summary>
            文档字段类。每个字段含名称及值两部分。值可以为文本或文本阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Field.SetValue(System.String)">
            <summary>
            设置字段值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.SetValue(System.IO.TextReader)">
            <summary>
            设置字段值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.SetValue(System.Byte[])">
            <summary>
            设置字段值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.SetValue(System.Byte[],System.Int32,System.Int32)">
            <summary>
            设置字段值。
            </summary>
            <param name="value"></param>
            <param name="offset">偏移量</param>
            <param name="length">长度</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.SetValue(EIIP.SE.Analysis.TokenStream)">
            <summary>
            设置字段值。
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,System.String,EIIP.SE.Documents.Field.Store,EIIP.SE.Documents.Field.Index)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="value">字段值</param>
            <param name="store"><code>value</code> 的存储方式。</param>
            <param name="index">索引</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,System.String,EIIP.SE.Documents.Field.Store,EIIP.SE.Documents.Field.Index,EIIP.SE.Documents.Field.TermVector)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="value">字段值</param>
            <param name="store"><code>value</code> 的存储方式。</param>
            <param name="index">索引</param>
            <param name="termVector">检索词向量</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,System.IO.TextReader)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="reader">文本阅读器</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,System.IO.TextReader,EIIP.SE.Documents.Field.TermVector)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="reader">文本阅读器</param>
            <param name="termVector">检索词向量</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,EIIP.SE.Analysis.TokenStream)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="tokenStream">分词流</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,EIIP.SE.Analysis.TokenStream,EIIP.SE.Documents.Field.TermVector)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="tokenStream">分词流</param>
            <param name="termVector">分词向量</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,System.Byte[],EIIP.SE.Documents.Field.Store)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="value">字段值</param>
            <param name="store">存储</param>
        </member>
        <member name="M:EIIP.SE.Documents.Field.#ctor(System.String,System.Byte[],System.Int32,System.Int32,EIIP.SE.Documents.Field.Store)">
            <summary>
            实例化指定字段。
            </summary>
            <param name="name">字段名称</param>
            <param name="value">含字段值的数组</param>
            <param name="offset">字段值的偏移量</param>
            <param name="length">字段值的长度</param>
            <param name="store">存储</param>
        </member>
        <member name="P:EIIP.SE.Documents.Field.StringValue">
            <summary>
            获取字段的字符串值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.Field.ReaderValue">
            <summary>
            获取字段的文本阅读器值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.Field.BinaryValue">
            <summary>
            获取字段的二进制值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Documents.Field.TokenStreamValue">
            <summary>
            获取字段的分词流值。不存在则返回null。
            </summary>
        </member>
        <member name="T:EIIP.SE.Documents.Field.Store">
            <summary>
            字段存储标识类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.Parameter">
            <summary>
            参数基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Parameter.#ctor(System.String)">
            <summary>
            实例化指定参数。
            </summary>
            <param name="name">参数名称</param>
        </member>
        <member name="M:EIIP.SE.Util.Parameter.ToString">
            <summary>
            输出参数名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Parameter.ReadResolve">
            <summary>
            读取参数值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Parameter.GetRealObject(System.Runtime.Serialization.StreamingContext)">
            <summary>
            读取参数值。
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Store.COMPRESS">
            <summary>
            压缩存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Store.YES">
            <summary>
            需要存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Store.NO">
            <summary>
            不存储。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Field.Store.#ctor(System.String)">
            <summary>
            实例化字段存储标识。
            </summary>
            <param name="name">字段存储标识名称</param>
        </member>
        <member name="T:EIIP.SE.Documents.Field.Index">
            <summary>
            索引标识类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Index.NO">
            <summary>
            无索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Index.ANALYZED">
            <summary>
            通过分析器索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Index.NOT_ANALYZED">
            <summary>
            不使用分析器索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Index.NOT_ANALYZED_NO_NORMS">
            <summary>
            不使用分析器索引，也不存储标准化。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.Index.ANALYZED_NO_NORMS">
            <summary>
            通过分析器索引，但不存储标准化。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Field.Index.#ctor(System.String)">
            <summary>
            实例化索引标识。
            </summary>
            <param name="name">索引名称。</param>
        </member>
        <member name="T:EIIP.SE.Documents.Field.TermVector">
            <summary>
            检索词向量类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.TermVector.NO">
            <summary>
            不存储检索词向量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.TermVector.YES">
            <summary>
            存储检索词向量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.TermVector.WITH_POSITIONS">
            <summary>
            存储检索词向量及分词位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.TermVector.WITH_OFFSETS">
            <summary>
            存储检索词向量及分词偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.Field.TermVector.WITH_POSITIONS_OFFSETS">
            <summary>
            存储检索词向量及分词位置与偏移量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.Field.TermVector.#ctor(System.String)">
            <summary>
            实例化检索词向量。
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:EIIP.SE.Documents.FieldSelectorResult">
            <summary>
            字段选择器结果类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.LOAD">
            <summary>
            始终加载。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.LAZY_LOAD">
            <summary>
            延迟加载。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.NO_LOAD">
            <summary>
            不加载。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.LOAD_AND_BREAK">
            <summary>
            加载该字段后，忽略后续未加载字段（并立即返回）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.LOAD_FOR_MERGE">
            <summary>
            行为类似于 LOAD 类型。但并不解压任何压缩数据。用于内部调用处理。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.SIZE">
            <summary>
            加载字段的尺寸而不是其值。字符串的SIZE是其长度*2。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.FieldSelectorResult.SIZE_AND_BREAK">
            <summary>
            行为类似于 SIZE 类型。但加载后，忽略后续未加载字段（并立即返回）。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.FieldSelectorResult.Equals(System.Object)">
            <summary>
            比较相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Documents.FieldSelectorResult.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Documents.IFieldSelector">
            <summary>
            定义字段筛选器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.IFieldSelector.Accept(System.String)">
            <summary>
            接受指定字段的筛选结果。
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Documents.LoadFirstFieldSelector">
            <summary>
            仅选择首个字段的选择器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.LoadFirstFieldSelector.Accept(System.String)">
            <summary>
            仅接受指定字段的选择结果。
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Documents.MapFieldSelector">
            <summary>
            多字段选择器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Documents.MapFieldSelector.fieldSelections">
            <summary>
            要选择的字段名称字典。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.MapFieldSelector.#ctor(System.Collections.IDictionary)">
            <summary>
            实例化指定的多字段选择器。
            </summary>
            <param name="fieldSelections">要选择的字段名称字典。</param>
        </member>
        <member name="M:EIIP.SE.Documents.MapFieldSelector.#ctor(System.Collections.IList)">
            <summary>
            实例化指定的多字段选择器。
            </summary>
            <param name="fields">要选择的字段名称列表</param>
        </member>
        <member name="M:EIIP.SE.Documents.MapFieldSelector.#ctor(System.String[])">
            <summary>
            实例化指定的多字段选择器。
            </summary>
            <param name="fields">要选择的字段名称数组</param>
        </member>
        <member name="M:EIIP.SE.Documents.MapFieldSelector.Accept(System.String)">
            <summary>
            接受指定字段的选择结果。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Documents.SetBasedFieldSelector">
            <summary>
            确定普通加载与延迟加载的字段选择器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Documents.SetBasedFieldSelector.#ctor(System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            实例化指定字段选择器。
            </summary>
            <param name="fieldsToLoad">普通加载的字段名称集。可以为empty，但不能为null</param>
            <param name="lazyFieldsToLoad">延迟加载的字段名称集。可以为empty，但不能为null</param>
        </member>
        <member name="M:EIIP.SE.Documents.SetBasedFieldSelector.Accept(System.String)">
            <summary>
            接受指定字段的选择结果。
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.BufferedDeletes">
            <summary>
            保持缓存的删除。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.BufferedDeletes.numTerms">
            <summary>
            分词数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.BufferedDeletes.terms">
            <summary>
            缓存删除的分词。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.BufferedDeletes.queries">
            <summary>
            缓存删除的查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.BufferedDeletes.docIDs">
            <summary>
            缓存删除的文档号。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.BufferedDeletes.Update(EIIP.SE.Index.BufferedDeletes)">
            <summary>
            导入指定的删除缓存集。
            </summary>
            <param name="dels">要导入的数据源，导入后会清空。</param>
        </member>
        <member name="M:EIIP.SE.Index.BufferedDeletes.Clear">
            <summary>
            清空删除缓存集。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.BufferedDeletes.Remap(EIIP.SE.Index.MergeDocIDRemapper,EIIP.SE.Index.SegmentInfos,System.Int32[][],System.Int32[],EIIP.SE.Index.MergePolicy.OneMerge,System.Int32)">
            <summary>
            基于完成的合并重新映射所有的删除缓存。
            </summary>
            <param name="mapper">合并文档映射实例</param>
            <param name="infos">段信息实例</param>
            <param name="docMaps">文档地图</param>
            <param name="delCounts">删除量数组</param>
            <param name="merge">合并实例</param>
            <param name="mergeDocCount">文档合并数量</param>
        </member>
        <member name="P:EIIP.SE.Index.BufferedDeletes.Any">
            <summary>
            获取一个值，该值指示缓存是否为空。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.BufferedDeletes.DocNum">
            <summary>
            包装被删除的分词对应的文档号。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.BufferedDeletes.DocNum.#ctor(System.Int32)">
            <summary>
            包装文档号。
            </summary>
            <param name="num">文档号</param>
        </member>
        <member name="P:EIIP.SE.Index.BufferedDeletes.DocNum.Num">
            <summary>
            获取或设置文档号。
            </summary>
            <remarks>
            仅记录最大的文档号，因在多线程环境下，最后写入的会是最大的文档号。
            </remarks>
        </member>
        <member name="T:EIIP.SE.Index.ByteBlockPool">
            <summary>
            字节数据缓存池。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.buffers">
            <summary>
            缓存池。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.bufferUpto">
            <summary>
            要更新的缓存索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.byteUpto">
            <summary>
            缓存头部索引位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.buffer">
            <summary>
            当前头部缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.byteOffset">
            <summary>
            缓存头部偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.nextLevelArray">
            <summary>
            每部分的尺寸。数组最多只能有16个元素（索引被编码为4位）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.levelSizeArray">
            <summary>
            每部分的尺寸。数组最多只能有16个元素（索引被编码为4位）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteBlockPool.FIRST_LEVEL_SIZE">
            <summary>
            首个级别尺寸。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.#ctor(EIIP.SE.Index.ByteBlockPool.Allocator,System.Boolean)">
            <summary>
            实例化字节数据缓存池。
            </summary>
            <param name="allocator">分配器</param>
            <param name="trackAllocations">设置是否追踪分配情况</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.Reset">
            <summary>
            重置缓存池。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.NextBuffer">
            <summary>
            移至下一缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.NewSlice(System.Int32)">
            <summary>
            新的分配。
            </summary>
            <param name="size">要分配的尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.AllocSlice(System.Byte[],System.Int32)">
            <summary>
            分配片段。
            </summary>
            <param name="slice">要分配的数据</param>
            <param name="upto">开始分配位置</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.ByteBlockPool.Allocator">
            <summary>
            分配器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.Allocator.RecycleByteBlocks(System.Byte[][],System.Int32,System.Int32)">
            <summary>
            回收。
            </summary>
            <param name="blocks">要回收的块</param>
            <param name="start">blocks要回收的起始位置</param>
            <param name="end">blocks要回收的结束位置</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteBlockPool.Allocator.GetByteBlock(System.Boolean)">
            <summary>
            获取。
            </summary>
            <param name="trackAllocations">设置是否追踪分配。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.ByteSliceReader">
            <summary>
            字节块索引读取器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.IndexInput">
            <summary>
            文件夹输入流基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.IndexInput.bytes">
            <summary>
            使用于ReadString()
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.IndexInput.chars">
            <summary>
            使用于ReadModifiedUTF8String()
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.IndexInput.preUTF8Strings">
            <summary>
            指示是否使用 modified UTF-8 字符串。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadByte">
            <summary>
            读取一字节。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadBytes(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
            <param name="useBuffer">设置是否使用缓冲（默认忽略缓冲处理）</param>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteBytes(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadInt">
            <summary>
            读取无符号整型数据。
            </summary>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteVInt(System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadVInt">
            <summary>
            读取无符号整型数据。
            </summary>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteVInt(System.Int32)">
            </seealso>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadLong">
            <summary>
            读取长整型数据。
            </summary>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteLong(System.Int64)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadVLong">
            <summary>
            读取无符号长整型数据。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.SetModifiedUTF8StringsMode">
            <summary>
            设置按modified UTF-8格式读取字符串。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadString">
            <summary>
            读取字符串数据。起始位置为字符串长度。
            </summary>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteString(System.String)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadModifiedUTF8String">
            <summary>
            读取modified UTF-8格式字符串数据。起始位置为字符串长度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.ReadChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            读取指定长度的字符。
            </summary>
            <param name="buffer">读取缓存区</param>
            <param name="start">缓存区的偏移量</param>
            <param name="length">读取的字符数量</param>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteChars(System.String,System.Int32,System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.SkipChars(System.Int32)">
            <summary>
            跳过指定数量的字符。
            </summary>
            <param name="length">要读取的字符长度</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.Close">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.GetFilePointer">
            <summary>
            获取当前文件的读取位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.Seek(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexInput.Clone">
            <summary>
            克隆输入流(浅表副本)。
            </summary>
        </member>
        <member name="P:EIIP.SE.Store.IndexInput.Length">
            <summary>
            获取文件长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.pool">
            <summary>
            字节数据缓存池。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.bufferUpto">
            <summary>
            缓存位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.bufferOffset">
            <summary>
            缓存偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.buffer">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.upto">
            <summary>
            位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.limit">
            <summary>
            限制
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.level">
            <summary>
            级别
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ByteSliceReader.endIndex">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.Init(EIIP.SE.Index.ByteBlockPool,System.Int32,System.Int32)">
            <summary>
            初始化字节块索引读取器。
            </summary>
            <param name="pool">字节缓存池</param>
            <param name="startIndex">起始位置索引</param>
            <param name="endIndex">结束位置索引</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.Eof">
            <summary>
            测试是否在文件尾部。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.ReadByte">
            <summary>
            读取一字节。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.WriteTo(EIIP.SE.Store.IndexOutput)">
            <summary>
            写入索引输出器。
            </summary>
            <param name="output">索引输出器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.NextSlice">
            <summary>
            跳至下一块。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.GetFilePointer">
            <summary>
            获取当前文件的读取位置。
            </summary>
            <seealso cref="M:EIIP.SE.Index.ByteSliceReader.Seek(System.Int64)"/>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.Seek(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
            <seealso cref="M:EIIP.SE.Index.ByteSliceReader.GetFilePointer"/>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceReader.Close">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.ByteSliceReader.Length">
            <summary>
            获取文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ByteSliceWriter">
            <summary>
            字节块写入器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceWriter.#ctor(EIIP.SE.Index.ByteBlockPool)">
            <summary>
            实例化字节块写入器。
            </summary>
            <param name="pool">缓存池</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceWriter.Init(System.Int32)">
            <summary>
            初始化写入器从指定位置写入。
            </summary>
            <param name="address">写入位置。</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceWriter.WriteByte(System.Byte)">
            <summary>
            写入字节。
            </summary>
            <param name="b">字节。</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入数据。
            </summary>
            <param name="b">字节数组。</param>
            <param name="offset">偏移量</param>
            <param name="len">长度</param>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceWriter.GetAddress">
            <summary>
            获取写入地址。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ByteSliceWriter.WriteVInt(System.Int32)">
            <summary>
            写入无符号整型数据。
            </summary>
            <param name="i">整型数据。</param>
        </member>
        <member name="T:EIIP.SE.Index.CharBlockPool">
            <summary>
            字符块缓存池。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CharBlockPool.buffers">
            <summary>
            缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CharBlockPool.bufferUpto">
            <summary>
            缓存目标位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CharBlockPool.charUpto">
            <summary>
            头部缓存位置
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CharBlockPool.buffer">
            <summary>
            当前头部缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CharBlockPool.charOffset">
            <summary>
            当前头部缓存偏移量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CharBlockPool.#ctor(EIIP.SE.Index.DocumentsWriter)">
            <summary>
            实例化字符块缓存池。
            </summary>
            <param name="docWriter">文档写入器。</param>
        </member>
        <member name="M:EIIP.SE.Index.CharBlockPool.reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CharBlockPool.nextBuffer">
            <summary>
            移到下一缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CheckIndex">
            <summary>
            提供一个基本工具及API，用以检查索引的健康状态，移除有问题的段并写入新的段文件。
            由于要检查索引的每个字节，所以对于大索引文件来说，需要一个很长的时间。
            在使用本工具时，应先进行索引文件的备份。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.#ctor(EIIP.SE.Store.Directory)">
            <summary>
            实例化指定文件夹的索引检查器。
            </summary>
            <param name="dir">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.SetInfoStream(System.IO.TextWriter)">
            <summary>
            设置信息输出流。
            </summary>
            <param name="tw">信息输出流。</param>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.Check(EIIP.SE.Store.Directory,System.Boolean)">
            <summary>
            检查索引是否是干净的。
            </summary>
            <param name="dir">文件夹</param>
            <param name="doFix">设置是否自动修复</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.Check(EIIP.SE.Store.Directory,System.Boolean,System.Collections.Generic.IList{System.Object})">
            <summary>
            检查索引是否是干净的。
            </summary>
            <param name="dir">文件夹</param>
            <param name="doFix">设置是否自动修复</param>
            <param name="onlySegments">段对象列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.GetCheckIndexStatus">
            <summary>
            获取检查索引的状态。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.GetCheckIndexStatus(System.Collections.Generic.IList{System.Object})">
            <summary>
            获取检查索引的状态。
            </summary>
            <param name="onlySegments">段对象列表</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.FixIndex(EIIP.SE.Index.CheckIndex.Status)">
            <summary>
            修复结果。
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:EIIP.SE.Index.CheckIndex.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:EIIP.SE.Index.CheckIndex.Status">
            <summary>
            状态类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.clean">
            <summary>
            指示索引是否没有问题。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.missingSegments">
            <summary>
            指示是否不能定位并加载段(segments_N)文件。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.cantOpenSegments">
            <summary>
            指示是否不能打开段(segments_N)文件。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.missingSegmentVersion">
            <summary>
            指示是否不能读取段(segments_N)文件中的版本号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.segmentsFileName">
            <summary>
            索引中的段文件名(segments_N)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.numSegments">
            <summary>
            索引中段的数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.segmentFormat">
            <summary>
            索引中的版本描述字串。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.segmentsChecked">
            <summary>
            通过检查的段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.toolOutOfDate">
            <summary>
            指示索引检查工具是否已过期（索引有新版本创建）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.segmentInfos">
            <summary>
            段信息
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.dir">
            <summary>
            索引所在文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.newSegments">
            <summary>
            已修复的无问题的段信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.totLoseDocCount">
            <summary>
            丢失损坏的段的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.numBadSegments">
            <summary>
            损坏的段数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.partial">
            <summary>
            指示是否仅检查了部分段。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus">
            <summary>
            保持索引中每段的状态类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.name">
            <summary>
            段名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.docCount">
            <summary>
            文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.compound">
            <summary>
            指示是否复合文件格式。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.numFiles">
            <summary>
            段引用的文件数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.sizeMB">
            <summary>
            段引用的文件尺寸（MB）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.docStoreOffset">
            <summary>
            文档存储的偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.docStoreSegment">
            <summary>
            存储段的文档名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.docStoreCompoundFile">
            <summary>
            指示存储的文档是否是复合文件。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.hasDeletions">
            <summary>
            指示段是否已被删除。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.deletionsFileName">
            <summary>
            删除的文件名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.numDeleted">
            <summary>
            删除的文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.openReaderPassed">
            <summary>
            指示是否能打开段阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.numFields">
            <summary>
            段中字段数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CheckIndex.Status.SegmentInfoStatus.hasProx">
            <summary>
            指示段中是否有字段没有omitTf。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentTermDocs">
            <summary>
            段的分词文档类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ITermDocs">
            <summary>
            定义一个枚举分词的文档词频的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Seek(EIIP.SE.Index.Term)">
            <summary>
            定位于指定分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Seek(EIIP.SE.Index.TermEnum)">
            <summary>
            定位指定分词枚举数。
            </summary>
            <param name="termEnum">分词枚举数。</param>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Freq">
            <summary>
            获取当前文档的分词词频。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Next">
            <summary>
            移向下一个。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Read(System.Int32[],System.Int32[])">
            <summary>
            尝试从多个文档读取，返回读取的文档号(当不存在则返回0)。
            </summary>
            <param name="docs">文档号数组</param>
            <param name="freqs">分词频率，与docs长度一致</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.SkipTo(System.Int32)">
            <summary>
            忽略基于指定文档号的文档。存在忽略返回true。
            <pre>
            boolean skipTo(int target)
            {
             do{ if(!next()) return false; }while(target > doc());
             return true;
            }
            </pre>
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermDocs.Close">
            <summary>
            释放关联资源。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.parent">
            <summary>
            所属段阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.freqStream">
            <summary>
            词频输入流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.count">
            <summary>
            数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.df">
            <summary>
            包含分词的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.deletedDocs">
            <summary>
            删除的文档数据。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.currentFieldStoresPayloads">
            <summary>
            指示当前字段是否存储了有效负载。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermDocs.currentFieldOmitTf">
            <summary>
            指示当前字段是否OmitTf。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.#ctor(EIIP.SE.Index.SegmentReader)">
            <summary>
            实例化段的分词文档。
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Doc">
            <summary>
            获取文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Freq">
            <summary>
            获取词频。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Seek(EIIP.SE.Index.Term)">
            <summary>
            定位指定分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Seek(EIIP.SE.Index.TermEnum)">
            <summary>
            定位指定分词枚举数。
            </summary>
            <param name="termEnum">分词枚举数。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Seek(EIIP.SE.Index.TermInfo,EIIP.SE.Index.Term)">
            <summary>
            定位指定分词信息。
            </summary>
            <param name="ti">分词信息。</param>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.SkippingDoc">
            <summary>
            忽略基于指定文档号的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Next">
            <summary>
            移向下一个。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.Read(System.Int32[],System.Int32[])">
            <summary>
            尝试从多个文档读取，返回读取的文档号(当不存在则返回0)。
            </summary>
            <param name="docs">文档号数组</param>
            <param name="freqs">分词频率，与docs长度一致</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.SkipProx(System.Int64)">
            <summary>
            由SegmentTermPositions重写以忽略指定的后缀流。
            </summary>
            <param name="proxPointer"></param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.SkipProx(System.Int64,System.Int32)">
            <summary>
            由SegmentTermPositions重写以忽略指定的后缀流。
            </summary>
            <param name="proxPointer"></param>
            <param name="payloadLength">有效负载长度</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermDocs.SkipTo(System.Int32)">
            <summary>
            忽略基于指定文档号的文档。存在忽略返回true。
            <pre>
            boolean skipTo(int target)
            {
             do{ if(!next()) return false; }while(target > doc());
             return true;
            }
            </pre>
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.CompoundFileReader">
            <summary>
            组合文件阅读器类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.Directory">
            <summary>
            文件夹类。文件仅在创建时写入一次，一旦文件被创建则以后只能读或删除。随机访问仅允许在读或写时。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.Directory.isOpen">
            <summary>
            指示是否已打开。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.Directory.lockFactory">
            <summary>
            锁工厂实例。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Directory.List">
            <summary>
            获取文件列表。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Directory.FileExists(System.String)">
            <summary>
            测试指定文件是否存在。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Directory.FileModified(System.String)">
            <summary>
            获取指定文件的修改时间。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Directory.TouchFile(System.String)">
            <summary>
            设置指定文件的修改时间为当前时间。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.DeleteFile(System.String)">
            <summary>
            移除文件夹中指定的文件。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.RenameFile(System.String,System.String)">
            <summary>
            文件重命名。
            </summary>
            <param name="from">旧文件名</param>
            <param name="to">新文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.FileLength(System.String)">
            <summary>
            获取指定文件的长度。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Directory.CreateOutput(System.String)">
            <summary>
            创建一个新的空文件。返回该文件的写入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Directory.Sync(System.String)">
            <summary>
            同步操作。确认所有的写入操作都已更新至存储区。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.OpenInput(System.String)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Directory.OpenInput(System.String,System.Int32)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <param name="bufferSize">缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Directory.MakeLock(System.String)">
            <summary>Construct a {@link Lock}.</summary>
            <param name="name">the name of the lock file
            </param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.ClearLock(System.String)">
            <summary>
            锁定指定文件。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.Close">
            <summary>
            关闭文件流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Directory.GetLockID">
            <summary>
            获取锁ID。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Directory.Copy(EIIP.SE.Store.Directory,EIIP.SE.Store.Directory,System.Boolean)">
            <summary>
            复制文件夹内容。若在目标文件夹有同名文件存在，则会被覆盖。
            </summary>
            <param name="src">源文件夹</param>
            <param name="dest">目标文件夹</param>
            <param name="closeDirSrc">设置复制操作完成后是否关闭源文件夹</param>
        </member>
        <member name="M:EIIP.SE.Store.Directory.EnsureOpen">
            <summary>
            确认文件夹已打开，否则抛出异常。
            </summary>
        </member>
        <member name="P:EIIP.SE.Store.Directory.LockFactory">
            <summary>
            获取或设置锁工厂实例。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileReader.directory">
            <summary>
            文件夹
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileReader.fileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.#ctor(EIIP.SE.Store.Directory,System.String)">
            <summary>
            实例化组合文件阅读器。
            </summary>
            <param name="dir">文件夹</param>
            <param name="name">文件名称</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.#ctor(EIIP.SE.Store.Directory,System.String,System.Int32)">
            <summary>
            实例化组合文件阅读器。
            </summary>
            <param name="dir">文件夹</param>
            <param name="name">文件名称</param>
            <param name="readBufferSize">读取缓存尺寸</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.Close">
            <summary>
            关闭文件阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.OpenInput(System.String)">
            <summary>
            打开指定文件ID的文件输入流。
            </summary>
            <param name="id">文件ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.OpenInput(System.String,System.Int32)">
            <summary>
            打开指定文件ID的文件输入流。
            </summary>
            <param name="id">文件ID</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.List">
            <summary>
            获取文件列表。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.FileExists(System.String)">
            <summary>
            测试指定文件是否存在。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.FileModified(System.String)">
            <summary>
            获取指定文件的修改时间。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.TouchFile(System.String)">
            <summary>
            设置指定文件的修改时间为当前时间。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.DeleteFile(System.String)">
            <summary>
            移除文件夹中指定的文件。始终抛出异常。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.RenameFile(System.String,System.String)">
            <summary>
            文件重命名。始终抛出异常。
            </summary>
            <param name="from">旧文件名</param>
            <param name="to">新文件名</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.FileLength(System.String)">
            <summary>
            获取指定文件的长度。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CreateOutput(System.String)">
            <summary>
            创建一个新的空文件。返回该文件的写入流。始终抛出异常。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.MakeLock(System.String)">
            <summary>
            锁定指定文件。始终抛出异常。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="P:EIIP.SE.Index.CompoundFileReader.Directory">
            <summary>
            获取文件夹。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.CompoundFileReader.Name">
            <summary>
            获取文件名。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CompoundFileReader.FileEntry">
            <summary>
            文件实体类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileReader.FileEntry.offset">
            <summary>
            偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileReader.FileEntry.length">
            <summary>
            文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CompoundFileReader.CSIndexInput">
            <summary>
            复合文件输入流类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.BufferedIndexInput">
            <summary>
            缓冲的文件夹输入流基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.BufferedIndexInput.BUFFER_SIZE">
            <summary>
            默认缓存尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.BufferedIndexInput.buffer">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.BufferedIndexInput.bufferStart">
            <summary>
            文件的起始位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.BufferedIndexInput.bufferLength">
            <summary>
            缓存长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.BufferedIndexInput.bufferPosition">
            <summary>
            缓存位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.ReadByte">
            <summary>
            读取一字节。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.#ctor">
            <summary>
            实例化缺省缓冲的文件夹输入流基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.#ctor(System.Int32)">
            <summary>
            实例化指定缓冲的文件夹输入流基类。
            </summary>
            <param name="bufferSize">缓存尺寸</param>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.NewBuffer(System.Byte[])">
            <summary>
            设置新的缓存区。
            </summary>
            <param name="newBuffer">新的缓存区。</param>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteBytes(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.ReadBytes(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
            <param name="useBuffer">设置是否使用缓冲（默认忽略缓冲处理）</param>
            <seealso cref="M:EIIP.SE.Store.IndexOutput.WriteBytes(System.Byte[],System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取以填充缓存。
            </summary>
            <param name="b">缓存</param>
            <param name="offset">存储位置的偏移量</param>
            <param name="length">要读取的长度</param>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.GetFilePointer">
            <summary>
            获取当前文件的读取位置。
            </summary>
            <seealso cref="M:EIIP.SE.Store.BufferedIndexInput.Seek(System.Int64)"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.Seek(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
            <seealso cref="M:EIIP.SE.Store.BufferedIndexInput.GetFilePointer"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.SeekInternal(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexInput.Clone">
            <summary>
            克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Store.BufferedIndexInput.BufferSize">
            <summary>
            获取或设置缓存尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileReader.CSIndexInput.Inner">
            <summary>
            关联的索引输入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CSIndexInput.#ctor(EIIP.SE.Store.IndexInput,System.Int64,System.Int64)">
            <summary>
            实例化复合文件输入流。
            </summary>
            <param name="input">输入流。</param>
            <param name="fileOffset">文件偏移量</param>
            <param name="length">文件长度</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CSIndexInput.#ctor(EIIP.SE.Store.IndexInput,System.Int64,System.Int64,System.Int32)">
            <summary>
            实例化复合文件输入流。
            </summary>
            <param name="input">输入流。</param>
            <param name="fileOffset">文件偏移量</param>
            <param name="length">文件长度</param>
            <param name="readBufferSize">读取缓存尺寸</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CSIndexInput.Clone">
            <summary>
            克隆输入流(浅表副本)。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CSIndexInput.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取数据。
            </summary>
            <param name="b">读取数据要存储的数组</param>
            <param name="offset">数组中的偏移量</param>
            <param name="len">读取数量</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CSIndexInput.SeekInternal(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileReader.CSIndexInput.Close">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.CompoundFileReader.CSIndexInput.Length">
            <summary>
            获取文件的长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CompoundFileWriter">
            <summary>
            复合文件写入器类。
            文件格式:<br/>
            <ul>
            <li>VInt 文件数量</li>
            <li>{文件夹} 文件结构:</li>
            <ul>
            <li>long 数据偏移量</li>
            <li>String 文件名称</li>
            </ul>
            <li>{文件数据}</li>
            </ul>
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileWriter.#ctor(EIIP.SE.Store.Directory,System.String)">
            <summary>
            实例化复合文件。
            </summary>
            <param name="dir">文件夹实例</param>
            <param name="name">复合文件名称</param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileWriter.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.SegmentMerger.CheckAbort)">
            <summary>
            实例化复合文件。
            </summary>
            <param name="dir">文件夹实例</param>
            <param name="name">复合文件名称</param>
            <param name="checkAbort"></param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileWriter.AddFile(System.String)">
            <summary>
            添加指定文件。
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileWriter.Close">
            <summary>
            合并文件，并关闭输出流。合并成功后，源文件将被删除。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CompoundFileWriter.CopyFile(EIIP.SE.Index.CompoundFileWriter.FileEntry,EIIP.SE.Store.IndexOutput,System.Byte[])">
            <summary>
            将指定文件实体写入输出流。
            </summary>
            <param name="source">源文件实体</param>
            <param name="os">输出流</param>
            <param name="buffer">缓存区</param>
        </member>
        <member name="P:EIIP.SE.Index.CompoundFileWriter.Directory">
            <summary>
            获取文件夹实例。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.CompoundFileWriter.Name">
            <summary>
            获取复合文件名称。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CompoundFileWriter.FileEntry">
            <summary>
            文件实体类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileWriter.FileEntry.file">
            <summary>
            源文件名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileWriter.FileEntry.directoryOffset">
            <summary>
            文件夹偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.CompoundFileWriter.FileEntry.dataOffset">
            <summary>
            文件数据偏移量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ConcurrentMergeScheduler">
            <summary>
            并发的合并调度类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MergeScheduler">
            <summary>
            合并调度基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergeScheduler.Merge(EIIP.SE.Index.IndexWriter)">
            <summary>
            合并。
            </summary>
            <param name="writer">索引写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.MergeScheduler.Close">
            <summary>
            关闭调度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.anyExceptions">
            <summary>
            指示是否存在异常。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.mergeThreads">
            <summary>
            合并线程列表。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.maxThreadCount">
            <summary>
            最大线程数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.dir">
            <summary>
            文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.writer">
            <summary>
            索引写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.mergeThreadCount">
            <summary>
            合并线程数量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.#ctor">
            <summary>
            实例化并发的合并调度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.Close">
            <summary>
            关闭调度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.Sync">
            <summary>
            同步。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.Merge(EIIP.SE.Index.IndexWriter)">
            <summary>
            合并。
            </summary>
            <param name="writer">索引写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.DoMerge(EIIP.SE.Index.MergePolicy.OneMerge)">
            <summary>
            处理实际的合并。由 IndexWriter.Merge() 调用。
            </summary>
            <param name="merge">要处理的合并</param>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.GetMergeThread(EIIP.SE.Index.IndexWriter,EIIP.SE.Index.MergePolicy.OneMerge)">
            <summary>
            创建并返回新的合并线程。
            </summary>
            <param name="writer">索引写入器</param>
            <param name="merge">合并</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.HandleMergeException(System.Exception)">
            <summary>
            处理合并异常。
            </summary>
            <param name="exc">异常。</param>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.AnyUnhandledExceptions">
            <summary>
            测试是否有未处理异常。（用于测试）
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.ClearUnhandledExceptions">
            <summary>
            清除未处理异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.AddMyself">
            <summary>
            （用于测试）
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.SetSuppressExceptions">
            <summary>
            （用于测试）
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.ClearSuppressExceptions">
            <summary>
            （用于测试）
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.SetTestMode">
            <summary>
            （用于测试）
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThreadPriority">
            <summary>
            获取或设置合并线程优先级。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.ConcurrentMergeScheduler.MaxThreadCount">
            <summary>
            获取或设置最大线程数量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread">
            <summary>
            合并线程类。
            </summary>
        </member>
        <member name="T:EIIP.SE.ThreadClass">
            <summary>
            线程类。
            </summary>
        </member>
        <member name="T:EIIP.SE.IThreadRunnable">
            <summary>
            定义能被一个线程执行的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.IThreadRunnable.Run">
            <summary>
            由另一线程执行。
            </summary>
        </member>
        <member name="F:EIIP.SE.ThreadClass.threadField">
            <summary>
            线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.#ctor">
            <summary>
            实例化线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.#ctor(System.String)">
            <summary>
            实例化线程。
            </summary>
            <param name="name">线程的名称</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.#ctor(System.Threading.ThreadStart)">
            <summary>
            实例化线程。
            </summary>
            <param name="start">System.Threading.ThreadStart 委托，它表示此线程开始执行时要调用的方法。</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
            实例化线程。
            </summary>
            <param name="start">System.Threading.ThreadStart 委托，它表示此线程开始执行时要调用的方法。</param>
            <param name="name">线程的名称</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Run">
            <summary>
            线程执行。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Start">
            <summary>
            导致操作系统将当前实例的状态更改为 System.Threading.ThreadState.Running。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Interrupt">
            <summary>
            中断处于 WaitSleepJoin 线程状态的线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.SetDaemon(System.Boolean)">
            <summary>
            设置一个值，该值指示某个线程是否为后台线程。
            </summary>
            <param name="isDaemon">指示某个线程是否为后台线程。</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Join">
            <summary>
            在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止为止。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Join(System.Int64)">
            <summary>
            在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止或经过了指定时间为止。
            </summary>
            <param name="miliSeconds">等待线程终止的毫秒数。</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Join(System.Int64,System.Int32)">
            <summary>
            在继续执行标准的 COM 和 SendMessage 消息泵处理期间，阻塞调用线程，直到某个线程终止或经过了指定时间为止。
            </summary>
            <param name="miliSeconds">等待线程终止的毫秒数。</param>
            <param name="nanoSeconds">等待线程终止的纳秒数。</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Resume">
            <summary>
            重新开始已挂起的线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Abort">
            <summary>
            在调用此方法的线程上引发 System.Threading.ThreadAbortException，以开始终止此线程的过程。
            调用此方法通常会终止线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Abort(System.Object)">
            <summary>
            在调用此方法的线程上引发 System.Threading.ThreadAbortException，以开始终止此线程的过程。
            调用此方法通常会终止线程。
            </summary>
            <param name="stateInfo">一个对象，它包含应用程序特定的信息（如状态），该信息可供正被中止的线程使用。</param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Suspend">
            <summary>
            挂起线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.ToString">
            <summary>
            输出线程信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.ThreadClass.CurrentThread">
            <summary>
            获取当前线程。
            </summary>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Sleep(System.Int64)">
            <summary>
            将当前线程挂起指定的时间。
            </summary>
            <param name="ms">
            线程被阻塞的毫秒数。
            指定零 (0) 以指示应挂起此线程以使其他等待线程能够执行。
            指定 System.Threading.Timeout.Infinite 以无限期阻止线程。
            </param>
        </member>
        <member name="M:EIIP.SE.ThreadClass.Current">
            <summary>
            获取当前线程。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.ThreadClass.Instance">
            <summary>
            获取或设置当前线程。
            </summary>
        </member>
        <member name="P:EIIP.SE.ThreadClass.Name">
            <summary>
            获取或设置当前线程名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.ThreadClass.Priority">
            <summary>
            获取或设置一个值，该值指示线程的调度优先级。
            </summary>
        </member>
        <member name="P:EIIP.SE.ThreadClass.IsAlive">
            <summary>
            获取一个值，该值指示当前线程的执行状态。
            </summary>
        </member>
        <member name="P:EIIP.SE.ThreadClass.IsBackground">
            <summary>
            获取或设置一个值，该值指示某个线程是否为后台线程。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.writer">
            <summary>
            索引写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.startMerge">
            <summary>
            启动合并策略。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.runningMerge">
            <summary>
            运行合并策略。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.#ctor(EIIP.SE.Index.ConcurrentMergeScheduler,EIIP.SE.Index.IndexWriter,EIIP.SE.Index.MergePolicy.OneMerge)">
            <summary>
            实例化合并线程。
            </summary>
            <param name="scheduler">并发的合并调度。</param>
            <param name="writer">索引写入器</param>
            <param name="startMerge">启始合并策略</param>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.SetThreadPriority(System.Int32)">
            <summary>
            设置线程调度优先级。
            </summary>
            <param name="pri">线程调度优先级。</param>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.Run">
            <summary>
            线程执行。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.Scheduler">
            <summary>
            获取并发合并调度实例。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.ConcurrentMergeScheduler.MergeThread.RunningMerge">
            <summary>
            获取或设置运行合并策略。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.CorruptIndexException">
            <summary>
            当在索引中存在逻辑错误时抛出的异常类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.CorruptIndexException.#ctor(System.String)">
            <summary>
            实例化当在索引中存在逻辑错误时抛出的异常。
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="T:EIIP.SE.Index.DefaultSkipListReader">
            <summary>
            默认忽略列表阅读器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultiLevelSkipListReader">
            <summary>
            多级忽略列表阅读器基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.maxNumberOfSkipLevels">
            <summary>
            最大忽略级数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.numberOfSkipLevels">
            <summary>
            忽略级数
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.numberOfLevelsToBuffer">
            <summary>
            缓存的忽略级数
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.skipStream">
            <summary>
            忽略索引流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.skipPointer">
            <summary>
            每级的忽略起始位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.skipInterval">
            <summary>
            每级的忽略间隔。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.numSkipped">
            <summary>
            每级忽略的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.skipDoc">
            <summary>
            每级忽略实体的文档ID。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.lastDoc">
            <summary>
            最近读取的忽略实体的文档ID。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.childPointer">
            <summary>
            每级的当前忽略实体的子位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiLevelSkipListReader.lastChildPointer">
            <summary>
            最近读取的当前忽略实体的子位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiLevelSkipListReader.GetDoc">
            <summary>
            获取最近读取的忽略实体的文档ID。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.DefaultSkipListWriter">
            <summary>
            默认忽略列表写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultiLevelSkipListWriter">
            <summary>
            多级忽略列表写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocConsumer">
            <summary>
            文档处理类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocConsumer.addThread(EIIP.SE.Index.DocumentsWriterThreadState)">
            <summary>
            添加文档处理线程。
            </summary>
            <param name="perThread">文档处理线程状态</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocConsumer.Flush(System.Collections.Generic.ICollection{System.Object},EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            清理线程。
            </summary>
            <param name="threads">线程集。</param>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocConsumer.closeDocStore(EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            关闭文档存储。
            </summary>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocConsumer.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocConsumer.freeRAM">
            <summary>
            释放内存。操作有效则返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldConsumer">
            <summary>
            文档字段处理器基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocFieldConsumer.fieldInfos">
            <summary>
            字段信息集。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumer.flush(System.Collections.Generic.IDictionary{System.Object,System.Collections.Generic.ICollection{System.Object}},EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            清理。当文档写入器创建新段的时候调用。
            </summary>
            <param name="threadsAndFields">线程及字段字典</param>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumer.closeDocStore(EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            关闭文档存储。当文档写入器关闭文档存储时调用。
            </summary>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumer.Abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumer.addThread(EIIP.SE.Index.DocFieldProcessorPerThread)">
            <summary>
            添加新线程。
            </summary>
            <param name="docFieldProcessorPerThread">线程。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumer.freeRAM">
            <summary>
            释放内存。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.DocFieldConsumer.FieldInfos">
            <summary>
            获取或设置字段信息集。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldConsumerPerThread">
            <summary>
            每线程的文档字段处理器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumerPerThread.startDocument">
            <summary>
            启动文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumerPerThread.finishDocument">
            <summary>
            结束文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumerPerThread.addField(EIIP.SE.Index.FieldInfo)">
            <summary>
            添加指定字段。
            </summary>
            <param name="fieldInfo">字段信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumerPerThread.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldConsumers">
            <summary>
            文档字段处理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.#ctor(EIIP.SE.Index.DocFieldConsumer,EIIP.SE.Index.DocFieldConsumer)">
            <summary>
            实例化文档字段处理器。
            </summary>
            <param name="one"></param>
            <param name="two"></param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.flush(System.Collections.Generic.IDictionary{System.Object,System.Collections.Generic.ICollection{System.Object}},EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            清理。当文档写入器创建新段的时候调用。
            </summary>
            <param name="threadsAndFields">线程及字段字典</param>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.closeDocStore(EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            关闭文档存储。当文档写入器关闭文档存储时调用。
            </summary>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.Abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.freeRAM">
            <summary>
            释放内存。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.addThread(EIIP.SE.Index.DocFieldProcessorPerThread)">
            <summary>
            添加新线程。
            </summary>
            <param name="docFieldProcessorPerThread">线程。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.getPerDoc">
            <summary>
            获取单个文档写入器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.DocFieldConsumers.FieldInfos">
            <summary>
            获取或设置字段信息集。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldConsumers.PerDoc">
            <summary>
            单个文档写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.DocWriter">
            <summary>
            文档写入器基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter">
            <summary>
            文档写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.MAX_THREAD_STATE">
            <summary>
            最大线程状态
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.object_HEADER_BYTES">
            <summary>
            对象头数据字节数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.POINTER_NUM_BYTE">
            <summary>
            指针数据字节数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.INT_NUM_BYTE">
            <summary>
            整型数据字节数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.CHAR_NUM_BYTE">
            <summary>
            字符型数据字节数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.segment">
            <summary>
            当前段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.docStoreSegment">
            <summary>
            正写入的当前文档存储段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.docStoreOffset">
            <summary>
            当前段的当前起始文档存储偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.nextDocID">
            <summary>
            要添加的下一文档ID
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.numDocsInRAM">
            <summary>
            在内存中缓存的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.numDocsInStore">
            <summary>
            写入文档存储的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.pauseThreads">
            <summary>
            暂停线程数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.flushPending">
            <summary>
            指示是否清理挂起线程。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.bufferIsFull">
            <summary>
            指示是否缓存已满，需要写入段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.aborting">
            <summary>
            指示是否已中止。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.deletesInRAM">
            <summary>
            缓存的已删除项。在最近一次清理以来的删除项。在中止时被丢弃。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.deletesFlushed">
            <summary>
            清理的删除项。在最近一次清理以前的删除项。在中止时也被保持。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.maxBufferedDeleteTerms">
            <summary>
            最大缓存的删除分词数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DEFAULT_RAM_BUFFER_SIZE_B">
            <summary>
            默认内存缓存尺寸(字节)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.freeTrigger">
            <summary>
            预算分配超过内存设定5%的空间(字节)。剩余空间设定为95%(字节)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.freeLevel">
            <summary>
            预算分配超过内存设定5%的空间(字节)。剩余空间设定为95%(字节)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.maxBufferedDocs">
            <summary>
            最大缓存文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.flushedDocCount">
            <summary>
            清理的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.abortedFiles">
            <summary>
            在最近一次中止之前被写入的文件。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.CHAR_BLOCK_SIZE">
            <summary>
            字符块尺寸。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.IndexWriter)">
            <summary>
            实例化文档写入器。
            </summary>
            <param name="directory">要写入文档信息的文件夹实例</param>
            <param name="writer">索引写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.HasProx">
            <summary>
            测试是否含有Tf的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.SetInfoStream(System.IO.TextWriter)">
            <summary>
            设置指定信息流。
            </summary>
            <param name="infoStream">信息流。</param>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.SetMaxFieldLength(System.Int32)">
            <summary>
            设置最大字段长度。
            </summary>
            <param name="maxFieldLength">最大字段长度。</param>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.SetSimilarity(EIIP.SE.Search.Similarity)">
            <summary>
            设置相似度。
            </summary>
            <param name="similarity">相似度。</param>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.GetSegment">
            <summary>
            获取正写入的当前段名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.GetNumDocsInRAM">
            <summary>
            获取缓存在内存中的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.GetDocStoreSegment">
            <summary>
            获取正写入的当前文档存储段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.GetDocStoreOffset">
            <summary>
            获取当前段的当前起始文档存储偏移量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.CloseDocStore">
            <summary>
            关闭当前打开的文档存储，返回文档存储段名称。若无缓存文档则返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.Abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.DocumentsWriter.AbortedFiles">
            <summary>
            获取在最近一次中止之前被写入的文件。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.DocumentsWriter.RAMBufferSizeMB">
            <summary>
            获取或设置内存缓存尺寸（MB）。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.DocumentsWriter.MaxBufferedDocs">
            <summary>
            获取或设置最大缓存文档数量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.DocState">
            <summary>
            文档状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.docWriter">
            <summary>
            文档写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.analyzer">
            <summary>
            分词分析器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.maxFieldLength">
            <summary>
            最大字段长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.infoStream">
            <summary>
            信息流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.similarity">
            <summary>
            相似度实例。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.docID">
            <summary>
            文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.doc">
            <summary>
            文档。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocState.maxTermPrefix">
            <summary>
            最大分词前缀。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.FlushState">
            <summary>
            清理状态类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.docWriter">
            <summary>
            文档写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.directory">
            <summary>
            文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.segmentName">
            <summary>
            段名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.docStoreSegmentName">
            <summary>
            文档存储段名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.numDocsInRAM">
            <summary>
            在内存中的文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.numDocsInStore">
            <summary>
            存储的文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.FlushState.flushedFiles">
            <summary>
            清理的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.FlushState.SegmentFileName(System.String)">
            <summary>
            获取指定扩展名的段文件名。
            </summary>
            <param name="ext">段文件的扩展名，不能在前面添加"."</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.DocWriter">
            <summary>
            文档写入器基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocWriter.next">
            <summary>
            下一文档写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriter.DocWriter.docID">
            <summary>
            文档号。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.DocWriter.Finish">
            <summary>
            结束。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.DocWriter.Abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.DocWriter.SizeInBytes">
            <summary>
            字节尺寸。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.DocWriter.SetNext(EIIP.SE.Index.DocumentsWriter.DocWriter)">
            <summary>
            设置下一文档写入器。
            </summary>
            <param name="next"></param>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.SkipDocWriter">
            <summary>
            要跳过的文档写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.ByteBlockAllocator">
            <summary>
            字节块分配器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.ByteBlockAllocator.GetByteBlock(System.Boolean)">
            <summary>
            获取。
            </summary>
            <param name="trackAllocations">设置是否追踪分配。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriter.ByteBlockAllocator.RecycleByteBlocks(System.Byte[][],System.Int32,System.Int32)">
            <summary>
            回收。
            </summary>
            <param name="blocks">要回收的块</param>
            <param name="start">blocks要回收的起始位置</param>
            <param name="end">blocks要回收的结束位置</param>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriter.WaitQueue">
            <summary>
            等待队列。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.PerDoc.#ctor(EIIP.SE.Index.DocFieldConsumers)">
            <summary>
            实例化单个文档写入器。
            </summary>
            <param name="consumers">文档字段写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.PerDoc.SizeInBytes">
            <summary>
            字节尺寸。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.PerDoc.Finish">
            <summary>
            结束。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumers.PerDoc.Abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldConsumersPerField">
            <summary>
            每字段的文档字段处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IDocFieldConsumerPerField">
            <summary>
            定义每个字段的文档字段处理器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IDocFieldConsumerPerField.processFields(EIIP.SE.Documents.IFieldable[],System.Int32)">
            <summary>
            处理字段。
            </summary>
            <param name="fields">字段数组</param>
            <param name="count">要处理的数量</param>
        </member>
        <member name="M:EIIP.SE.Index.IDocFieldConsumerPerField.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerField.#ctor(EIIP.SE.Index.DocFieldConsumersPerThread,EIIP.SE.Index.IDocFieldConsumerPerField,EIIP.SE.Index.IDocFieldConsumerPerField)">
            <summary>
            实例化每字段的文档字段处理器。
            </summary>
            <param name="perThread"></param>
            <param name="one"></param>
            <param name="two"></param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerField.processFields(EIIP.SE.Documents.IFieldable[],System.Int32)">
            <summary>
            处理字段。
            </summary>
            <param name="fields">字段数组</param>
            <param name="count">要处理的数量</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerField.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldConsumersPerThread">
            <summary>
            每线程的文档字段处理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerThread.#ctor(EIIP.SE.Index.DocFieldProcessorPerThread,EIIP.SE.Index.DocFieldConsumers,EIIP.SE.Index.DocFieldConsumerPerThread,EIIP.SE.Index.DocFieldConsumerPerThread)">
            <summary>
            实例化每线程的文档字段处理器。
            </summary>
            <param name="docFieldProcessorPerThread"></param>
            <param name="parent"></param>
            <param name="one"></param>
            <param name="two"></param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerThread.startDocument">
            <summary>
            启动文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerThread.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerThread.finishDocument">
            <summary>
            结束文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldConsumersPerThread.addField(EIIP.SE.Index.FieldInfo)">
            <summary>
            添加指定字段。
            </summary>
            <param name="fi">字段信息。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldProcessor">
            <summary>
            文档字段处理器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocFieldProcessor.docWriter">
            <summary>
            文档写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocFieldProcessor.fieldInfos">
            <summary>
            字段信息集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocFieldProcessor.consumer">
            <summary>
            文档字段处理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessor.#ctor(EIIP.SE.Index.DocumentsWriter,EIIP.SE.Index.DocFieldConsumer)">
            <summary>
            实例化文档字段处理器。
            </summary>
            <param name="docWriter">文档写入器。</param>
            <param name="consumer">文档字段处理器。</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessor.closeDocStore(EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            关闭文档存储。
            </summary>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessor.Flush(System.Collections.Generic.ICollection{System.Object},EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            清理线程。
            </summary>
            <param name="threads">线程集。</param>
            <param name="state">清理状态</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessor.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessor.freeRAM">
            <summary>
            释放内存。操作有效则返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessor.addThread(EIIP.SE.Index.DocumentsWriterThreadState)">
            <summary>
            添加文档处理线程。
            </summary>
            <param name="threadState">文档处理线程状态</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldProcessorPerField">
            <summary>
            每字段的文档字段处理器。保持所有的每线程与每字段状态。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerField.#ctor(EIIP.SE.Index.DocFieldProcessorPerThread,EIIP.SE.Index.FieldInfo)">
            <summary>
            实例化每字段的文档字段处理器。
            </summary>
            <param name="perThread">每线程的文档字段处理器。</param>
            <param name="fieldInfo">字段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerField.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocFieldProcessorPerThread">
            <summary>
            每线程文档字段处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IDocConsumerPerThread">
            <summary>
            定义每线程文档处理器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IDocConsumerPerThread.processDocument">
            <summary>
            处理文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IDocConsumerPerThread.abort">
            <summary>
            终止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerThread.#ctor(EIIP.SE.Index.DocumentsWriterThreadState,EIIP.SE.Index.DocFieldProcessor)">
            <summary>
            实例化每线程文档字段处理器。
            </summary>
            <param name="threadState">文档写入器线程状态</param>
            <param name="docFieldProcessor">文档字段处理器</param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerThread.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerThread.Fields">
            <summary>
            获取字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerThread.trimFields(EIIP.SE.Index.DocumentsWriter.FlushState)">
            <summary>
            移除最后的指定状态的字段。
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:EIIP.SE.Index.DocFieldProcessorPerThread.processDocument">
            <summary>
            处理文档。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.DocInverter">
            <summary>
            文档变换器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocInverter.#ctor(EIIP.SE.Index.InvertedDocConsumer,EIIP.SE.Index.InvertedDocEndConsumer)">
            <summary>
            实例化文档变换器。
            </summary>
            <param name="consumer"></param>
            <param name="endConsumer"></param>
        </member>
        <member name="P:EIIP.SE.Index.DocInverter.FieldInfos">
            <summary>
            获取或设置字段信息集。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocInverter.FieldInvertState">
            <summary>
            字段变换状态类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DocInverterPerField">
            <summary>
            每字段的文档变换器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocInverterPerField.#ctor(EIIP.SE.Index.DocInverterPerThread,EIIP.SE.Index.FieldInfo)">
            <summary>
            实例化每字段的文档变换器。
            </summary>
            <param name="perThread"></param>
            <param name="fieldInfo"></param>
        </member>
        <member name="T:EIIP.SE.Index.DocumentsWriterThreadState">
            <summary>
            文档写入器线程状态类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriterThreadState.isIdle">
            <summary>
            指示是否是空闲的（当前实例并未被线程使用）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriterThreadState.numThreads">
            <summary>
            共享此实例的线程数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriterThreadState.doFlushAfter">
            <summary>
            指示在处理完当前文档后是否应该清理缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriterThreadState.consumer">
            <summary>
            处理器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriterThreadState.docState">
            <summary>
            文档状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DocumentsWriterThreadState.docWriter">
            <summary>
            文档写入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriterThreadState.#ctor(EIIP.SE.Index.DocumentsWriter)">
            <summary>
            实例化文档写入器线程状态。
            </summary>
            <param name="docWriter">文档写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.DocumentsWriterThreadState.doAfterFlush">
            <summary>
            处理后清理缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FieldInfo">
            <summary>
            字段信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.name">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.isIndexed">
            <summary>
            指示是否已索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.number">
            <summary>
            字段号
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.storeTermVector">
            <summary>
            指示是否存储字段的分词向量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.storeOffsetWithTermVector">
            <summary>
            指示是否存储字段的分词向量及偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.storePositionWithTermVector">
            <summary>
            指示是否存储字段的分词向量及位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.omitNorms">
            <summary>
            指示是否忽略关联索引字段的规范。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.omitTf">
            <summary>
            指示是否忽略Tf。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FieldInfo.storePayloads">
            <summary>
            指示字段是否存储连同分词位置的有效负载。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfo.#ctor(System.String,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            实例化字段信息。
            </summary>
            <param name="name">字段名称</param>
            <param name="isIndexed">设置是否已索引</param>
            <param name="number">字段号</param>
            <param name="storeTermVector">设置是否存储分词向量</param>
            <param name="storePositionWithTermVector">设置是否存储分词向量及位置</param>
            <param name="storeOffsetWithTermVector">设置是否存储分词向量及偏移量</param>
            <param name="omitNorms">设置是否忽略关联索引字段的规范。</param>
            <param name="storePayloads">设置字段是否存储连同分词位置的有效负载。</param>
            <param name="omitTf">设置是否忽略Tf。</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfo.Clone">
            <summary>
            获取深层副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfo.update(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            更新字段信息。
            </summary>
            <param name="isIndexed">设置是否已索引</param>
            <param name="storeTermVector">设置是否存储分词向量</param>
            <param name="storePositionWithTermVector">设置是否存储分词向量及位置</param>
            <param name="storeOffsetWithTermVector">设置是否存储分词向量及偏移量</param>
            <param name="omitNorms">设置是否忽略关联索引字段的规范。</param>
            <param name="storePayloads">设置字段是否存储连同分词位置的有效负载。</param>
            <param name="omitTf">设置是否忽略Tf。</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfo.update(EIIP.SE.Index.FieldInfo)">
            <summary>
            更新字段信息。
            </summary>
            <param name="other">提供信息的字段信息。</param>
        </member>
        <member name="T:EIIP.SE.Index.FieldInfos">
            <summary>
            字段信息集类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.#ctor">
            <summary>
            实例化字段信息集。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.#ctor(EIIP.SE.Store.Directory,System.String)">
            <summary>
            实例化字段信息集。
            </summary>
            <param name="d">索引文件夹</param>
            <param name="name">索引文件夹中的索引输入流文件名。</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Clone">
            <summary>
            获取深层副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(EIIP.SE.Documents.Document)">
            <summary>
            添加指定文档的字段信息。
            </summary>
            <param name="doc">文档</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.HasProx">
            <summary>
            测试是否含有Tf的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.AddIndexed(System.Collections.ICollection,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            添加已索引的字段信息。
            </summary>
            <param name="names">字段名称集</param>
            <param name="storeTermVectors">设置是否存储分词向量</param>
            <param name="storePositionWithTermVector">设置是否存储分词向量及位置</param>
            <param name="storeOffsetWithTermVector">设置是否存储分词向量及偏移量</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(System.Collections.Generic.ICollection{System.String},System.Boolean)">
            <summary>
            添加未存储分词向量的字段信息。
            </summary>
            <param name="names">字段名称集</param>
            <param name="isIndexed">设置是否已索引</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(System.String,System.Boolean)">
            <summary>
            添加未存储分词向量的字段信息。
            </summary>
            <param name="name">字段名称</param>
            <param name="isIndexed">设置是否已索引</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(System.String,System.Boolean,System.Boolean)">
            <summary>
            添加字段信息。
            </summary>
            <param name="name">字段名称</param>
            <param name="isIndexed">设置是否已索引</param>
            <param name="storeTermVector">设置是否存储分词向量</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            添加字段信息。
            </summary>
            <param name="name">字段名称</param>
            <param name="isIndexed">设置是否已索引</param>
            <param name="storeTermVector">设置是否存储分词向量</param>
            <param name="storePositionWithTermVector">设置是否存储分词向量及位置</param>
            <param name="storeOffsetWithTermVector">设置是否存储分词向量及偏移量</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            添加字段信息。
            </summary>
            <param name="name">字段名称</param>
            <param name="isIndexed">设置是否已索引</param>
            <param name="storeTermVector">设置是否存储分词向量</param>
            <param name="storePositionWithTermVector">设置是否存储分词向量及位置</param>
            <param name="storeOffsetWithTermVector">设置是否存储分词向量及偏移量</param>
            <param name="omitNorms">设置是否忽略关联索引字段的规范。</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            添加字段信息。
            </summary>
            <param name="name">字段名称</param>
            <param name="isIndexed">设置是否已索引</param>
            <param name="storeTermVector">设置是否存储分词向量</param>
            <param name="storePositionWithTermVector">设置是否存储分词向量位置</param>
            <param name="storeOffsetWithTermVector">设置是否存储分词向量偏移量</param>
            <param name="omitNorms">设置是否存储分词向量及偏移量</param>
            <param name="storePayloads">设置字段是否存储连同分词位置的有效负载。</param>
            <param name="omitTf">设置是否忽略关联索引字段的规范。</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Add(EIIP.SE.Index.FieldInfo)">
            <summary>
            获取指定字段信息的副本。返回创建的副本。
            </summary>
            <param name="fieldInfo">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.FieldNumber(System.String)">
            <summary>
            获取指定字段名称的字段号。
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.FieldInfo(System.String)">
            <summary>
            获取指定字段名称的字段信息。不存在则返回null。
            </summary>
            <param name="fieldName">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.FieldName(System.Int32)">
            <summary>
            获取指定字段号的字段名称。
            </summary>
            <param name="fieldNumber">字段号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.FieldInfo(System.Int32)">
            <summary>
            获取指定字段号的字段信息。不存在则返回null。
            </summary>
            <param name="fieldNumber">字段号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.HasVectors">
            <summary>
            测试是否存储有分词向量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Write(EIIP.SE.Store.Directory,System.String)">
            <summary>
            写入索引输出流。
            </summary>
            <param name="d">索引文件夹实例</param>
            <param name="name">文件名称</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldInfos.Write(EIIP.SE.Store.IndexOutput)">
            <summary>
            写入索引输出流。
            </summary>
            <param name="output">索引输出流</param>
        </member>
        <member name="P:EIIP.SE.Index.FieldInfos.Size">
            <summary>
            获取字段信息数量。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.FieldReaderException">
            <summary> 
            字段阅读器异常类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldReaderException.#ctor">
            <summary>
            实例化字段阅读器异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldReaderException.#ctor(System.Exception)">
            <summary>
            实例化字段阅读器异常。
            </summary>
            <param name="cause">引发的异常</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldReaderException.#ctor(System.String)">
            <summary>
            实例化字段阅读器异常。
            </summary>
            <param name="message">异常信息</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldReaderException.#ctor(System.String,System.Exception)">
            <summary>
            实例化字段阅读器异常。
            </summary>
            <param name="message">异常信息</param>
            <param name="cause">引发的异常</param>
        </member>
        <member name="T:EIIP.SE.Index.FieldSortedTermVectorMapper">
            <summary>
            字段存储的分词向量包装类。不是线程安全的。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorMapper">
            <summary>
            分词向量映射器。用于映射分词向量至自定义结构。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorMapper.#ctor">
            <summary>
            实例化分词向量映射器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorMapper.#ctor(System.Boolean,System.Boolean)">
            <summary> 
            实例化分词向量映射器。
            </summary>
            <param name="ignoringPositions">设置是否忽略位置</param>
            <param name="ignoringOffsets">设置是否忽略偏移量</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorMapper.SetExpectations(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置预期的值。在返回字段的向量前仅被调用一次，且在 Map(string,int,TermVectorOffsetInfo[],int[]) 前调用。
            </summary>
            <param name="field">向量字段</param>
            <param name="numTerms">要映射的分词数量</param>
            <param name="storeOffsets">映射器是否存储偏移量</param>
            <param name="storePositions">映射器是否存储位置</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorMapper.Map(System.String,System.Int32,EIIP.SE.Index.TermVectorOffsetInfo[],System.Int32[])">
            <summary>
            映射分词向量至自定义结构。
            </summary>
            <param name="term">分词。</param>
            <param name="frequency">文档中分词词频</param>
            <param name="offsets">偏移量信息</param>
            <param name="positions">位置信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorMapper.SetDocumentNumber(System.Int32)">
            <summary>
            设置文档号。
            </summary>
            <param name="documentNumber">映射的文档号</param>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorMapper.IsIgnoringPositions">
            <summary>
            获取一个值，该值指示是否忽略位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorMapper.IsIgnoringOffsets">
            <summary>
            获取一个值，该值指示是否忽略偏移量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldSortedTermVectorMapper.#ctor(System.Collections.Generic.IComparer{System.Object})">
            <summary>
            实例化字段存储的分词向量包装。
            </summary>
            <param name="comparator">TermVectorEntry的比较器</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldSortedTermVectorMapper.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            实例化字段存储的分词向量包装。
            </summary>
            <param name="ignoringPositions">设置是否忽略位置信息</param>
            <param name="ignoringOffsets">设置是否忽略偏移量信息</param>
            <param name="comparator">TermVectorEntry的比较器</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldSortedTermVectorMapper.Map(System.String,System.Int32,EIIP.SE.Index.TermVectorOffsetInfo[],System.Int32[])">
            <summary>
            映射分词向量至自定义结构。
            </summary>
            <param name="term">分词。</param>
            <param name="frequency">文档中分词词频</param>
            <param name="offsets">偏移量信息</param>
            <param name="positions">位置信息</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldSortedTermVectorMapper.SetExpectations(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置预期的值。在返回字段的向量前仅被调用一次，且在 Map(string,int,TermVectorOffsetInfo[],int[]) 前调用。
            </summary>
            <param name="field">向量字段</param>
            <param name="numTerms">要映射的分词数量</param>
            <param name="storeOffsets">映射器是否存储偏移量</param>
            <param name="storePositions">映射器是否存储位置</param>
        </member>
        <member name="P:EIIP.SE.Index.FieldSortedTermVectorMapper.FieldToTerms">
            <summary>
            获取字段与分词的字典。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.FieldSortedTermVectorMapper.Comparator">
            <summary>
            获取TermVectorEntry的比较器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FieldsWriter">
            <summary>
            字段写入器。用于访问存储文档的字段。即&lt;segment&gt;.fdt and &lt;segment&gt;.fdx; 文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldsWriter.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos)">
            <summary>
            实例化字段写入器。
            </summary>
            <param name="d">文件夹实例。</param>
            <param name="segment">段名</param>
            <param name="fn">字段信息集</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsWriter.#ctor(EIIP.SE.Store.IndexOutput,EIIP.SE.Store.IndexOutput,EIIP.SE.Index.FieldInfos)">
            <summary>
            实例化字段写入器。
            </summary>
            <param name="fdx">索引输出器</param>
            <param name="fdt">字段输出器</param>
            <param name="fn">字段信息集</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsWriter.Close">
            <summary>
            关闭字段写入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldsWriter.WriteField(EIIP.SE.Index.FieldInfo,EIIP.SE.Documents.IFieldable)">
            <summary>
            写入字段。
            </summary>
            <param name="fi"></param>
            <param name="field"></param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsWriter.AddRawDocuments(EIIP.SE.Store.IndexInput,System.Int32[],System.Int32)">
            <summary>
            批量写入文档。
            </summary>
            <param name="stream"></param>
            <param name="lengths">每个原始文档的长度（字节）</param>
            <param name="numDocs"></param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsWriter.AddDocument(EIIP.SE.Documents.Document)">
            <summary>
            添加文档。
            </summary>
            <param name="doc">文档</param>
        </member>
        <member name="T:EIIP.SE.Index.FreqProxFieldMergeState">
            <summary>
            词频前缀字段合并状态。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FreqProxTermsWriter">
            <summary>
            词频前缀的分词写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermsHashConsumer">
            <summary>
            分词哈希处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.RawPostingList">
            <summary>
            内存中的传递列表类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FreqProxTermsWriterPerField">
            <summary>
            每字段的词频前缀分词写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermsHashConsumerPerField">
            <summary>
            每字段的分词哈希处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FreqProxTermsWriterPerThread">
            <summary>
            每线程的词频前缀分词写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermsHashConsumerPerThread">
            <summary>
            每线程的分词哈希处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IInvertedDocEndConsumerPerField">
            <summary>
            定义每字段的反转文档结尾处理器的接口。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexCommit">
            <summary>
            索引事务提交点基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexCommitPoint">
            <summary>
            定义索引事务提交点的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommitPoint.GetSegmentsFileName">
            <summary>
            获取关联的段(segments_N)文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommitPoint.GetFileNames">
            <summary>
            获取所有由该事务提交点引用的索引文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommitPoint.Delete">
            <summary>
            删除事务提交点。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetSegmentsFileName">
            <summary>
            获取段文件名称(segments_N)。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetFileNames">
            <summary>
            获取所有索引文件名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetDirectory">
            <summary>
            获取索引文件夹。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.Delete">
            <summary>
            删除提交点。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.IsDeleted">
            <summary>
            获取一个值，该值指示提交点是否已被删除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.IsOptimized">
            <summary>
            获取一个值，该值指示该提交是否优化了索引。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.Equals(System.Object)">
            <summary>
            比较相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetVersion">
            <summary>
            获取版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetGeneration">
            <summary>
            获取代数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexCommit.GetTimestamp">
            <summary>
            获取索引文件修改时间戳。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.IndexDeletionPolicy">
            <summary> 
            定义索引删除策略的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexDeletionPolicy.OnInit(System.Collections.Generic.List{EIIP.SE.Index.IndexCommitPoint})">
            <summary>
            初始化索引删除策略。
            </summary>
            <param name="commits">当前索引事务提交集</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexDeletionPolicy.OnCommit(System.Collections.Generic.List{EIIP.SE.Index.IndexCommitPoint})">
            <summary>
            当完成一个删除事务时被触发。以便于删除策略能有机会从事务集中移除旧的提交点。
            </summary>
            <param name="commits">索引事务提交集</param>
        </member>
        <member name="T:EIIP.SE.Index.IndexFileDeleter">
            <summary>
            索引文件删除器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileDeleter.deletable">
            <summary>
            可删除的文件名称集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileDeleter.refCounts">
            <summary>
            索引中文件及其引用计数字典。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileDeleter.commits">
            <summary>
            索引事务提交点列表。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileDeleter.commitsToDelete">
            <summary>
            要删除的索引事务提交点列表。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileDeleter.VERBOSE_REF_COUNTS">
            <summary>
            指示是否有冗长的引用计数细节，即infoStream != null 
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.IndexDeletionPolicy,EIIP.SE.Index.SegmentInfos,System.IO.TextWriter,EIIP.SE.Index.DocumentsWriter)">
            <summary>
            实例化索引文件删除器。
            </summary>
            <param name="directory">存储文件夹</param>
            <param name="policy">索引删除策略</param>
            <param name="segmentInfos">段信息集</param>
            <param name="infoStream">信息流</param>
            <param name="docWriter">文档写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.DeleteCommits">
            <summary> 
            删除提交点。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.Refresh(System.String)">
            <summary>
            刷新指定段。写入器调用。
            </summary>
            <param name="segmentName">段名称</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.Refresh">
            <summary>
            刷新。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.Checkpoint(EIIP.SE.Index.SegmentInfos,System.Boolean)">
            <summary>
            检查点。
            </summary>
            <param name="segmentInfos">段信息集</param>
            <param name="isCommit">设置是否提交</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.IncRef(EIIP.SE.Index.SegmentInfos,System.Boolean)">
            <summary>
            增量引用计数。
            </summary>
            <param name="segmentInfos">段信息集</param>
            <param name="isCommit">设置是否提交</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.IncRef(System.Collections.Generic.IList{System.String})">
            <summary>
            增量引用计数。
            </summary>
            <param name="files">文件集</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.DecRef(System.Collections.Generic.IList{System.String})">
            <summary>
            递减引用计数。
            </summary>
            <param name="files">文件集</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.DecRef(System.String)">
            <summary>
            递减引用计数。
            </summary>
            <param name="fileName">文件名称</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.DecRef(EIIP.SE.Index.SegmentInfos)">
            <summary>
            递减引用计数。
            </summary>
            <param name="segmentInfos">段信息集</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.DeleteFiles(System.Collections.Generic.List{System.String})">
            <summary>
            删除指定文件。
            </summary>
            <param name="files">文件集。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.DeleteNewFiles(System.Collections.Generic.ICollection{System.String})">
            <summary>
            删除指定文件集中的新文件（还无引用计数）。
            </summary>
            <param name="files">文件集</param>
        </member>
        <member name="P:EIIP.SE.Index.IndexFileDeleter.InfoStream">
            <summary>
            设置信息流对象。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexFileDeleter.RefCount">
            <summary>
            单一索引文件引用计数器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.RefCount.IncRef">
            <summary>
            增量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileDeleter.RefCount.DecRef">
            <summary>
            减量。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.IndexFileDeleter.CommitPoint">
            <summary>
            提交点。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexFileNameFilter">
            <summary>
            索引文件名称过滤器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileNameFilter.#ctor">
            <summary>
            实例化索引文件名称过滤器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileNameFilter.Accept(System.IO.FileInfo,System.String)">
            <summary>
            测试是否接受指定文件名。
            </summary>
            <param name="dir">文件夹实例</param>
            <param name="name">文件名。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileNameFilter.IsCFSFile(System.String)">
            <summary>
            测试指定文件名是否包含复合文件。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileNameFilter.GetFilter">
            <summary>
            获取过滤器实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.IndexFileNames">
            <summary>
            文件名及扩展名常量类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.SEGMENTS">
            <summary>
            索引段文件名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.SEGMENTS_GEN">
            <summary>
            含代数的索引段文件名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.DELETABLE">
            <summary>
            索引可删除文件名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.NORMS_EXTENSION">
            <summary>
            标准化文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.FREQ_EXTENSION">
            <summary>
            词频位置文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.PROX_EXTENSION">
            <summary>
            下一记录文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.TERMS_EXTENSION">
            <summary>
            分词文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.TERMS_INDEX_EXTENSION">
            <summary>
            分词索引文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.FIELDS_INDEX_EXTENSION">
            <summary>
            存储字段索引的文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.FIELDS_EXTENSION">
            <summary>
            存储字段的文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.VECTORS_FIELDS_EXTENSION">
            <summary>
            向量字段文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.VECTORS_DOCUMENTS_EXTENSION">
            <summary>
            向量文档文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.VECTORS_INDEX_EXTENSION">
            <summary>
            向量索引文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.COMPOUND_FILE_EXTENSION">
            <summary>
            复合文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.COMPOUND_FILE_STORE_EXTENSION">
            <summary>
            存储文件的复合文档文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.DELETES_EXTENSION">
            <summary>
            删除的文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.FIELD_INFOS_EXTENSION">
            <summary>
            字段信息文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.PLAIN_NORMS_EXTENSION">
            <summary>
            简单标准化文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.SEPARATE_NORMS_EXTENSION">
            <summary>
            分隔标准化文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.GEN_EXTENSION">
            <summary>
            代数文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.INDEX_EXTENSIONS">
            <summary>
            索引文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.INDEX_EXTENSIONS_IN_COMPOUND_FILE">
            <summary>
            在复合文件中的索引文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.STORE_INDEX_EXTENSIONS">
            <summary>
            存储的索引文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.NON_STORE_INDEX_EXTENSIONS">
            <summary>
            未存储的索引文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.COMPOUND_EXTENSIONS">
            <summary>
            旧的复合文件扩展名。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexFileNames.VECTOR_EXTENSIONS">
            <summary>
            检索词向量文件扩展名。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileNames.FileNameFromGeneration(System.String,System.String,System.Int64)">
            <summary>
            获取完整文件名。
            </summary>
            <param name="baseFileName">文件名的主要部分</param>
            <param name="extension">含"."的文件扩展名。</param>
            <param name="gen">代数</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexFileNames.IsDocStoreFile(System.String)">
            <summary>
            测试指定的文件名是否是文档存储文件名（以 COMPOUND_FILE_STORE_EXTENSION 结尾）。
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.IndexModifier">
            <summary>
            索引编辑器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.indexWriter">
            <summary>
            索引写入器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.indexReader">
            <summary>
            索引阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.directory">
            <summary>
            索引文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.analyzer">
            <summary>
            分词分析器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.open">
            <summary>
            指示是否已打开。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.infoStream">
            <summary>
            信息流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.useCompoundFile">
            <summary>
            指示是否使用复合文件存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.maxBufferedDocs">
            <summary>
            最大缓存文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.maxFieldLength">
            <summary>
            最大字段长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexModifier.mergeFactor">
            <summary>
            合并因子。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引编辑器。以写访问打开指定索引。
            </summary>
            <param name="directory">索引文件夹</param>
            <param name="analyzer">分析器</param>
            <param name="create">设置为 true 则创建新索引或覆盖已有索引，设置为 false 则向已存在的索引追加</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.#ctor(System.String,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引编辑器。以写访问打开指定索引。
            </summary>
            <param name="dirName">索引文件夹名称</param>
            <param name="analyzer">分析器</param>
            <param name="create">设置为 true 则创建新索引或覆盖已有索引，设置为 false 则向已存在的索引追加</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.#ctor(System.IO.FileInfo,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引编辑器。以写访问打开指定索引。
            </summary>
            <param name="file">索引文件夹</param>
            <param name="analyzer">分析器</param>
            <param name="create">设置为 true 则创建新索引或覆盖已有索引，设置为 false 则向已存在的索引追加</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.Init(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            初始化索引编辑器。
            </summary>
            <param name="directory">索引文件夹</param>
            <param name="analyzer">分析器</param>
            <param name="create">设置为 true 则创建新索引或覆盖已有索引，设置为 false 则向已存在的索引追加</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.AssureOpen">
            <summary>
            确认索引已开启中。若是关闭状态则抛出异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.CreateIndexWriter">
            <summary>
            关闭索引阅读器并开启索引写入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.CreateIndexReader">
            <summary>
            关闭索引写入器并开启索引阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.Flush">
            <summary> 
            确认所有变更已写入磁盘。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.AddDocument(EIIP.SE.Documents.Document,EIIP.SE.Analysis.Analyzer)">
            <summary>
            添加指定文档至当前索引。
            </summary>
            <param name="doc">文档</param>
            <param name="docAnalyzer">添加时要额外使用的文档分析器。使用文档自带的，则设置为null。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.AddDocument(EIIP.SE.Documents.Document)">
            <summary>
            添加指定文档至当前索引。
            </summary>
            <param name="doc">文档</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.DeleteDocuments(EIIP.SE.Index.Term)">
            <summary>
            在所有文档中删除指定的分词。
            </summary>
            <param name="term">要删除的分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.DeleteDocument(System.Int32)">
            <summary>
            删除指定的文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.DocCount">
            <summary>
            获取当前索引中的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.Optimize">
            <summary>
            合并段并针对搜索优化索引。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.SetInfoStream(System.IO.StreamWriter)">
            <summary>
            设置信息流。
            </summary>
            <param name="infoStream">信息流。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.GetInfoStream">
            <summary>
            获取信息流。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.Close">
            <summary>
            关闭索引。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexModifier.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.IndexModifier.UseCompoundFile">
            <summary>
            获取或设置一个值，该值指示是否使用复合文件存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexModifier.MaxFieldLength">
            <summary>
            获取或设置文档中单一字段最多分词数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexModifier.MaxBufferedDocs">
            <summary>
            获取或设置最大缓存文档数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexModifier.MergeFactor">
            <summary>
            获取或设置合并因子。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexWriter">
            <summary>
            创建与维护索引的索引写入器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.WRITE_LOCK_NAME">
            <summary>
            写入锁定名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DISABLE_AUTO_FLUSH">
            <summary>
            指示取消自动清理。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_RAM_BUFFER_SIZE_MB">
            <summary>
            默认内存缓存尺寸(16 MB)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_MAX_FIELD_LENGTH">
            <summary>
            默认最大字段长度（10000）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_TERM_INDEX_INTERVAL">
            <summary>
            默认索引间隔（128）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.MERGE_READ_BUFFER_SIZE">
            <summary>
            合并头部缓存尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.WRITE_LOCK_TIMEOUT">
            <summary>
            写入锁定超时时间。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_MERGE_FACTOR">
            <summary>
            默认合并因子（10）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_MAX_BUFFERED_DOCS">
            <summary>
            默认最大缓存文档（10）。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_MAX_BUFFERED_DELETE_TERMS">
            <summary>
            默认最大缓存的删除分词数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_MAX_MERGE_DOCS">
            <summary>
            默认最大合并文档。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.MAX_TERM_LENGTH">
            <summary>
            最大分词长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.DEFAULT_MAX_SYNC_PAUSE_SECONDS">
            <summary>
            默认最大同步暂停秒数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.directory">
            <summary>
            索引持久层的文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.analyzer">
            <summary>
            文本分析器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.similarity">
            <summary>
            用于标准化的相似度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.changeCount">
            <summary>
            当每次变更后，需要对本值增量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.lastCommitChangeCount">
            <summary>
            提交事务后的最近一次变更数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.rollbackSegmentInfos">
            <summary>
            要回滚的段信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.pendingCommit">
            <summary>
            挂起的段信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.pendingCommitChangeCount">
            <summary>
            挂起的提交变更计数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.localRollbackSegmentInfos">
            <summary>
            本地回滚的段信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.localAutoCommit">
            <summary>
            指示本地事务期间是否自动提交。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.localFlushedDocCount">
            <summary>
            本地事务期间清理的文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.autoCommit">
            <summary>
            指示是否自动提交。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.segmentInfos">
            <summary>
            段信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.mergingSegments">
            <summary>
            合并时的段信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.maxFieldLength">
            <summary>
            最大字段长度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.String,EIIP.SE.Analysis.Analyzer,System.Boolean,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.String,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.IO.FileInfo,EIIP.SE.Analysis.Analyzer,System.Boolean,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.IO.FileInfo,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,System.Boolean,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.String,EIIP.SE.Analysis.Analyzer,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.String,EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.IO.FileInfo,EIIP.SE.Analysis.Analyzer,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(System.IO.FileInfo,EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="path">索引目录路径。</param>
            <param name="a">要使用的分析器。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="a">要使用的分析器。</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="a">要使用的分析器。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,System.Boolean,EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="autoCommit">设置是否自动提交</param>
            <param name="a">要使用的分析器。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,System.Boolean,EIIP.SE.Analysis.Analyzer,System.Boolean)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="autoCommit">设置是否自动提交</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,EIIP.SE.Index.IndexDeletionPolicy,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="a">要使用的分析器。</param>
            <param name="deletionPolicy">索引删除策略</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,System.Boolean,EIIP.SE.Analysis.Analyzer,EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="autoCommit">设置是否自动提交</param>
            <param name="a">要使用的分析器。</param>
            <param name="deletionPolicy">索引删除策略</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Analysis.Analyzer,System.Boolean,EIIP.SE.Index.IndexDeletionPolicy,EIIP.SE.Index.IndexWriter.MaxFieldLength)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
            <param name="deletionPolicy">索引删除策略</param>
            <param name="mfl">最大字段长度</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.#ctor(EIIP.SE.Store.Directory,System.Boolean,EIIP.SE.Analysis.Analyzer,System.Boolean,EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            实例化索引写入器。
            </summary>
            <param name="d">索引目录。</param>
            <param name="autoCommit">设置是否自动提交</param>
            <param name="a">要使用的分析器。</param>
            <param name="create">设置是否新建或覆盖已有索引。设置为false则为追加索引。</param>
            <param name="deletionPolicy">索引删除策略</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.EnsureOpen(System.Boolean)">
            <summary>
            确认是否已打开写入器。
            </summary>
            <param name="includePendingClose">设置是否包括挂起的关闭</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.EnsureOpen">
            <summary>
            确认是否已打开写入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Message(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.GetLogMergePolicy">
            <summary>
            获取当前日志合并策略。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Close">
            <summary>
            提交索引所有变更并关闭关联文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Close(System.Boolean)">
            <summary>
            提交索引所有变更并关闭关联文件。
            </summary>
            <param name="waitForMerges">设置是否等待合并结束</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.AddDocument(EIIP.SE.Documents.Document)">
            <summary>
            向当前索引中添加指定文档。若访文档包含超限的字段分词，则多余的将会被丢弃。
            </summary>
            <param name="doc">文档</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.AddDocument(EIIP.SE.Documents.Document,EIIP.SE.Analysis.Analyzer)">
            <summary>
            向当前索引中添加指定文档。若访文档包含超限的字段分词，则多余的将会被丢弃。
            </summary>
            <param name="doc">文档</param>
            <param name="analyzer">分词分析器</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.DeleteDocuments(EIIP.SE.Index.Term)">
            <summary>
            删除包含指定分词的文档。
            </summary>
            <param name="term">分词</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.DeleteDocuments(EIIP.SE.Index.Term[])">
            <summary>
            删除包含指定任意一分词的文档。
            </summary>
            <param name="terms">分词数组</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.DeleteDocuments(EIIP.SE.Search.Query)">
            <summary>
            删除查询匹配的文档。
            </summary>
            <param name="query">查询</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.DeleteDocuments(EIIP.SE.Search.Query[])">
            <summary>
            删除查询匹配的文档。
            </summary>
            <param name="queries">查询集</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.UpdateDocument(EIIP.SE.Index.Term,EIIP.SE.Documents.Document)">
            <summary>
            更新文档。删除含指定分词的文档，并添加新文档。
            </summary>
            <param name="term">标识要删除文档的分词</param>
            <param name="doc">要添加的新文档</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.UpdateDocument(EIIP.SE.Index.Term,EIIP.SE.Documents.Document,EIIP.SE.Analysis.Analyzer)">
            <summary>
            更新文档。删除含指定分词的文档，并添加新文档。
            </summary>
            <param name="term">标识要删除文档的分词</param>
            <param name="doc">要添加的新文档</param>
            <param name="analyzer">分析文档的分析器</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Optimize">
            <summary>
            优化索引写入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Optimize(System.Int32)">
            <summary>
            优化索引写入器。
            </summary>
            <param name="maxNumSegments">优化后的最大段数量</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Optimize(System.Boolean)">
            <summary>
            优化索引写入器。
            </summary>
            <param name="doWait">设置是否等待优化结束</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Optimize(System.Int32,System.Boolean)">
            <summary>
            优化索引写入器。
            </summary>
            <param name="maxNumSegments">优化后的最大段数量</param>
            <param name="doWait">设置是否等待优化结束</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.ExpungeDeletes(System.Boolean)">
            <summary>
            从索引中移除删除。
            </summary>
            <param name="doWait">设置是否等待</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.ExpungeDeletes">
            <summary>
            从索引中移除删除。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.MaybeMerge">
            <summary>
            尝试合并。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.GetNextMerge">
            <summary>
            获取下一合并策略。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Rollback">
            <summary>
            事务回滚。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.AddIndexes(EIIP.SE.Store.Directory[])">
            <summary>
            合并指定索引文件夹中的所有段至当前索引。这可用于并行批处理索引。
            一个大的文档集合能分断为一些子集合，每个子集合能并行索引于不同的线程、进程或机器。
            复合索引能通过本方法合并多个子集合来创建。
            完成本操作后，索引会被优化。
            </summary>
            <param name="dirs">多个索引文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.AddIndexesNoOptimize(EIIP.SE.Store.Directory[])">
            <summary>
            合并指定索引文件夹中的所有段至当前索引。这可用于并行批处理索引。
            一个大的文档集合能分断为一些子集合，每个子集合能并行索引于不同的线程、进程或机器。
            复合索引能通过本方法合并多个子集合来创建。
            完成本操作后，索引不会被优化。
            </summary>
            <param name="dirs">多个索引文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.AddIndexes(EIIP.SE.Index.IndexReader[])">
            <summary>
            合并提供的索引至当前索引。完成本操作后，索引会被优化。但并不会关闭提供的索引。
            </summary>
            <param name="readers">多个索引阅读器</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.DoAfterFlush">
            <summary>
            清理后执行。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Flush">
            <summary>
            清理。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.PrepareCommit">
            <summary>
            准备提交。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Commit">
            <summary>
            提交事务。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Flush(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            清理。
            </summary>
            <param name="triggerMerge"></param>
            <param name="flushDocStores"></param>
            <param name="flushDeletes"></param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.RamSizeInBytes">
            <summary>
            获取使用内存尺寸。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.NumRamDocs">
            <summary>
            获取内存中文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Merge(EIIP.SE.Index.MergePolicy.OneMerge)">
            <summary>
            合并段。
            </summary>
            <param name="merge">合并策略</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.SegString">
            <summary>
            获取段名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.IsLocked(EIIP.SE.Store.Directory)">
            <summary>
            测试指定文件夹是否被锁定。
            </summary>
            <param name="directory">文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.IsLocked(System.String)">
            <summary>
            测试指定文件夹是否被锁定。
            </summary>
            <param name="directory">文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.Unlock(EIIP.SE.Store.Directory)">
            <summary>
            解锁指定文件夹。
            </summary>
            <param name="directory">文件夹实例</param>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.UseCompoundFile">
            <summary>
            获取或设置一个值，该值指示是否使用复合文件。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.Similarity">
            <summary>
            获取或设置相似度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.TermIndexInterval">
            <summary>
            获取或设置分词索引间隔。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MergePolicy">
            <summary>
            获取或设置合并策略。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MergeScheduler">
            <summary>
            获取或设置合并计划。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxMergeDocs">
            <summary>
            获取或设置最大合并文档数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxFieldLen">
            <summary>
            获取或设置最大字段长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxBufferedDocs">
            <summary>
            获取或设置最大缓存文档数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.RAMBufferSizeMB">
            <summary>
            获取或设置内存缓存尺寸(MB)。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxBufferedDeleteTerms">
            <summary>
            获取或设置最大缓存的删除分词数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MergeFactor">
            <summary>
            获取或设置合并因子。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxSyncPauseSeconds">
            <summary>
            获取或设置最大同步暂停时间（秒）。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.DefaultInfoStream">
            <summary>
            获取或设置默认信息流。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.InfoStream">
            <summary>
            获取或设置信息流。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.WriteLockTimeout">
            <summary>
            获取或设置写入锁超时时间。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.DefaultWriteLockTimeout">
            <summary>
            获取或设置默认写入锁超时时间。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.Directory">
            <summary>
            获取索引文件夹。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.Analyzer">
            <summary>
            获取分析器。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.DocCount">
            <summary>
            获取当前索引的文档数量。请代替使用 MaxDoc 属性或 NumDocs(包含删除的)属性。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxDoc">
            <summary>
            获取索引中总的文档数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.NumDocs">
            <summary>
            获取索引中总的文档数量。包括已删除而还未清理的文档。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.HasDeletions">
            <summary>
            获取一个值，该值指示是否有已删除的文档。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexWriter.MaxFieldLength">
            <summary>
            最大字段长度类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.MaxFieldLength.UNLIMITED">
            <summary>
            无长度限制
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexWriter.MaxFieldLength.LIMITED">
            <summary>
            默认长度限制。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.MaxFieldLength.#ctor(System.Int32)">
            <summary>
            实例化最大字段长度。
            </summary>
            <param name="limit">最大字段长度。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexWriter.MaxFieldLength.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.IndexWriter.MaxFieldLength.Limit">
            <summary>
            获取最大字段长度限制。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.InvertedDocConsumer">
            <summary>
            变换文档处理器基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.InvertedDocConsumerPerField">
            <summary>
            每字段的变换文档处理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.InvertedDocConsumerPerField.start(EIIP.SE.Documents.IFieldable[],System.Int32)">
            <summary>
            开始变换。每字段仅调用一次。
            </summary>
            <param name="fields">要处理的字段</param>
            <param name="count">要处理的数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.InvertedDocConsumerPerField.add(EIIP.SE.Analysis.Token)">
            <summary>
            添加指定分词。
            </summary>
            <param name="token">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.InvertedDocConsumerPerField.finish">
            <summary>
            完成变换。每字段仅调用一次。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.InvertedDocConsumerPerField.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.InvertedDocEndConsumer">
            <summary>
            转变文档结尾处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.InvertedDocEndConsumerPerThread">
            <summary>
            每线程的转变文档结尾处理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ITermFreqVector">
            <summary>
            提供访问存储文档字段的分词向量的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ITermFreqVector.GetField">
            <summary> 
            获取分词向量关联的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermFreqVector.Size">
            <summary>
            获取分词向量中分词数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermFreqVector.GetTerms">
            <summary>
            依序获取分词文本数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermFreqVector.GetTermFrequencies">
            <summary>
            依序获取分词频率数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermFreqVector.IndexOf(System.String)">
            <summary>
            获取指定分词的索引位置。不存在则返回-1。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermFreqVector.IndexesOf(System.String[],System.Int32,System.Int32)">
            <summary>
            获取指定分词组合的索引位置数组。不存在则返回-1。
            </summary>
            <param name="terms">分词组合</param>
            <param name="start">分词组合的起始位置</param>
            <param name="len">分词组合要查询的数量</param>
        </member>
        <member name="T:EIIP.SE.Index.ITermPositions">
            <summary>
            提供检索词位置的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ITermPositions.NextPosition">
            <summary>
            获取当前文档的下一位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermPositions.GetPayloadLength">
            <summary>
            获取在当前分词位置上的有效负载长度。在调用NextPosition()后有效。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermPositions.GetPayload(System.Byte[],System.Int32)">
            <summary> 
            获取在当前分词位置上的有效负载
            </summary>
            <param name="data">存储有效负载的数组。若长度不够，会分配新的空间进行存储。</param>
            <param name="offset">data开始存储的偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermPositions.IsPayloadAvailable">
            <summary>
            检查加载的有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.ITermPositionVector">
            <summary>
            提供访问存储文档字段的分词位置向量的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ITermPositionVector.GetTermPositions(System.Int32)">
            <summary>
            获取指定索引位置的分词的位置信息。
            </summary>
            <param name="index">分词集合中的索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ITermPositionVector.GetOffsets(System.Int32)">
            <summary>
            获取指定索引位置的分词的位置信息。
            </summary>
            <param name="index">分词集合中的索引位置</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.KeepOnlyLastCommitDeletionPolicy">
            <summary> 
            保持最近一次提交的索引删除策略。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.KeepOnlyLastCommitDeletionPolicy.OnInit(System.Collections.Generic.List{EIIP.SE.Index.IndexCommitPoint})">
            <summary>
            初始化索引删除策略。
            </summary>
            <param name="commits">当前索引事务提交集</param>
        </member>
        <member name="M:EIIP.SE.Index.KeepOnlyLastCommitDeletionPolicy.OnCommit(System.Collections.Generic.List{EIIP.SE.Index.IndexCommitPoint})">
            <summary>
            当完成一个删除事务时被触发。以便于删除策略能有机会从事务集中移除旧的提交点。
            </summary>
            <param name="commits">索引事务提交集</param>
        </member>
        <member name="T:EIIP.SE.Index.MergeDocIDRemapper">
            <summary>
            文档号映射器。在合并结束后重新映射文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergeDocIDRemapper.starts">
            <summary>
            用于映射文档号的二分查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergeDocIDRemapper.newStarts">
            <summary>
            新的开始。排除已删除的。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergeDocIDRemapper.docMaps">
            <summary>
            合并集中的映射文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergeDocIDRemapper.minDocID">
            <summary>
            需要重新编号的最小文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergeDocIDRemapper.maxDocID">
            <summary>
            需要重新编号的最大文档号+1。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergeDocIDRemapper.docShift">
            <summary>
            移除文档的数量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergeDocIDRemapper.#ctor(EIIP.SE.Index.SegmentInfos,System.Int32[][],System.Int32[],EIIP.SE.Index.MergePolicy.OneMerge,System.Int32)">
            <summary>
            实例化文档号映射器。
            </summary>
            <param name="infos">段信息实例</param>
            <param name="docMaps">合并集中的映射文档号。</param>
            <param name="delCounts">删除量数组</param>
            <param name="merge">合并实例</param>
            <param name="mergedDocCount">合并文档数量</param>
        </member>
        <member name="M:EIIP.SE.Index.MergeDocIDRemapper.Remap(System.Int32)">
            <summary>
            获取重新映射后的文档号。
            </summary>
            <param name="oldDocID">之前的文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.LogByteSizeMergePolicy">
            <summary>
            量度段(中所有文件)尺寸的Log指数合并策略类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.LogMergePolicy">
            <summary>
            日志合并策略类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MergePolicy">
            <summary> 
            合并策略基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.FindMerges(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.IndexWriter)">
            <summary>
            找出指定索引的合并集。
            </summary>
            <param name="segmentInfos">索引的段信息集。</param>
            <param name="writer">索引写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.FindMergesForOptimize(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.IndexWriter,System.Int32,System.Collections.Generic.Dictionary{EIIP.SE.Index.SegmentInfo,EIIP.SE.Index.SegmentInfo})">
            <summary>
            找出指定优化索引的合并集。
            </summary>
            <param name="segmentInfos">索引的段信息集。</param>
            <param name="writer">索引写入器</param>
            <param name="maxSegmentCount">索引中需要的最大段数量，缺省为1</param>
            <param name="segmentsToOptimize">包含必须合并的段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.FindMergesToExpungeDeletes(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.IndexWriter)">
            <summary>
            获取需要删除的合并集。
            </summary>
            <param name="segmentInfos">索引的段信息集。</param>
            <param name="writer">索引写入器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.Close">
            <summary>
            释放所有策略的资源。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.UseCompoundFile2(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.SegmentInfo)">
            <summary>
            当新的段信息使用复合文件格式时返回true。
            </summary>
            <param name="segments">索引的段信息集</param>
            <param name="newSegment">新的段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.UseCompoundDocStore2(EIIP.SE.Index.SegmentInfos)">
            <summary>
            当文档存储文件使用复合文件格式时返回true。
            </summary>
            <param name="segments">索引的段信息集</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.MergePolicy.OneMerge">
            <summary>
            单一合并策略。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.OneMerge.#ctor(EIIP.SE.Index.SegmentInfos,System.Boolean)">
            <summary>
            实例化单一合并策略。
            </summary>
            <param name="segments">段信息集。</param>
            <param name="useCompoundFile">设置是否使用复合文件。</param>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.OneMerge.Abort">
            <summary>
            标记合并因异常而退出。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.OneMerge.CheckAborted(EIIP.SE.Store.Directory)">
            <summary>
            检查指定文件夹的合并操作是否因异常而导致退出。
            </summary>
            <param name="dir">要测试的文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.OneMerge.SegString(EIIP.SE.Store.Directory)">
            <summary>
            获取合并信息。
            </summary>
            <param name="dir">合并的文件夹</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.MergePolicy.OneMerge.Exception">
            <summary>
            获取或设置异常。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.MergePolicy.OneMerge.IsAborted">
            <summary>
            获取一个值，该值指示合并是否因异常而退出。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MergePolicy.MergeSpecification">
            <summary>
            合并规范。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MergePolicy.MergeSpecification.merges">
            <summary>
            合并集。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.MergeSpecification.Add(EIIP.SE.Index.MergePolicy.OneMerge)">
            <summary>
            添加指定合并。
            </summary>
            <param name="merge">合并策略</param>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.MergeSpecification.SegString(EIIP.SE.Store.Directory)">
            <summary>
            输出信息。
            </summary>
            <param name="dir">文件夹</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.MergePolicy.MergeException">
            <summary>
            合并异常类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.MergeException.#ctor(System.String,EIIP.SE.Store.Directory)">
            <summary>
            实例化指定合并异常。
            </summary>
            <param name="message"></param>
            <param name="dir"></param>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.MergeException.#ctor(System.Exception,EIIP.SE.Store.Directory)">
            <summary>
            实例化指定合并异常。
            </summary>
            <param name="exc"></param>
            <param name="dir"></param>
        </member>
        <member name="P:EIIP.SE.Index.MergePolicy.MergeException.Directory">
            <summary>
            获取关联文件夹。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MergePolicy.MergeAbortedException">
            <summary>
            合并失败异常类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.MergeAbortedException.#ctor">
            <summary>
            实例化合并失败异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MergePolicy.MergeAbortedException.#ctor(System.String)">
            <summary>
            实例化合并失败异常。
            </summary>
            <param name="message"></param>
        </member>
        <member name="F:EIIP.SE.Index.LogMergePolicy.LEVEL_LOG_SPAN">
            <summary>
            每级日志跨度为0.75。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogMergePolicy.DEFAULT_MERGE_FACTOR">
            <summary>
            默认合并因子(即一次合并段数量)10。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogMergePolicy.DEFAULT_MAX_MERGE_DOCS">
            <summary>
            默认最大合并文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogMergePolicy.minMergeSize">
            <summary>
            最小段尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogMergePolicy.maxMergeSize">
            <summary>
            最大段尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogMergePolicy.maxMergeDocs">
            <summary>
            最大合并文档数量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.UseCompoundFile2(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.SegmentInfo)">
            <summary>
            当新的段信息使用复合文件格式时返回true。
            </summary>
            <param name="infos">索引的段信息集</param>
            <param name="info">新的段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.UseCompoundDocStore2(EIIP.SE.Index.SegmentInfos)">
            <summary>
            当文档存储文件使用复合文件格式时返回true。
            </summary>
            <param name="infos">索引的段信息集</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.Close">
            <summary>
            释放资源。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.Size(EIIP.SE.Index.SegmentInfo)">
            <summary>
            获取段信息尺寸。
            </summary>
            <param name="info">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.FindMergesForOptimize(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.IndexWriter,System.Int32,System.Collections.Generic.Dictionary{EIIP.SE.Index.SegmentInfo,EIIP.SE.Index.SegmentInfo})">
            <summary>
            找出指定优化索引的合并集。
            </summary>
            <param name="infos">索引的段信息集。</param>
            <param name="writer">索引写入器</param>
            <param name="maxNumSegments">索引中需要的最大段数量，缺省为1</param>
            <param name="segmentsToOptimize">包含必须合并的段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.FindMergesToExpungeDeletes(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.IndexWriter)">
            <summary>
            获取需要删除的合并集。
            </summary>
            <param name="segmentInfos">索引的段信息集。</param>
            <param name="writer">索引写入器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.LogMergePolicy.FindMerges(EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.IndexWriter)">
            <summary>
            找出指定索引的合并集。
            </summary>
            <param name="infos">索引的段信息集。</param>
            <param name="writer">索引写入器</param>
        </member>
        <member name="P:EIIP.SE.Index.LogMergePolicy.MergeFactor">
            <summary>
            获取或设置合并因子(即一次合并段数量)。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.LogMergePolicy.UseCompoundFile">
            <summary>
            获取或设置一个值，该值指示是否使用复合文件。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.LogMergePolicy.UseCompoundDocStore">
            <summary>
            获取或设置一个值，该值指示是否使用复合文件存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.LogMergePolicy.MaxMergeDocs">
            <summary>
            获取或设置最大合并文档数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogByteSizeMergePolicy.DEFAULT_MIN_MERGE_MB">
            <summary>
            缺省最小合并尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogByteSizeMergePolicy.DEFAULT_MAX_MERGE_MB">
            <summary>
            缺省最大合并尺寸。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.LogByteSizeMergePolicy.#ctor">
            <summary>
            实例化量度段(中所有文件)尺寸的Log指数合并策略。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.LogByteSizeMergePolicy.Size(EIIP.SE.Index.SegmentInfo)">
            <summary>
            获取段信息尺寸。
            </summary>
            <param name="info">段信息</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.LogByteSizeMergePolicy.MaxMergeMB">
            <summary>
            获取或设置最大合并尺寸。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.LogByteSizeMergePolicy.MinMergeMB">
            <summary>
            获取或设置最小合并尺寸。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.LogDocMergePolicy">
            <summary>
            日志文档合并策略类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.LogDocMergePolicy.DEFAULT_MIN_MERGE_DOCS">
            <summary>
            默认合并文档的最小段尺寸。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.LogDocMergePolicy.#ctor">
            <summary>
            实例化日志文档合并策略。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.LogDocMergePolicy.Size(EIIP.SE.Index.SegmentInfo)">
            <summary>
            获取段信息尺寸。
            </summary>
            <param name="info">段信息</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.LogDocMergePolicy.MinMergeDocs">
            <summary>
            获取或设置合并文档的最小段尺寸。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultipleTermPositions">
            <summary>
            多分词位置信息类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Index.Term[])">
            <summary>
            实例化多分词位置信息。
            </summary>
            <param name="indexReader">索引阅读器</param>
            <param name="terms">多个分词</param>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Next">
            <summary>
            移向下一个。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.NextPosition">
            <summary>
            获取当前文档的下一位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.SkipTo(System.Int32)">
            <summary>
            忽略基于指定文档号的文档。存在忽略返回true。
            <pre>
            boolean skipTo(int target)
            {
             do{ if(!next()) return false; }while(target > doc());
             return true;
            }
            </pre>
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Freq">
            <summary>
            获取当前文档分词频率。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Seek(EIIP.SE.Index.Term)">
            <summary>
            总是抛出异常。定位指定分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Seek(EIIP.SE.Index.TermEnum)">
            <summary>
            总是抛出异常。定位指定分词枚举数。
            </summary>
            <param name="termEnum">分词枚举数。</param>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.Read(System.Int32[],System.Int32[])">
            <summary>
            总是抛出异常。尝试从多个文档读取，返回读取的文档号(当不存在则返回0)。
            </summary>
            <param name="docs">文档号数组</param>
            <param name="freqs">分词频率，与docs长度一致</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.GetPayloadLength">
            <summary>
            获取在当前分词位置上的有效负载长度。在调用NextPosition()后有效。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.GetPayload(System.Byte[],System.Int32)">
            <summary> 
            获取在当前分词位置上的有效负载
            </summary>
            <param name="data">存储有效负载的数组。若长度不够，会分配新的空间进行存储。</param>
            <param name="offset">data开始存储的偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.IsPayloadAvailable">
            <summary>
            检查加载的有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.MultipleTermPositions.TermPositionsQueue">
            <summary>
            分词位置队列类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.PriorityQueue">
            <summary>
            优先顺序队列基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.PriorityQueue.heap">
            <summary>
            堆
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.LessThan(System.Object,System.Object)">
            <summary>
            小于测试。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Initialize(System.Int32)">
            <summary>
            初始化。
            </summary>
            <param name="maxSize">最大元素数量</param>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Put(System.Object)">
            <summary>
            添加元素。
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Insert(System.Object)">
            <summary>
            插入指定元素。成功返回true。
            </summary>
            <param name="element">要插入的元素。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.InsertWithOverflow(System.Object)">
            <summary>
            (无溢出)插入指定元素。返回弹出(如果队列满时)元素或null。
            </summary>
            <param name="element">要插入的元素。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Top">
            <summary>
            返回最后一个元素。不存在则返回null。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Pop">
            <summary>
            弹出最后一个元素。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.AdjustTop">
            <summary>
            调整顶部。当顶部元素变更时调用。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Size">
            <summary>
            获取队列元素数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.PriorityQueue.Clear">
            <summary>
            清空所有元素。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.TermPositionsQueue.Peek">
            <summary>
            返回最后一个元素。不存在则返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultipleTermPositions.TermPositionsQueue.LessThan(System.Object,System.Object)">
            <summary>
            小于测试。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.NormsWriter">
            <summary>
            标准化写入器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.NormsWriter.files(System.Collections.Generic.ICollection{System.Object})">
            <summary>
            清理时仅写入 _X.nrm 文件。
            </summary>
            <param name="files"></param>
        </member>
        <member name="T:EIIP.SE.Index.NormsWriterPerField">
            <summary>
            每字段的分词写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.NormsWriterPerThread">
            <summary>
            每线程的标准化写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.Payload">
            <summary>
            有效负载类。是可与关联分词一起存储的元数据。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.Payload.data">
            <summary>
            有效负载数据。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.Payload.offset">
            <summary>
            有效负载偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.Payload.length">
            <summary>
            有效负载数据长度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.Payload.#ctor">
            <summary>
            实例化缺省有效负载。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.Payload.#ctor(System.Byte[])">
            <summary>
            实例化指定有效负载。
            </summary>
            <param name="data">有效负载数据。</param>
        </member>
        <member name="M:EIIP.SE.Index.Payload.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            实例化指定有效负载。
            </summary>
            <param name="data">含有效负载数据的数组。</param>
            <param name="offset">有效负载偏移量</param>
            <param name="length">有效负载数据长度</param>
        </member>
        <member name="M:EIIP.SE.Index.Payload.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            设置有效负载。
            </summary>
            <param name="data">含有效负载数据的数组。</param>
            <param name="offset">有效负载偏移量</param>
            <param name="length">有效负载数据长度</param>
        </member>
        <member name="M:EIIP.SE.Index.Payload.ToByteArray">
            <summary>
            获取有效负载数据副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Payload.CopyTo(System.Byte[],System.Int32)">
            <summary>
            复制有效负载数据至指定数组。
            </summary>
            <param name="target">目标数组</param>
            <param name="targetOffset">目标数组接收数据的起始索引</param>
        </member>
        <member name="M:EIIP.SE.Index.Payload.Clone">
            <summary>
            创建深层副本。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.Payload.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Payload.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.Payload.Data">
            <summary>
            获取或设置有效负载数据。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.Payload.Offset">
            <summary>
            获取有效负载偏移量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.Payload.Length">
            <summary>
            获取有效负载数据长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.Payload.Item(System.Int32)">
            <summary>
            获取指定索引位置的字节数据。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.PositionBasedTermVectorMapper">
            <summary>
            基于位置信息的分词向量映射器。不是线程安全的。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.PositionBasedTermVectorMapper.#ctor">
            <summary> 
            实例化基于位置信息的分词向量映射器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.PositionBasedTermVectorMapper.#ctor(System.Boolean)">
            <summary>
            实例化基于位置信息的分词向量映射器。
            </summary>
            <param name="ignoringOffsets">设置是否忽略偏移量</param>
        </member>
        <member name="M:EIIP.SE.Index.PositionBasedTermVectorMapper.Map(System.String,System.Int32,EIIP.SE.Index.TermVectorOffsetInfo[],System.Int32[])">
            <summary>
            映射分词向量至自定义结构。
            </summary>
            <param name="term">分词。</param>
            <param name="frequency">文档中分词词频</param>
            <param name="offsets">偏移量信息</param>
            <param name="positions">位置信息</param>
        </member>
        <member name="M:EIIP.SE.Index.PositionBasedTermVectorMapper.SetExpectations(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置预期的值。在返回字段的向量前仅被调用一次，且在 Map(string,int,TermVectorOffsetInfo[],int[]) 前调用。
            </summary>
            <param name="field">向量字段</param>
            <param name="numTerms">要映射的分词数量</param>
            <param name="storeOffsets">映射器是否存储偏移量</param>
            <param name="storePositions">映射器是否存储位置</param>
        </member>
        <member name="P:EIIP.SE.Index.PositionBasedTermVectorMapper.IsIgnoringPositions">
            <summary>
            获取一个值，该值指示是否忽略位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.PositionBasedTermVectorMapper.FieldToTerms">
            <summary> 
            获取字段与分词字典。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.PositionBasedTermVectorMapper.TVPositionInfo">
            <summary>
            位置信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.PositionBasedTermVectorMapper.TVPositionInfo.#ctor(System.Int32,System.Boolean)">
            <summary>
            实例化位置信息。
            </summary>
            <param name="position">位置</param>
            <param name="storeOffsets">设置是否存储偏移量。</param>
        </member>
        <member name="M:EIIP.SE.Index.PositionBasedTermVectorMapper.TVPositionInfo.AddTerm(System.String,EIIP.SE.Index.TermVectorOffsetInfo)">
            <summary>
            添加分词。
            </summary>
            <param name="term">分词。</param>
            <param name="info">分词向量偏移信息。</param>
        </member>
        <member name="P:EIIP.SE.Index.PositionBasedTermVectorMapper.TVPositionInfo.Position">
            <summary>
            获取分词位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.PositionBasedTermVectorMapper.TVPositionInfo.Terms">
            <summary>
            获取同一位置上的多个分词。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.PositionBasedTermVectorMapper.TVPositionInfo.Offsets">
            <summary>
            获取分词偏移量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.DirectoryIndexReader">
            <summary>
            文件夹索引阅读器基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexReader">
            <summary>
            索引阅读器基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.READ_ONLY_DEFAULT">
            <summary>
            指示缺省是否是只读的。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.hasChanges">
            <summary>
            指示是否已变更
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IncRef">
            <summary>
            引用计数增量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DecRef">
            <summary>
            引用计数减量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.#ctor(EIIP.SE.Store.Directory)">
            <summary>
            实例化索引阅读器。
            </summary>
            <param name="directory">要包装的文件夹实例</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.#ctor">
            <summary>
            实例化索引阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.EnsureOpen">
            <summary>
            确认索引阅读器是打开的，否则抛出异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(System.String)">
            <summary>
            打开指定路径的索引阅读器。
            </summary>
            <param name="path">文件夹物理路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(System.IO.FileInfo)">
            <summary>
            打开指定路径的索引阅读器。
            </summary>
            <param name="path">文件夹信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Store.Directory)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Store.Directory,System.Boolean)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="readOnly">设置索引阅读器是否只读</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Index.IndexCommit)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="commit">要打开的提交点</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Store.Directory,EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="deletionPolicy">自定义的删除策略</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Store.Directory,EIIP.SE.Index.IndexDeletionPolicy,System.Boolean)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="deletionPolicy">自定义的删除策略</param>
            <param name="readOnly">设置索引阅读器是否只读</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Index.IndexCommit,EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="commit">要打开的提交点</param>
            <param name="deletionPolicy">自定义的删除策略</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Open(EIIP.SE.Index.IndexCommit,EIIP.SE.Index.IndexDeletionPolicy,System.Boolean)">
            <summary>
            打开指定索引阅读器。
            </summary>
            <param name="commit">要打开的提交点</param>
            <param name="deletionPolicy">自定义的删除策略</param>
            <param name="readOnly">设置索引阅读器是否只读</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Reopen">
            <summary>
            若索引发生了变更则需要重新打开。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.LastModified(System.String)">
            <summary>
            获取指定文件夹最近一次修改时间。
            </summary>
            <param name="directory">文件夹物理路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.LastModified(System.IO.FileInfo)">
            <summary>
            获取指定文件夹最近一次修改时间。
            </summary>
            <param name="fileDirectory">文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.LastModified(EIIP.SE.Store.Directory)">
            <summary>
            获取指定文件夹最近一次修改时间。
            </summary>
            <param name="directory">文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetCurrentVersion(System.String)">
            <summary>
            获取指定文件夹版本号。当不存在该文件夹时抛出异常。
            </summary>
            <param name="directory">文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetCurrentVersion(System.IO.FileInfo)">
            <summary>
            获取指定文件夹版本号。当不存在该文件夹时抛出异常。
            </summary>
            <param name="directory">文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetCurrentVersion(EIIP.SE.Store.Directory)">
            <summary>
            获取指定文件夹版本号。当不存在该文件夹时抛出异常。
            </summary>
            <param name="directory">文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetVersion">
            <summary>
            获取版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IsCurrent">
            <summary>
            检查索引阅读器是否工作在当前版本的索引下。若不是的话，需要重新打开索引阅读器以获取最新更新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IsOptimized">
            <summary>
            检查索引阅读器是否已优化（如仅有一段或无删除项）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetTermFreqVectors(System.Int32)">
            <summary>
            获取指定文档的分词频率向量数组。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetTermFreqVector(System.Int32,System.String)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetTermFreqVector(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetTermFreqVector(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IndexExists(System.String)">
            <summary>
            测试是否存在指定索引文件夹。
            </summary>
            <param name="directory">索引文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IndexExists(System.IO.FileInfo)">
            <summary>
            测试是否存在指定索引文件夹。
            </summary>
            <param name="directory">索引文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IndexExists(EIIP.SE.Store.Directory)">
            <summary>
            测试是否存在指定索引文件夹。
            </summary>
            <param name="directory">索引文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.NumDocs">
            <summary>
            获取索引的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.MaxDoc">
            <summary>
            获取最大索引文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.NumDeletedDocs">
            <summary>
            获取删除的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Document(System.Int32)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Document(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.HasDeletions">
            <summary>
            获取一个值，该值指示是否删除过文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.HasNorms(System.String)">
            <summary>
            检查指定字段是否已标准化存储。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Norms(System.String)">
            <summary>
            获取指定字段的标准化因子。不存在则返回null。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Norms(System.String,System.Byte[],System.Int32)">
            <summary>
            获取指定字段的标准化因子。
            </summary>
            <param name="field">字段</param>
            <param name="bytes">存储的字节数组</param>
            <param name="offset">存储的字节数组的起始位置</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.SetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DoSetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.SetNorm(System.Int32,System.String,System.Single)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Terms">
            <summary>
            获取分词枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取基于指定分词的分词枚举数。
            </summary>
            <param name="t">基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的文档号。
            </summary>
            <param name="t">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.TermDocs(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的所有文档。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.TermDocs">
            <summary>
            获取所有文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.TermPositions(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的所有位置。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.TermPositions">
            <summary>
            获取分词所有位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DeleteDocument(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DoDelete(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DeleteDocuments(EIIP.SE.Index.Term)">
            <summary>
            删除所有包含指定分词的文档。返回删除文档数量。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.UndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DoUndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.AcquireWriteLock">
            <summary>
            获取文件夹写入锁。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Flush">
            <summary> </summary>
            <throws>  IOException </throws>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Commit">
            <summary>
            提交删除、恢复或标准化操作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DoCommit">
            <summary>
            提交删除、恢复或标准化操作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Close">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetFieldNames(EIIP.SE.Index.IndexReader.FieldOption)">
            <summary>
            获取含有指定字段选项的字段名称。
            </summary>
            <param name="fldOption">字段选项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.GetIndexCommit">
            <summary>
            获取索引事务提交点。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.Main(System.String[])">
            <summary>
            打印复合文件中的每个文件文件名及尺寸。
            添加 -extract 参数以解包复合文件至工作目录。
            </summary>
            <param name="args">Usage: IndexReader [-extract] &lt;cfsfile&gt;
            </param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.ListCommits(EIIP.SE.Store.Directory)">
            <summary>
            获取所有索引事务提交点。
            </summary>
            <param name="dir">索引事务提交点所在的文件夹</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.IndexReader.Directory">
            <summary>
            获取索引阅读器关联的文件夹实例。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.IndexReader.TermInfosIndexDivisor">
            <summary>
            获取或设置分词信息的索引因子。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentInfos.FindSegmentsFile">
            <summary>
            查询段文件的工具基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentInfos">
            <summary>
            段信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT">
            <summary>
            文件格式化版本，为-1。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT_LOCKLESS">
            <summary>
            无锁版本号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT_SINGLE_NORM_FILE">
            <summary>
            添加了 hasSingleNormFile 标记的版本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT_SHARED_DOC_STORE">
            <summary>
            允许多段共享单一向量与字段存储文件的版本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT_CHECKSUM">
            <summary>
            添加了校验和的版本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT_DEL_COUNT">
            <summary>
            添加每段的删除量的版本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FORMAT_HAS_PROX">
            <summary>
            添加了 hasProx 属性的版本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.CURRENT_FORMAT">
            <summary>
            当前版本号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.counter">
            <summary>
            用于命名新段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.version">
            <summary>
            基于当前时间的版本号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.generation">
            <summary>
            为下一提交生成代数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.lastGeneration">
            <summary>
            生成最近成功读取的代数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.infoStream">
            <summary>
            加载 segments_N 的文件流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.pendingOutput">
            <summary>
            校验和索引输出器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.#ctor">
            <summary>
            实例化段信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Info(System.Int32)">
            <summary>
            获取指定索引位置的段信息。
            </summary>
            <param name="i">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GetCurrentSegmentGeneration(System.String[])">
            <summary>
            从指定的文件名数组中获取当前段信息的代数。
            </summary>
            <param name="files">要检查的文件名数组</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GetCurrentSegmentGeneration(EIIP.SE.Store.Directory)">
            <summary>
            获取指定文件夹中的段信息代数。
            </summary>
            <param name="directory">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GetCurrentSegmentFileName(System.String[])">
            <summary>
            获取指定文件组的当前段信息文件名。
            </summary>
            <param name="files">文件组</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GetCurrentSegmentFileName(EIIP.SE.Store.Directory)">
            <summary>
            获取指定文件组的当前段信息文件名。
            </summary>
            <param name="directory">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GetCurrentSegmentFileName">
            <summary>
            获取当前段信息文件名。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GenerationFromSegmentsFileName(System.String)">
            <summary>
            获取指定段信息文件的代数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.GetNextSegmentFileName">
            <summary>
            获取下一段文件名。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Read(EIIP.SE.Store.Directory,System.String)">
            <summary>
            读取文件夹指定的段文件。
            </summary>
            <param name="directory">文件夹</param>
            <param name="segmentFileName">段文件名。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Read(EIIP.SE.Store.Directory)">
            <summary>
            读取文件夹。
            </summary>
            <param name="directory">文件夹。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Write(EIIP.SE.Store.Directory)">
            <summary>
            写入指定文件夹。
            </summary>
            <param name="directory">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Clone">
            <summary>
            获取克隆副本。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.ReadCurrentVersion(EIIP.SE.Store.Directory)">
            <summary>
            获取指定文件夹的当前版本。
            </summary>
            <param name="directory">文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Message(System.String)">
            <summary>
            输出消息。
            </summary>
            <param name="message">要输出的消息</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Range(System.Int32,System.Int32)">
            <summary>
            获取指定范围的段信息实例集。返回的数量为last-first
            </summary>
            <param name="first">起始索引，返回集中包含该位置的段信息</param>
            <param name="last">结束索引，返回集中不包含该位置的段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.UpdateGeneration(EIIP.SE.Index.SegmentInfos)">
            <summary>
            更新代数信息。
            </summary>
            <param name="other">源</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.RollbackCommit(EIIP.SE.Store.Directory)">
            <summary>
            回滚提交。
            </summary>
            <param name="dir">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.PrepareCommit(EIIP.SE.Store.Directory)">
            <summary>
            准备开始提交。
            </summary>
            <param name="dir">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.FinishCommit(EIIP.SE.Store.Directory)">
            <summary>
            结束提交。
            </summary>
            <param name="dir">文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.Commit(EIIP.SE.Store.Directory)">
            <summary>
            提交。
            </summary>
            <param name="dir">文件夹。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.SegString(EIIP.SE.Store.Directory)">
            <summary>
            获取段信息。
            </summary>
            <param name="directory">文件夹</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.Version">
            <summary>
            获取版本号。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.Generation">
            <summary>
            获取代数。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.LastGeneration">
            <summary>
            获取最近一次代数。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.InfoStream">
            <summary>
            获取或设置信息流。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.DefaultGenFileRetryCount">
            <summary>
            获取或设置缺省加载段信息文件的尝试次数。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.DefaultGenFileRetryPauseMsec">
            <summary>
            获取或设置缺省加载段信息文件的尝试时等待的时间（毫秒）。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfos.DefaultGenLookahedCount">
            <summary>
            获取或设置缺省加载段信息文件时尝试的次数。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentInfos.FindSegmentsFile">
            <summary>
            查询段文件的工具基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FindSegmentsFile.fileDirectory">
            <summary>
            物理文件目录。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfos.FindSegmentsFile.directory">
            <summary>
            存储文件夹。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.FindSegmentsFile.#ctor(System.IO.FileInfo)">
            <summary>
            实例化查询段文件的工具。
            </summary>
            <param name="directory">物理文件目录</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.FindSegmentsFile.#ctor(EIIP.SE.Store.Directory)">
            <summary>
            实例化查询段文件的工具。
            </summary>
            <param name="directory">存储文件夹。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.FindSegmentsFile.Run">
            <summary>
            运行。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfos.FindSegmentsFile.DoBody(System.String)">
            <summary>
            执行体。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.IndexReader.FieldOption">
            <summary>
            字段选项类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.ALL">
            <summary>
            所有字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.INDEXED">
            <summary>
            索引的字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.STORES_PAYLOADS">
            <summary>
            存储有效负载的字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.OMIT_TF">
            <summary>
            存储 omit tf 的字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.UNINDEXED">
            <summary>
            未索引字段
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR">
            <summary>
            允许分词向量的索引字段
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.INDEXED_NO_TERMVECTOR">
            <summary>
            未允许分词向量的索引字段
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.TERMVECTOR">
            <summary>
            允许分词向量的字段
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.TERMVECTOR_WITH_POSITION">
            <summary>
            允许分词向量及位置的字段
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET">
            <summary>
            允许分词向量及偏移量的字段
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET">
            <summary>
            允许分词向量及位置偏移量的字段
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.FieldOption.#ctor">
            <summary>
            实例化字段选项。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.FieldOption.#ctor(System.String)">
            <summary>
            实例化指定字段选项。
            </summary>
            <param name="option">字段选项。</param>
        </member>
        <member name="M:EIIP.SE.Index.IndexReader.FieldOption.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Index.DirectoryIndexReader.directory">
            <summary>
            文件夹实例。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DirectoryIndexReader.closeDirectory">
            <summary>
            指示是否关闭了文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DirectoryIndexReader.deletionPolicy">
            <summary>
            删除策略。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.DirectoryIndexReader.readOnly">
            <summary>
            指示是否是只读的。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.#ctor">
            <summary>
            实例化文件夹索引阅读器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfos,System.Boolean,System.Boolean)">
            <summary>
            实例化文件夹索引阅读器基类。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="segmentInfos">段信息</param>
            <param name="closeDirectory">设置是否关闭文件夹实例</param>
            <param name="readOnly">设置是否只读</param>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.Init(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfos,System.Boolean,System.Boolean)">
            <summary>
            初始化文件夹索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="segmentInfos">段信息</param>
            <param name="closeDirectory">设置是否关闭文件夹实例</param>
            <param name="readOnly">设置是否只读</param>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.Open(EIIP.SE.Store.Directory,System.Boolean,EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            打开文件夹索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="closeDirectory">设置是否关闭文件夹实例</param>
            <param name="deletionPolicy">删除策略</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.Open(EIIP.SE.Store.Directory,System.Boolean,EIIP.SE.Index.IndexDeletionPolicy,EIIP.SE.Index.IndexCommit,System.Boolean)">
            <summary>
            打开文件夹索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="closeDirectory">设置是否关闭文件夹实例</param>
            <param name="deletionPolicy">删除策略</param>
            <param name="commit">索引事务提交点</param>
            <param name="readOnly">设置是否是只读的</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.Reopen">
            <summary>
            若索引发生了变更则需要重新打开。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.DoReopen(EIIP.SE.Index.SegmentInfos)">
            <summary>
            重新打开。
            </summary>
            <param name="infos">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.SetDeletionPolicy(EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            设置删除策略。
            </summary>
            <param name="deletionPolicy">删除策略。</param>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.GetVersion">
            <summary>
            获取版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.IsCurrent">
            <summary>
            检查索引阅读器是否工作在当前版本的索引下。若不是的话，需要重新打开索引阅读器以获取最新更新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.IsOptimized">
            <summary>
            检查索引阅读器是否已优化（如仅有一段或无删除项）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.DoCommit">
            <summary>
            提交删除、恢复或标准化操作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.CommitChanges">
            <summary>
            提交变更。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.AcquireWriteLock">
            <summary>
            获取文件夹写入锁。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.StartCommit">
            <summary>
            开始提交。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.RollbackCommit">
            <summary>
            回滚。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.Finalize">
            <summary>
            释放写锁。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.GetIndexCommit">
            <summary>
            获取索引事务提交点。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.DirectoryIndexReader.ListCommits(EIIP.SE.Store.Directory)">
            <summary>
            获取所有索引事务提交点。
            </summary>
            <param name="dir">索引事务提交点所在的文件夹</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.DirectoryIndexReader.Directory">
            <summary>
            获取索引阅读器关联的文件夹实例。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FieldsReader">
            <summary>
            字段阅读器。用于访问存储文档的字段。即&lt;segment&gt;.fdt and &lt;segment&gt;.fdx; 文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos)">
            <summary>
            实例化字段阅读器。
            </summary>
            <param name="d">文件夹实例。</param>
            <param name="segment">段名</param>
            <param name="fn">字段信息集</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos,System.Int32)">
            <summary>
            实例化字段阅读器。
            </summary>
            <param name="d">文件夹实例。</param>
            <param name="segment">段名</param>
            <param name="fn">字段信息集</param>
            <param name="readBufferSize">读取缓存尺寸</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos,System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化字段阅读器。
            </summary>
            <param name="d">文件夹实例。</param>
            <param name="segment">段名</param>
            <param name="fn">字段信息集</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <param name="docStoreOffset">文档存储偏移量</param>
            <param name="size">尺寸。</param>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.EnsureOpen">
            <summary>
            确认字段阅读器是打开的，否则会抛出异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.Close">
            <summary>
            关闭字段阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.CanReadRawDocs">
            <summary>
            判断是否可以阅读原始文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.Doc(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.RawDocs(System.Int32[],System.Int32,System.Int32)">
            <summary>
            返回已定位于指定文件档起始号位置的文档的索引输入器。
            </summary>
            <param name="lengths">每个原始文档长度</param>
            <param name="startDocID">起始文档号</param>
            <param name="numDocs">原始文档数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.AddFieldForMerge(EIIP.SE.Documents.Document,EIIP.SE.Index.FieldInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            在合并模式中，不能为压缩字段解压缩数据。
            </summary>
            <param name="doc"></param>
            <param name="fi"></param>
            <param name="binary"></param>
            <param name="compressed"></param>
            <param name="tokenize"></param>
        </member>
        <member name="P:EIIP.SE.Index.FieldsReader.Size">
            <summary>
            获取尺寸。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FieldsReader.LazyField">
            <summary>
            延迟加载的字段。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FieldsReader.FieldForMerge">
            <summary>
            可合并的字段类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FieldsReader.FieldForMerge.#ctor(System.Object,EIIP.SE.Index.FieldInfo,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            实例化可合并的字段。
            </summary>
            <param name="v">字段数据</param>
            <param name="fi">字段信息</param>
            <param name="binary">设置是否是二进制</param>
            <param name="compressed">设置是否已压缩</param>
            <param name="tokenize">设置是否已标记化</param>
        </member>
        <member name="P:EIIP.SE.Index.FieldsReader.FieldForMerge.StringValue">
            <summary>
            获取字段的字符串值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.FieldsReader.FieldForMerge.ReaderValue">
            <summary>
            获取字段的文本阅读器值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.FieldsReader.FieldForMerge.BinaryValue">
            <summary>
            获取字段的二进制值。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.FieldsReader.FieldForMerge.TokenStreamValue">
            <summary>
            获取字段的分词流值。不存在则返回null。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FilterIndexReader">
            <summary>
            过滤器索引阅读器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FilterIndexReader.m_IndexReader">
            <summary>
            关联的索引阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.#ctor(EIIP.SE.Index.IndexReader)">
            <summary>
            实例化过滤器索引阅读器。
            </summary>
            <param name="reader">索引阅读器。</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.GetTermFreqVectors(System.Int32)">
            <summary>
            获取指定文档的分词频率向量数组。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.GetTermFreqVector(System.Int32,System.String)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.GetTermFreqVector(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.GetTermFreqVector(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.NumDocs">
            <summary>
            获取索引的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.MaxDoc">
            <summary>
            获取最大索引文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.Document(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.HasDeletions">
            <summary>
            获取一个值，该值指示是否删除过文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.DoUndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.HasNorms(System.String)">
            <summary>
            检查指定字段是否已标准化存储。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.Norms(System.String)">
            <summary>
            获取指定字段的标准化因子。不存在则返回null。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.Norms(System.String,System.Byte[],System.Int32)">
            <summary>
            获取指定字段的标准化因子。
            </summary>
            <param name="field">字段</param>
            <param name="bytes">存储的字节数组</param>
            <param name="offset">存储的字节数组的起始位置</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.DoSetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.Terms">
            <summary>
            获取分词枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取基于指定分词的分词枚举数。
            </summary>
            <param name="t">基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的文档号。
            </summary>
            <param name="t">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.TermDocs">
            <summary>
            获取所有文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.TermPositions">
            <summary>
            获取分词所有位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.DoDelete(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.DoCommit">
            <summary>
            提交删除、恢复或标准化操作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.GetFieldNames(EIIP.SE.Index.IndexReader.FieldOption)">
            <summary>
            获取含有指定字段选项的字段名称。
            </summary>
            <param name="fieldNames">字段选项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.GetVersion">
            <summary>
            获取版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.IsCurrent">
            <summary>
            检查索引阅读器是否工作在当前版本的索引下。若不是的话，需要重新打开索引阅读器以获取最新更新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.IsOptimized">
            <summary>
            检查索引阅读器是否已优化（如仅有一段或无删除项）。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.FilterIndexReader.FilterTermDocs">
            <summary>
            过滤器分词文档类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.TermDocs">
            <summary>
            关联的分词文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.#ctor(EIIP.SE.Index.ITermDocs)">
            <summary>
            实例化过滤器分词文档。
            </summary>
            <param name="termDocs">关联的分词文档。</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Seek(EIIP.SE.Index.Term)">
            <summary>
            定位于指定分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Seek(EIIP.SE.Index.TermEnum)">
            <summary>
            定位指定分词枚举数。
            </summary>
            <param name="termEnum">分词枚举数。</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Freq">
            <summary>
            获取当前文档的分词词频。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Next">
            <summary>
            移向下一个。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Read(System.Int32[],System.Int32[])">
            <summary>
            尝试从多个文档读取，返回读取的文档号(当不存在则返回0)。
            </summary>
            <param name="docs">文档号数组</param>
            <param name="freqs">分词频率，与docs长度一致</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.SkipTo(System.Int32)">
            <summary>
            忽略基于指定文档号的文档。存在忽略返回true。
            <pre>
            boolean skipTo(int target)
            {
             do{ if(!next()) return false; }while(target > doc());
             return true;
            }
            </pre>
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermDocs.Close">
            <summary>
            释放关联资源。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.FilterIndexReader.FilterTermPositions">
            <summary>
            过滤器分词位置类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermPositions.#ctor(EIIP.SE.Index.ITermPositions)">
            <summary>
            实例化过滤器分词位置。
            </summary>
            <param name="termPositions">分词位置。</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermPositions.NextPosition">
            <summary>
            获取当前文档的下一位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermPositions.GetPayloadLength">
            <summary>
            获取在当前分词位置上的有效负载长度。在调用NextPosition()后有效。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermPositions.GetPayload(System.Byte[],System.Int32)">
            <summary> 获取在当前分词位置上的有效负载
            </summary>
            <param name="data">存储有效负载的数组。若长度不够，会分配新的空间进行存储。</param>
            <param name="offset">data开始存储的偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermPositions.IsPayloadAvailable">
            <summary>
            检查加载的有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.FilterIndexReader.FilterTermEnum">
            <summary>
            过滤器分词枚举数。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermEnum">
            <summary>
            分词枚举数基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermEnum.Next">
            <summary>
            移向下一分词。不存在则返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermEnum.Term">
            <summary>
            获取当前分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermEnum.DocFreq">
            <summary>
            获取当前分词的文档频率。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermEnum.Close">
            <summary>
            关闭活动枚举。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermEnum.SkipTo(EIIP.SE.Index.Term)">
            <summary>
            忽略比指定分词大的分词。存在忽略则返回true。
            <pre>
            public boolean skipTo(Term target) 
            {
              do{ if(!next()) return false; }while(target > term());
              return true;
            }
            </pre>
            </summary>
            <param name="target">要比较的目标分词</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Index.FilterIndexReader.FilterTermEnum.m_TermEnum">
            <summary>
            分词枚举数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermEnum.#ctor(EIIP.SE.Index.TermEnum)">
            <summary>
            实例化过滤器分词枚举数。
            </summary>
            <param name="termEnum">分词枚举数。</param>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermEnum.Next">
            <summary>
            移向下一分词。不存在则返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermEnum.Term">
            <summary>
            获取当前分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermEnum.DocFreq">
            <summary>
            获取当前分词的文档频率。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.FilterIndexReader.FilterTermEnum.Close">
            <summary>
            关闭活动枚举。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultiReader">
            <summary>
            多索引阅读器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiReader.subReaders">
            <summary>
            子阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiReader.starts">
            <summary>
            每一段的文档号列表。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiReader.decrefOnClose">
            <summary>
            记录每个子阅读器是否关闭记录。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.#ctor(EIIP.SE.Index.IndexReader[])">
            <summary>
            实例化多索引阅读器。
            </summary>
            <param name="subReaders">子阅读器</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.#ctor(EIIP.SE.Index.IndexReader[],System.Boolean)">
            <summary>
            实例化多索引阅读器。
            </summary>
            <param name="subReaders">子阅读器</param>
            <param name="closeSubReaders">设置关闭时是否同时关闭子阅读器</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Initialize(EIIP.SE.Index.IndexReader[],System.Boolean)">
            <summary>
            初始化多索引阅读器。
            </summary>
            <param name="subReaders">子阅读器</param>
            <param name="closeSubReaders">设置关闭时是否同时关闭子阅读器</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Reopen">
            <summary>
            若索引发生了变更则需要重新打开。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.GetTermFreqVectors(System.Int32)">
            <summary>
            获取指定文档的分词频率向量数组。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.GetTermFreqVector(System.Int32,System.String)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.GetTermFreqVector(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.GetTermFreqVector(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.IsOptimized">
            <summary>
            检查索引阅读器是否已优化（如仅有一段或无删除项）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.NumDocs">
            <summary>
            获取索引的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.MaxDoc">
            <summary>
            获取最大索引文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Document(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.HasDeletions">
            <summary>
            获取一个值，该值指示是否删除过文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.DoDelete(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.DoUndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.ReaderIndex(System.Int32)">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.HasNorms(System.String)">
            <summary>
            检查指定字段是否已标准化存储。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Norms(System.String)">
            <summary>
            获取指定字段的标准化因子。不存在则返回null。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Norms(System.String,System.Byte[],System.Int32)">
            <summary>
            获取指定字段的标准化因子。
            </summary>
            <param name="field">字段</param>
            <param name="result">存储的字节数组</param>
            <param name="offset">存储的字节数组的起始位置</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.DoSetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Terms">
            <summary>
            获取分词枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取基于指定分词的分词枚举数。
            </summary>
            <param name="t">基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的文档号。
            </summary>
            <param name="t">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.TermDocs">
            <summary>
            获取所有文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.TermPositions">
            <summary>
            获取分词所有位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.DoCommit">
            <summary>
            提交删除、恢复或标准化操作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.GetFieldNames(EIIP.SE.Index.IndexReader.FieldOption)">
            <summary>
            获取含有指定字段选项的字段名称。
            </summary>
            <param name="fldOption">字段选项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.IsCurrent">
            <summary>
            检查索引阅读器是否工作在当前版本的索引下。若不是的话，需要重新打开索引阅读器以获取最新更新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiReader.GetVersion">
            <summary>
            获取版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.MultiSegmentReader">
            <summary>
            多段索引阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiSegmentReader.subReaders">
            <summary>
            子阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.MultiSegmentReader.starts">
            <summary>
            每段的文档号
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfos,System.Boolean,System.Boolean)">
            <summary>
            实例化多段索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="sis">段信息集</param>
            <param name="closeDirectory">设置是否关闭文件夹</param>
            <param name="readOnly">设置是否只读</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfos,System.Boolean,EIIP.SE.Index.SegmentReader[],System.Int32[],System.Collections.Generic.Dictionary{System.String,System.Byte[]},System.Boolean)">
            <summary>
            实例化多段索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="infos">段信息集</param>
            <param name="closeDirectory">设置是否关闭文件夹</param>
            <param name="oldReaders">段阅读器</param>
            <param name="oldStarts">段文档号</param>
            <param name="oldNormsCache">标准化缓存</param>
            <param name="readOnly">设置是否只读</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.DoReopen(EIIP.SE.Index.SegmentInfos)">
            <summary>
            重新打开。
            </summary>
            <param name="infos">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.GetTermFreqVectors(System.Int32)">
            <summary>
            获取指定文档的分词频率向量数组。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.GetTermFreqVector(System.Int32,System.String)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.GetTermFreqVector(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.GetTermFreqVector(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.IsOptimized">
            <summary>
            检查索引阅读器是否已优化。总是返回false
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.NumDocs">
            <summary>
            获取索引的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.MaxDoc">
            <summary>
            获取最大索引文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.Document(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.HasDeletions">
            <summary>
            获取一个值，该值指示是否删除过文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.DoDelete(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.DoUndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.HasNorms(System.String)">
            <summary>
            检查指定字段是否已标准化存储。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.Norms(System.String)">
            <summary>
            获取指定字段的标准化因子。不存在则返回null。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.Norms(System.String,System.Byte[],System.Int32)">
            <summary>
            获取指定字段的标准化因子。
            </summary>
            <param name="field">字段</param>
            <param name="result">存储的字节数组</param>
            <param name="offset">存储的字节数组的起始位置</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.DoSetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.Terms">
            <summary>
            获取分词枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取基于指定分词的分词枚举数。
            </summary>
            <param name="term">基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的文档号。
            </summary>
            <param name="t">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.TermDocs">
            <summary>
            获取所有文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.TermPositions">
            <summary>
            获取分词所有位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.CommitChanges">
            <summary>
            提交变更。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.StartCommit">
            <summary>
            开始提交。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.RollbackCommit">
            <summary>
            回滚。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.MultiSegmentReader.GetFieldNames(EIIP.SE.Index.IndexReader.FieldOption)">
            <summary>
            获取含有指定字段选项的字段名称。
            </summary>
            <param name="fldOption">字段选项</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.MultiSegmentReader.TermInfosIndexDivisor">
            <summary>
            获取或设置分词信息的索引因子。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultiSegmentReader.MultiTermEnum">
            <summary>
            多分词枚举数。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultiSegmentReader.MultiTermDocs">
            <summary>
            多分词文档
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.MultiSegmentReader.MultiTermPositions">
            <summary>
            多分词位置。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ParallelReader">
            <summary>
            并行索引阅读器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.#ctor">
            <summary>
            实例化并行索引阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.#ctor(System.Boolean)">
            <summary>
            实例化并行索引阅读器。
            </summary>
            <param name="closeSubReaders">设置关闭阅读器时是否同时关闭子阅读器</param>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Add(EIIP.SE.Index.IndexReader)">
            <summary>
            添加索引阅读器。
            </summary>
            <param name="reader">索引阅读器。</param>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Add(EIIP.SE.Index.IndexReader,System.Boolean)">
            <summary>
            添加索引阅读器。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="ignoreStoredFields">设置是否忽略存储的字段</param>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Reopen">
            <summary>
            若索引发生了变更则需要重新打开。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.NumDocs">
            <summary>
            获取索引的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.MaxDoc">
            <summary>
            获取最大索引文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.HasDeletions">
            <summary>
            获取一个值，该值指示是否删除过文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.DoDelete(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.DoUndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Document(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.GetTermFreqVectors(System.Int32)">
            <summary>
            获取指定文档的分词频率向量数组。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.GetTermFreqVector(System.Int32,System.String)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.GetTermFreqVector(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.GetTermFreqVector(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.HasNorms(System.String)">
            <summary>
            检查指定字段是否已标准化存储。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Norms(System.String)">
            <summary>
            获取指定字段的标准化因子。不存在则返回null。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Norms(System.String,System.Byte[],System.Int32)">
            <summary>
            获取指定字段的标准化因子。
            </summary>
            <param name="field">字段</param>
            <param name="result">存储的字节数组</param>
            <param name="offset">存储的字节数组的起始位置</param>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.DoSetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Terms">
            <summary>
            获取分词枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取基于指定分词的分词枚举数。
            </summary>
            <param name="term">基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的文档号。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.TermDocs(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的所有文档。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.TermDocs">
            <summary>
            获取所有文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.TermPositions(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的所有位置。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.TermPositions">
            <summary>
            获取分词所有位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.IsCurrent">
            <summary>
            检查索引阅读器是否工作在当前版本的索引下。若不是的话，需要重新打开索引阅读器以获取最新更新。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.IsOptimized">
            <summary>
            检查索引阅读器是否已优化（如仅有一段或无删除项）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.GetVersion">
            <summary>
            获取版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.DoCommit">
            <summary>
            提交删除、恢复或标准化操作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ParallelReader.GetFieldNames(EIIP.SE.Index.IndexReader.FieldOption)">
            <summary>
            获取含有指定字段选项的字段名称。
            </summary>
            <param name="fieldNames">字段选项</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.ParallelReader.ParallelTermEnum">
            <summary>
            并行分词枚举数。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ParallelReader.ParallelTermDocs">
            <summary>
            并行的分词文档。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ParallelReader.ParallelTermPositions">
            <summary>
            并行的分词位置。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ReadOnlyMultiSegmentReader">
            <summary>
            只读的多段索引阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ReadOnlyMultiSegmentReader.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfos,System.Boolean)">
            <summary>
            实例化只读的多段索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="sis">段信息集</param>
            <param name="closeDirectory">设置是否关闭文件夹</param>
        </member>
        <member name="M:EIIP.SE.Index.ReadOnlyMultiSegmentReader.#ctor(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfos,System.Boolean,EIIP.SE.Index.SegmentReader[],System.Int32[],System.Collections.Generic.Dictionary{System.String,System.Byte[]})">
            <summary>
            实例化只读的多段索引阅读器。
            </summary>
            <param name="directory">文件夹实例</param>
            <param name="infos">段信息集</param>
            <param name="closeDirectory">设置是否关闭文件夹</param>
            <param name="oldReaders">段阅读器</param>
            <param name="oldStarts">段文档号</param>
            <param name="oldNormsCache">标准化缓存</param>
        </member>
        <member name="M:EIIP.SE.Index.ReadOnlyMultiSegmentReader.AcquireWriteLock">
            <summary>
            获取文件夹写入锁。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.ReadOnlySegmentReader">
            <summary>
            只读的段阅读器类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentReader">
            <summary>
            段阅读器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentReader.cfsReader">
            <summary>
            复合文件阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentReader.storeCFSReader">
            <summary>
            存储的复合文件阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentReader.referencedSegmentReader">
            <summary>
            可重用的段阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentReader.IMPL">
            <summary>
            SegmentReader 的实现
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.IncRef">
            <summary>
            引用计数增量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DecRef">
            <summary>
            引用计数减量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(EIIP.SE.Index.SegmentInfo)">
            <summary>
            创建只读段阅读器。
            </summary>
            <param name="si">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(System.Boolean,EIIP.SE.Index.SegmentInfo)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="readOnly">设置是否是只读的</param>
            <param name="si">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(EIIP.SE.Index.SegmentInfo,System.Boolean)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="si">段信息</param>
            <param name="doOpenStores">设置是否打开存储段阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(EIIP.SE.Index.SegmentInfo,System.Int32)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="si">段信息</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(EIIP.SE.Index.SegmentInfo,System.Int32,System.Boolean)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="si">段信息</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <param name="doOpenStores">设置是否打开存储段阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(System.Boolean,EIIP.SE.Index.SegmentInfo,System.Int32,System.Boolean)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="readOnly">设置是否是只读的</param>
            <param name="si">段信息</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <param name="doOpenStores">设置是否打开存储段阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(System.Boolean,EIIP.SE.Index.SegmentInfos,EIIP.SE.Index.SegmentInfo,System.Boolean)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="readOnly">设置是否是只读的</param>
            <param name="sis">段信息集</param>
            <param name="si">段信息</param>
            <param name="closeDir">设置是否关闭文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfo,EIIP.SE.Index.SegmentInfos,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="dir">存储文件夹</param>
            <param name="si">段信息</param>
            <param name="sis">段信息集</param>
            <param name="closeDir">设置是否关闭文件夹</param>
            <param name="ownDir">设置是否是私有文件夹</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Get(System.Boolean,EIIP.SE.Store.Directory,EIIP.SE.Index.SegmentInfo,EIIP.SE.Index.SegmentInfos,System.Boolean,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            创建段阅读器。
            </summary>
            <param name="readOnly">设置是否是只读的</param>
            <param name="dir">存储文件夹</param>
            <param name="si">段信息</param>
            <param name="sis">段信息集</param>
            <param name="closeDir">设置是否关闭文件夹</param>
            <param name="ownDir">设置是否是私有文件夹</param>
            <param name="readBufferSize">读取缓存尺寸</param>
            <param name="doOpenStores">设置是否打开存储段阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DoReopen(EIIP.SE.Index.SegmentInfos)">
            <summary>
            重新打开。
            </summary>
            <param name="infos">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.ReopenSegment(EIIP.SE.Index.SegmentInfo)">
            <summary>
            重新打开段。
            </summary>
            <param name="si">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.CommitChanges">
            <summary>
            提交变更。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetFieldsReader">
            <summary>
            获取字段阅读器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.foo">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DoClose">
            <summary>
            提交更新并关闭索引关联的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.HasDeletions(EIIP.SE.Index.SegmentInfo)">
            <summary>
            测试指定段是否删除过文档。
            </summary>
            <param name="si">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.HasDeletions">
            <summary>
            获取一个值，该值指示是否删除过文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.UsesCompoundFile(EIIP.SE.Index.SegmentInfo)">
            <summary>
            测试指定段是否使用复合文件进行存储。
            </summary>
            <param name="si">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.HasSeparateNorms(EIIP.SE.Index.SegmentInfo)">
            <summary>
            测试指定段是否有分隔符标准化文件。
            </summary>
            <param name="si">段信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DoDelete(System.Int32)">
            <summary>
            删除指定文档。
            </summary>
            <param name="docNum">文档号</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DoUndeleteAll">
            <summary>
            恢复所有当前被标记为删除的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Files">
            <summary>
            获取文件列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Terms">
            <summary>
            获取分词枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取基于指定分词的分词枚举数。
            </summary>
            <param name="t">基准分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetFieldInfos">
            <summary>
            获取字段信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Document(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档号的文档实例。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.TermDocs">
            <summary>
            获取所有文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.TermPositions">
            <summary>
            获取分词所有位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取包含指定分词的文档号。
            </summary>
            <param name="t">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.NumDocs">
            <summary>
            获取索引的文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.MaxDoc">
            <summary>
            获取最大索引文档数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetFieldNames(EIIP.SE.Index.IndexReader.FieldOption)">
            <summary>
            获取含有指定字段选项的字段名称。
            </summary>
            <param name="fieldOption">字段选项</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.HasNorms(System.String)">
            <summary>
            检查指定字段是否已标准化存储。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetNorms(System.String)">
            <summary>
            获取标准化数据。若标准化数据未存储则返回null。
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Norms(System.String)">
            <summary>
            获取指定字段的标准化因子。不存在则返回null。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.DoSetNorm(System.Int32,System.String,System.Byte)">
            <summary>
            设置指定文档字段的标准化因子。
            </summary>
            <param name="doc">文档号</param>
            <param name="field">字段</param>
            <param name="v">标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.Norms(System.String,System.Byte[],System.Int32)">
            <summary>
            获取指定字段的标准化因子。
            </summary>
            <param name="field">字段</param>
            <param name="bytes">存储的字节数组</param>
            <param name="offset">存储的字节数组的起始位置</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetTermFreqVector(System.Int32,System.String)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetTermFreqVector(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="field">文档字段</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetTermFreqVector(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定文档字段的分词频率向量。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">处理向量的分词向量映射实例，不能为null</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.GetTermFreqVectors(System.Int32)">
            <summary>
            获取指定文档的分词频率向量数组。文档不存在则抛出异常。
            </summary>
            <param name="docNumber">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.StartCommit">
            <summary>
            开始提交。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentReader.RollbackCommit">
            <summary>
            回滚。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentReader.TermInfosIndexDivisor">
            <summary>
            获取或设置分词信息的索引因子。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentReader.FieldInfos">
            <summary>
            获取字段信息集。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentReader.SegmentName">
            <summary>
            获取段名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentReader.SegmentInfo">
            <summary>
            获取或设置段信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ReadOnlySegmentReader.AcquireWriteLock">
            <summary>
            获取文件夹写入锁。始终抛出异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ReadOnlySegmentReader.IsDeleted(System.Int32)">
            <summary>
            测试指定文档号的文档是否已删除。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.ReusableStringReader">
            <summary>
            可重用的字符串阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.Init(System.String)">
            <summary>
            初始化。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            从当前流中读取最大 count 的字符并从 off 开始将该数据写入 c。
            </summary>
            <param name="c">此方法返回时，包含指定的字符数组，该数组的 off 和 (off + count - 1) 之间的值由从当前源中读取的字符替换。</param>
            <param name="off">c 中开始写入的位置。</param>
            <param name="count">最多读取的字符数。如果在将 count 个字符读入 c 之前已到达流的末尾，则当前方法将返回。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.Read">
            <summary>
            始终抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            始终抛出异常。
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.ReadLine">
            <summary>
            始终抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.Peek">
            <summary>
            始终抛出异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.ReusableStringReader.ReadToEnd">
            <summary>
            读取从当前位置到结尾的所有字符并将它们作为一个字符串返回。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.SegmentInfo">
            <summary>
            段信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.NO">
            <summary>
            无标准化，无删除。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.YES">
            <summary>
            有标准化，有删除。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.CHECK_DIR">
            <summary>
            需要检查文件夹以确认是否有标准化或删除。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.WITHOUT_GEN">
            <summary>
            文件名中无代数信息(GEN)。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.name">
            <summary>
            文件夹中的唯一名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.docCount">
            <summary>
            段中的文档数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.dir">
            <summary>
            持久化段的文件夹。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.preLockless">
            <summary>
            指示段在无锁提交时，是否允许文件写入。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.delGen">
            <summary>
            删除文件的当前代数。如为NO(-1)则无删除。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.normGen">
            <summary>
            每个字段的标准化文件的当前代数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.isCompoundFile">
            <summary>
            指示是否是复合文件。NO = 不是; YES = 是; CHECK_DIR则需要测试文件名是否是 *.cfs 或 *.nrm。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.hasSingleNormFile">
            <summary>
            指示段是否在单一文件中维护标准化信息。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.files">
            <summary>
            在文件夹中段使用的文件缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.sizeInBytes">
            <summary>
            所有文件的总字节数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.docStoreOffset">
            <summary>
            若段共享存储字段及向量，则offset为文件中段的文档存储起始位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.docStoreSegment">
            <summary>
            共享存储段的文档名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.docStoreIsCompoundFile">
            <summary>
            指示文档是否存储于复合文件(*.cfx)中。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.delCount">
            <summary>
            段中删除的文档数量。若为-1表示未知。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentInfo.hasProx">
            <summary>
            指示段是否含有omitTf==false的字段。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.#ctor(System.String,System.Int32,EIIP.SE.Store.Directory)">
            <summary>
            实例化指定的段信息。
            </summary>
            <param name="name">文件夹中的唯一名称。</param>
            <param name="docCount">段中的文档数。</param>
            <param name="dir">持久化段的文件夹。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.#ctor(System.String,System.Int32,EIIP.SE.Store.Directory,System.Boolean,System.Boolean)">
            <summary>
            实例化指定的段信息。
            </summary>
            <param name="name">文件夹中的唯一名称。</param>
            <param name="docCount">段中的文档数。</param>
            <param name="dir">持久化段的文件夹。</param>
            <param name="isCompoundFile">设置是否是复合文件。</param>
            <param name="hasSingleNormFile">设置段是否在单一文件中维护标准化信息。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.#ctor(System.String,System.Int32,EIIP.SE.Store.Directory,System.Boolean,System.Boolean,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            实例化指定的段信息。
            </summary>
            <param name="name">文件夹中的唯一名称。</param>
            <param name="docCount">段中的文档数。</param>
            <param name="dir">持久化段的文件夹。</param>
            <param name="isCompoundFile">设置是否是复合文件。</param>
            <param name="hasSingleNormFile">设置段是否在单一文件中维护标准化信息。</param>
            <param name="docStoreOffset">若段共享存储字段及向量，则offset为文件中段的文档存储起始位置。</param>
            <param name="docStoreSegment">共享存储段的文档名称。</param>
            <param name="docStoreIsCompoundFile">设置文档是否存储于复合文件(*.cfx)中。</param>
            <param name="hasProx">设置段是否含有omitTf==false的字段。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.Reset(EIIP.SE.Index.SegmentInfo)">
            <summary>
            从指定的段信息实例中复制信息。
            </summary>
            <param name="src">源段信息实例</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.#ctor(EIIP.SE.Store.Directory,System.Int32,EIIP.SE.Store.IndexInput)">
            <summary>
            实例化指定的段信息。
            </summary>
            <param name="dir">持久化段的文件夹。</param>
            <param name="format">段信息文件的格式。</param>
            <param name="input">读取段的索引输入器。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.SetNumFields(System.Int32)">
            <summary>
            设置字段数量。
            </summary>
            <param name="numFields">字段数量。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.SizeInBytes">
            <summary>
            获取段内所有字段的总字节数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.AdvanceDelGen">
            <summary>
            递增删除代数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.ClearDelGen">
            <summary>
            清除删除代数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.Clone">
            <summary>
            克隆一份副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.HasSeparateNorms(System.Int32)">
            <summary>
            测试指定字段是否有分隔符标准化文件。
            </summary>
            <param name="fieldNumber">要测试的字段索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.HasSeparateNorms">
            <summary>
            测试所有字段是否有分隔符标准化文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.AdvanceNormGen(System.Int32)">
            <summary>
            增量指定字段的标准化代数。
            </summary>
            <param name="fieldIndex">字段索引</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.GetNormFileName(System.Int32)">
            <summary>
            获取指定字段的标准化文件名。
            </summary>
            <param name="number">字段索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.Write(EIIP.SE.Store.IndexOutput)">
            <summary>
            保存段信息。
            </summary>
            <param name="output">索引输出器</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.Files">
            <summary>
            获取由本实例引用的所有文件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.SegString(EIIP.SE.Store.Directory)">
            <summary>
            段信息字符串。（可用于调试）
            </summary>
            <param name="dir">文件夹</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentInfo.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.HasDeletions">
            <summary>
            获取一个值，该值指示是否存在删除。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.DelFileName">
            <summary>
            获取删除文件名。不存在则返回null。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.UseCompoundFile">
            <summary>
            获取一个值，该值指示是否使用复合文件进行存储。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.DelCount">
            <summary>
            获取段中删除的数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.DocStoreOffset">
            <summary>
            获取或设置文件中段的文档存储起始位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.DocStoreIsCompoundFile">
            <summary>
            获取或设置一个值，该值指示文档是否存储于复合文件(*.cfx)中。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.DocStoreSegment">
            <summary>
            获取共享存储段的文档名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.SegmentInfo.HasProx">
            <summary>
            获取或设置一个值，该值指示段是否含有omitTf==false的字段。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentMergeInfo">
            <summary>
            段合并信息类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMergeInfo.GetDocMap">
            <summary>
            获取已删除的文档地图。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMergeInfo.GetPositions">
            <summary>
            获取位置信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.SegmentMergeQueue">
            <summary>
            段合并优先顺序队列。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentMerger">
            <summary>
            段管理器。用于合并两个或更多的段为一单一的段。若允许复合文件，则这些段将被合并至一个复合文件中。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentMerger.MAX_RAW_MERGE_DOCS">
            <summary>
            最大合并文档数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentMerger.NORMS_HEADER">
            <summary>
            标准化头部。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentMerger.mergeDocStores">
            <summary>
            指示是否合并存储的文档（存储字段与向量的文件）
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMerger.#ctor(EIIP.SE.Store.Directory,System.String)">
            <summary>
            实例化段管理器。仅用于测试。
            </summary>
            <param name="dir">合并段要存储的文件夹</param>
            <param name="name">新的段名</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMerger.Add(EIIP.SE.Index.IndexReader)">
            <summary>
            添加索引阅读器。
            </summary>
            <param name="reader">索引阅读器。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMerger.SegmentReader(System.Int32)">
            <summary>
            获取指定位置的索引阅读器。
            </summary>
            <param name="i">位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMerger.Merge">
            <summary>
            合并索引阅读器。返回合并的数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMerger.CloseReaders">
            <summary> 
            关闭所有的索引阅读器。在合并前不能关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentMerger.CreateCompoundFile(System.String)">
            <summary>
            创建指定的复合文件。
            </summary>
            <param name="fileName">复合文件名称。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.SegmentTermEnum">
            <summary>
            段的分词枚举数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermEnum.scanBuffer">
            <summary>
            用于扫描。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SegmentTermEnum.skipInterval">
            <summary>
            步进间隔。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.#ctor(EIIP.SE.Store.IndexInput,EIIP.SE.Index.FieldInfos,System.Boolean)">
            <summary>
            实例化段的分词枚举数。
            </summary>
            <param name="i">输入器。</param>
            <param name="fis">字段信息</param>
            <param name="isindex">设置是否是索引</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.Clone">
            <summary>
            克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.Next">
            <summary>
            移向下一分词。不存在则返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.ScanTo(EIIP.SE.Index.Term)">
            <summary>
            优化检索，并不分配新分词。
            </summary>
            <param name="term"></param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.Term">
            <summary>
            获取当前分词。在调用 next() 后使用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.Prev">
            <summary>
            返回前一分词。最初为null。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.TermInfo">
            <summary>
            获取当前分词信息。在调用 next() 后使用。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.TermInfo(EIIP.SE.Index.TermInfo)">
            <summary>
            设置当前分词信息属性。在调用 next() 后使用。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.DocFreq">
            <summary>
            获取当前分词的文档频率。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.FreqPointer">
            <summary>
            获取词频指针。在调用 next() 后使用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.ProxPointer">
            <summary>
            获取词性指针。在调用 next() 后使用。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermEnum.Close">
            <summary>
            关闭活动枚举。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentTermPositions">
            <summary>
            段分词位置信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.#ctor(EIIP.SE.Index.SegmentReader)">
            <summary>
            实例化段分词位置信息。
            </summary>
            <param name="p">段阅读器</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.Seek(EIIP.SE.Index.TermInfo,EIIP.SE.Index.Term)">
            <summary>
            定位指定分词信息。
            </summary>
            <param name="ti">分词信息。</param>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.NextPosition">
            <summary>
            获取当前文档的下一位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.SkippingDoc">
            <summary>
            忽略基于指定文档号的文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.Next">
            <summary>
            移向下一个。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.Read(System.Int32[],System.Int32[])">
            <summary>
            尝试从多个文档读取(不支持，始终抛出异常)。
            </summary>
            <param name="docs"></param>
            <param name="freqs"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.SkipProx(System.Int64,System.Int32)">
            <summary>
            忽略指定的后缀流。
            </summary>
            <param name="proxPointer"></param>
            <param name="payloadLength">有效负载长度</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.GetPayloadLength">
            <summary>
            获取有效负载长度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.IsPayloadAvailable">
            <summary>
            获取一个值，该值指示有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositions.GetPayload(System.Byte[],System.Int32)">
            <summary>
            获取有效负载。
            </summary>
            <param name="data">数据</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.SegmentTermPositionVector">
            <summary>
            段分词位置向量类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SegmentTermVector">
            <summary>
            段的分词向量类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.#ctor(System.String,System.String[],System.Int32[])">
            <summary>
            实例化段的分词向量。
            </summary>
            <param name="field">字段名称</param>
            <param name="terms">分词数组</param>
            <param name="termFreqs">分词词频数组</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.GetField">
            <summary>
            获取分词向量关联的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.Size">
            <summary>
            获取分词向量中分词数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.GetTerms">
            <summary>
            依序获取分词文本数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.GetTermFrequencies">
            <summary>
            依序获取分词频率数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.IndexOf(System.String)">
            <summary>
            获取指定分词的索引位置。不存在则返回-1。
            </summary>
            <param name="termText">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.IndexesOf(System.String[],System.Int32,System.Int32)">
            <summary>
            获取指定分词组合的索引位置数组。不存在则返回-1。
            </summary>
            <param name="termNumbers">分词组合</param>
            <param name="start">分词组合的起始位置</param>
            <param name="len">分词组合要查询的数量</param>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermVector.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositionVector.GetOffsets(System.Int32)">
            <summary>
            获取分词向量偏移量信息。
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SegmentTermPositionVector.GetTermPositions(System.Int32)">
            <summary>
            获取分词位置信息。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.SerialMergeScheduler">
            <summary>
            连续的合并调度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SerialMergeScheduler.Merge(EIIP.SE.Index.IndexWriter)">
            <summary>
            合并。
            </summary>
            <param name="writer">索引写入器</param>
        </member>
        <member name="M:EIIP.SE.Index.SerialMergeScheduler.Close">
            <summary>
            关闭调度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SnapshotDeletionPolicy">
            <summary> 
            快照的索引删除策略。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SnapshotDeletionPolicy.#ctor(EIIP.SE.Index.IndexDeletionPolicy)">
            <summary>
            实例化快照的索引删除策略。
            </summary>
            <param name="primary">索引删除策略。</param>
        </member>
        <member name="M:EIIP.SE.Index.SnapshotDeletionPolicy.OnInit(System.Collections.Generic.List{EIIP.SE.Index.IndexCommitPoint})">
            <summary>
            初始化索引删除策略。
            </summary>
            <param name="commits">当前索引事务提交集</param>
        </member>
        <member name="M:EIIP.SE.Index.SnapshotDeletionPolicy.OnCommit(System.Collections.Generic.List{EIIP.SE.Index.IndexCommitPoint})">
            <summary>
            当完成一个删除事务时被触发。以便于删除策略能有机会从事务集中移除旧的提交点。
            </summary>
            <param name="commits">索引事务提交集</param>
        </member>
        <member name="M:EIIP.SE.Index.SnapshotDeletionPolicy.Snapshot">
            <summary>
            快照。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.SnapshotDeletionPolicy.Release">
            <summary>
            释放快照。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SnapshotDeletionPolicy.MyCommitPoint">
            <summary>
            提交点。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.SortedTermVectorMapper">
            <summary>
            分词向量映射器。用于映射分词向量至自定义结构。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.SortedTermVectorMapper.ALL">
            <summary>
            名称。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.SortedTermVectorMapper.#ctor(System.Collections.Generic.IComparer{System.Object})">
            <summary> 
            实例化分词向量映射器。
            </summary>
            <param name="comparator">比较器</param>
        </member>
        <member name="M:EIIP.SE.Index.SortedTermVectorMapper.#ctor(System.Boolean,System.Boolean,System.Collections.Generic.IComparer{System.Object})">
            <summary>
            实例化分词向量映射器。
            </summary>
            <param name="ignoringPositions">设置是否忽略位置</param>
            <param name="ignoringOffsets">设置是否忽略偏移量</param>
            <param name="comparator">比较器</param>
        </member>
        <member name="M:EIIP.SE.Index.SortedTermVectorMapper.Map(System.String,System.Int32,EIIP.SE.Index.TermVectorOffsetInfo[],System.Int32[])">
            <summary>
            映射分词向量至自定义结构。
            </summary>
            <param name="term">分词。</param>
            <param name="frequency">文档中分词词频</param>
            <param name="offsets">偏移量信息</param>
            <param name="positions">位置信息</param>
        </member>
        <member name="M:EIIP.SE.Index.SortedTermVectorMapper.SetExpectations(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            设置预期的值。在返回字段的向量前仅被调用一次，且在 Map(string,int,TermVectorOffsetInfo[],int[]) 前调用。
            </summary>
            <param name="field">向量字段</param>
            <param name="numTerms">要映射的分词数量</param>
            <param name="storeOffsets">映射器是否存储偏移量</param>
            <param name="storePositions">映射器是否存储位置</param>
        </member>
        <member name="M:EIIP.SE.Index.SortedTermVectorMapper.GetTermVectorEntrySet">
            <summary>
            获取分词向量实体集。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.StaleReaderException">
            <summary>
            过期的阅读器异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.StaleReaderException.#ctor(System.String)">
            <summary>
            实例化过期的阅读器异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:EIIP.SE.Index.StoredFieldsWriter">
            <summary>
            存储字段写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.StoredFieldsWriterPerField">
            <summary>
            每个字段的文档字段处理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerField.#ctor(EIIP.SE.Index.StoredFieldsWriterPerThread,EIIP.SE.Index.FieldInfo)">
            <summary>
            实例化每个字段的文档字段处理器。
            </summary>
            <param name="perThread"></param>
            <param name="fieldInfo"></param>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerField.processFields(EIIP.SE.Documents.IFieldable[],System.Int32)">
            <summary>
            处理字段。
            </summary>
            <param name="fields">字段数组</param>
            <param name="count">要处理的数量</param>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerField.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.StoredFieldsWriterPerThread">
            <summary>
            每线程的文档字段处理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerThread.#ctor(EIIP.SE.Index.DocFieldProcessorPerThread,EIIP.SE.Index.StoredFieldsWriter)">
            <summary>
            实例化每线程的文档字段处理器。
            </summary>
            <param name="docFieldProcessorPerThread"></param>
            <param name="storedFieldsWriter"></param>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerThread.startDocument">
            <summary>
            启动文档。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerThread.finishDocument">
            <summary>
            结束文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerThread.abort">
            <summary>
            中止。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.StoredFieldsWriterPerThread.addField(EIIP.SE.Index.FieldInfo)">
            <summary>
            添加指定字段。
            </summary>
            <param name="fieldInfo">字段信息。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.Term">
            <summary>
            分词类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.Term.field">
            <summary>
            分词字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.Term.text">
            <summary>
            分词文本。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.Term.#ctor(System.String,System.String)">
            <summary>
            实例化分词。
            </summary>
            <param name="fld">字段。</param>
            <param name="txt">文本。</param>
        </member>
        <member name="M:EIIP.SE.Index.Term.#ctor(System.String)">
            <summary>
            实例化分词。
            </summary>
            <param name="fld">字段。</param>
        </member>
        <member name="M:EIIP.SE.Index.Term.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            实例化分词。
            </summary>
            <param name="fld">字段。</param>
            <param name="txt">文本。</param>
            <param name="intern">设置是否内联字符串引用</param>
        </member>
        <member name="M:EIIP.SE.Index.Term.CreateTerm(System.String)">
            <summary>
            创建指定分词。
            </summary>
            <param name="text">分词文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Term.Equals(System.Object)">
            <summary>
            确定此实例是否与另一个指定的分词对象具有相同的值。
            </summary>
            <param name="o">分词对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Term.GetHashCode">
            <summary>
            返回该分词的哈希代码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Term.CompareTo(System.Object)">
            <summary>
            比较分词。
            </summary>
            <param name="other">另一分词对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Term.CompareTo(EIIP.SE.Index.Term)">
            <summary>
            比较分词。
            </summary>
            <param name="other">另一分词对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Term.Set(System.String,System.String)">
            <summary>
            设置分词。
            </summary>
            <param name="fld">字段。</param>
            <param name="txt">文本。</param>
        </member>
        <member name="M:EIIP.SE.Index.Term.ToString">
            <summary>
            输出分词信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.Term.GetobjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:EIIP.SE.Index.Term.Field">
            <summary>
            获取分词字段。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.Term.Text">
            <summary>
            获取分词文本。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermBuffer">
            <summary>
            分词缓存类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermBuffer.term">
            <summary>
            缓存的分词。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermBuffer.preUTF8Strings">
            <summary>
            指示字符串是否以"modified UTF-8"编码存储。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermBuffer.dirty">
            <summary>
            指示文本是否被外部修改过。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.CompareTo(EIIP.SE.Index.TermBuffer)">
            <summary>
            比较分词。
            </summary>
            <param name="other">另一分词缓存实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.SetPreUTF8Strings">
            <summary>
            设置字符串以"modified UTF-8"编码存储。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.Read(EIIP.SE.Store.IndexInput,EIIP.SE.Index.FieldInfos)">
            <summary>
            从指定的输入器中读取信息。
            </summary>
            <param name="input">输入器。</param>
            <param name="fieldInfos">字段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.Set(EIIP.SE.Index.Term)">
            <summary>
            设置要缓存的分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.Set(EIIP.SE.Index.TermBuffer)">
            <summary>
            设置要缓存的分词。
            </summary>
            <param name="other">分词缓存。</param>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.ToTerm">
            <summary>
            重置缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermBuffer.Clone">
            <summary>
            克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.TermInfo">
            <summary>
            分词信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfo.docFreq">
            <summary>
            包含分词的文档号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfo.freqPointer">
            <summary>
            词频。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfo.proxPointer">
            <summary>
            词性。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermInfo.#ctor">
            <summary>
            实例化缺省分词信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermInfo.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
            实例化分词信息。
            </summary>
            <param name="df">文档号</param>
            <param name="fp">词频</param>
            <param name="pp">词性</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfo.#ctor(EIIP.SE.Index.TermInfo)">
            <summary>
            实例化分词信息。
            </summary>
            <param name="ti">分词信息。</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfo.Set(System.Int32,System.Int64,System.Int64,System.Int32)">
            <summary>
            设置分词信息。
            </summary>
            <param name="docFreq">文档号</param>
            <param name="freqPointer">词频</param>
            <param name="proxPointer">词性</param>
            <param name="skipOffset"></param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfo.Set(EIIP.SE.Index.TermInfo)">
            <summary>
            设置分词信息。
            </summary>
            <param name="ti">要复制的分词信息源。</param>
        </member>
        <member name="T:EIIP.SE.Index.TermInfosReader">
            <summary>
            只读向前的分词信息阅读器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos)">
            <summary>
            实例化分词信息阅读器。
            </summary>
            <param name="dir">文件夹</param>
            <param name="seg">段</param>
            <param name="fis">字段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos,System.Int32)">
            <summary>
            实例化分词信息阅读器。
            </summary>
            <param name="dir">文件夹</param>
            <param name="seg">段</param>
            <param name="fis">字段信息</param>
            <param name="readBufferSize">缓存尺寸</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.Get(EIIP.SE.Index.Term)">
            <summary>
            获取指定分词在集合中的分词信息。不存在返回null。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.Get(EIIP.SE.Index.Term,System.Boolean)">
            <summary>
            获取指定分词在集合中的分词信息。不存在返回null。
            </summary>
            <param name="term">分词</param>
            <param name="useCache">设置是否使用缓存</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.Get(System.Int32)">
            <summary>
            获取集合中指定位置的分词。不存在返回null。
            </summary>
            <param name="position">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.GetPosition(EIIP.SE.Index.Term)">
            <summary>
            获取集合中指定分词的索引位置。不存在则返回-1。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.Terms">
            <summary>
            获取所有分词枚举数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosReader.Terms(EIIP.SE.Index.Term)">
            <summary>
            获取以指定分词起始的分词枚举数。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermInfosReader.SkipInterval">
            <summary>
            获取步进间隔。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermInfosReader.MaxSkipLevels">
            <summary>
            获取最大步进间隔。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermInfosReader.Size">
            <summary>
            获取尺寸。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermInfosReader.IndexDivisor">
            <summary>
            获取或设置索引因子。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermInfosReader.ThreadResources">
            <summary>
            线程资源类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosReader.ThreadResources.termInfoCache">
            <summary>
            缓存的分词信息。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermInfosWriter">
            <summary>
            只写向前的分词信息写入器。一个分词信息按顺序只写入一次。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosWriter.FORMAT">
            <summary>
            文件的格式化版本号。为一负值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosWriter.FORMAT_VERSION_UTF8_LENGTH_IN_BYTES">
            <summary>
            转换UTF8字符串的版本号。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosWriter.FORMAT_CURRENT">
            <summary>
            当前版本号
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosWriter.indexInterval">
            <summary>
            文件夹中的分词部分会被存储在内存中。
            越小的值使用更多的内存，但检索效率会高些；相对的越大的值使用更少的内存，但检索效率会差些。
            检索一般不受控于文件夹(dictionary)的查询，因此很少调整这个值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosWriter.skipInterval">
            <summary>
            分词文档部分存储于略过的表中，用于加速TermDocs中的SkipTo(int)方法。
            更大的值导致更小的索引，更快的加速，但较少有可加速的案例；
            更小的值导致更大的索引，更慢的加速，但较多有可加速的案例。
            这个值的调整需要更多的测试。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermInfosWriter.maxSkipLevels">
            <summary>
            最大忽略级数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosWriter.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos,System.Int32)">
            <summary>
            实例化分词信息写入器。
            </summary>
            <param name="directory">存储文件夹</param>
            <param name="segment">段名</param>
            <param name="fis">字段信息</param>
            <param name="interval">索引间隔</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosWriter.Add(EIIP.SE.Index.Term,EIIP.SE.Index.TermInfo)">
            <summary>
            添加分词信息。要添加的分词必需大于所有已加入的分词，分词信息指针也必须为正数且大于所有已加入的分词。
            </summary>
            <param name="term">分词</param>
            <param name="ti">分词信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosWriter.Add(System.Int32,System.Byte[],System.Int32,EIIP.SE.Index.TermInfo)">
            <summary>
            添加分词信息。要添加的分词必需大于所有已加入的分词，分词信息指针也必须为正数且大于所有已加入的分词。
            </summary>
            <param name="fieldNumber">字段号。</param>
            <param name="termBytes">分词数据</param>
            <param name="termBytesLength">分词数据长度</param>
            <param name="ti">分词信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermInfosWriter.Close">
            <summary>
            关闭以结束分词信息的创建。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermsHash">
            <summary>
            分词哈希类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermsHashPerThread">
            <summary>
            每线程的分词哈希类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermsHashPerThread.reset(System.Boolean)">
            <summary>
            清除所有状态
            </summary>
            <param name="recyclePostings"></param>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorEntry">
            <summary>
            分词向量实体类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorEntry.#ctor">
            <summary>
            实例化分词向量实体。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorEntry.#ctor(System.String,System.String,System.Int32,EIIP.SE.Index.TermVectorOffsetInfo[],System.Int32[])">
            <summary>
            实例化分词向量实体。
            </summary>
            <param name="field">字段名称</param>
            <param name="term">分词</param>
            <param name="frequency">词频</param>
            <param name="offsets">分词向量偏移量信息数组</param>
            <param name="positions">位置数组</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorEntry.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorEntry.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorEntry.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorEntry.Field">
            <summary>
            获取字段名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorEntry.Frequency">
            <summary>
            获取词频。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorEntry.Offsets">
            <summary>
            获取分词向量偏移量信息数组。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorEntry.Positions">
            <summary>
            获取位置数组
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorEntry.Term">
            <summary>
            获取分词
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorEntryFreqSortedComparator">
            <summary>
            分词向量实体的词频存储比较器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorEntryFreqSortedComparator.Compare(System.Object,System.Object)">
            <summary>
            比较两个对象并返回一个值，指示一个对象是小于、等于还是大于另一个对象。
            </summary>
            <param name="obj1">要比较的第一个 TermVectorEntry 对象。</param>
            <param name="obj2">要比较的第二个 TermVectorEntry 对象。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorOffsetInfo">
            <summary>
            分词向量偏移信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorOffsetInfo.EMPTY_OFFSET_INFO">
            <summary>
            一个空的分词向量偏移信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorOffsetInfo.#ctor">
            <summary>
            实例化分词向量偏移信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorOffsetInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化分词向量偏移信息。
            </summary>
            <param name="startOffset">起始偏移量</param>
            <param name="endOffset">结束偏移量</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorOffsetInfo.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorOffsetInfo.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorOffsetInfo.StartOffset">
            <summary>
            获取或设置起始偏移量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorOffsetInfo.EndOffset">
            <summary>
            获取或设置结束偏移量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsReader">
            <summary>
            分词向量阅读器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsReader.FORMAT_VERSION">
            <summary>
            当有新格式时，需比 FORMAT_CURRENT 大。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsReader.FORMAT_VERSION2">
            <summary>
            加速大容量分词向量合并的版本。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsReader.FORMAT_UTF8_LENGTH_IN_BYTES">
            <summary>
            UTF8字符串版本
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsReader.FORMAT_CURRENT">
            <summary>
            当前版本
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsReader.FORMAT_SIZE">
            <summary>
            版本号在文件中存储的尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsReader.docStoreOffset">
            <summary>
            索引文件中文档存储的偏移量。对于私有文件来说就是0
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos)">
            <summary>
            实例化分词向量阅读器。
            </summary>
            <param name="d">存储文件夹</param>
            <param name="segment">段名</param>
            <param name="fieldInfos">字段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos,System.Int32)">
            <summary>
            实例化分词向量阅读器。
            </summary>
            <param name="d">存储文件夹</param>
            <param name="segment">段名</param>
            <param name="fieldInfos">字段信息</param>
            <param name="readBufferSize">缓存尺寸</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos,System.Int32,System.Int32,System.Int32)">
            <summary>
            实例化分词向量阅读器。
            </summary>
            <param name="d">存储文件夹</param>
            <param name="segment">段名</param>
            <param name="fieldInfos">字段信息</param>
            <param name="readBufferSize">缓存尺寸</param>
            <param name="docStoreOffset">索引文件中文档存储的偏移量。</param>
            <param name="size">尺寸</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.GetTvdStream">
            <summary>
            用于合并时的批量复制。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.GetTvfStream">
            <summary>
            用于合并时的批量复制。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.CanReadRawDocs">
            <summary>
            判断是否能读取原始文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.Get(System.Int32,System.String,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取分词向量。
            </summary>
            <param name="docNum">文档号</param>
            <param name="field">字段</param>
            <param name="mapper">分词向量映射器</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.Get(System.Int32,System.String)">
            <summary>
            获取分词向量。
            </summary>
            <param name="docNum">文档号</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.ReadFields(System.Int32)">
            <summary>
            读取指定数量的字段。
            </summary>
            <param name="fieldCount">字段数量。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.ReadTvfPointers(System.Int32)">
            <summary>
            读取TVF文件中的偏移量数组。
            </summary>
            <param name="fieldCount">字段数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.Get(System.Int32)">
            <summary>
            获取指定文档的所有分词向量。
            </summary>
            <param name="docNum">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.Get(System.Int32,EIIP.SE.Index.TermVectorMapper)">
            <summary>
            获取指定分词向量
            </summary>
            <param name="docNumber">文档号</param>
            <param name="mapper">分词向量映射器</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsReader.Clone">
            <summary>
            克隆。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Index.TermVectorsReader.Size">
            <summary>
            获取阅读器中文档数量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsTermsWriter">
            <summary>
            分词向量的分词写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsTermsWriter.PerDoc">
            <summary>
            每文档写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsTermsWriter.PostingList">
            <summary>
            传递列表类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsTermsWriter.PostingList.freq">
            <summary>
            词频
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsTermsWriter.PostingList.lastOffset">
            <summary>
            出现的最近一次偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Index.TermVectorsTermsWriter.PostingList.lastPosition">
            <summary>
            出现的最近一次位置。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsTermsWriterPerField">
            <summary>
            每字段的分词向量分词写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsTermsWriterPerThread">
            <summary>
            每线程的分词向量写入器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Index.TermVectorsWriter">
            <summary> 
            分词向量输出器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsWriter.#ctor(EIIP.SE.Store.Directory,System.String,EIIP.SE.Index.FieldInfos)">
            <summary>
            实例化分词向量输出器。
            </summary>
            <param name="directory">存储文件夹</param>
            <param name="segment">段名</param>
            <param name="fieldInfos">字段信息</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsWriter.AddAllDocVectors(EIIP.SE.Index.ITermFreqVector[])">
            <summary>
            添加由指定分词向量关联的所有文档的分词。若文档不含分词向量，则从 tvx 添加值。
            </summary>
            <param name="vectors">分词向量</param>
        </member>
        <member name="M:EIIP.SE.Index.TermVectorsWriter.Close">
            <summary>
            关闭所有流。
            </summary>
        </member>
        <member name="T:EIIP.SE.QueryParsers.FastCharStream">
            <summary>
            快速字符流。保持向前读取的指针而并不对行号进行计数。
            </summary>
        </member>
        <member name="T:EIIP.SE.QueryParsers.ICharStream">
            <summary> 
            定义一个字符流的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.ReadChar">
            <summary>
            读取下一字符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.GetEndColumn">
            <summary>
            获取当前标识的最后一个字符的列号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.GetEndLine">
            <summary>
            获取当前标识的最后一个字符的行号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.GetBeginColumn">
            <summary>
            获取当前标识的首个字符的列号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.GetBeginLine">
            <summary>
            获取当前标识的首个字符的行号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.Backup(System.Int32)">
            <summary>
            备份输入流中指定数量的数据。
            </summary>
            <param name="amount">数量</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.BeginToken">
            <summary>
            返回下一个标识的起始字符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.GetImage">
            <summary>
            获取字符映像。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.GetSuffix(System.Int32)">
            <summary> 
            获取指定长度的后缀。
            String t = GetImage();
            t.substring(t.length - len, len).toCharArray();
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ICharStream.Done">
            <summary>
            结束执行。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.FastCharStream.bufferLength">
            <summary>
            缓冲长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.FastCharStream.bufferPosition">
            <summary>
            读取索引位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.FastCharStream.tokenStart">
            <summary>
            标识的起始位置，即缓冲偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.FastCharStream.bufferStart">
            <summary>
            缓冲在文件中的偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.FastCharStream.input">
            <summary>
            字符数据源。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.#ctor(System.IO.TextReader)">
            <summary>
            实例化快速字符流。
            </summary>
            <param name="r">文本读取流</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.ReadChar">
            <summary>
            读取下一字符。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.BeginToken">
            <summary>
            返回下一个标识的起始字符。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.Backup(System.Int32)">
            <summary>
            备份输入流中指定数量的数据。
            </summary>
            <param name="amount">数量</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.GetImage">
            <summary>
            获取字符映像。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.GetSuffix(System.Int32)">
            <summary> 
            获取指定长度的后缀。
            String t = GetImage();
            t.substring(t.length - len, len).toCharArray();
            </summary>
            <param name="len">长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.Done">
            <summary>
            结束执行。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.GetEndColumn">
            <summary>
            获取当前标识的最后一个字符的列号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.GetEndLine">
            <summary>
            获取当前标识的最后一个字符的行号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.GetBeginColumn">
            <summary>
            获取当前标识的首个字符的列号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.FastCharStream.GetBeginLine">
            <summary>
            获取当前标识的首个字符的行号。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.QueryParsers.MultiFieldQueryParser">
            <summary>
            多字段查询解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.QueryParsers.QueryParser">
            <summary>
            查询解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.QueryParsers.QueryParserConstants">
            <summary>
            查询解析器常量类。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.EOF">
            <summary>
            文件结尾
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants._NUM_CHAR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants._ESCAPED_CHAR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants._TERM_START_CHAR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants._TERM_CHAR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants._WHITESPACE">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants._QUOTED_CHAR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.AND">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.OR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.NOT">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.PLUS">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.MINUS">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.LPAREN">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RPAREN">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.COLON">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.STAR">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.CARAT">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.QUOTED">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.TERM">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.FUZZY_SLOP">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.PREFIXTERM">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.WILDTERM">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEIN_START">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEEX_START">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.NUMBER">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEIN_TO">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEIN_END">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEIN_QUOTED">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEIN_GOOP">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEEX_TO">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEEX_END">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEEX_QUOTED">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RANGEEX_GOOP">
            <summary>
            正则表达式ID
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.Boost">
            <summary>
            语法状态
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RangeEx">
            <summary>
            语法状态
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.RangeIn">
            <summary>
            语法状态
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.DEFAULT">
            <summary>
            语法状态
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserConstants.tokenImage">
            <summary>
            标识
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.AND_OPERATOR">
            <summary>
            AND 操作数
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.OR_OPERATOR">
            <summary>
            OR 操作数
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.m_Operator">
            <summary>
            操作数
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.dateResolution">
            <summary>
            默认的日期颗粒度。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.fieldToDateResolution">
            <summary>
            映射字段名称与日期颗粒度的字典。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.rangeCollator">
            <summary>
            范围校对机。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.#ctor(System.String,EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化查询解析器。
            </summary>
            <param name="f">查询分词的默认字段</param>
            <param name="a">分析器</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Parse(System.String)">
            <summary>
            解析查询字符串。
            </summary>
            <param name="query">要解析的查询字符串。</param>
            <throws></throws>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.SetDateResolution(EIIP.Helper.DateTimeHelper.DateConvert.Resolution)">
            <summary>
            设置默认的时间颗粒度。
            </summary>
            <param name="dateResolution">时间颗粒度。</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.SetDateResolution(System.String,EIIP.Helper.DateTimeHelper.DateConvert.Resolution)">
            <summary>
            设置默认的时间颗粒度。
            </summary>
            <param name="fieldName">关联的字段名称</param>
            <param name="dateResolution">时间颗粒度。</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetDateResolution(System.String)">
            <summary>
            获取指定字段的时间颗粒度。
            </summary>
            <param name="fieldName">关联的字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.AddClause(System.Collections.ArrayList,System.Int32,System.Int32,EIIP.SE.Search.Query)">
            <summary>
            添加条件子句。
            </summary>
            <param name="clauses">条件子句。</param>
            <param name="conj">逻辑条件</param>
            <param name="mods">模式</param>
            <param name="q">查询</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetFieldQuery(System.String,System.String)">
            <summary>
            获取字段查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="queryText">查询文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetFieldQuery(System.String,System.String,System.Int32)">
            <summary>
            获取字段查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="queryText">查询文本</param>
            <param name="slop">关键词数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetRangeQuery(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取范围查询实例。
            </summary>
            <param name="field">字段</param>
            <param name="part1">最小值</param>
            <param name="part2">最大值</param>
            <param name="inclusive">设置是否包含边界</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newBooleanQuery(System.Boolean)">
            <summary>
            创建条件查询。
            </summary>
            <param name="disableCoord">设置相似度评分是否不可用</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newBooleanClause(EIIP.SE.Search.Query,EIIP.SE.Search.BooleanClause.Occur)">
            <summary>
            创建布尔查询的子句。
            </summary>
            <param name="q">匹配文档的查询。</param>
            <param name="occur">检索词在匹配文档中的出现方式。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newTermQuery(EIIP.SE.Index.Term)">
            <summary>
            创建分词查询。
            </summary>
            <param name="term">分词。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newPhraseQuery">
            <summary>
            创建缺省短语查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newMultiPhraseQuery">
            <summary>
            创建多短语查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newPrefixQuery(EIIP.SE.Index.Term)">
            <summary>
            创建前缀查询。
            </summary>
            <param name="prefix">前缀分词。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newFuzzyQuery(EIIP.SE.Index.Term,System.Single,System.Int32)">
            <summary>
            创建模糊匹配查询。
            </summary>
            <param name="term">要搜索的分词</param>
            <param name="minimumSimilarity">基于 0 与 1 之间的最小相似度因子。</param>
            <param name="prefixLength">通用(非模糊)前缀长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newRangeQuery(System.String,System.String,System.String,System.Boolean)">
            <summary>
            创建范围查询。
            </summary>
            <param name="field">字体名称</param>
            <param name="part1">最小值</param>
            <param name="part2">最大值</param>
            <param name="inclusive">设置是否包含边界</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newMatchAllDocsQuery">
            <summary>
            创建匹配所有文档的查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.newWildcardQuery(EIIP.SE.Index.Term)">
            <summary>
            创建通配符匹配查询。
            </summary>
            <param name="t">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetBooleanQuery(System.Collections.ArrayList)">
            <summary>
            创建布尔查询。
            </summary>
            <param name="clauses">条件子句</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetBooleanQuery(System.Collections.ArrayList,System.Boolean)">
            <summary>
            创建布尔查询。
            </summary>
            <param name="clauses">条件子句</param>
            <param name="disableCoord">设置相似度评分是否不可用</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetWildcardQuery(System.String,System.String)">
            <summary>
            创建通配符查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="termStr">分词字串（第一个字符不能为'*'或'?'）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetPrefixQuery(System.String,System.String)">
            <summary>
            创建前缀查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="termStr">分词字串（结尾无'*'字符）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetFuzzyQuery(System.String,System.String,System.Single)">
            <summary>
            创建模糊查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="termStr">分词字串（第一个字符不能为'*'或'?'）</param>
            <param name="minSimilarity">最小相似度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Escape(System.String)">
            <summary>
            转义字符串。
            </summary>
            <param name="s">要转义的字符串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Conjunction">
            <summary>
            连接词
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Modifiers">
            <summary>
            修改器
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.TopLevelQuery(System.String)">
            <summary>
            取前几项查询。确认无垃圾查询。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Query(System.String)">
            <summary>
            查询。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Clause(System.String)">
            <summary>
            查询子句。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Term(System.String)">
            <summary>
            分词查询。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.token_source">
            <summary>
            通用标识管理器。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.token">
            <summary>
            当前标识。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.jj_nt">
            <summary>
            下一标识。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.#ctor(EIIP.SE.QueryParsers.ICharStream)">
            <summary>
            实例化查询解析器。
            </summary>
            <param name="stream">字符流</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.ReInit(EIIP.SE.QueryParsers.ICharStream)">
            <summary>
            重新初始化查询解析器。
            </summary>
            <param name="stream">字符流</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.#ctor(EIIP.SE.QueryParsers.QueryParserTokenManager)">
            <summary>
            实例化查询解析器。
            </summary>
            <param name="tm">标识管理器</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.ReInit(EIIP.SE.QueryParsers.QueryParserTokenManager)">
            <summary>
            重新初始化查询解析器。
            </summary>
            <param name="tm">标识管理器</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetNextToken">
            <summary>
            获取下一标识。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GetToken(System.Int32)">
            <summary>
            获取指定标识。
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.GenerateParseException">
            <summary>
            创建解析异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Main(System.String[])">
            <summary>
            供测试
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.Analyzer">
            <summary>
            获取分析器。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.Field">
            <summary>
            获取字段名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.FuzzyMinSim">
            <summary>
            获取或设置模糊查询的最小相似度。默认最小相似度 0.5f
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.FuzzyPrefixLength">
            <summary>
            获取或设置模糊查询的前缀长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.PhraseSlop">
            <summary>
            获取或设置语法的扩展值。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.AllowLeadingWildcard">
            <summary>
            获取或设置一个值，该值指示是否允许前导通配符。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.EnablePositionIncrements">
            <summary>
            获取或设置一个值，该值指示是否允许位置在查询结果中递增。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.DefaultOperator">
            <summary>
            获取或设置默认逻辑操作数。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.LowercaseExpandedTerms">
            <summary>
            获取或设置一个值，该值指示含有通配符、有前缀、模糊的及范围查询的分词是否是小写的。默认为true。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.UseOldRangeQuery">
            <summary>
            获取或设置一个值，该值指示是否使用原来的范围查询。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.Locale">
            <summary>
            获取或设置本地区域文化信息。
            </summary>
        </member>
        <member name="P:EIIP.SE.QueryParsers.QueryParser.RangeCollator">
            <summary>
            获取或设置范围比较器。
            </summary>
        </member>
        <member name="T:EIIP.SE.QueryParsers.QueryParser.Operator">
            <summary>
            逻辑操作数类。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.Operator.OR">
            <summary>
            OR
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParser.Operator.AND">
            <summary>
            AND
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParser.Operator.#ctor(System.String)">
            <summary>
            实例化逻辑操作数。
            </summary>
            <param name="name"></param>
        </member>
        <member name="F:EIIP.SE.QueryParsers.MultiFieldQueryParser.fields">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.MultiFieldQueryParser.boosts">
            <summary>
            相似度因子
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.#ctor(System.String[],EIIP.SE.Analysis.Analyzer,System.Collections.IDictionary)">
            <summary>
            实例化多字段查询解析器。
            </summary>
            <param name="fields">查询分词的字段</param>
            <param name="analyzer">分析器</param>
            <param name="boosts">相似度因子</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.#ctor(System.String[],EIIP.SE.Analysis.Analyzer)">
            <summary>
            实例化多字段查询解析器。
            </summary>
            <param name="fields">查询分词的字段</param>
            <param name="analyzer">分析器</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.GetFieldQuery(System.String,System.String,System.Int32)">
            <summary>
            获取字段查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="queryText">查询文本</param>
            <param name="slop">关键词数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.GetFieldQuery(System.String,System.String)">
            <summary>
            获取字段查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="queryText">查询文本</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.GetFuzzyQuery(System.String,System.String,System.Single)">
            <summary>
            创建模糊查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="termStr">分词字串（第一个字符不能为'*'或'?'）</param>
            <param name="minSimilarity">最小相似度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.GetPrefixQuery(System.String,System.String)">
            <summary>
            创建前缀查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="termStr">分词字串（结尾无'*'字符）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.GetWildcardQuery(System.String,System.String)">
            <summary>
            创建通配符查询实例。
            </summary>
            <param name="field">字段名称</param>
            <param name="termStr">分词字串（第一个字符不能为'*'或'?'）</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.GetRangeQuery(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取范围查询实例。
            </summary>
            <param name="field">字段</param>
            <param name="part1">最小值</param>
            <param name="part2">最大值</param>
            <param name="inclusive">设置是否包含边界</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.Parse(System.String[],System.String[],EIIP.SE.Analysis.Analyzer)">
            <summary>
            解析查询。
            </summary>
            <param name="queries">要解析的查询字串数组</param>
            <param name="fields">要搜索的字段</param>
            <param name="analyzer">分析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.Parse(System.String,System.String[],EIIP.SE.Search.BooleanClause.Occur[],EIIP.SE.Analysis.Analyzer)">
            <summary>
            解析查询。
            </summary>
            <param name="query">要解析的查询字串</param>
            <param name="fields">要搜索的字段</param>
            <param name="flags">字段匹配方式</param>
            <param name="analyzer">分析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.MultiFieldQueryParser.Parse(System.String[],System.String[],EIIP.SE.Search.BooleanClause.Occur[],EIIP.SE.Analysis.Analyzer)">
            <summary>
            解析查询。
            </summary>
            <param name="queries">要解析的查询字串</param>
            <param name="fields">要搜索的字段</param>
            <param name="flags">字段匹配方式</param>
            <param name="analyzer">分析器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.QueryParsers.ParseException">
            <summary>
            当解析错误时抛出的异常。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.ParseException.specialConstructor">
            <summary>
            指示构造器是否被用于创建该对象，从而影响 getMessage 方法的语义。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.ParseException.currentToken">
            <summary>
            当前标识。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.ParseException.expectedTokenSequences">
            <summary>
            预期的标识序列。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.ParseException.tokenImage">
            <summary>
            标识映像数组。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.ParseException.eol">
            <summary>
            行结束符。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ParseException.#ctor">
            <summary>
            实例化解析异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ParseException.#ctor(System.String)">
            <summary>
            实例化解析异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ParseException.#ctor(EIIP.SE.QueryParsers.Token,System.Int32[][],System.String[])">
            <summary>
            实例化解析异常。
            </summary>
            <param name="currentTokenVal">当前标识</param>
            <param name="expectedTokenSequencesVal">预期的标识序列</param>
            <param name="tokenImageVal">标识映像数组</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.ParseException.Add_escapes(System.String)">
            <summary>
            获取指定字符串的转义后的版本。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.QueryParsers.ParseException.Message">
            <summary>
            获取描述当前异常的消息。
            </summary>
        </member>
        <member name="T:EIIP.SE.QueryParsers.QueryParserTokenManager">
            <summary>
            查询解析器标识管理器。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserTokenManager.DebugStream">
            <summary>
            调试流。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserTokenManager.jjstrLiteralImages">
            <summary>
            标识值。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserTokenManager.lexStateNames">
            <summary>
            语法状态名称。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserTokenManager.jjnewLexState">
            <summary>
            语法状态。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserTokenManager.m_InputStream">
            <summary>
            输入流。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.QueryParserTokenManager.curChar">
            <summary>
            当前字符
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.#ctor(EIIP.SE.QueryParsers.ICharStream)">
            <summary>
            实例化查询解析器标识管理器。
            </summary>
            <param name="stream">标识字符输入流。</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.#ctor(EIIP.SE.QueryParsers.ICharStream,System.Int32)">
            <summary>
            实例化查询解析器标识管理器。
            </summary>
            <param name="stream">标识字符输入流。</param>
            <param name="lexState">语法状态</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.ReInit(EIIP.SE.QueryParsers.ICharStream)">
            <summary>
            重新初始化查询解析器标识管理器。
            </summary>
            <param name="stream">标识字符输入流</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.ReInit(EIIP.SE.QueryParsers.ICharStream,System.Int32)">
            <summary>
            重新初始化查询解析器标识管理器。
            </summary>
            <param name="stream">标识字符输入流</param>
            <param name="lexState">语法状态</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.SwitchTo(System.Int32)">
            <summary>
            切换至指定语法状态。
            </summary>
            <param name="lexState">语法状态</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.JjFillToken">
            <summary>
            填充标识。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.QueryParserTokenManager.GetNextToken">
            <summary>
            获取下一标识。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.QueryParsers.Token">
            <summary>
            输入流的标识类。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.kind">
            <summary>
            一个用于指示标识类型的整型数据。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.beginLine">
            <summary>
            标识首个字符的行位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.beginColumn">
            <summary>
            标识首个字符的列位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.endLine">
            <summary>
            标识最后一个字符的行位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.endColumn">
            <summary>
            标识最后一个字符的列位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.image">
            <summary>
            标识的映像。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.next">
            <summary>
            下一关联标识。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.Token.specialToken">
            <summary>
            特定的标识。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.#ctor">
            <summary>
            实例化默认的标识
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.#ctor(System.Int32)">
            <summary>
            实例经指定标识。
            </summary>
            <param name="kind">指示标识类型的整型数据</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.#ctor(System.Int32,System.String)">
            <summary>
            实例经指定标识。
            </summary>
            <param name="kind">指示标识类型的整型数据</param>
            <param name="image"></param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.GetValue">
            <summary>
            获取值。总是返回null。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.ToString">
            <summary>
            获取标识的映像。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.NewToken(System.Int32,System.String)">
            <summary>
            创建新标识。
            </summary>
            <param name="ofKind">指示标识类型的整型数据。</param>
            <param name="image">标识的映像。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.Token.NewToken(System.Int32)">
            <summary>
            创建新标识。
            </summary>
            <param name="ofKind">指示标识类型的整型数据。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.QueryParsers.TokenMgrError">
            <summary>
            标识管理器发生非致命应用程序错误时引发的异常。
            </summary>	
        </member>
        <member name="F:EIIP.SE.QueryParsers.TokenMgrError.LEXICAL_ERROR">
            <summary>
            语法错误。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.TokenMgrError.STATIC_LEXER_ERROR">
            <summary>
            试图创建第二个静态标识管理器时发生的错误。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.TokenMgrError.INVALID_LEXICAL_STATE">
            <summary>
            试图变更至一个非法的语法状态时发生的错误。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.TokenMgrError.LOOP_DETECTED">
            <summary>
            检测到无限循环时发生的错误。
            </summary>
        </member>
        <member name="F:EIIP.SE.QueryParsers.TokenMgrError.errorCode">
            <summary>
            错误代码。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.TokenMgrError.#ctor">
            <summary>
            实例化标识管理器发生非致命应用程序错误时引发的异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.QueryParsers.TokenMgrError.#ctor(System.String,System.Int32)">
            <summary>
            实例化标识管理器发生非致命应用程序错误时引发的异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="reason">异常代码</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.TokenMgrError.#ctor(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Char,System.Int32)">
            <summary>
            实例化标识管理器发生非致命应用程序错误时引发的异常。
            </summary>
            <param name="eofSeen">指示是否因EOF引发了语法错误</param>
            <param name="lexState">发生错误时的语法状态</param>
            <param name="errorLine">发生错误时的行号</param>
            <param name="errorColumn">发生错误时的列号</param>
            <param name="errorAfter">错误发生时的前缀</param>
            <param name="curChar">当前字符</param>
            <param name="reason">异常代码</param>
        </member>
        <member name="M:EIIP.SE.QueryParsers.TokenMgrError.addEscapes(System.String)">
            <summary>
            添加转义字符串。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.QueryParsers.TokenMgrError.LexicalError(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Char)">
            <summary>
            获取语法错误信息。
            </summary>
            <param name="EOFSeen">指示是否因EOF引发了语法错误</param>
            <param name="lexState">发生错误时的语法状态</param>
            <param name="errorLine">发生错误时的行号</param>
            <param name="errorColumn">发生错误时的列号</param>
            <param name="errorAfter">错误发生时的前缀</param>
            <param name="curChar">当前字符</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.QueryParsers.TokenMgrError.Message">
            <summary>
            获取错误消息。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.BooleanClause">
            <summary>
            布尔查询的子句类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanClause.m_Query">
            <summary>
            匹配文档的查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanClause.m_Occur">
            <summary>
            检索词在匹配文档中的出现方式。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.BooleanClause.#ctor(EIIP.SE.Search.Query,EIIP.SE.Search.BooleanClause.Occur)">
            <summary>
            实例化布尔查询的子句。
            </summary>
            <param name="query">匹配文档的查询。</param>
            <param name="occur">检索词在匹配文档中的出现方式。</param>
        </member>
        <member name="M:EIIP.SE.Search.BooleanClause.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o">要比较的对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanClause.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanClause.ToString">
            <summary>
            输出布尔查询的子句信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.BooleanClause.Query">
            <summary>
            获取或设置匹配文档的查询。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanClause.occur">
            <summary>
            获取或设置检索词在匹配文档中的出现方式。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanClause.IsProhibited">
            <summary>
            获取一个值，该值指示检索词在查询中是否是被禁止出现的。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanClause.IsRequired">
            <summary>
            获取一个值，该值指示检索词在查询中是否是必须出现的。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.BooleanClause.Occur">
            <summary>
            指定检索词在匹配文档中的出现方式的类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanClause.Occur.MUST">
            <summary>
            逻辑与。使用该操作符指示检索词“必须”出现在匹配文档中。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanClause.Occur.SHOULD">
            <summary>
            逻辑或。使用该操作符指示检索词“应该”出现在匹配文档中。
            若在 BooleanQuery 中有两个 SHOULD，则至少有一个必须出现在匹配文档中。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanClause.Occur.MUST_NOT">
            <summary>
            逻辑非。使用该操作符指示检索词“都不能”出现在匹配文档中。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.BooleanClause.Occur.#ctor(System.String)">
            <summary>
            实例化指定检索词在匹配文档中的出现方式。
            </summary>
            <param name="name">逻辑操作符名称</param>
        </member>
        <member name="M:EIIP.SE.Search.BooleanClause.Occur.ToString">
            <summary>
            输出逻辑操作符信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.BooleanScorer">
            <summary>
            布尔量评分器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Scorer">
            <summary>
            不同类型查询的评分基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.DocIdSetIterator">
            <summary>
            文档ID集迭代器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.DocIdSetIterator.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.DocIdSetIterator.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DocIdSetIterator.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Scorer.#ctor(EIIP.SE.Search.Similarity)">
            <summary>
            实例化指定查询评分。
            </summary>
            <param name="similarity">相似度实例</param>
        </member>
        <member name="M:EIIP.SE.Search.Scorer.Score(EIIP.SE.Search.HitCollector)">
            <summary>
            评分并收集所有匹配文档。
            </summary>
            <param name="hc">要收集的匹配文档。</param>
        </member>
        <member name="M:EIIP.SE.Search.Scorer.Score(EIIP.SE.Search.HitCollector,System.Int32)">
            <summary>
            评分并收集所有匹配文档。若还有文档没处理则返回true。
            </summary>
            <param name="hc">要收集的匹配文档。</param>
            <param name="max">要处理的最大文档数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Scorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Scorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Scorer.Similarity">
            <summary>
            获取相似度实例。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.HitCollector">
            <summary>
            点击计数器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.HitCollector.Collect(System.Int32,System.Single)">
            <summary>
            点击计数。
            </summary>
            <param name="doc">文档号</param>
            <param name="score">评分</param>
        </member>
        <member name="T:EIIP.SE.Search.DisjunctionSumScorer">
            <summary>
            分离的和(OR)的评分器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionSumScorer.nrScorers">
            <summary>
            子评分器的数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionSumScorer.subScorers">
            <summary>
            子评分器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionSumScorer.minimumNrMatchers">
            <summary>
            最小匹配的评分器数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionSumScorer.scorerDocQueue">
            <summary>
            评分器队列。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionSumScorer.currentDoc">
            <summary>
            匹配的当前文档号
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionSumScorer.nrMatchers">
            <summary>
            当前匹配的子评分器数量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.#ctor(System.Collections.IList,System.Int32)">
            <summary>
            实例化分离的和(OR)的评分器。
            </summary>
            <param name="subScorers">子评分器（至少要有两个）</param>
            <param name="minimumNrMatchers">最小匹配的评分器数量。</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.#ctor(System.Collections.IList)">
            <summary>
            实例化分离的和(OR)的评分器。
            </summary>
            <param name="subScorers">子评分器（至少要有两个）</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.Score(EIIP.SE.Search.HitCollector)">
            <summary>
            评分并收集所有匹配文档。
            </summary>
            <param name="hc">要收集的匹配文档。</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.Score(EIIP.SE.Search.HitCollector,System.Int32)">
            <summary>
            评分并收集所有匹配文档。若还有文档没处理则返回true。
            </summary>
            <param name="hc">要收集的匹配文档。</param>
            <param name="max">要处理的最大文档数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.AdvanceAfterCurrent">
            <summary>
            步进。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.NrMatchers">
            <summary>
            获取当前匹配的子评分器数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionSumScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.ConjunctionScorer">
            <summary>
            联合评分器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ComplexExplanation">
            <summary>
            复合的文档与查询的评分计算描述类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Explanation">
            <summary>
            文档与查询的评分计算描述类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Explanation.m_Value">
            <summary>
            节点值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Explanation.m_Description">
            <summary>
            描述。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Explanation.m_Details">
            <summary>
            细节描述。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.#ctor">
            <summary>
            实例化文档与查询的评分计算描述。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.#ctor(System.Single,System.String)">
            <summary>
            实例化文档与查询的评分计算描述。
            </summary>
            <param name="v">值</param>
            <param name="description">描述信息</param>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.IsMatch">
            <summary>
            判断是否匹配。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.GetSummary">
            <summary>
            获取摘要。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.AddDetail(EIIP.SE.Search.Explanation)">
            <summary>
            添加描述子节点。
            </summary>
            <param name="detail">描述子节点。</param>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.ToString">
            <summary>
            输出描述信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.ToString(System.Int32)">
            <summary>
            输出描述信息。
            </summary>
            <param name="depth">深度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Explanation.ToHtml">
            <summary>
            以HTML格式输出描述信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Explanation.Value">
            <summary>
            获取或设置节点值。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.Explanation.Description">
            <summary>
            获取或设置描述信息。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.Explanation.Details">
            <summary>
            获取细节描述。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ComplexExplanation.#ctor">
            <summary>
            实例化复合的文档与查询的评分计算描述。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ComplexExplanation.#ctor(System.Boolean,System.Single,System.String)">
            <summary>
            实例化指定复合的文档与查询的评分计算描述。
            </summary>
            <param name="match">设置描述节点的匹配状态。</param>
            <param name="v">值</param>
            <param name="description">描述信息</param>
        </member>
        <member name="M:EIIP.SE.Search.ComplexExplanation.IsMatch">
            <summary>
            判断是否匹配。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ComplexExplanation.GetSummary">
            <summary>
            获取摘要。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.ComplexExplanation.Match">
            <summary>
            获取或设置一个值，该值指示描述节点的匹配状态。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.DefaultSimilarity">
            <summary>
            默认相似度类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Similarity">
            <summary>
            相似度类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Similarity.defaultImpl">
            <summary>
            默认相似度实例。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Similarity.NORM_TABLE">
            <summary>
            译码表。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.DecodeNorm(System.Byte)">
            <summary>
            获取指定字节的标准化因子。
            </summary>
            <param name="b">字节数据</param>
            <returns></returns>
            <seealso cref="M:EIIP.SE.Search.Similarity.EncodeNorm(System.Single)"/>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.GetNormDecoder">
            <summary>
            获取指定标准化因子的字节数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.LengthNorm(System.String,System.Int32)">
            <summary>
            计算指定字段及其分词量的标准化因子。
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="numTokens">字段分词量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.QueryNorm(System.Single)">
            <summary>
            计算每个查询分词比重平方的标准化因子。
            </summary>
            <param name="sumOfSquaredWeights">查询分词的比重平方</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.EncodeNorm(System.Single)">
            <summary>
            获取指定标准化因子的字节数据。
            </summary>
            <param name="f">标准化因子</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.Tf(System.Int32)">
            <summary>
            基于分词或短语在文档中的频率计算得分因子。
            </summary>
            <param name="freq">分词或短语在文档中的频率</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.SloppyFreq(System.Int32)">
            <summary>
            基于编辑距离计算词组匹配量。
            </summary>
            <param name="distance">编辑距离</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.Tf(System.Single)">
            <summary>
            基于分词或短语在文档中的频率计算得分因子。
            </summary>
            <param name="freq">分词或短语在文档中的频率</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.Idf(EIIP.SE.Index.Term,EIIP.SE.Search.Searcher)">
            <summary>
            计算简单分词的评分因子。
            </summary>
            <param name="term">分词</param>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.Idf(System.Collections.ICollection,EIIP.SE.Search.Searcher)">
            <summary>
            计算简单短语的评分因子。
            </summary>
            <param name="terms">分词</param>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.Idf(System.Int32,System.Int32)">
            <summary>
            基于分词在文档中的频率计算评分因子。
            </summary>
            <param name="docFreq">分词在文档中的频率</param>
            <param name="numDocs">文档在集合中的数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.Coord(System.Int32,System.Int32)">
            <summary>
            基于文档中所有查询的因子计算评分因子。
            </summary>
            <param name="overlap">文档中匹配的查询分词</param>
            <param name="maxOverlap">查询中最大的分词数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Similarity.ScorePayload(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            基于有效负载中的数据计算评分因子。
            </summary>
            <param name="fieldName">有效负载所在分词的字段名称</param>
            <param name="payload">将被评分的有效负载数据</param>
            <param name="offset">有效负载数据偏移量</param>
            <param name="length">有效负载数据长度</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Similarity.Default">
            <summary>
            获取或设置默认相似度实例。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.DefaultSimilarity.LengthNorm(System.String,System.Int32)">
            <summary>
            计算指定字段及其分词量的标准化因子。
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="numTerms">字段分词量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DefaultSimilarity.QueryNorm(System.Single)">
            <summary>
            计算每个查询分词比重平方的标准化因子。
            </summary>
            <param name="sumOfSquaredWeights">查询分词的比重平方</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DefaultSimilarity.Tf(System.Single)">
            <summary>
            基于分词或短语在文档中的频率计算得分因子。
            </summary>
            <param name="freq">分词或短语在文档中的频率</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DefaultSimilarity.SloppyFreq(System.Int32)">
            <summary>
            基于编辑距离计算词组匹配量。
            </summary>
            <param name="distance">编辑距离</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DefaultSimilarity.Idf(System.Int32,System.Int32)">
            <summary>
            基于分词在文档中的频率计算评分因子。
            </summary>
            <param name="docFreq">分词在文档中的频率</param>
            <param name="numDocs">文档在集合中的数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DefaultSimilarity.Coord(System.Int32,System.Int32)">
            <summary>
            基于文档中所有查询的因子计算评分因子。
            </summary>
            <param name="overlap">文档中匹配的查询分词</param>
            <param name="maxOverlap">查询中最大的分词数量</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.DocIdSet">
            <summary>
            文档ID集基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.DocIdSet.Iterator">
            <summary>
            获取文档ID集迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.ExtendedFieldCacheImpl">
            <summary> 
            扩展的字段缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.FieldCacheImpl">
            <summary>
            字段缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IFieldCache">
            <summary>
            定义字段缓存的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetBytes(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetBytes(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IByteParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetShorts(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetShorts(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IShortParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetInts(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetInts(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IIntParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetFloats(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetFloats(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IFloatParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetStrings(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetStringIndex(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段索引数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetAuto(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IFieldCache.GetCustom(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.SortComparator)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="comparator">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.#ctor">
            <summary>
            实例化字段缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.Close(EIIP.SE.Index.IndexReader)">
            <summary>
            关闭。
            </summary>
            <param name="reader">索引阅读器。</param>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetBytes(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetBytes(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IByteParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetShorts(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetShorts(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IShortParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetInts(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetInts(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IIntParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetFloats(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetFloats(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IFloatParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetStrings(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetStringIndex(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段索引数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetAuto(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.GetCustom(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.SortComparator)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="comparator">比较器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FieldCacheImpl.AnonymousClassByteParser">
            <summary>
            字节数据解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IByteParser">
            <summary>
            定义从文档字段中解析字节数据的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IByteParser.ParseByte(System.String)">
            <summary>
            解析字节数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.AnonymousClassByteParser.ParseByte(System.String)">
            <summary>
            解析字节数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FieldCacheImpl.AnonymousClassShortParser">
            <summary>
            短整型数据解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IShortParser">
            <summary>
            定义从文档字段中解析短整型数据的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IShortParser.ParseShort(System.String)">
            <summary>
            解析短整型数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.AnonymousClassShortParser.ParseShort(System.String)">
            <summary>
            解析短整型数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FieldCacheImpl.AnonymousClassIntParser">
            <summary>
            整型数据解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IIntParser">
            <summary>
            定义从文档字段中解析整型数据的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IIntParser.ParseInt(System.String)">
            <summary>
            解析整型数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.AnonymousClassIntParser.ParseInt(System.String)">
            <summary>
            解析整型数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FieldCacheImpl.AnonymousClassFloatParser">
            <summary>
            浮点数据解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IFloatParser">
            <summary>
            定义从文档字段中解析浮点数据的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IFloatParser.ParseFloat(System.String)">
            <summary>
            解析浮点数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldCacheImpl.AnonymousClassFloatParser.ParseFloat(System.String)">
            <summary>
            解析浮点数据。
            </summary>
            <param name="str">字段值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.IExtendedFieldCache">
            <summary>
            定义扩展字段缓存的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IExtendedFieldCache.GetLongs(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IExtendedFieldCache.GetLongs(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.ILongParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IExtendedFieldCache.GetDoubles(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IExtendedFieldCache.GetDoubles(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IDoubleParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.#ctor">
            <summary>
            实例化扩展的字段缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.GetLongs(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.GetLongs(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.ILongParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.GetDoubles(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.GetDoubles(EIIP.SE.Index.IndexReader,System.String,EIIP.SE.Search.IDoubleParser)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <param name="parser">解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.GetAuto(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            获取指定字段数据。
            </summary>
            <param name="reader">获取字段值的阅读器。</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.ExtendedFieldCacheImpl.AnonymousClassLongParser">
            <summary>
            长整型解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ILongParser">
            <summary>
            定义长整型解析器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ILongParser.ParseLong(System.String)">
            <summary>
            解析长整型字段值。
            </summary>
            <param name="str">字段值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.AnonymousClassLongParser.ParseLong(System.String)">
            <summary>
            解析长整型字段值。
            </summary>
            <param name="str">字段值。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.ExtendedFieldCacheImpl.AnonymousClassDoubleParser">
            <summary>
            双精度解析器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IDoubleParser">
            <summary>
            定义双精度解析器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IDoubleParser.ParseDouble(System.String)">
            <summary>
            解析双精度字段值。
            </summary>
            <param name="str">字段值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExtendedFieldCacheImpl.AnonymousClassDoubleParser.ParseDouble(System.String)">
            <summary>
            解析双精度字段值。
            </summary>
            <param name="str">字段值。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FieldDoc">
            <summary>
            字段的评分文档信息类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ScoreDoc">
            <summary>
            评分文档信息类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.ScoreDoc.score">
            <summary>
            查询的文档评分。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.ScoreDoc.doc">
            <summary>
            点击的文档号。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ScoreDoc.#ctor(System.Int32,System.Single)">
            <summary>
            实例化评分文档信息。
            </summary>
            <param name="doc">点击的文档号。</param>
            <param name="score">查询的文档评分。</param>
        </member>
        <member name="F:EIIP.SE.Search.FieldDoc.fields">
            <summary>
            字段数组。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FieldDoc.#ctor(System.Int32,System.Single)">
            <summary>
            实例化字段的评分文档信息。
            </summary>
            <param name="doc">文档号</param>
            <param name="score">评分</param>
        </member>
        <member name="M:EIIP.SE.Search.FieldDoc.#ctor(System.Int32,System.Single,System.IComparable[])">
            <summary>
            实例化字段的评分文档信息。
            </summary>
            <param name="doc">文档号</param>
            <param name="score">评分</param>
            <param name="fields">字段数组</param>
        </member>
        <member name="T:EIIP.SE.Search.FieldSortedHitQueue">
            <summary>
            按分词点击率的字段存储队列。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FieldSortedHitQueue.comparators">
            <summary>
            评分文档比较器数组。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FieldSortedHitQueue.fields">
            <summary>
            排序字段数组。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FieldSortedHitQueue.maxscore">
            <summary>
            存储的最大评分。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FieldSortedHitQueue.Comparators">
            <summary>
            缓存的比较器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Search.SortField[],System.Int32)">
            <summary>
            实例化按分词点击率的字段存储队列。
            </summary>
            <param name="reader">索引阅读器。</param>
            <param name="fields">排序字段数组</param>
            <param name="size">命中数量，必须大于零</param>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.GetMaxScore">
            <summary>
            获取存储的最大评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.Insert(EIIP.SE.Search.FieldDoc)">
            <summary>
            插入指定的字段文档。成功返回true。
            </summary>
            <param name="fdoc">要插入的字段文档。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.Insert(System.Object)">
            <summary>
            插入指定元素。成功返回true。
            </summary>
            <param name="fdoc">要插入的字段文档。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.InsertWithOverflow(System.Object)">
            <summary>
            (无溢出)插入指定元素。返回弹出(如果队列满时)元素或null。
            </summary>
            <param name="element">要插入的元素。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.LessThan(System.Object,System.Object)">
            <summary>
            小于测试。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FieldSortedHitQueue.GetFields">
            <summary>
            获取排序字段数组。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.IScoreDocComparator">
            <summary>
            定义评分文档比较器的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IScoreDocComparator.Compare(EIIP.SE.Search.ScoreDoc,EIIP.SE.Search.ScoreDoc)">
            <summary>
            比较两个评分文档。
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IScoreDocComparator.SortValue(EIIP.SE.Search.ScoreDoc)">
            <summary>
            获取指定评分文档的可比较对象。
            </summary>
            <param name="i">评分文档。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IScoreDocComparator.SortType">
            <summary>
            获取排序类型。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FilteredTermEnum">
            <summary>
            过滤的分词枚举数基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.#ctor">
            <summary>
            实例化过滤的分词枚举数基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.TermCompare(EIIP.SE.Index.Term)">
            <summary>
            分词比较。
            </summary>
            <param name="term">要比较的分词。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.Difference">
            <summary>
            获取差异度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.EndEnum">
            <summary>
            判断是否已到达枚举尾部。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.SetEnum(EIIP.SE.Index.TermEnum)">
            <summary>
            设置指定分词枚举数。
            </summary>
            <param name="actualEnum">分词枚举数。</param>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.DocFreq">
            <summary>
            获取当前分词的文档频率。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.Next">
            <summary>
            移向下一分词。不存在则返回false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.Term">
            <summary>
            获取当前分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredTermEnum.Close">
            <summary>
            关闭活动枚举。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.FilterManager">
            <summary>
            过滤器管理器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.DEFAULT_CACHE_CLEAN_SIZE">
            <summary>
            缓存的过滤器的最小数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.DEFAULT_CACHE_SLEEP_TIME">
            <summary>
            默认的缓存清理的间隔。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.manager">
            <summary>
            过滤器管理器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.cache">
            <summary>
            缓存
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.cacheCleanSize">
            <summary>
            允许的最大缓存尺寸。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.cleanSleepTime">
            <summary>
            缓存清理的间隔。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.filterCleaner">
            <summary>
            在特定的线程上运行的缓存清理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.GetInstance">
            <summary>
            获取过滤器管理器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.#ctor">
            <summary>
            实例化过滤器管理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.SetCacheSize(System.Int32)">
            <summary>
            设置缓存尺寸。
            </summary>
            <param name="cacheCleanSize">缓存尺寸。</param>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.SetCleanThreadSleepTime(System.Int64)">
            <summary>
            设置清理线程休息时间。
            </summary>
            <param name="cleanSleepTime">清理线程休息时间。</param>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.GetFilter(EIIP.SE.Search.Filter)">
            <summary>
            获取过滤器缓存版本。
            </summary>
            <param name="filter">过滤器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FilterManager.FilterItem">
            <summary>
            过滤器项类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.FilterItem.filter">
            <summary>
            过滤器
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FilterManager.FilterItem.timestamp">
            <summary>
            时间戳。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.FilterItem.#ctor(EIIP.SE.Search.FilterManager,EIIP.SE.Search.Filter)">
            <summary>
            实例化过滤器项。
            </summary>
            <param name="manager">过滤器管理器</param>
            <param name="filter">过滤器</param>
        </member>
        <member name="P:EIIP.SE.Search.FilterManager.FilterItem.FilterManager">
            <summary>
            获取过滤器管理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.FilterManager.FilterCleaner">
            <summary>
            过滤器缓存清理器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.FilterCleaner.#ctor(EIIP.SE.Search.FilterManager)">
            <summary>
            实例化过滤器缓存清理器。
            </summary>
            <param name="manager">过滤器管理器</param>
        </member>
        <member name="M:EIIP.SE.Search.FilterManager.FilterCleaner.Run">
            <summary>
            执行清理。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.FilterManager.FilterCleaner.FilterManager">
            <summary>
            获取过滤器管理器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.CachingSpanFilter">
            <summary>
            范围筛选器的缓存包装类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.SpanFilter">
            <summary>
            范围筛选器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Filter">
            <summary>
            筛选器基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Filter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Filter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SpanFilter.BitSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围筛选器结果。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Search.CachingSpanFilter.filter">
            <summary>
            范围筛选器
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.CachingSpanFilter.cache">
            <summary>
            筛选器的缓存
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.#ctor(EIIP.SE.Search.SpanFilter)">
            <summary>
            实例化范围筛选器的缓存包装。
            </summary>
            <param name="filter">筛选器</param>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.BitSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围筛选器结果。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingSpanFilter.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.CachingWrapperFilter">
            <summary>
            筛选器的缓存包装类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.CachingWrapperFilter.filter">
            <summary>
            筛选器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.CachingWrapperFilter.cache">
            <summary>
            筛选器的缓存
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.CachingWrapperFilter.#ctor(EIIP.SE.Search.Filter)">
            <summary>
            实例化筛选器的缓存包装。
            </summary>
            <param name="filter">筛选器</param>
        </member>
        <member name="M:EIIP.SE.Search.CachingWrapperFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingWrapperFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingWrapperFilter.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingWrapperFilter.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.CachingWrapperFilter.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.RangeFilter">
            <summary>
            限制搜索结果在指定范围的筛选器类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            实例化限制搜索结果在指定范围的筛选器。
            </summary>
            <param name="fieldName">范围应用的字段名称</param>
            <param name="lowerTerm">范围的最小分词。</param>
            <param name="upperTerm">范围的最大分词。</param>
            <param name="includeLower">设置是否包含最小分词</param>
            <param name="includeUpper">设置是否包含最大分词</param>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Globalization.CompareInfo)">
            <summary>
            实例化限制搜索结果在指定范围的筛选器。
            </summary>
            <param name="fieldName">范围应用的字段名称</param>
            <param name="lowerTerm">范围的最小分词。</param>
            <param name="upperTerm">范围的最大分词。</param>
            <param name="includeLower">设置是否包含最小分词</param>
            <param name="includeUpper">设置是否包含最大分词</param>
            <param name="collator">比较器</param>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.Less(System.String,System.String)">
            <summary>
            获取小于等于指定最大分词的筛选器。
            </summary>
            <param name="fieldName">要匹配的字段名称</param>
            <param name="upperTerm">最大分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.More(System.String,System.String)">
            <summary>
            获取大于等于指定最小分词的筛选器。
            </summary>
            <param name="fieldName">要匹配的字段名称</param>
            <param name="lowerTerm">最小分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeFilter.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.RemoteCachingWrapperFilter">
            <summary> 
            远程缓存的过滤器包装。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.RemoteCachingWrapperFilter.filter">
            <summary>
            过滤器
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.RemoteCachingWrapperFilter.#ctor(EIIP.SE.Search.Filter)">
            <summary>
            实例化远程缓存的过滤器包装。
            </summary>
            <param name="filter">过滤器</param>
        </member>
        <member name="M:EIIP.SE.Search.RemoteCachingWrapperFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteCachingWrapperFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.SpanFilterResult">
            <summary> 
            范围过滤器结果类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SpanFilterResult.#ctor(System.Collections.BitArray,System.Collections.IList)">
            <summary> 
            实例化范围过滤器结果。使用 SpanFilterResult(DocIdSet, List) 替换。
            </summary>
            <param name="bits">过滤器的位集</param>
            <param name="positions">位置信息。</param>
        </member>
        <member name="M:EIIP.SE.Search.SpanFilterResult.#ctor(EIIP.SE.Search.DocIdSet,System.Collections.IList)">
            <summary>
            实例化范围过滤器结果。
            </summary>
            <param name="docIdSet">过滤器的位集</param>
            <param name="positions">位置信息。</param>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.Positions">
            <summary>
            获取位置列表。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.Bits">
            <summary>
            获取位集。使用 DocIdSet 替换。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.DocIdSet">
            <summary>
            获取位集。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.SpanFilterResult.PositionInfo">
            <summary>
            位置信息。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SpanFilterResult.PositionInfo.#ctor(System.Int32)">
            <summary>
            实例化位置信息。
            </summary>
            <param name="doc">文档号</param>
        </member>
        <member name="M:EIIP.SE.Search.SpanFilterResult.PositionInfo.AddPosition(System.Int32,System.Int32)">
            <summary>
            添加位置。
            </summary>
            <param name="start">起始位置</param>
            <param name="end">结束位置</param>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.PositionInfo.Doc">
            <summary>
            获取文档号。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.PositionInfo.Positions">
            <summary> 
            获取位置列表。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.SpanFilterResult.StartEnd">
            <summary>
            起始与结束位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SpanFilterResult.StartEnd.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化起始与结束位置。
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.StartEnd.End">
            <summary>
            获取结束位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SpanFilterResult.StartEnd.Start">
            <summary>
            获取起始位置。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.SpanQueryFilter">
            <summary>
            范围查询筛选器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SpanQueryFilter.query">
            <summary>
            范围查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.#ctor">
            <summary>
            实例化范围查询筛选器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.#ctor(EIIP.SE.Search.Spans.SpanQuery)">
            <summary>
            实例化范围查询筛选器。
            </summary>
            <param name="query">范围查询</param>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.BitSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围筛选器结果。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SpanQueryFilter.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.SpanQueryFilter.Query">
            <summary>
            获取范围查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Function.ByteFieldSource">
            <summary>
            字节字段缓存源。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Function.FieldCacheSource">
            <summary>
            基本函数查询的字段缓存源基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Function.ValueSource">
            <summary>
            基本函数查询的值源基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSource.GetValues(EIIP.SE.Index.IndexReader)">
            <summary>
            获取由函数查询使用的文档值。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSource.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSource.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSource.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.#ctor(System.String)">
            <summary>
            实例化基本函数查询的字段缓存源基类。
            </summary>
            <param name="field">字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.GetValues(EIIP.SE.Index.IndexReader)">
            <summary>
            获取由函数查询使用的文档值。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.GetCachedFieldValues(EIIP.SE.Search.IFieldCache,System.String,EIIP.SE.Index.IndexReader)">
            <summary>
            获取缓存的字段值。
            </summary>
            <param name="cache">字段缓存</param>
            <param name="field">请求值的字段</param>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.CachedFieldSourceEquals(EIIP.SE.Search.Function.FieldCacheSource)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldCacheSource.CachedFieldSourceHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ByteFieldSource.#ctor(System.String)">
            <summary>
            实例化基本函数查询的字节字段缓存源。
            </summary>
            <param name="field">字段名称</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ByteFieldSource.#ctor(System.String,EIIP.SE.Search.IByteParser)">
            <summary>
            实例化基本函数查询的字节字段缓存源。
            </summary>
            <param name="field">字段名称</param>
            <param name="parser">字节数据解析器</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ByteFieldSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ByteFieldSource.GetCachedFieldValues(EIIP.SE.Search.IFieldCache,System.String,EIIP.SE.Index.IndexReader)">
            <summary>
            获取缓存的字段值。
            </summary>
            <param name="cache">字段缓存</param>
            <param name="field">请求值的字段</param>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ByteFieldSource.CachedFieldSourceEquals(EIIP.SE.Search.Function.FieldCacheSource)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ByteFieldSource.CachedFieldSourceHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.DocValues">
            <summary>
            文档值基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.FloatVal(System.Int32)">
            <summary>
            获取指定文档的浮点值。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.IntVal(System.Int32)">
            <summary>
            获取指定文档的整型值。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.LongVal(System.Int32)">
            <summary>
            获取指定文档的长整型值。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.DoubleVal(System.Int32)">
            <summary>
            获取指定文档的双精度值。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.StrVal(System.Int32)">
            <summary>
            获取指定文档的字符串值。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.ToString(System.Int32)">
            <summary>
            输出信息。
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.DocValues.Explain(System.Int32)">
            <summary>
            获取指定文档的描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.FieldScoreQuery">
            <summary>
            字段评分查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Function.ValueSourceQuery">
            <summary>
            值源查询类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Query">
            <summary>
            查询基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Query.boost">
            <summary>
            查询因子。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Query.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.ToString">
            <summary>
            输出查询信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.Weight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.Combine(EIIP.SE.Search.Query[])">
            <summary>
            合并查询。
            </summary>
            <param name="queries">查询组合</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。若查询还未被重写则抛出异常。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Query.MergeBooleanQueries(EIIP.SE.Search.Query[])">
            <summary>
            合并布尔查询的多个子句为单一的布尔查询。
            </summary>
            <param name="queries">多个子句布尔查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.GetSimilarity(EIIP.SE.Search.Searcher)">
            <summary>
            获取指定搜索的相似度实例。
            </summary>
            <param name="searcher">搜索实例。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Query.Clone">
            <summary>
            创建当前实例的浅表副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Query.Boost">
            <summary>
            获取或设置查询因子。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.#ctor(EIIP.SE.Search.Function.ValueSource)">
            <summary>
            实例化值源查询。
            </summary>
            <param name="valSrc">值源</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。若查询还未被重写则抛出异常。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ValueSourceQuery.Clone">
            <summary>
            创建当前实例的浅表副本。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.IWeight">
            <summary>
            定义查询权重的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IWeight.GetQuery">
            <summary>
            获取关联查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IWeight.GetValue">
            <summary>
            获取权重值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IWeight.SumOfSquaredWeights">
            <summary>
            查询子句的权重和。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IWeight.Normalize(System.Single)">
            <summary>
            标准化。
            </summary>
            <param name="norm">查询的标准化因子</param>
        </member>
        <member name="M:EIIP.SE.Search.IWeight.Scorer(EIIP.SE.Index.IndexReader)">
            <summary>
            实例化查询评分实例。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IWeight.Explain(EIIP.SE.Index.IndexReader,System.Int32)">
            <summary>
            获取指定文档的评分计算描述。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldScoreQuery.#ctor(System.String,EIIP.SE.Search.Function.FieldScoreQuery.Type)">
            <summary>
            实例化字段评分查询。
            </summary>
            <param name="field">字段</param>
            <param name="type">字段类型</param>
        </member>
        <member name="T:EIIP.SE.Search.Function.FieldScoreQuery.Type">
            <summary>
            评分字段类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.FieldScoreQuery.Type.BYTE">
            <summary>
            字节类型字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.FieldScoreQuery.Type.SHORT">
            <summary>
            短整数类型字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.FieldScoreQuery.Type.INT">
            <summary>
            整数类型字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.FieldScoreQuery.Type.FLOAT">
            <summary>
            浮点类型字段。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.FieldScoreQuery.Type.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.FloatFieldSource">
            <summary>
            浮点字段缓存源。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.FloatFieldSource.#ctor(System.String)">
            <summary>
            实例化浮点字段缓存源。
            </summary>
            <param name="field">字段名称</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.FloatFieldSource.#ctor(System.String,EIIP.SE.Search.IFloatParser)">
            <summary>
            实例化浮点字段缓存源。
            </summary>
            <param name="field">字段名称</param>
            <param name="parser">字节数据解析器</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.FloatFieldSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FloatFieldSource.GetCachedFieldValues(EIIP.SE.Search.IFieldCache,System.String,EIIP.SE.Index.IndexReader)">
            <summary>
            获取缓存的字段值。
            </summary>
            <param name="cache">字段缓存</param>
            <param name="field">请求值的字段</param>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FloatFieldSource.CachedFieldSourceEquals(EIIP.SE.Search.Function.FieldCacheSource)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.FloatFieldSource.CachedFieldSourceHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.IntFieldSource">
            <summary>
            整数字段缓存源。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.IntFieldSource.#ctor(System.String)">
            <summary>
            实例化整数字段缓存源。
            </summary>
            <param name="field">字段名称</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.IntFieldSource.#ctor(System.String,EIIP.SE.Search.IIntParser)">
            <summary>
            实例化整数字段缓存源。
            </summary>
            <param name="field">字段名称</param>
            <param name="parser">字节数据解析器</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.IntFieldSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.IntFieldSource.GetCachedFieldValues(EIIP.SE.Search.IFieldCache,System.String,EIIP.SE.Index.IndexReader)">
            <summary>
            获取缓存的字段值。
            </summary>
            <param name="cache">字段缓存</param>
            <param name="field">请求值的字段</param>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.IntFieldSource.CachedFieldSourceEquals(EIIP.SE.Search.Function.FieldCacheSource)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.IntFieldSource.CachedFieldSourceHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.OrdFieldSource">
            <summary>
            反转顺序的字段缓存源。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.OrdFieldSource.field">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.OrdFieldSource.#ctor(System.String)">
            <summary>
            实例化顺序的字段缓存源。
            </summary>
            <param name="field">字段名称</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.OrdFieldSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.OrdFieldSource.GetValues(EIIP.SE.Index.IndexReader)">
            <summary>
            获取由函数查询使用的文档值。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.OrdFieldSource.Equals(System.Object)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.OrdFieldSource.GetHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.ReverseOrdFieldSource">
            <summary>
            反转顺序的字段缓存源。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.ReverseOrdFieldSource.field">
            <summary>
            字段名称。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.ReverseOrdFieldSource.#ctor(System.String)">
            <summary>
            实例化反转顺序的字段缓存源。
            </summary>
            <param name="field">字段名称</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ReverseOrdFieldSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ReverseOrdFieldSource.GetValues(EIIP.SE.Index.IndexReader)">
            <summary>
            获取由函数查询使用的文档值。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ReverseOrdFieldSource.Equals(System.Object)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ReverseOrdFieldSource.GetHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Function.ShortFieldSource">
            <summary> 
            短整型数据字段缓存源。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.ShortFieldSource.#ctor(System.String)">
            <summary>
            实例化短整型数据字段缓存源。
            </summary>
            <param name="field">字段名称</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ShortFieldSource.#ctor(System.String,EIIP.SE.Search.IShortParser)">
            <summary>
            实例化短整型数据字段缓存源。
            </summary>
            <param name="field">字段名称</param>
            <param name="parser">字节数据解析器</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.ShortFieldSource.Description">
            <summary>
            获取描述。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ShortFieldSource.GetCachedFieldValues(EIIP.SE.Search.IFieldCache,System.String,EIIP.SE.Index.IndexReader)">
            <summary>
            获取缓存的字段值。
            </summary>
            <param name="cache">字段缓存</param>
            <param name="field">请求值的字段</param>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ShortFieldSource.CachedFieldSourceEquals(EIIP.SE.Search.Function.FieldCacheSource)">
            <summary>
            测试缓存的字段源是否相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.ShortFieldSource.CachedFieldSourceHashCode">
            <summary>
            获取缓存的字段源的哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FuzzyTermEnum">
            <summary>
            模糊过滤的分词枚举数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FuzzyTermEnum.TYPICAL_LONGEST_WORD_IN_INDEX">
            <summary>
            索引中最长的词长度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Index.Term)">
            <summary>
            实例化模糊过滤的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="term">分词</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Index.Term,System.Single)">
            <summary>
            实例化模糊过滤的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="term">分词</param>
            <param name="minSimilarity">最小相似度</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Index.Term,System.Single,System.Int32)">
            <summary>
            实例化模糊过滤的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="term">分词</param>
            <param name="minSimilarity">最小相似度</param>
            <param name="prefixLength">前缀长度，默认为0</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.TermCompare(EIIP.SE.Index.Term)">
            <summary>
            分词比较。
            </summary>
            <param name="term">要比较的分词。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.Difference">
            <summary>
            获取差异度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.EndEnum">
            <summary>
            判断是否已到达枚举尾部。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyTermEnum.Close">
            <summary>
            关闭活动枚举。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Hit">
            <summary>
            点击类。替换使用 TopDocCollector 与 TopDocs
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Hit.#ctor(EIIP.SE.Search.Hits,System.Int32)">
            <summary>
            实例化点击。
            </summary>
            <param name="hits">查询的点击</param>
            <param name="hitNumber">点击号</param>
        </member>
        <member name="M:EIIP.SE.Search.Hit.GetDocument">
            <summary>
            获取点击文档。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hit.GetScore">
            <summary>
            获取点击文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hit.GetId">
            <summary>
            获取点击文档在集合中的ID。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hit.GetBoost">
            <summary>
            获取点击文档的推进因子。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Hit.Get(System.String)">
            <summary>
            获取点击文档具有指定字段名称的字段值。
            </summary>
            <param name="name">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hit.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.HitIterator">
            <summary>
            点击迭代器。替换使用 TopDocCollector 与 TopDocs
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.HitIterator.#ctor(EIIP.SE.Search.Hits)">
            <summary>
            实例化点击迭代器。
            </summary>
            <param name="hits">点击实例</param>
        </member>
        <member name="M:EIIP.SE.Search.HitIterator.MoveNext">
            <summary>
            将枚举数推进到集合的下一个元素。
            如果枚举数成功地推进到下一个元素，则为 true；如果枚举数越过集合的结尾，则为 false。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.HitIterator.Remove">
            <summary>
            移除。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.HitIterator.Reset">
            <summary>
            将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.HitIterator.Length">
            <summary>
            获取点击数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.HitIterator.Current">
            <summary>
            获取集合中的当前元素。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.HitQueue">
            <summary>
            命中率队列。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Hits">
            <summary>
            点击类。文档的级别列表，通常用于存储搜索结果。替换使用 TopDocCollector 与 TopDocs
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.length">
            <summary>
            点击数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.hitDocs">
            <summary>
            反向点击缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.first">
            <summary>
            LRU缓存的头。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.last">
            <summary>
            LRU缓存的尾。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.numDocs">
            <summary>
            缓存的数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.maxDocs">
            <summary>
            最大缓存量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Hits.nDeletions">
            <summary>
            索引中删除的文档数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Hits.#ctor(EIIP.SE.Search.Searcher,EIIP.SE.Search.Query,EIIP.SE.Search.Filter)">
            <summary>
            实例化点击。
            </summary>
            <param name="s">搜索器</param>
            <param name="q">查询</param>
            <param name="f">筛选器</param>
        </member>
        <member name="M:EIIP.SE.Search.Hits.#ctor(EIIP.SE.Search.Searcher,EIIP.SE.Search.Query,EIIP.SE.Search.Filter,EIIP.SE.Search.Sort)">
            <summary>
            实例化点击。
            </summary>
            <param name="s">搜索器</param>
            <param name="q">查询</param>
            <param name="f">筛选器</param>
            <param name="o">排序实例</param>
        </member>
        <member name="M:EIIP.SE.Search.Hits.CountDeletions(EIIP.SE.Search.Searcher)">
            <summary>
            删除计数。若未知则返回-1。
            </summary>
            <param name="s">搜索器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hits.GetMoreDocs(System.Int32)">
            <summary>
            尝试添加新点击文档。确认该最小点击文档数已被恢复。
            </summary>
            <param name="min"></param>
        </member>
        <member name="M:EIIP.SE.Search.Hits.Doc(System.Int32)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hits.Score(System.Int32)">
            <summary>
            获取指定文档号的评分。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hits.Id(System.Int32)">
            <summary>
            获取指定文档号的文档在集合中的ID。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Hits.Iterator">
            <summary>
            获取迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Hits.Length">
            <summary>
            获取总点击量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.HitDoc.next">
            <summary>
            双缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.HitDoc.prev">
            <summary>
            双缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ExtendedFieldCache_Fields">
            <summary> 
            扩展字段缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.ExtendedFieldCache_Fields.EXT_DEFAULT">
            <summary>
            扩展字段缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.StringIndex">
            <summary>
            维护缓存中分词值的字符串索引。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.StringIndex.Lookup">
            <summary>
            所有分词值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.StringIndex.Order">
            <summary>
            查询索引顺序。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.StringIndex.#ctor(System.Int32[],System.String[])">
            <summary>
            实例化维护缓存中分词值的字符串索引。
            </summary>
            <param name="values">所有分词值。</param>
            <param name="lookup">查询索引顺序。</param>
        </member>
        <member name="T:EIIP.SE.Search.FieldCache_Fields">
            <summary>
            字段缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FieldCache_Fields.STRING_INDEX">
            <summary>
            索引指示器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FieldCache_Fields.DEFAULT">
            <summary>
            缺省字段缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IndexSearcher">
            <summary>
            索引搜索器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Searcher">
            <summary>
            搜索器基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ISearchable">
            <summary>
            定义可搜索的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">匹配文档的权重</param>
            <param name="filter">筛选器实例</param>
            <param name="results">用于存储搜索结果的点击计数器</param>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Close">
            <summary>
            关闭搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="term">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.DocFreqs(EIIP.SE.Index.Term[])">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="terms">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.MaxDoc">
            <summary>
            获取最大文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Doc(System.Int32)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="i">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Doc(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档。
            </summary>
            <param name="n">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Rewrite(EIIP.SE.Search.Query)">
            <summary>
            重写查询。
            </summary>
            <param name="query">要重写的查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Explain(EIIP.SE.Search.IWeight,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="weight">查询权重</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ISearchable.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            搜索。
            </summary>
            <param name="weight">权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置前n项</param>
            <param name="sort">排序</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.#ctor">
            <summary>
            实例化搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query)">
            <summary>
            获取查询结果。替换使用 Search(Query, Filter, int)
            </summary>
            <param name="query">查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Filter)">
            <summary>
            获取查询结果。替换使用 Search(Query, Filter, int)
            </summary>
            <param name="query">查询</param>
            <param name="filter">筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Sort)">
            <summary>
            获取查询结果。替换使用 Search(Query, Filter, int, Sort)
            </summary>
            <param name="query">查询</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Filter,EIIP.SE.Search.Sort)">
            <summary>
            获取查询结果。替换使用 Search(Query, Filter, int, Sort)
            </summary>
            <param name="query">查询</param>
            <param name="filter">筛选器</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            获取查询结果。
            </summary>
            <param name="query">查询</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.HitCollector)">
            <summary>
            获取查询结果。
            </summary>
            <param name="query">查询</param>
            <param name="results">查询结果。</param>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            获取查询结果。
            </summary>
            <param name="query">查询</param>
            <param name="filter">筛选器</param>
            <param name="results">查询结果</param>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            获取查询结果。
            </summary>
            <param name="query">查询</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,System.Int32)">
            <summary>
            获取查询结果。
            </summary>
            <param name="query">查询</param>
            <param name="n">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Explain(EIIP.SE.Search.Query,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="query">查询</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.CreateWeight(EIIP.SE.Search.Query)">
            <summary>
            创建查询的权重。
            </summary>
            <param name="query">查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.DocFreqs(EIIP.SE.Index.Term[])">
            <summary>
            获取检索词的对应文档。
            </summary>
            <param name="terms">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">匹配文档的权重</param>
            <param name="filter">筛选器实例</param>
            <param name="results">用于存储搜索结果的点击计数器</param>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Close">
            <summary>
            关闭搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="term">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.MaxDoc">
            <summary>
            获取最大文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Doc(System.Int32)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="i">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Rewrite(EIIP.SE.Search.Query)">
            <summary>
            重写查询。
            </summary>
            <param name="query">要重写的查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Explain(EIIP.SE.Search.IWeight,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="weight">查询权重</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Searcher.Doc(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取文档。
            </summary>
            <param name="i">文档号</param>
            <param name="selector">字段筛选</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Searcher.Similarity">
            <summary>
            获取或设置相似度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.#ctor(System.String)">
            <summary>
            实例化索引搜索器。
            </summary>
            <param name="path">索引目录路径</param>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.#ctor(EIIP.SE.Store.Directory)">
            <summary>
            实例化索引搜索器。
            </summary>
            <param name="directory">索引目录</param>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.#ctor(EIIP.SE.Index.IndexReader)">
            <summary>
            实例化索引搜索器。
            </summary>
            <param name="r">索引阅读器</param>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.#ctor(EIIP.SE.Index.IndexReader,System.Boolean)">
            <summary>
            实例化索引搜索器。
            </summary>
            <param name="r">索引阅读器</param>
            <param name="closeReader">设置是否关闭索引阅读器</param>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.GetIndexReader">
            <summary>
            获取索引阅读器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Close">
            <summary>
            关闭搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="term">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Doc(System.Int32)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="i">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Doc(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取文档。
            </summary>
            <param name="i">文档号</param>
            <param name="selector">字段筛选</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.MaxDoc">
            <summary>
            获取最大文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="nDocs">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">匹配文档的权重</param>
            <param name="filter">筛选器实例</param>
            <param name="results">用于存储搜索结果的点击计数器</param>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Rewrite(EIIP.SE.Search.Query)">
            <summary>
            重写查询。
            </summary>
            <param name="original">要重写的查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.IndexSearcher.Explain(EIIP.SE.Search.IWeight,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="weight">查询权重</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.IndexSearcher.Reader">
            <summary>
            获取索引阅读器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ISortComparatorSource">
            <summary>
            定义排序评分文档的比较器接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ISortComparatorSource.NewComparator(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            创建评分文档比较器。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="fieldname">字段名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.MultiSearcher">
            <summary>
            多搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.#ctor(EIIP.SE.Search.ISearchable[])">
            <summary>
            实例化多搜索器。
            </summary>
            <param name="searchables">索引器数组</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.GetSearchables">
            <summary>
            获取索引器数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.GetStarts">
            <summary>
            获取开始位置数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Close">
            <summary>
            关闭搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="term">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Doc(System.Int32)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="n">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Doc(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取文档。
            </summary>
            <param name="n">文档号</param>
            <param name="selector">字段筛选</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.SubSearcher(System.Int32)">
            <summary>
            获取指定位置的查询。
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.SubDoc(System.Int32)">
            <summary>
            获取指定搜索器索引位置的文档号。
            </summary>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.MaxDoc">
            <summary>
            获取最大文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="nDocs">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">匹配文档的权重</param>
            <param name="filter">筛选器实例</param>
            <param name="results">用于存储搜索结果的点击计数器</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Rewrite(EIIP.SE.Search.Query)">
            <summary>
            重写查询。
            </summary>
            <param name="original">要重写的查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.Explain(EIIP.SE.Search.IWeight,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="weight">查询权重</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiSearcher.CreateWeight(EIIP.SE.Search.Query)">
            <summary>
            创建查询的权重。
            </summary>
            <param name="original">查询</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.MultiSearcher.CachedDfSource">
            <summary>
            缓存的文档词频源搜索器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.NonMatchingScorer">
            <summary>
            无文档匹配的评分器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ParallelMultiSearcher">
            <summary>
            并行的多搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ParallelMultiSearcher.#ctor(EIIP.SE.Search.ISearchable[])">
            <summary>
            实例化并行的多搜索器。
            </summary>
            <param name="searchables">搜索实例数组</param>
        </member>
        <member name="M:EIIP.SE.Search.ParallelMultiSearcher.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="term">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ParallelMultiSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="nDocs">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ParallelMultiSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="nDocs">设置要返回前几个文档结果</param>
            <param name="sort">排序实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ParallelMultiSearcher.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">匹配文档的权重</param>
            <param name="filter">筛选器实例</param>
            <param name="results">用于存储搜索结果的点击计数器</param>
        </member>
        <member name="M:EIIP.SE.Search.ParallelMultiSearcher.Rewrite(EIIP.SE.Search.Query)">
            <summary>
            重写查询。
            </summary>
            <param name="original">要重写的查询</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.MultiSearcherThread">
            <summary>
            多搜索器线程类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Payloads.BoostingTermQuery">
            <summary>
            因子加速的分词查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanTermQuery">
            <summary>
            分词范围查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanQuery">
            <summary>
            范围查询基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanQuery.GetSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围查询匹配。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanQuery.GetPayloadSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取有效负载范围的匹配查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanQuery.GetField">
            <summary>
            获取查询匹配的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanQuery.GetTerms">
            <summary>
            获取查询匹配的分词集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanTermQuery.term">
            <summary>
            分词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化分词范围查询。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.GetField">
            <summary>
            获取字段名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.GetTerms">
            <summary>
            获取分词集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.GetSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围查询匹配。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanTermQuery.GetPayloadSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取有效负载范围的匹配查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Spans.SpanTermQuery.Term">
            <summary>
            获取分词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化因子加速的分词查询。
            </summary>
            <param name="term">分词</param>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight">
            <summary>
            因子加速的分词查询权重。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanWeight">
            <summary>
            范围权重。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.similarity">
            <summary>
            相似度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.m_Value">
            <summary>
            值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.idf">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.queryNorm">
            <summary>
            查询标准因子。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.queryWeight">
            <summary>
            查询权重
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.terms">
            <summary>
            分词集。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanWeight.query">
            <summary>
            范围查询
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.#ctor(EIIP.SE.Search.Spans.SpanQuery,EIIP.SE.Search.Searcher)">
            <summary>
            实例化范围权重。
            </summary>
            <param name="query">范围查询</param>
            <param name="searcher">搜索器。</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.GetQuery">
            <summary>
            获取查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.GetValue">
            <summary>
            获取值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.SumOfSquaredWeights">
            <summary>
            获取权重平方和。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.Normalize(System.Single)">
            <summary>
            标准化。
            </summary>
            <param name="queryNorm">标准化因子。</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.Scorer(EIIP.SE.Index.IndexReader)">
            <summary>
            获取评分器。
            </summary>
            <param name="reader">索引阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanWeight.Explain(EIIP.SE.Index.IndexReader,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.#ctor(EIIP.SE.Search.Payloads.BoostingTermQuery,EIIP.SE.Search.Payloads.BoostingTermQuery,EIIP.SE.Search.Searcher)">
            <summary>
            实例化因子加速的分词查询权重。
            </summary>
            <param name="termQuery">因子加速的分词查询。</param>
            <param name="query">因子加速的分词查询。</param>
            <param name="searcher">搜索器。</param>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.Scorer(EIIP.SE.Index.IndexReader)">
            <summary>
            获取评分器。
            </summary>
            <param name="reader">索引阅读器。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingTermQuery">
            <summary>
            获取因子加速的分词查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer">
            <summary>
            因子加速的分词查询评分器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanScorer">
            <summary> 
            范围评分类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.spans">
            <summary>
            范围。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.weight">
            <summary>
            权重
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.norms">
            <summary>
            标准化数据
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.m_Value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.firstTime">
            <summary>
            指示是否是首次。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.more">
            <summary>
            指示是否更多。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.doc">
            <summary>
            文档号
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.SpanScorer.freq">
            <summary>
            词频
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.#ctor(EIIP.SE.Search.Spans.ISpans,EIIP.SE.Search.IWeight,EIIP.SE.Search.Similarity,System.Byte[])">
            <summary>
            实例化范围评分。
            </summary>
            <param name="spans">范围</param>
            <param name="weight">权重</param>
            <param name="similarity">相似度</param>
            <param name="norms">标准化数据</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.SetFreqCurrentDoc">
            <summary>
            设置当前文档的词频。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.payloadScore">
            <summary>
            有效负载评分。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.#ctor(EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight,EIIP.SE.Search.Spans.TermSpans,EIIP.SE.Search.IWeight,EIIP.SE.Search.Similarity,System.Byte[])">
            <summary>
            实例化因子加速的分词查询评分器。
            </summary>
            <param name="termWeight">分词查询权重</param>
            <param name="spans">范围</param>
            <param name="weight">分词查询权重</param>
            <param name="similarity">相似度</param>
            <param name="norms">标准化数据</param>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.SetFreqCurrentDoc">
            <summary>
            设置当前文档的词频。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.ProcessPayload(EIIP.SE.Search.Similarity)">
            <summary>
            处理有效负载。
            </summary>
            <param name="similarity"></param>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Payloads.BoostingTermQuery.BoostingTermWeight.BoostingSpanScorer.BoostingTermWeight">
            <summary>
            获取权重。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Payloads.PayloadSpanUtil">
            <summary>
            实用工具类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.PayloadSpanUtil.#ctor(EIIP.SE.Index.IndexReader)">
            <summary>
            实例化实用工具。
            </summary>
            <param name="reader">要关联的索引阅读器。</param>
        </member>
        <member name="M:EIIP.SE.Search.Payloads.PayloadSpanUtil.GetPayloadsForQuery(EIIP.SE.Search.Query)">
            <summary>
            获取指定查询的有效负载。
            </summary>
            <param name="query">查询</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.PhrasePositions">
            <summary>
            短语中的分词位置类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.doc">
            <summary>
            当前文档。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.position">
            <summary>
            文档中的位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.count">
            <summary>
            文档中剩余的数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.offset">
            <summary>
            短语中的位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.tp">
            <summary>
            分词位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.next">
            <summary>
            下一位置。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhrasePositions.repeats">
            <summary>
            指示是否存在重复的分词（如 query="1st word 2nd word"~1）
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PhraseQueue">
            <summary>
            短语队列。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PrefixFilter">
            <summary> 
            前缀筛选器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PrefixFilter.prefix">
            <summary>
            前缀分词。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.PrefixFilter.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化前缀筛选器。
            </summary>
            <param name="prefix">前缀分词</param>
        </member>
        <member name="M:EIIP.SE.Search.PrefixFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PrefixFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PrefixFilter.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.PrefixFilter.Prefix">
            <summary>
            获取前缀分词。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PrefixGenerator">
            <summary>
            前缀生成器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.IIdGenerator">
            <summary>
            定义生成ID的接口。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.QueryFilter">
            <summary>
            查询过滤器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.QueryFilter.#ctor(EIIP.SE.Search.Query)">
            <summary>
            实例化查询过滤器。
            </summary>
            <param name="query">查询</param>
        </member>
        <member name="M:EIIP.SE.Search.QueryFilter.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryFilter.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.QueryTermVector">
            <summary> 
            查询分词向量类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.#ctor(System.String[])">
            <summary>
            实例化查询分词向量。
            </summary>
            <param name="queryTerms">查询的原始分词数组，可能会有重复的</param>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.#ctor(System.String,EIIP.SE.Analysis.Analyzer)">
            <summary>
            检索分词向量。
            </summary>
            <param name="queryString">查询字串</param>
            <param name="analyzer">分词分析器</param>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.GetField">
            <summary>
            获取字段名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.Size">
            <summary>
            获取分词向量中分词数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.GetTerms">
            <summary>
            依序获取分词文本数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.GetTermFrequencies">
            <summary>
            依序获取分词频率数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.IndexOf(System.String)">
            <summary>
            获取指定分词的索引位置。不存在则返回-1。
            </summary>
            <param name="term">分词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryTermVector.IndexesOf(System.String[],System.Int32,System.Int32)">
            <summary>
            获取指定分词组合的索引位置数组。不存在则返回-1。
            </summary>
            <param name="terms">分词组合</param>
            <param name="start">分词组合的起始位置</param>
            <param name="len">分词组合要查询的数量</param>
        </member>
        <member name="T:EIIP.SE.Search.QueryWrapperFilter">
            <summary>
            查询包装器过滤器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.QueryWrapperFilter.#ctor(EIIP.SE.Search.Query)">
            <summary>
            实例化查询包装器过滤器。
            </summary>
            <param name="query">查询</param>
        </member>
        <member name="M:EIIP.SE.Search.QueryWrapperFilter.Bits(EIIP.SE.Index.IndexReader)">
            <summary>
            获取位集。若有搜索结果则在相应位设置为true。建议使用 GetDocIdSet(IndexReader)。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryWrapperFilter.GetDocIdSet(EIIP.SE.Index.IndexReader)">
            <summary>
            获取文档ID集。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryWrapperFilter.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryWrapperFilter.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.QueryWrapperFilter.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.BooleanQuery">
            <summary>
            布尔查询类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanQuery.allowDocsOutOfOrder">
            <summary>
            指示是否收集文档ID乱序的文档。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.BooleanQuery.minNrShouldMatch">
            <summary>
            必须匹配的最小数量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.#ctor">
            <summary>
            实例化布尔查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.#ctor(System.Boolean)">
            <summary>
            实例化布尔查询。
            </summary>
            <param name="disableCoord">设置相似度评分是否不可用</param>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.GetSimilarity(EIIP.SE.Search.Searcher)">
            <summary>
            获取指定搜索的相似度实例。
            </summary>
            <param name="searcher">搜索实例。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.Add(EIIP.SE.Search.Query,EIIP.SE.Search.BooleanClause.Occur)">
            <summary>
            添加查询子句。
            </summary>
            <param name="query">查询</param>
            <param name="occur">查询逻辑</param>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.Add(EIIP.SE.Search.BooleanClause)">
            <summary>
            添加查询子句。
            </summary>
            <param name="clause">查询子句。</param>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.GetClauses">
            <summary>
            获取查询子句数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.Clauses">
            <summary>
            获取查询子句列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取检索词。若查询还未被重写则抛出异常。
            </summary>
            <param name="terms">要存储检索词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.Clone">
            <summary>
            创建当前实例的浅表副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.ToString(System.String)">
            <summary>
            输出指定字段的查询字串。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.BooleanQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.BooleanQuery.AllowDocsOutOfOrder">
            <summary>
            获取或设置一个值，该值指示是否收集文档ID乱序的文档。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanQuery.MinimumNumberShouldMatch">
            <summary>
            获取或设置必须匹配的最小数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanQuery.MaxClauseCount">
            <summary>
            获取或设置最大子句数量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanQuery.IsCoordDisabled">
            <summary>
            获取一个值，该值指示是否评分不可用。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.SimilarityDelegator">
            <summary>
            相似度代理类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.#ctor(EIIP.SE.Search.Similarity)">
            <summary>
            实例化相似度代理。
            </summary>
            <param name="delegee">要代理的相似度</param>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.LengthNorm(System.String,System.Int32)">
            <summary>
            计算指定字段及其分词量的标准化因子。
            </summary>
            <param name="fieldName">字段名称</param>
            <param name="numTerms">字段分词量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.QueryNorm(System.Single)">
            <summary>
            计算每个查询分词比重平方的标准化因子。
            </summary>
            <param name="sumOfSquaredWeights">查询分词的比重平方</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.Tf(System.Single)">
            <summary>
            基于分词或短语在文档中的频率计算得分因子。
            </summary>
            <param name="freq">分词或短语在文档中的频率</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.SloppyFreq(System.Int32)">
            <summary>
            基于编辑距离计算词组匹配量。
            </summary>
            <param name="distance">编辑距离</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.Idf(System.Int32,System.Int32)">
            <summary>
            基于分词在文档中的频率计算评分因子。
            </summary>
            <param name="docFreq">分词在文档中的频率</param>
            <param name="numDocs">文档在集合中的数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.Coord(System.Int32,System.Int32)">
            <summary>
            基于文档中所有查询的因子计算评分因子。
            </summary>
            <param name="overlap">文档中匹配的查询分词</param>
            <param name="maxOverlap">查询中最大的分词数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SimilarityDelegator.ScorePayload(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            基于有效负载中的数据计算评分因子。
            </summary>
            <param name="fieldName">有效负载所在分词的字段名称</param>
            <param name="payload">将被评分的有效负载数据</param>
            <param name="offset">有效负载数据偏移量</param>
            <param name="length">有效负载数据长度</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.BooleanQuery.TooManyClausesException">
            <summary>
            过多子句异常类。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.BooleanQuery.TooManyClausesException.Message">
            <summary>
            获取信息。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ConstantScoreQuery">
            <summary>
            常量积分查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.ConstantScoreQuery.filter">
            <summary>
            过滤器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.#ctor(EIIP.SE.Search.Filter)">
            <summary>
            实例化常量积分查询。
            </summary>
            <param name="filter">过滤器。</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。若查询还未被重写则抛出异常。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ToString(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.Clone">
            <summary>
            获取副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreQuery.Filter">
            <summary>
            获取过滤器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight">
            <summary>
            常量权重。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.#ctor(EIIP.SE.Search.ConstantScoreQuery,EIIP.SE.Search.Searcher)">
            <summary>
            实例化常量权重。
            </summary>
            <param name="query">常量积分查询。</param>
            <param name="searcher">搜索器。</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.SumOfSquaredWeights">
            <summary>
            获取权重平方。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.Normalize(System.Single)">
            <summary>
            标准化。
            </summary>
            <param name="norm">标准化因子。</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.GetQuery">
            <summary>
            获取常量积分查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.GetValue">
            <summary>
            获取查询权重。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.Scorer(EIIP.SE.Index.IndexReader)">
            <summary>
            获取常量评分。
            </summary>
            <param name="reader">索引阅读器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.Explain(EIIP.SE.Index.IndexReader,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="reader">索引阅读器。</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreQuery.ConstantWeight.ConstantScoreQuery">
            <summary>
            获取常量积分查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer">
            <summary>
            常量评分。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.#ctor(EIIP.SE.Search.ConstantScoreQuery,EIIP.SE.Search.Similarity,EIIP.SE.Index.IndexReader,EIIP.SE.Search.IWeight)">
            <summary>
            实例化常量评分。
            </summary>
            <param name="query">常量评分查询。</param>
            <param name="similarity">相似度</param>
            <param name="reader">索引阅读器。</param>
            <param name="w">权重</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreQuery.ConstantScorer.ConstantScoreQuery">
            <summary>
            实例化常量评分查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ConstantScoreRangeQuery">
            <summary>
            常量评分的范围查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            实例化常量评分的范围查询。
            </summary>
            <param name="fieldName">字体名称</param>
            <param name="lowerVal">最小值</param>
            <param name="upperVal">最大值</param>
            <param name="includeLower">设置是否包含最小值</param>
            <param name="includeUpper">设置是否包含最大值</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.#ctor(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Globalization.CompareInfo)">
            <summary>
            实例化常量评分的范围查询。
            </summary>
            <param name="fieldName">字体名称</param>
            <param name="lowerVal">最小值</param>
            <param name="upperVal">最大值</param>
            <param name="includeLower">设置是否包含最小值</param>
            <param name="includeUpper">设置是否包含最大值</param>
            <param name="collator">字符串比较器</param>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ConstantScoreRangeQuery.Clone">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreRangeQuery.Field">
            <summary>
            获取查询的字段。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreRangeQuery.LowerVal">
            <summary>
            获取范围查询的最小值。若为null表示包括该值。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreRangeQuery.UpperVal">
            <summary>
            获取范围查询的最大值。若为null表示包括该值。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreRangeQuery.IncludesLower">
            <summary>
            获取一个值，该值指示是否包含最小值。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.ConstantScoreRangeQuery.IncludesUpper">
            <summary>
            获取一个值，该值指示是否包含最大值。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Function.CustomScoreQuery">
            <summary>
            自定义评分查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Function.CustomScoreQuery.strict">
            <summary>
            指示是否精确的查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.#ctor(EIIP.SE.Search.Query)">
            <summary>
            实例化自定义评分查询。
            </summary>
            <param name="subQuery">子查询。</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.#ctor(EIIP.SE.Search.Query,EIIP.SE.Search.Function.ValueSourceQuery)">
            <summary>
            实例化自定义评分查询。
            </summary>
            <param name="subQuery">子查询。</param>
            <param name="valSrcQuery">值源查询</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.#ctor(EIIP.SE.Search.Query,EIIP.SE.Search.Function.ValueSourceQuery[])">
            <summary>
            实例化自定义评分查询。
            </summary>
            <param name="subQuery">子查询。</param>
            <param name="valSrcQueries">值源查询集</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.Clone">
            <summary>
            创建当前实例的浅表副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.CustomScore(System.Int32,System.Single,System.Single[])">
            <summary>
            计算自定义评分。
            </summary>
            <param name="doc">要评分的文档ID</param>
            <param name="subQueryScore">子查询的文档评分</param>
            <param name="valSrcScores">值源评分数组</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.CustomScore(System.Int32,System.Single,System.Single)">
            <summary>
            计算自定义评分。
            </summary>
            <param name="doc">要评分的文档ID</param>
            <param name="subQueryScore">子查询的文档评分</param>
            <param name="valSrcScore">值源评分</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.CustomExplain(System.Int32,EIIP.SE.Search.Explanation,EIIP.SE.Search.Explanation[])">
            <summary>
            获取自定义评分描述。
            </summary>
            <param name="doc">要描述的文档号</param>
            <param name="subQueryExpl">子查询的描述</param>
            <param name="valSrcExpls">值源的描述</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.CustomExplain(System.Int32,EIIP.SE.Search.Explanation,EIIP.SE.Search.Explanation)">
            <summary>
            获取自定义评分描述。
            </summary>
            <param name="doc">要描述的文档号</param>
            <param name="subQueryExpl">子查询的描述</param>
            <param name="valSrcExpl">值源的描述</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Function.CustomScoreQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.Function.CustomScoreQuery.IsStrict">
            <summary>
            获取或设置一个值，该值指示是否是精确的自定义评分。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.Function.CustomScoreQuery.Name">
            <summary>
            获取查询名称。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.DisjunctionMaxQuery">
            <summary> 
            分离查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionMaxQuery.disjuncts">
            <summary>
            子查询
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionMaxQuery.tieBreakerMultiplier">
            <summary>
            分离因子。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.#ctor(System.Single)">
            <summary>
            实例化分离查询。
            </summary>
            <param name="tieBreakerMultiplier">分离因子。</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.#ctor(System.Collections.ICollection,System.Single)">
            <summary>
            实例化分离查询。
            </summary>
            <param name="disjuncts">子查询</param>
            <param name="tieBreakerMultiplier">分离因子。</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.Add(EIIP.SE.Search.Query)">
            <summary>
            添加子查询。
            </summary>
            <param name="query">子查询。</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.Add(System.Collections.ICollection)">
            <summary>
            添加子查询。
            </summary>
            <param name="disjuncts">子查询集。</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.Iterator">
            <summary>
            子查询迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.DisjunctionMaxQuery.DisjunctionMaxWeight">
            <summary>
            分离查询权重。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.FilteredQuery">
            <summary>
            过滤查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.#ctor(EIIP.SE.Search.Query,EIIP.SE.Search.Filter)">
            <summary>
            实例化过滤查询。
            </summary>
            <param name="query">查询</param>
            <param name="filter">过滤器</param>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="s">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FilteredQuery.Clone">
            <summary>
            获取克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.FilteredQuery.Query">
            <summary>
            获取查询。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.FilteredQuery.Filter">
            <summary>
            获取过滤器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.FuzzyQuery">
            <summary>
            模糊匹配查询。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.MultiTermQuery">
            <summary>
            多分词匹配查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.MultiTermQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化多分词匹配查询。
            </summary>
            <param name="term">要匹配的分词</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiTermQuery.GetEnum(EIIP.SE.Index.IndexReader)">
            <summary>
            获取指定索引阅读器中的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiTermQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiTermQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiTermQuery.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiTermQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.MultiTermQuery.Term">
            <summary>
            获取分词。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FuzzyQuery.DefaultMinSimilarity">
            <summary>
            默认的最小相似度因子。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FuzzyQuery.DefaultPrefixLength">
            <summary>
            默认的前缀长度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.#ctor(EIIP.SE.Index.Term,System.Single,System.Int32)">
            <summary>
            实例化模糊匹配查询。
            </summary>
            <param name="term">要搜索的分词</param>
            <param name="minimumSimilarity">基于 0 与 1 之间的最小相似度因子。</param>
            <param name="prefixLength">通用(非模糊)前缀长度</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.#ctor(EIIP.SE.Index.Term,System.Single)">
            <summary>
            实例化模糊匹配查询。
            </summary>
            <param name="term">要搜索的分词</param>
            <param name="minimumSimilarity">基于 0 与 1 之间的最小相似度因子。</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化模糊匹配查询。
            </summary>
            <param name="term">要搜索的分词</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.GetEnum(EIIP.SE.Index.IndexReader)">
            <summary>
            获取指定索引阅读器中的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.FuzzyQuery.MinSimilarity">
            <summary>
            获取最小相似度因子。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.FuzzyQuery.PrefixLength">
            <summary>
            获取通用(非模糊)前缀长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.FuzzyQuery.ScoreTerm">
            <summary>
            得分分词类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FuzzyQuery.ScoreTerm.term">
            <summary>
            分词。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.FuzzyQuery.ScoreTerm.score">
            <summary>
            得分
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.ScoreTerm.#ctor(EIIP.SE.Index.Term,System.Single)">
            <summary>
            实例化得分分词。
            </summary>
            <param name="term">分词。</param>
            <param name="score">得分</param>
        </member>
        <member name="T:EIIP.SE.Search.FuzzyQuery.ScoreTermQueue">
            <summary>
            得分分词队列。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.ScoreTermQueue.#ctor(System.Int32)">
            <summary>
            实例化得分分词队列。
            </summary>
            <param name="size">队列最大尺寸</param>
        </member>
        <member name="M:EIIP.SE.Search.FuzzyQuery.ScoreTermQueue.LessThan(System.Object,System.Object)">
            <summary>
            小于测试。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.MatchAllDocsQuery">
            <summary>
            匹配所有文档的查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.MatchAllDocsQuery.#ctor">
            <summary>
            实例化匹配所有文档的查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.MatchAllDocsQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MatchAllDocsQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.MatchAllDocsQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MatchAllDocsQuery.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MatchAllDocsQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.MatchAllDocsQuery.MatchAllScorer">
            <summary>
            匹配所有文档的评分类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.MatchAllDocsQuery.MatchAllDocsWeight">
            <summary>
            匹配所有文档的权重类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.MultiPhraseQuery">
            <summary>
            多短语查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.Add(EIIP.SE.Index.Term)">
            <summary>
            在短语的下一个位置添加指定分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.Add(EIIP.SE.Index.Term[])">
            <summary>
            在短语的下一个位置添加指定多个分词。
            </summary>
            <param name="terms">分词数组。</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.Add(EIIP.SE.Index.Term[],System.Int32)">
            <summary>
            在短语的指定位置添加多个分词。
            </summary>
            <param name="terms">分词数组。</param>
            <param name="position">位置</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.GetTermArrays">
            <summary>
            获取所有分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.GetPositions">
            <summary>
            获取所有分词的位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.ToString(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="f">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.MultiPhraseQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.MultiPhraseQuery.Slop">
            <summary>
            获取或设置短语溢出位。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.MultiPhraseQuery.MultiPhraseWeight">
            <summary>
            多短语查询权重类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PhraseQuery">
            <summary>
            短语查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.#ctor">
            <summary>
            实例化缺省短语查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.Add(EIIP.SE.Index.Term)">
            <summary>
            添加指定分词。
            </summary>
            <param name="term">分词。</param>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.Add(EIIP.SE.Index.Term,System.Int32)">
            <summary>
            在指定位置添加指定分词。
            </summary>
            <param name="term">分词。</param>
            <param name="position">位置</param>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.GetTerms">
            <summary>
            获取短语中的所有分词。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.GetPositions">
            <summary>
            获取获取短语中的所有分词的相对位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="queryTerms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.ToString(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="f">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PhraseQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.PhraseQuery.Slop">
            <summary>
            获取或设置关键词的数量。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PhraseQuery.PhraseWeight">
            <summary>
            短语权重。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PrefixQuery">
            <summary>
            前缀查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.PrefixQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化前缀查询。
            </summary>
            <param name="prefix">前缀分词。</param>
        </member>
        <member name="M:EIIP.SE.Search.PrefixQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PrefixQuery.ToString(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PrefixQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PrefixQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.PrefixQuery.Prefix">
            <summary>
            获取前缀分词。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.RangeQuery">
            <summary>
            范围查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.RangeQuery.#ctor(EIIP.SE.Index.Term,EIIP.SE.Index.Term,System.Boolean)">
            <summary>
            实例化范围查询。
            </summary>
            <param name="lowerTerm">范围的最小分词</param>
            <param name="upperTerm">范围的最大分词</param>
            <param name="inclusive">设置范围是否包含最小与最大分词</param>
        </member>
        <member name="M:EIIP.SE.Search.RangeQuery.#ctor(EIIP.SE.Index.Term,EIIP.SE.Index.Term,System.Boolean,System.Globalization.CompareInfo)">
            <summary>
            实例化范围查询。
            </summary>
            <param name="lowerTerm">范围的最小分词</param>
            <param name="upperTerm">范围的最大分词</param>
            <param name="inclusive">设置范围是否包含最小与最大分词</param>
            <param name="collator"></param>
        </member>
        <member name="M:EIIP.SE.Search.RangeQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeQuery.ToString(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RangeQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.RangeQuery.Field">
            <summary>
            获取查询的字段名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.RangeQuery.LowerTerm">
            <summary>
            获取范围的最小分词。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.RangeQuery.UpperTerm">
            <summary>
            获取范围的最大分词。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.RangeQuery.IsInclusive">
            <summary>
            获取一个值，该值指示范围是否包含边界分词。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.RangeQuery.Collator">
            <summary>
            获取比较器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.TermQuery">
            <summary>
            分词查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TermQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化分词查询。
            </summary>
            <param name="t">分词。</param>
        </member>
        <member name="M:EIIP.SE.Search.TermQuery.CreateWeight(EIIP.SE.Search.Searcher)">
            <summary>
            创建指定搜索的权重。
            </summary>
            <param name="searcher">搜索实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.TermQuery.ToString(System.String)">
            <summary>
            输出信息。
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.TermQuery.Term">
            <summary>
            获取查询分词。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.TermQuery.TermWeight">
            <summary>
            分词权重。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.WildcardQuery">
            <summary>
            通配符匹配查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.WildcardQuery.#ctor(EIIP.SE.Index.Term)">
            <summary>
            实例化通配符匹配查询。
            </summary>
            <param name="term">分词</param>
        </member>
        <member name="M:EIIP.SE.Search.WildcardQuery.GetEnum(EIIP.SE.Index.IndexReader)">
            <summary>
            获取指定索引阅读器中的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardQuery.Equals(System.Object)">
            <summary>
            相等比较。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.RemoteSearchable">
            <summary>
            可远程搜索。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.#ctor(EIIP.SE.Search.ISearchable)">
            <summary>
            实例化远程搜索。
            </summary>
            <param name="local">本地搜索</param>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,EIIP.SE.Search.HitCollector)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">匹配文档的权重</param>
            <param name="filter">筛选器实例</param>
            <param name="results">用于存储搜索结果的点击计数器</param>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Close">
            <summary>
            关闭搜索器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.DocFreq(EIIP.SE.Index.Term)">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="term">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.DocFreqs(EIIP.SE.Index.Term[])">
            <summary>
            获取含指定检索词的文档号。
            </summary>
            <param name="terms">检索词</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.MaxDoc">
            <summary>
            获取最大文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32)">
            <summary>
            执行搜索。
            </summary>
            <param name="weight">查询权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置要返回前几个文档结果</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Search(EIIP.SE.Search.IWeight,EIIP.SE.Search.Filter,System.Int32,EIIP.SE.Search.Sort)">
            <summary>
            搜索。
            </summary>
            <param name="weight">权重</param>
            <param name="filter">筛选器</param>
            <param name="n">设置前n项</param>
            <param name="sort">排序</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Doc(System.Int32)">
            <summary>
            获取指定文档号的文档。
            </summary>
            <param name="i">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Doc(System.Int32,EIIP.SE.Documents.IFieldSelector)">
            <summary>
            获取指定文档。
            </summary>
            <param name="i">文档号</param>
            <param name="fieldSelector">字段筛选器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Rewrite(EIIP.SE.Search.Query)">
            <summary>
            重写查询。
            </summary>
            <param name="original">要重写的查询</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Explain(EIIP.SE.Search.IWeight,System.Int32)">
            <summary>
            获取描述。
            </summary>
            <param name="weight">查询权重</param>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.RemoteSearchable.Main(System.String[])">
            <summary>
            "//localhost/Searchable" 
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.ScoreDocComparator_Fields">
            <summary>
            评分文档比较器的字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.ScoreDocComparator_Fields.RELEVANCE">
            <summary>
            用于关联比较的比较器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.ScoreDocComparator_Fields.INDEXORDER">
            <summary>
            用于索引顺序的比较器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.AnonymousClassScoreDocComparator">
            <summary>
            按文档得分比较的评分文档比较器的匿名类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.AnonymousClassScoreDocComparator.Compare(EIIP.SE.Search.ScoreDoc,EIIP.SE.Search.ScoreDoc)">
            <summary>
            比较两个评分文档。
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.AnonymousClassScoreDocComparator.SortValue(EIIP.SE.Search.ScoreDoc)">
            <summary>
            获取指定评分文档的可比较对象。
            </summary>
            <param name="i">评分文档。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.AnonymousClassScoreDocComparator.SortType">
            <summary>
            获取文档得分排序类型。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.AnonymousClassScoreDocComparator1">
            <summary>
            按文档号比较的评分文档比较器的匿名类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.AnonymousClassScoreDocComparator1.Compare(EIIP.SE.Search.ScoreDoc,EIIP.SE.Search.ScoreDoc)">
            <summary>
            比较两个评分文档。
            </summary>
            <param name="i"></param>
            <param name="j"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.AnonymousClassScoreDocComparator1.SortValue(EIIP.SE.Search.ScoreDoc)">
            <summary>
            获取指定评分文档的可比较对象。
            </summary>
            <param name="i">评分文档。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.AnonymousClassScoreDocComparator1.SortType">
            <summary>
            获取排序类型。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.DisjunctionMaxScorer">
            <summary>
            分离的最大评分器类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.DisjunctionMaxScorer.subScorers">
            <summary>
            子评分器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxScorer.Add(EIIP.SE.Search.Scorer)">
            <summary>
            添加评分器。
            </summary>
            <param name="scorer"></param>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.DisjunctionMaxScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.ExactPhraseScorer">
            <summary>
            精确的短语查询评分器。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.PhraseScorer">
            <summary>
            短语查询评分器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.PhraseScorer.freq">
            <summary>
            短语词频。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.PhraseScorer.#ctor(EIIP.SE.Search.IWeight,EIIP.SE.Index.ITermPositions[],System.Int32[],EIIP.SE.Search.Similarity,System.Byte[])">
            <summary>
            实例化短语查询评分器。
            </summary>
            <param name="weight">权重</param>
            <param name="tps">分词位置信息</param>
            <param name="offsets">偏移量</param>
            <param name="similarity">相似度</param>
            <param name="norms">标准化数据</param>
        </member>
        <member name="M:EIIP.SE.Search.PhraseScorer.PhraseFreq">
            <summary>
            短语词频。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.PhraseScorer.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ExactPhraseScorer.#ctor(EIIP.SE.Search.IWeight,EIIP.SE.Index.ITermPositions[],System.Int32[],EIIP.SE.Search.Similarity,System.Byte[])">
            <summary>
            实例化精确的短语查询评分器。
            </summary>
            <param name="weight">权重</param>
            <param name="tps">分词位置信息</param>
            <param name="offsets">偏移量</param>
            <param name="similarity">相似度</param>
            <param name="norms">标准化数据</param>
        </member>
        <member name="T:EIIP.SE.Search.ReqExclScorer">
            <summary>
            包含请求及排除查询的评分器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ReqExclScorer.#ctor(EIIP.SE.Search.Scorer,EIIP.SE.Search.Scorer)">
            <summary>
            实例化含请求及可选部分的查询评分器。
            </summary>
            <param name="reqScorer">请求部分的查询评分器。必须匹配</param>
            <param name="exclScorer">排除部分的查询评分器。</param>
        </member>
        <member name="M:EIIP.SE.Search.ReqExclScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ReqExclScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.ReqExclScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ReqExclScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ReqExclScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.ReqOptSumScorer">
            <summary>
            含请求及可选部分的查询评分器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.ReqOptSumScorer.#ctor(EIIP.SE.Search.Scorer,EIIP.SE.Search.Scorer)">
            <summary>
            实例化含请求及可选部分的查询评分器。
            </summary>
            <param name="reqScorer">请求部分的查询评分器。必须匹配</param>
            <param name="optScorer">可选部分的查询评分器。仅用于评分</param>
        </member>
        <member name="M:EIIP.SE.Search.ReqOptSumScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ReqOptSumScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ReqOptSumScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.ReqOptSumScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.ReqOptSumScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.SloppyPhraseScorer">
            <summary>
            宽松的短语查询评分器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SloppyPhraseScorer.PhraseFreq">
            <summary>
            短语词频。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.TermScorer">
            <summary>
            匹配分词的评分器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.#ctor(EIIP.SE.Search.IWeight,EIIP.SE.Index.ITermDocs,EIIP.SE.Search.Similarity,System.Byte[])">
            <summary>
            实例化匹配分词的评分器。
            </summary>
            <param name="weight">查询中的分词权重</param>
            <param name="td">匹配分词的文档枚举数</param>
            <param name="similarity">相似度实例</param>
            <param name="norms">字段标准化因子数组</param>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.Score(EIIP.SE.Search.HitCollector)">
            <summary>
            评分并收集所有匹配文档。
            </summary>
            <param name="hc">要收集的匹配文档。</param>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.Score(EIIP.SE.Search.HitCollector,System.Int32)">
            <summary>
            评分并收集所有匹配文档。若还有文档没处理则返回true。
            </summary>
            <param name="c">要收集的匹配文档。</param>
            <param name="end">要处理的最大文档数量</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.Score">
            <summary>
            获取当前查询匹配文档的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <param name="target">目标文档ID</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.Explain(System.Int32)">
            <summary>
            获取指定文档的评分描述。
            </summary>
            <param name="doc">文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TermScorer.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Sort">
            <summary>
            排序类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Sort.RELEVANCE">
            <summary>
            以相似性排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Sort.INDEXORDER">
            <summary>
            以索引顺序排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Sort.fields">
            <summary>
            排序字段
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Sort.#ctor">
            <summary>
            实例化排序。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Sort.#ctor(System.String)">
            <summary>
            实例化排序。
            </summary>
            <param name="field">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.#ctor(System.String,System.Boolean)">
            <summary>
            实例化排序。
            </summary>
            <param name="field">排序字段</param>
            <param name="reverse">设置是否反向排序</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.#ctor(System.String[])">
            <summary>
            实例化排序。
            </summary>
            <param name="fields">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.#ctor(EIIP.SE.Search.SortField)">
            <summary>
            实例化排序。
            </summary>
            <param name="field">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.#ctor(EIIP.SE.Search.SortField[])">
            <summary>
            实例化排序。
            </summary>
            <param name="fields">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.SetSort(System.String)">
            <summary>
            设置排序字段。
            </summary>
            <param name="field">排序字段。</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.SetSort(System.String,System.Boolean)">
            <summary>
            设置排序字段。
            </summary>
            <param name="field">排序字段。</param>
            <param name="reverse">设置是否反向排序</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.SetSort(System.String[])">
            <summary>
            设置排序字段。
            </summary>
            <param name="fieldnames">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.SetSort(EIIP.SE.Search.SortField)">
            <summary>
            设置排序字段。
            </summary>
            <param name="field">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.SetSort(EIIP.SE.Search.SortField[])">
            <summary>
            设置排序字段。
            </summary>
            <param name="fields">排序字段</param>
        </member>
        <member name="M:EIIP.SE.Search.Sort.GetSort">
            <summary>
            获取排序字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Sort.ToString">
            <summary>
            输出排序信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.SortComparator">
            <summary>
            排序评分文档的比较器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SortComparator.NewComparator(EIIP.SE.Index.IndexReader,System.String)">
            <summary>
            创建评分文档比较器。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="fieldname">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.SortComparator.GetComparable(System.String)">
            <summary> 
            获取分词文本的可比较对象。
            </summary>
            <param name="termtext">分词文本</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.SortField">
            <summary>
            根据指定字段的检索词排序文档的类。字段是经过排序的。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.SCORE">
            <summary>
            由文档得分排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.DOC">
            <summary>
            由文档号排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.AUTO">
            <summary>
            基于字段内容确定排序类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.STRING">
            <summary>
            使用检索词字串排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.INT">
            <summary>
            使用检索词的整型编码值排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.FLOAT">
            <summary>
            使用检索词的浮点型编码值排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.LONG">
            <summary>
            使用检索词的长整型编码值排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.DOUBLE">
            <summary>
            使用检索词的双精度型编码值排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.SHORT">
            <summary>
            使用检索词的短整数编码值排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.CUSTOM">
            <summary>
            使用自定义比较器排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.BYTE">
            <summary>
            使用检索词的(字节，低位在前)值排序。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.FIELD_SCORE">
            <summary>
            由文档得分排序的排序字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.FIELD_DOC">
            <summary>
            由文档号排序的排序字段。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.SortField.m_IsReverse">
            <summary>
            指示是否反向排序。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名，不能为null</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,System.Boolean)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名，不能为null</param>
            <param name="reverse">设置是否为反向排序</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,System.Int32)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名。若type为 SCORE 或 DOC 时，不能为null</param>
            <param name="type">排序类型</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名。若type为 SCORE 或 DOC 时，不能为null</param>
            <param name="type">排序类型</param>
            <param name="reverse">设置是否为反向排序</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,System.Globalization.CultureInfo)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名，不能为null</param>
            <param name="locale">字段值的区域信息</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名，不能为null</param>
            <param name="locale">字段值的区域信息</param>
            <param name="reverse">设置是否为反向排序</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,EIIP.SE.Search.ISortComparatorSource)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名。若type为 SCORE 或 DOC 时，不能为null</param>
            <param name="comparator">排序比较器</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.#ctor(System.String,EIIP.SE.Search.ISortComparatorSource,System.Boolean)">
            <summary>
            实例化排序字段。
            </summary>
            <param name="field">要排序的字段名。若type为 SCORE 或 DOC 时，不能为null</param>
            <param name="comparator">排序比较器</param>
            <param name="reverse">设置是否为反向排序</param>
        </member>
        <member name="M:EIIP.SE.Search.SortField.ToString">
            <summary>
            输出字段信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Search.SortField.Field">
            <summary>
            获取字段名称。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SortField.Type">
            <summary>
            获取字段内容排序类型。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SortField.Locale">
            <summary>
            获取字段值的区域信息。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SortField.IsReverse">
            <summary>
            获取一个值，该值指示是否反向排序。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.SortField.Factory">
            <summary>
            获取排序比较器工厂。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.IPayloadSpans">
            <summary>
            定义有效负载状态的范围查询接口。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.ISpans">
            <summary>
            定义范围匹配的枚举接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.ISpans.Next">
            <summary>
            移至下一匹配，成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.ISpans.SkipTo(System.Int32)">
            <summary>
            跳过指定的匹配。要大于等于指定的文档号。
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.ISpans.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.ISpans.Start">
            <summary>
            获取起始位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.ISpans.End">
            <summary>
            获取结束位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.IPayloadSpans.GetPayload">
            <summary>
            获取当前范围的有效负载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.IPayloadSpans.IsPayloadAvailable">
            <summary>
            测试有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.NearSpansOrdered">
            <summary>
            邻近范围的有序查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansOrdered.inSameDoc">
            <summary>
            指示所有的子Span是否有相同的文档号。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.#ctor(EIIP.SE.Search.Spans.SpanNearQuery,EIIP.SE.Index.IndexReader)">
            <summary>
            实例化邻近范围的无序查询。
            </summary>
            <param name="spanNearQuery">邻近范围查询。</param>
            <param name="reader">索引阅读器</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.Doc">
            <summary>
            获取文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.Start">
            <summary>
            获取起始值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.End">
            <summary>
            获取结束值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.GetPayload">
            <summary>
            获取当前范围的有效负载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.IsPayloadAvailable">
            <summary>
            测试有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.Next">
            <summary>
            移至下一元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.SkipTo(System.Int32)">
            <summary>
            跳至指定文档位置。
            </summary>
            <param name="target">目标文档位置。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.DocSpansOrdered(EIIP.SE.Search.Spans.ISpans,EIIP.SE.Search.Spans.ISpans)">
            <summary>
            检查同一文档的两个Span是否是有序的。
            </summary>
            <param name="spans1"></param>
            <param name="spans2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansOrdered.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.NearSpansUnordered">
            <summary>
            邻近范围的无序查询。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.ordered">
            <summary>
            有序列表
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.first">
            <summary>
            链接
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.last">
            <summary>
            由文档排序
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.totalLength">
            <summary>
            总长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.queue">
            <summary>
            spans的排序队列。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.max">
            <summary>
            队列中的最大元素。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.more">
            <summary>
            还未完成时返回true
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.NearSpansUnordered.firstTime">
            <summary>
            指示是否第一次调用next()。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.#ctor(EIIP.SE.Search.Spans.SpanNearQuery,EIIP.SE.Index.IndexReader)">
            <summary>
            实例化邻近范围的无序查询。
            </summary>
            <param name="query">邻近范围查询。</param>
            <param name="reader">索引阅读器</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.Next">
            <summary>
            移至下一元素。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.SkipTo(System.Int32)">
            <summary>
            跳至指定文档位置。
            </summary>
            <param name="target">目标文档位置。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.Doc">
            <summary>
            获取文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.Start">
            <summary>
            获取起始值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.End">
            <summary>
            获取结束值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.GetPayload">
            <summary>
            获取当前范围的有效负载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.IsPayloadAvailable">
            <summary>
            测试有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.NearSpansUnordered.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.NearSpansUnordered.SpansCell">
            <summary>
            Spans的包装。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.NearSpansUnordered.CellQueue">
            <summary>
            SpansCell的队列。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanFirstQuery">
            <summary>
            匹配首个范围的查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.#ctor(EIIP.SE.Search.Spans.SpanQuery,System.Int32)">
            <summary>
            实例化匹配首个范围的查询。
            </summary>
            <param name="match">要匹配的范围查询</param>
            <param name="end"></param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetMatch">
            <summary>
            获取匹配的首个范围。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetEnd">
            <summary>
            获取最大的结束位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetField">
            <summary>
            获取查询匹配的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetTerms">
            <summary>
            获取查询匹配的分词集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetPayloadSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取有效负载范围的匹配查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围查询匹配。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanFirstQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanNearQuery">
            <summary>
            邻接范围查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.#ctor(EIIP.SE.Search.Spans.SpanQuery[],System.Int32,System.Boolean)">
            <summary>
            实例化邻接范围查询。
            </summary>
            <param name="clauses">范围查询子句</param>
            <param name="slop"></param>
            <param name="inOrder"></param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetClauses">
            <summary>
            获取匹配的查询子句。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetSlop">
            <summary>
            获取间隔。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.IsInOrder">
            <summary>
            获取一个值，该值指示是否是按次序的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetField">
            <summary>
            获取字段名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetTerms">
            <summary>
            获取分词集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围查询匹配。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetPayloadSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取有效负载范围的匹配查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNearQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanNotQuery">
            <summary>
            范围排除查询。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.#ctor(EIIP.SE.Search.Spans.SpanQuery,EIIP.SE.Search.Spans.SpanQuery)">
            <summary>
            实例化范围排除查询。
            </summary>
            <param name="include">包含查询</param>
            <param name="exclude">排除查询</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetInclude">
            <summary>
            获取包含查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetExclude">
            <summary>
            获取排除查询。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetField">
            <summary>
            获取查询匹配的字段。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetTerms">
            <summary>
            获取查询匹配的分词集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围查询匹配。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetPayloadSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取有效负载范围的匹配查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanNotQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.SpanOrQuery">
            <summary>
            范围联合查询类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.#ctor(EIIP.SE.Search.Spans.SpanQuery[])">
            <summary>
            实例化范围联合查询。
            </summary>
            <param name="clauses">范围查询子句数组</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.GetClauses">
            <summary>
            获取范围查询子句数组。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.GetField">
            <summary>
            获取查询匹配的字段。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.GetTerms">
            <summary>
            获取查询匹配的分词集。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.ExtractTerms(System.Collections.Hashtable)">
            <summary>
            从查询中提取分词。若查询还未被重写则抛出异常。
            </summary>
            <param name="terms">要存储分词的集合</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.Rewrite(EIIP.SE.Index.IndexReader)">
            <summary>
            重写查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.ToString(System.String)">
            <summary>
            输出查询信息。
            </summary>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.GetPayloadSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取有效负载范围的匹配查询。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.SpanOrQuery.GetSpans(EIIP.SE.Index.IndexReader)">
            <summary>
            获取范围查询匹配。
            </summary>
            <param name="reader">索引阅读器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.Spans.TermSpans">
            <summary>
            分词范围。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.TermSpans.positions">
            <summary>
            分词位置
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.TermSpans.term">
            <summary>
            分词。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.TermSpans.doc">
            <summary>
            文档号
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.TermSpans.freq">
            <summary>
            词频
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.TermSpans.count">
            <summary>
            数量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.Spans.TermSpans.position">
            <summary>
            位置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.#ctor(EIIP.SE.Index.ITermPositions,EIIP.SE.Index.Term)">
            <summary>
            实例化分词范围。
            </summary>
            <param name="positions">分词位置实例</param>
            <param name="term">分词</param>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.Next">
            <summary>
            移至下一位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.SkipTo(System.Int32)">
            <summary>
            跳至指定文档。
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.Doc">
            <summary>
            获取文档号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.Start">
            <summary>
            获取起始位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.End">
            <summary>
            获取结束位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.GetPositions">
            <summary>
            获取分词位置实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.GetPayload">
            <summary>
            获取有效负载。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.IsPayloadAvailable">
            <summary>
            检查加载的有效负载是否是有效的。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.Spans.TermSpans.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.TimeLimitedCollector">
            <summary>
            时限的命中收集器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.TimeLimitedCollector.DEFAULT_RESOLUTION">
            <summary>
            默认的时间颗粒度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.TimeLimitedCollector.DEFAULT_GREEDY">
            <summary>
            指示是否是贪婪的。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TimeLimitedCollector.#ctor(EIIP.SE.Search.HitCollector,System.Int64)">
            <summary>
            实例化时限的命中收集器。
            </summary>
            <param name="hc">命中收集器。</param>
            <param name="timeAllowed">允许的时间（毫秒）</param>
        </member>
        <member name="M:EIIP.SE.Search.TimeLimitedCollector.Collect(System.Int32,System.Single)">
            <summary>
            点击计数。
            </summary>
            <param name="doc">文档号</param>
            <param name="score">评分</param>
        </member>
        <member name="P:EIIP.SE.Search.TimeLimitedCollector.Resolution">
            <summary>
            获取或获取时间颗粒度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.TimeLimitedCollector.IsGreedy">
            <summary>
            获取或设置一个值，该值指示是否是贪婪的。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.TimeLimitedCollector.TimerThread">
            <summary>
            定时器线程。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.TimeLimitedCollector.TimeExceededException">
            <summary>
            超时异常类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TimeLimitedCollector.TimeExceededException.#ctor(System.Int64,System.Int64,System.Int32)">
            <summary>
            实例化超时异常。
            </summary>
            <param name="timeAllowed">允许时间</param>
            <param name="timeElapsed">运行时间</param>
            <param name="lastDocCollected">超时时最近文档号。</param>
        </member>
        <member name="P:EIIP.SE.Search.TimeLimitedCollector.TimeExceededException.TimeAllowed">
            <summary>
            获取允许的时间(毫秒)。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.TimeLimitedCollector.TimeExceededException.TimeElapsed">
            <summary>
            获取运行的时间(毫秒)。
            </summary>
        </member>
        <member name="P:EIIP.SE.Search.TimeLimitedCollector.TimeExceededException.LastDocCollected">
            <summary>
            获取超时时最近文档号。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.TopDocCollector">
            <summary>
            首项文档点击计数器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.TopDocCollector.totalHits">
            <summary>
            总点击率。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.TopDocCollector.hq">
            <summary>
            文档队列。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TopDocCollector.#ctor(System.Int32)">
            <summary>
            实例化首项文档点击计数器。
            </summary>
            <param name="numHits">最大点击率</param>
        </member>
        <member name="M:EIIP.SE.Search.TopDocCollector.#ctor(EIIP.SE.Util.PriorityQueue)">
            <summary>
            实例化首项文档点击计数器。
            </summary>
            <param name="hq">文档队列。</param>
        </member>
        <member name="M:EIIP.SE.Search.TopDocCollector.Collect(System.Int32,System.Single)">
            <summary>
            点击计数。
            </summary>
            <param name="doc">文档号</param>
            <param name="score">评分</param>
        </member>
        <member name="M:EIIP.SE.Search.TopDocCollector.GetTotalHits">
            <summary>
            获取匹配查询的文档总数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.TopDocCollector.TopDocs">
            <summary>
            返回命中的前几项文档。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.TopDocs">
            <summary>
            返回的前几项文档类。
            </summary>
            <seealso cref="M:EIIP.SE.Search.Searcher.Search(EIIP.SE.Search.Query,EIIP.SE.Search.Filter,System.Int32)"/>
        </member>
        <member name="F:EIIP.SE.Search.TopDocs.totalHits">
            <summary>
            查询的总点击率。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.TopDocs.scoreDocs">
            <summary>
            查询的评分文档数组。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TopDocs.#ctor(System.Int32,EIIP.SE.Search.ScoreDoc[],System.Single)">
            <summary>
            实例化返回的前几项文档。
            </summary>
            <param name="totalHits">查询的总点击率。</param>
            <param name="scoreDocs">查询的评分文档数组。</param>
            <param name="maxScore">最大评分</param>
        </member>
        <member name="P:EIIP.SE.Search.TopDocs.MaxScore">
            <summary>
            获取或设置最大评分。
            </summary>
        </member>
        <member name="T:EIIP.SE.Search.TopFieldDocCollector">
            <summary>
            首项字段文档点击计数器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TopFieldDocCollector.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Search.Sort,System.Int32)">
            <summary>
            实例化按分词点击率的字段存储队列。
            </summary>
            <param name="reader">索引阅读器。</param>
            <param name="sort">排序实例</param>
            <param name="numHits">命中数量，必须大于零</param>
        </member>
        <member name="M:EIIP.SE.Search.TopFieldDocCollector.Collect(System.Int32,System.Single)">
            <summary>
            点击计数。
            </summary>
            <param name="doc">文档号</param>
            <param name="score">评分</param>
        </member>
        <member name="M:EIIP.SE.Search.TopFieldDocCollector.TopDocs">
            <summary>
            返回命中的前几项文档。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.TopFieldDocs">
            <summary>
            返回前几项字段文档类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.TopFieldDocs.fields">
            <summary>
            排序字段数组。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.TopFieldDocs.#ctor(System.Int32,EIIP.SE.Search.ScoreDoc[],EIIP.SE.Search.SortField[],System.Single)">
            <summary>
            实例化返回前几项字段文档。
            </summary>
            <param name="totalHits">查询的总点击数。</param>
            <param name="scoreDocs">查询的前几项评分文档</param>
            <param name="fields">排序字段</param>
            <param name="maxScore">最大评分</param>
        </member>
        <member name="T:EIIP.SE.Search.WildcardTermEnum">
            <summary>
            通配符过滤的分词枚举数。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.WildcardTermEnum.WILDCARD_STRING">
            <summary>
            字符串通配符。
            </summary>
        </member>
        <member name="F:EIIP.SE.Search.WildcardTermEnum.WILDCARD_CHAR">
            <summary>
            字符通配符。
            </summary>
        </member>
        <member name="M:EIIP.SE.Search.WildcardTermEnum.#ctor(EIIP.SE.Index.IndexReader,EIIP.SE.Index.Term)">
            <summary>
            实例化通配符过滤的分词枚举数。
            </summary>
            <param name="reader">索引阅读器</param>
            <param name="term">分词</param>
        </member>
        <member name="M:EIIP.SE.Search.WildcardTermEnum.TermCompare(EIIP.SE.Index.Term)">
            <summary>
            分词比较。
            </summary>
            <param name="term">要比较的分词。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardTermEnum.Difference">
            <summary>
            获取差异度。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardTermEnum.EndEnum">
            <summary>
            判断是否已到达枚举尾部。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardTermEnum.WildcardEquals(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            通配符相等。
            </summary>
            <param name="pattern">模式</param>
            <param name="patternIdx">模式索引</param>
            <param name="str">字符串值</param>
            <param name="stringIdx">字符串索引</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Search.WildcardTermEnum.Close">
            <summary>
            关闭活动枚举。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.AlreadyClosedException">
            <summary>
            已关闭异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.AlreadyClosedException.#ctor(System.String)">
            <summary>
            实例化已关闭异常。
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:EIIP.SE.Store.BufferedIndexOutput">
            <summary>
            缓冲的文件夹输出流基类。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.IndexOutput">
            <summary>
            文件夹输出流基类。
            </summary>
            <seealso cref="T:EIIP.SE.Store.Directory"/>
            <seealso cref="T:EIIP.SE.Store.IndexInput"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteByte(System.Byte)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数据。</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteBytes(System.Byte[],System.Int32)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数组。</param>
            <param name="length">要写入的字节数量</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数组。</param>
            <param name="offset">字节数组偏移量</param>
            <param name="length">要写入的字节数量</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteInt(System.Int32)">
            <summary>
            写入整型数据。
            </summary>
            <param name="i">整型数据。</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadInt"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteVInt(System.Int32)">
            <summary>
            写入无符号整型数据。
            </summary>
            <param name="i">无符号整型数据。</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadVInt"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteLong(System.Int64)">
            <summary>
            写入长整型数据。
            </summary>
            <param name="l">长整型数据。</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadLong"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteVLong(System.Int64)">
            <summary>
            写入无符号长整型数据。
            </summary>
            <param name="l">无符号长整型数据。</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadVLong"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteString(System.String)">
            <summary>
            写入字符串。
            </summary>
            <param name="s">字符串数据。</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadString"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteChars(System.String,System.Int32,System.Int32)">
            <summary>
            写入字符串。必须先预转换为 UTF-8 字节数据，或使用WriteString()。
            </summary>
            <param name="s">源字符串</param>
            <param name="start">起始位置</param>
            <param name="length">要写入的长度</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadChars(System.Char[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            写入字符数组。必须先预转换为 UTF-8 字节数据，或使用WriteString()。
            </summary>
            <param name="s">源字符串</param>
            <param name="start">起始位置</param>
            <param name="length">要写入的长度</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadChars(System.Char[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.CopyBytes(EIIP.SE.Store.IndexInput,System.Int64)">
            <summary>
            从input中复制指定数量的字节数据。
            </summary>
            <param name="input">索引输入器</param>
            <param name="numBytes">要复制的数据量</param>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.Flush">
            <summary>
            清除缓冲区。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.Close">
            <summary>
            关闭输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.GetFilePointer">
            <summary>
            获取当前文件的写入位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.IndexOutput.Seek(System.Int64)">
            <summary>
            设置文件的写入位置。
            </summary>
            <param name="pos">位置。</param>
        </member>
        <member name="P:EIIP.SE.Store.IndexOutput.Length">
            <summary>
            获取或设置文件的长度。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.BufferedIndexOutput.BUFFER_SIZE">
            <summary>
            缓存区尺寸。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.WriteByte(System.Byte)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数据。</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadByte"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数组。</param>
            <param name="offset">字节数组偏移量</param>
            <param name="length">要写入的字节数量</param>
            <seealso cref="M:EIIP.SE.Store.IndexInput.ReadBytes(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.Flush">
            <summary>
            清除缓冲区。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.FlushBuffer(System.Byte[],System.Int32)">
            <summary>
            写入缓存中的所有数据。
            </summary>
            <param name="b">缓存</param>
            <param name="len">要写入的数据长度</param>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.FlushBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入缓存中的所有剩余数据。
            </summary>
            <param name="b">缓存</param>
            <param name="offset">偏移量</param>
            <param name="len">要写入的数据长度</param>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.Close">
            <summary>
            关闭输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.GetFilePointer">
            <summary>
            获取当前文件的写入位置。
            </summary>
            <seealso cref="M:EIIP.SE.Store.BufferedIndexOutput.Seek(System.Int64)"/>
        </member>
        <member name="M:EIIP.SE.Store.BufferedIndexOutput.Seek(System.Int64)">
            <summary>
            设置文件的写入位置。
            </summary>
            <seealso cref="M:EIIP.SE.Store.BufferedIndexOutput.GetFilePointer"/>
        </member>
        <member name="T:EIIP.SE.Store.ChecksumIndexInput">
            <summary>
            校验和文件夹输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.#ctor(EIIP.SE.Store.IndexInput)">
            <summary>
            实例化校验和文件夹输入流。
            </summary>
            <param name="main">文件夹输入流。</param>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.ReadByte">
            <summary>
            读取一字节。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.GetChecksum">
            <summary>
            获取校验合的值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.Close">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.GetFilePointer">
            <summary>
            获取当前文件的读取位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexInput.Seek(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
        </member>
        <member name="P:EIIP.SE.Store.ChecksumIndexInput.Length">
            <summary>
            获取文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.ChecksumIndexOutput">
            <summary>
            校验和文件夹输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.#ctor(EIIP.SE.Store.IndexOutput)">
            <summary>
            实例化校验和文件夹输出流。
            </summary>
            <param name="main">文件夹输出流。</param>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.WriteByte(System.Byte)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数据。</param>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数组。</param>
            <param name="offset">字节数组偏移量</param>
            <param name="length">要写入的字节数量</param>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.GetChecksum">
            <summary>
            获取校验合的值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.Flush">
            <summary>
            清除缓冲区。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.Close">
            <summary>
            关闭输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.GetFilePointer">
            <summary>
            获取当前文件的写入位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.Seek(System.Int64)">
            <summary>
            设置文件的写入位置。
            </summary>
            <param name="pos">位置。</param>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.PrepareCommit">
            <summary>
            准备事务提交。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.ChecksumIndexOutput.FinishCommit">
            <summary>
            完成事务提交。
            </summary>
        </member>
        <member name="P:EIIP.SE.Store.ChecksumIndexOutput.Length">
            <summary>
            获取文件的长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.FSDirectory">
            <summary> 
            文件系统目录类。
            </summary>
            <seealso cref="T:EIIP.SE.Store.Directory"/>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.DIRECTORIES">
            <summary>
            文件夹缓存。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.IMPL">
            <summary>
            实现基于文件系统的文件夹实例类型。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.buffer">
            <summary>
            用于 RenameTo 方法的缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.#ctor">
            <summary>
            实例化文件系统目录。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetDirectory(System.String)">
            <summary>
            获取文件夹实例。
            </summary>
            <param name="path">物理文件夹路径</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetDirectory(System.String,EIIP.SE.Store.LockFactory)">
            <summary>
            获取文件夹实例。
            </summary>
            <param name="path">物理文件夹路径</param>
            <param name="lockFactory">锁工厂实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetDirectory(System.IO.FileInfo)">
            <summary>
            获取文件夹实例。
            </summary>
            <param name="file">物理文件夹实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetDirectory(System.IO.FileInfo,EIIP.SE.Store.LockFactory)">
            <summary>
            获取文件夹实例。
            </summary>
            <param name="file">物理文件夹实例</param>
            <param name="lockFactory">锁工厂实例</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetDirectory(System.String,System.Boolean)">
            <summary>
            获取文件夹实例。
            </summary>
            <param name="path">物理文件夹路径</param>
            <param name="create">设置是否是新建，若已有内容则会被抹去</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetDirectory(System.IO.FileInfo,System.Boolean)">
            <summary>
            获取文件夹实例。
            </summary>
            <param name="file">物理文件夹实例</param>
            <param name="create">设置是否是新建，若已有内容则会被抹去</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.List">
            <summary>
            获取文件列表。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FileExists(System.String)">
            <summary>
            测试指定文件是否存在。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FileModified(System.String)">
            <summary>
            获取指定文件的修改时间。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FileModified(System.IO.FileInfo,System.String)">
            <summary>
            获取指定文件的修改时间。
            </summary>
            <param name="directory">文件夹信息</param>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.TouchFile(System.String)">
            <summary>
            设置指定文件的修改时间为当前时间。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FileLength(System.String)">
            <summary>
            获取指定文件的长度。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.DeleteFile(System.String)">
            <summary>
            移除文件夹中指定的文件。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.RenameFile(System.String,System.String)">
            <summary>
            文件重命名。
            </summary>
            <param name="from">旧文件名</param>
            <param name="to">新文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.CreateOutput(System.String)">
            <summary>
            创建一个新的空文件。返回该文件的写入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.Sync(System.String)">
            <summary>
            同步操作。确认所有的写入操作都已更新至存储区。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.OpenInput(System.String)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.OpenInput(System.String,System.Int32)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <param name="bufferSize">缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetLockID">
            <summary>
            获取锁ID。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.Close">
            <summary>
            关闭文件流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.GetFile">
            <summary>
            获取物理文件夹实例。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.ToString">
            <summary>
            输出信息。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Store.FSDirectory.DisableLocks">
            <summary>
            获取或设置一个值，该值指示是否取消文件锁定。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.FSDirectory.FSIndexInput">
            <summary>
            文件系统索引输入流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.FSIndexInput.file">
            <summary>
            文件描述器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.FSIndexInput.isClone">
            <summary>
            指示是否克隆。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.#ctor(System.IO.FileInfo)">
            <summary>
            实例化文件系统索引输入流。
            </summary>
            <param name="path">文件实例</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.#ctor(System.IO.FileInfo,System.Int32)">
            <summary>
            实例化文件系统索引输入流。
            </summary>
            <param name="path">文件实例</param>
            <param name="bufferSize">缓存区尺寸</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.ReadInternal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取以填充缓存。
            </summary>
            <param name="b">缓存</param>
            <param name="offset">存储位置的偏移量</param>
            <param name="len">要读取的长度</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.Close">
            <summary>
            关闭文件流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.SeekInternal(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.Clone">
            <summary>
            克隆输入流(浅表副本)。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.IsFDValid">
            <summary>
            测试文件流是否是合法的。
            </summary>
        </member>
        <member name="P:EIIP.SE.Store.FSDirectory.FSIndexInput.Length">
            <summary>
            获取文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor">
            <summary>
            描述器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor.isOpen">
            <summary>
            指示文件是否已打开。 
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor.position">
            <summary>
            偏移量。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor.length">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor.#ctor(EIIP.SE.Store.FSDirectory.FSIndexInput,System.IO.FileInfo,System.IO.FileAccess)">
            <summary>
            实例化描述器。
            </summary>
            <param name="fsIndexInput">文件系统索引输入流。</param>
            <param name="file">物理文件</param>
            <param name="mode">文件访问模式</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor.Close">
            <summary>
            关闭流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexInput.Descriptor.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.FSDirectory.FSIndexOutput">
            <summary>
            文件系统索引输出流。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.FSDirectory.FSIndexOutput.isOpen">
            <summary>
            指示文件是否是打开的。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexOutput.#ctor(System.IO.FileInfo)">
            <summary>
            实例化文件系统索引输出流。
            </summary>
            <param name="path">文件实例</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexOutput.FlushBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入缓存中的所有剩余数据。
            </summary>
            <param name="b">缓存</param>
            <param name="offset">偏移量</param>
            <param name="size">要写入的数据长度</param>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexOutput.Close">
            <summary>
            关闭输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.FSDirectory.FSIndexOutput.Seek(System.Int64)">
            <summary>
            设置文件的写入位置。
            </summary>
        </member>
        <member name="P:EIIP.SE.Store.FSDirectory.FSIndexOutput.Length">
            <summary>
            获取文件长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.Lock">
            <summary>
            互斥锁基类。
            语法示例: new Lock.With(directory.makeLock("mylock")){public object doBody() {...}}.Run();
            </summary>
            <seealso cref="M:EIIP.SE.Store.Directory.MakeLock(System.String)"/>
        </member>
        <member name="F:EIIP.SE.Store.Lock.LOCK_OBTAIN_WAIT_FOREVER">
            <summary>
            不断尝试获取锁。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.Lock.LOCK_POLL_INTERVAL">
            <summary>
            锁池数量。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Lock.Obtain">
            <summary>
            尝试获取执行访问。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="F:EIIP.SE.Store.Lock.failureReason">
            <summary>
            锁定失败时的异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Lock.Obtain(System.Int64)">
            <summary>
            尝试获取执行访问。成功返回true。
            </summary>
            <param name="lockWaitTimeout">等待的时间，毫秒。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.Lock.Release">
            <summary>
            释放锁。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Lock.IsLocked">
            <summary>
            获取一个值，该值指示资源是否已锁定。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.Lock.With">
            <summary>
            访问控制辅助基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Lock.With.#ctor(EIIP.SE.Store.Lock,System.Int64)">
            <summary>
            实例化锁访问控制。
            </summary>
            <param name="l">锁</param>
            <param name="lockWaitTimeout">等待超时时间</param>
        </member>
        <member name="M:EIIP.SE.Store.Lock.With.DoBody">
            <summary>
            执行锁定代码块。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.Lock.With.Run">
            <summary>
            获取访问控制并执行锁定代码块。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.LockFactory">
            <summary>
            锁工厂基类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.LockFactory.lockPrefix">
            <summary>
            由工厂创建的锁前缀。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.LockFactory.MakeLock(System.String)">
            <summary>
            创建指定名称的锁。
            </summary>
            <param name="lockName">锁名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.LockFactory.ClearLock(System.String)">
            <summary>
            清除指定锁。
            </summary>
            <param name="lockName">要清除的锁名称</param>
        </member>
        <member name="P:EIIP.SE.Store.LockFactory.LockPrefix">
            <summary>
            获取或设置由工厂创建的锁前缀。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.LockObtainFailedException">
            <summary>
            获取锁失败时的异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.LockObtainFailedException.#ctor(System.String)">
            <summary>
            实例化获取锁失败时的异常。
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="M:EIIP.SE.Store.LockObtainFailedException.#ctor(System.String,System.Exception)">
            <summary>
            实例化获取锁失败时的异常。
            </summary>
            <param name="message">异常消息</param>
            <param name="cause">内置异常。</param>
        </member>
        <member name="T:EIIP.SE.Store.LockReleaseFailedException">
            <summary>
            释放锁失败时的异常。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.LockReleaseFailedException.#ctor(System.String)">
            <summary>
            实例化释放锁失败时的异常。
            </summary>
            <param name="message">异常消息。</param>
        </member>
        <member name="T:EIIP.SE.Store.LockVerifyServer">
            <summary>
            锁验证服务器。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.LockVerifyServer.Main(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:EIIP.SE.Store.MMapDirectory">
            <summary>
            内存目录系统。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.MMapDirectory.OpenInput(System.String)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.MMapDirectory.OpenInput(System.String,System.Int32)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <param name="bufferSize">缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.MMapDirectory.MultiMMapIndexInput.#ctor(System.IO.FileStream,System.Int32)">
            <summary>
            
            </summary>
            <param name="raf">随机访问文件</param>
            <param name="maxBufSize"></param>
        </member>
        <member name="T:EIIP.SE.Store.NativeFSLockFactory">
            <summary>
            本地文件系统锁工厂。
            </summary>
        </member>
        <member name="F:EIIP.SE.Store.NativeFSLockFactory.lockDir">
            <summary>
            要锁定的文件夹。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.#ctor">
            <summary>
            实例化缺省本地文件系统锁工厂。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.#ctor(System.String)">
            <summary>
            实例化指定本地文件系统锁工厂。
            </summary>
            <param name="lockDirName">要创建的锁文件夹名称</param>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.#ctor(System.IO.FileInfo)">
            <summary>
            实例化指定本地文件系统锁工厂。
            </summary>
            <param name="lockDir">要创建的锁文件夹名称</param>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.SetLockDir(System.IO.FileInfo)">
            <summary>
            设置锁文件。
            </summary>
            <param name="lockDir">锁文件夹。</param>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.AcquireTestLock">
            <summary>
            获取测试锁。简单测试以校验锁系统是否为正常工作。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.MakeLock(System.String)">
            <summary>
            创建指定名称的锁。
            </summary>
            <param name="lockName">锁名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.NativeFSLockFactory.ClearLock(System.String)">
            <summary>
            清除指定锁。
            </summary>
            <param name="lockName">要清除的锁名称</param>
        </member>
        <member name="T:EIIP.SE.Store.NoLockFactory">
            <summary>
            无锁工厂。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.NoLockFactory.GetNoLockFactory">
            <summary>
            获取无锁工厂。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.NoLockFactory.MakeLock(System.String)">
            <summary>
            创建指定名称的锁。
            </summary>
            <param name="lockName">锁名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.NoLockFactory.ClearLock(System.String)">
            <summary>
            清除指定锁。
            </summary>
            <param name="lockName">要清除的锁名称</param>
        </member>
        <member name="T:EIIP.SE.Store.RAMDirectory">
            <summary>
            内存持久层的文件夹类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.#ctor">
            <summary>
            实例化默认内存存储区文件夹。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.#ctor(EIIP.SE.Store.Directory)">
            <summary>
            实例化内存存储区文件夹。
            </summary>
            <param name="dir">文件夹实例</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.#ctor(System.IO.FileInfo)">
            <summary>
            实例化内存存储区文件夹。
            </summary>
            <param name="dir">索引文件目录</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.#ctor(System.String)">
            <summary>
            实例化内存存储区文件夹。
            </summary>
            <param name="dir">索引文件目录</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.List">
            <summary>
            获取文件列表。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.FileExists(System.String)">
            <summary>
            测试指定文件是否存在。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.FileModified(System.String)">
            <summary>
            获取指定文件的修改时间。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.TouchFile(System.String)">
            <summary>
            设置指定文件的修改时间为当前时间。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.FileLength(System.String)">
            <summary>
            获取指定文件的长度。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.SizeInBytes">
            <summary>
            获取文件中所有文件的字节数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.DeleteFile(System.String)">
            <summary>
            移除文件夹中指定的文件。
            </summary>
            <param name="name">文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.RenameFile(System.String,System.String)">
            <summary>
            文件重命名。
            </summary>
            <param name="from">旧文件名</param>
            <param name="to">新文件名</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.CreateOutput(System.String)">
            <summary>
            创建一个新的空文件。返回该文件的写入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>	
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.OpenInput(System.String)">
            <summary>
            打开指定文件输入流。
            </summary>
            <param name="name">文件名</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.Close">
            <summary>
            关闭文件流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMDirectory.EnsureOpen">
            <summary>
            确认已打开，否则抛出异常。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.RAMFile">
            <summary>
            存储在内存中的文件类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.#ctor">
            <summary>
            实例化存储在内存中的文件。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.#ctor(EIIP.SE.Store.RAMDirectory)">
            <summary>
            实例化存储在内存中的文件。
            </summary>
            <param name="directory">存储在内存中的文件夹。</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.AddBuffer(System.Int32)">
            <summary>
            添加指定尺寸的缓存。
            </summary>
            <param name="size">缓存尺寸</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.GetBuffer(System.Int32)">
            <summary>
            获取指定索引位置的缓存。
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.NumBuffers">
            <summary>
            获取缓存数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.NewBuffer(System.Int32)">
            <summary>
            分配指定尺寸的缓存区。
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMFile.GetSizeInBytes">
            <summary>
            获取文件夹尺寸。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Store.RAMFile.Length">
            <summary>
            获取或设置文件长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Store.RAMFile.LastModified">
            <summary>
            获取或设置最近修改时间。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.RAMInputStream">
            <summary>
            内存持久层的索引输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMInputStream.#ctor(EIIP.SE.Store.RAMFile)">
            <summary>
            实例化内存持久层的索引输入流。
            </summary>
            <param name="f">内存持久层的文件实例</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMInputStream.Close">
            <summary>
            关闭输入流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMInputStream.ReadByte">
            <summary>
            读取一字节。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMInputStream.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取字节数组。
            </summary>
            <param name="b">存储读取字节数据的数组</param>
            <param name="offset">存储的起始位置</param>
            <param name="len">存储的长度</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMInputStream.GetFilePointer">
            <summary>
            获取当前文件的读取位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMInputStream.Seek(System.Int64)">
            <summary>
            设置文件的读取位置。
            </summary>
            <param name="pos">读取位置。</param>
        </member>
        <member name="P:EIIP.SE.Store.RAMInputStream.Length">
            <summary>
            获取长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.RAMOutputStream">
            <summary>
            内存持久层输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.#ctor">
            <summary>
            实例化内存持久层输出流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.#ctor(EIIP.SE.Store.RAMFile)">
            <summary>
            实例化内存持久层输出流。
            </summary>
            <param name="f">内存持久层文件。</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.WriteTo(EIIP.SE.Store.IndexOutput)">
            <summary>
            写入索引输出内容。
            </summary>
            <param name="output">索引输出内容。</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.Reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.Close">
            <summary>
            关闭流。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.Seek(System.Int64)">
            <summary>
            设置文件的写入位置。
            </summary>
            <param name="pos">位置。</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.WriteByte(System.Byte)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数据。</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入字节数据。
            </summary>
            <param name="b">字节数组。</param>
            <param name="offset">字节数组偏移量</param>
            <param name="len">要写入的字节数量</param>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.Flush">
            <summary>
            清除缓冲区。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.GetFilePointer">
            <summary>
            获取当前文件的写入位置。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.RAMOutputStream.SizeInBytes">
            <summary>
            获取所有缓存尺寸。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Store.RAMOutputStream.Length">
            <summary>
            获取尺寸。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.SimpleFSLockFactory">
            <summary>
            简单文件系统锁工厂类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.SimpleFSLockFactory.#ctor">
            <summary>
            实例化简单文件系统锁工厂。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.SimpleFSLockFactory.#ctor(System.IO.FileInfo)">
            <summary>
            实例化简单文件系统锁工厂。
            </summary>
            <param name="lockDir">要创建的锁文件</param>
        </member>
        <member name="M:EIIP.SE.Store.SimpleFSLockFactory.#ctor(System.String)">
            <summary>
            实例化简单文件系统锁工厂。
            </summary>
            <param name="lockDirName">要创建的锁文件名称</param>
        </member>
        <member name="M:EIIP.SE.Store.SimpleFSLockFactory.SetLockDir(System.IO.FileInfo)">
            <summary>
            设置锁定文件。
            </summary>
            <param name="lockDir">要创建的锁文件</param>
        </member>
        <member name="M:EIIP.SE.Store.SimpleFSLockFactory.MakeLock(System.String)">
            <summary>
            创建指定名称的锁。
            </summary>
            <param name="lockName">锁名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.SimpleFSLockFactory.ClearLock(System.String)">
            <summary>
            清除指定锁。
            </summary>
            <param name="lockName">要清除的锁名称</param>
        </member>
        <member name="T:EIIP.SE.Store.SingleInstanceLock">
            <summary>
            单实例锁。
            </summary>
        </member>
        <member name="T:EIIP.SE.Store.SingleInstanceLockFactory">
            <summary>
            单实例锁工厂类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.SingleInstanceLockFactory.MakeLock(System.String)">
            <summary>
            创建指定名称的锁。
            </summary>
            <param name="lockName">锁名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.SingleInstanceLockFactory.ClearLock(System.String)">
            <summary>
            清除指定锁。
            </summary>
            <param name="lockName">要清除的锁名称</param>
        </member>
        <member name="T:EIIP.SE.Store.VerifyingLockFactory">
            <summary>
            验证锁工厂。
            </summary>
        </member>
        <member name="M:EIIP.SE.Store.VerifyingLockFactory.#ctor(System.Byte,EIIP.SE.Store.LockFactory,System.String,System.Int32)">
            <summary>
            实例化验证锁工厂。
            </summary>
            <param name="id">所有客户端的唯一ID</param>
            <param name="lf">锁工厂</param>
            <param name="host">LockVerifyServer 运行的主机名或IP地址</param>
            <param name="port">LockVerifyServer 的端口</param>
        </member>
        <member name="M:EIIP.SE.Store.VerifyingLockFactory.MakeLock(System.String)">
            <summary>
            创建指定名称的锁。
            </summary>
            <param name="lockName">锁名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Store.VerifyingLockFactory.ClearLock(System.String)">
            <summary>
            清除指定锁。
            </summary>
            <param name="lockName">要清除的锁名称</param>
        </member>
        <member name="T:EIIP.SE.Store.VerifyingLockFactory.CheckedLock">
            <summary>
            检查锁。
            </summary>
        </member>
        <member name="T:EIIP.SE.SupportClass">
            <summary>
            包含转换支持的类、接口及静态方法。
            </summary>
        </member>
        <member name="T:EIIP.SE.SupportClass.Checksum">
            <summary>
            定义校验和的接口。
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.Checksum.reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.Checksum.update(System.Int32)">
            <summary>
            更新校验合。
            </summary>
            <param name="b">要更新的值</param>
        </member>
        <member name="M:EIIP.SE.SupportClass.Checksum.update(System.Byte[])">
            <summary>
            更新校验合。
            </summary>
            <param name="buf">要更新的值</param>
        </member>
        <member name="M:EIIP.SE.SupportClass.Checksum.update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新校验合。
            </summary>
            <param name="buf">要更新的值</param>
            <param name="offset">b的偏移位置</param>
            <param name="length">要更新的长度</param>
        </member>
        <member name="M:EIIP.SE.SupportClass.Checksum.getValue">
            <summary>
            获取校验合的值。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.SupportClass.CRC32">
            <summary>
            32位冗余核验类。
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.CRC32.getValue">
            <summary>
            获取校验合的值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.SupportClass.CRC32.reset">
            <summary>
            重置。
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.CRC32.update(System.Int32)">
            <summary>
            更新校验合。
            </summary>
            <param name="bval">要更新的值</param>
        </member>
        <member name="M:EIIP.SE.SupportClass.CRC32.update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            更新校验合。
            </summary>
            <param name="buf">要更新的值</param>
            <param name="off">b的偏移位置</param>
            <param name="len">要更新的长度</param>
        </member>
        <member name="M:EIIP.SE.SupportClass.CRC32.update(System.Byte[])">
            <summary>
            更新校验合。
            </summary>
            <param name="buf">要更新的值</param>
        </member>
        <member name="T:EIIP.SE.SupportClass.CollectionsSupport">
            <summary>
            集合支持类。
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.CollectionsSupport.TailMap(System.Collections.Generic.SortedDictionary{System.String,EIIP.SE.Index.IndexReader},System.String)">
            <summary>
            获取字典中自指定键起始的后面部分集合。
            </summary>
            <param name="map">源字典</param>
            <param name="fromKey">要测试的起始键值</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.SupportClass.FileSupport">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.FileSupport.GetIndexFiles(System.String,EIIP.SE.Index.IndexFileNameFilter)">
            <summary>
            获取指定路径下的所有索引文件。
            </summary>
            <param name="fullName">索引文件夹物理路径</param>
            <param name="indexFileNameFilter">索引文件名称过滤器。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.SupportClass.Compare">
            <summary>
            比较。
            </summary>
        </member>
        <member name="M:EIIP.SE.SupportClass.Compare.CompareTermArrays(EIIP.SE.Index.Term[],EIIP.SE.Index.Term[])">
            <summary>
            比较两个分词数组。
            </summary>
            <param name="t1">首个分词数组</param>
            <param name="t2">第二个个分词数组</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Util.BitVector">
            <summary>
            以位存储的向量类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.BitVector.#ctor(System.Int32)">
            <summary>
            实例化以位存储的向量。
            </summary>
            <param name="n">要使用的位的最大数量</param>
        </member>
        <member name="M:EIIP.SE.Util.BitVector.#ctor(EIIP.SE.Store.Directory,System.String)">
            <summary>
            从指定的文件夹中的文件内容实例化向量。
            </summary>
            <param name="d">文件夹</param>
            <param name="name">存储向量的文件名称</param>
        </member>
        <member name="M:EIIP.SE.Util.BitVector.Write(EIIP.SE.Store.Directory,System.String)">
            <summary>
            向指定的文件夹中的文件写入向量。
            </summary>
            <param name="d">文件夹</param>
            <param name="name">存储向量的文件名称</param>
        </member>
        <member name="M:EIIP.SE.Util.BitVector.WriteBits(EIIP.SE.Store.IndexOutput)">
            <summary>
            写入向量。
            </summary>
            <param name="output">索引输出器</param>
        </member>
        <member name="M:EIIP.SE.Util.BitVector.WriteDgaps(EIIP.SE.Store.IndexOutput)">
            <summary>
            写入d-gaps列表。
            </summary>
            <param name="output">索引输出器</param>
        </member>
        <member name="M:EIIP.SE.Util.BitVector.IsSparse">
            <summary>
            指示位向量是否是稀疏的。稀疏应保存为 d-gaps 列表，否则保存为位集。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Util.Cache.Cache">
            <summary>
            缓存基类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.GetSynchronizedCache(EIIP.SE.Util.Cache.Cache)">
            <summary>
            获取指定缓存的一个线程安全版本。
            </summary>
            <param name="cache">缓存</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.Put(System.Object,System.Object)">
            <summary>
            设置键值对。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.Get(System.Object)">
            <summary>
            获取指定键的值。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.ContainsKey(System.Object)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.Close">
            <summary>
            关闭缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.GetSynchronizedCache">
            <summary>
            获取当前缓存的一个线程安全版本。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Util.Cache.Cache.SynchronizedCache">
            <summary>
            缓存的一个线程安全包装类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.#ctor(EIIP.SE.Util.Cache.Cache)">
            <summary>
            包装线程安全的缓存。
            </summary>
            <param name="cache">要包装的缓存</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.#ctor(EIIP.SE.Util.Cache.Cache,System.Object)">
            <summary>
            同步缓存。
            </summary>
            <param name="cache"></param>
            <param name="mutex"></param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.Put(System.Object,System.Object)">
            <summary>
            设置键值对。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.Get(System.Object)">
            <summary>
            获取指定键的值。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.ContainsKey(System.Object)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.Close">
            <summary>
            关闭缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.Cache.SynchronizedCache.GetSynchronizedCache">
            <summary>
            获取当前缓存的一个线程安全版本。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Util.Cache.SimpleLRUCache">
            <summary>
            一个简单的延迟加载缓存。
            当容量小于1536时，使用SimpleLRUCache_S；当容量大于1536时，使用SimpleLRUCache_L。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.Cache.SimpleLRUCache_S">
            <summary>
            适用于缓存容量小于1536的简单延迟加载缓存类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_S.#ctor(System.Int32)">
            <summary>
            实例化小容量简单延迟加载缓存类。
            </summary>
            <param name="capacity">缓存容量</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_S.Put(System.Object,System.Object)">
            <summary>
            设置键值对。
            </summary>
            <param name="k">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_S.Get(System.Object)">
            <summary>
            获取指定键的值。
            </summary>
            <param name="k">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_S.ContainsKey(System.Object)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_S.Close">
            <summary>
            关闭缓存。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache.#ctor(System.Int32)">
            <summary>
            实例化一个简单的延迟加载缓存。
            </summary>
            <param name="Capacity">缓存容量</param>
        </member>
        <member name="T:EIIP.SE.Util.Cache.SimpleLRUCache_L">
            <summary>
            适用于缓存容量大于1536的简单延迟加载缓存类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_L.#ctor(System.Int32)">
            <summary>
            实例化大容量简单延迟加载缓存类。
            </summary>
            <param name="capacity">缓存容量</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_L.Put(System.Object,System.Object)">
            <summary>
            设置键值对。
            </summary>
            <param name="k">键</param>
            <param name="v">值</param>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_L.Get(System.Object)">
            <summary>
            获取指定键的值。
            </summary>
            <param name="k">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_L.ContainsKey(System.Object)">
            <summary>
            测试是否包含指定键。
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.Cache.SimpleLRUCache_L.Close">
            <summary>
            关闭缓存。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.CloseableThreadLocal">
            <summary>
            可关闭的本地线程类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.CloseableThreadLocal.InitialValue">
            <summary>
            初始化值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.CloseableThreadLocal.Get">
            <summary>
            获取数据。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.CloseableThreadLocal.Set(System.Object)">
            <summary>
            设置数据。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EIIP.SE.Util.CloseableThreadLocal.Close">
            <summary>
            关闭。清除固定引用。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.DocIdBitSet">
            <summary>
            文档ID位集。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.DocIdBitSet.#ctor(System.Collections.BitArray)">
            <summary>
            实例化文档ID位集。
            </summary>
            <param name="bitArray">位集。</param>
        </member>
        <member name="M:EIIP.SE.Util.DocIdBitSet.Iterator">
            <summary>
            获取文档ID集迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Util.DocIdBitSet.BitSet">
            <summary>
            获取关联位集。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.DocIdBitSet.DocIdBitSetIterator">
            <summary>
            文档ID集迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Search.FieldDocSortedHitQueue">
            <summary>
            按分词点击率的字段文档存储队列。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.OpenBitSet">
            <summary>
            位集类。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.OpenBitSet.bits">
            <summary>
            位数组
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.OpenBitSet.wlen">
            <summary>
            位集中的元素个数。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.#ctor(System.Int64)">
            <summary>
            实例化位集。
            </summary>
            <param name="numBits">位集中的元素个数。</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.#ctor">
            <summary>
            实例化位集。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.#ctor(System.Int64[],System.Int32)">
            <summary>
            实例化位集。
            </summary>
            <param name="bits">位数据</param>
            <param name="numWords">位集中的元素个数。</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Iterator">
            <summary>
            获取文档ID集迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Get(System.Int32)">
            <summary>
            获取指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastGet(System.Int32)">
            <summary>
            获取指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Get(System.Int64)">
            <summary>
            获取指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastGet(System.Int64)">
            <summary>
            获取指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.GetBit(System.Int32)">
            <summary>
            获取指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Set(System.Int64)">
            <summary>
            设置指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastSet(System.Int32)">
            <summary>
            设置指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastSet(System.Int64)">
            <summary>
            设置指定索引位置设置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Set(System.Int64,System.Int64)">
            <summary>
            设置指定索引范围位置设置的位值。
            </summary>
            <param name="startIndex">起始索引位置</param>
            <param name="endIndex">结束索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.ExpandingWordNum(System.Int64)">
            <summary>
            扩展尺寸。
            </summary>
            <param name="index">最大索引位置</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastClear(System.Int32)">
            <summary>
            快速清除指定索引位置的位。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastClear(System.Int64)">
            <summary>
            快速清除指定索引位置的位。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Clear(System.Int64)">
            <summary>
            清除指定索引位置的位。
            </summary>
            <param name="index">索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Clear(System.Int64,System.Int64)">
            <summary>
            清除指定索引范围的位。
            </summary>
            <param name="startIndex">起始索引位置</param>
            <param name="endIndex">结束索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.GetAndSet(System.Int32)">
            <summary>
            设置指定索引位置的值，并返回设置前的值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.GetAndSet(System.Int64)">
            <summary>
            设置指定索引位置的值，并返回设置前的值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastFlip(System.Int32)">
            <summary>
            反转(异或运算)指定索引位置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FastFlip(System.Int64)">
            <summary>
            反转(异或运算)指定索引位置的位值。
            </summary>
            <param name="index">索引位置，必段小于 Size</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Flip(System.Int64)">
            <summary>
            反转(异或运算)指定索引位置的位值。若指定位置超出范围则进行扩展。
            </summary>
            <param name="index">索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FlipAndGet(System.Int32)">
            <summary>
            反转(异或运算)指定索引位置的位值。返回结果值。
            </summary>
            <param name="index">索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.FlipAndGet(System.Int64)">
            <summary>
            反转(异或运算)指定索引位置的位值。返回结果值。
            </summary>
            <param name="index">索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Flip(System.Int64,System.Int64)">
            <summary>
            反转(异或运算)指定索引范围的位值。
            </summary>
            <param name="startIndex">起始索引位置</param>
            <param name="endIndex">结束索引位置</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Cardinality">
            <summary>
            获取设置了位的数量。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.IntersectionCount(EIIP.SE.Util.OpenBitSet,EIIP.SE.Util.OpenBitSet)">
            <summary>
            获取两个位集中同时设置了位的数量。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.UnionCount(EIIP.SE.Util.OpenBitSet,EIIP.SE.Util.OpenBitSet)">
            <summary>
            获取两个位集中设置了位的数量。 A | B
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.AndNotCount(EIIP.SE.Util.OpenBitSet,EIIP.SE.Util.OpenBitSet)">
            <summary>
            获取两个位集中设置了位的数量。 A ＆ ~B
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.XorCount(EIIP.SE.Util.OpenBitSet,EIIP.SE.Util.OpenBitSet)">
            <summary>
            获取两个位集中设置了位的数量。 A ^ B
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.NextSetBit(System.Int32)">
            <summary>
            获取以指定索引位置起始的下一设置了位的索引。不存在则返回-1。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.NextSetBit(System.Int64)">
            <summary>
            获取以指定索引位置起始的下一设置了位的索引。不存在则返回-1。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Clone">
            <summary>
            获取深层克隆副本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Intersect(EIIP.SE.Util.OpenBitSet)">
            <summary>
            与指定位集逻辑与。（this = this AND other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Union(EIIP.SE.Util.OpenBitSet)">
            <summary>
            与指定位集逻辑或。（this = this OR other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Remove(EIIP.SE.Util.OpenBitSet)">
            <summary>
            移除指定位集对应的位。（this = this AND_NOT other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Xor(EIIP.SE.Util.OpenBitSet)">
            <summary>
            与指定位集逻辑异或。（this = this XOR other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.And(EIIP.SE.Util.OpenBitSet)">
            <summary>
            与指定位集逻辑与。（this = this AND other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Or(EIIP.SE.Util.OpenBitSet)">
            <summary>
            与指定位集逻辑或。（this = this OR other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.AndNot(EIIP.SE.Util.OpenBitSet)">
            <summary>
            移除指定位集对应的位。（this = this AND_NOT other）
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Intersects(EIIP.SE.Util.OpenBitSet)">
            <summary>
            若有任何相同位，则返回true。
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.EnsureCapacityWords(System.Int32)">
            <summary>
            确认有指定的容量。
            </summary>
            <param name="numWords">数组长度</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.EnsureCapacity(System.Int64)">
            <summary>
            确认有指定的容量。
            </summary>
            <param name="numBits">位数量</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.trimTrailingZeros">
            <summary>
            移除尾部零。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.bits2words(System.Int64)">
            <summary>
            获取（64位）字的个数。
            </summary>
            <param name="numBits">位集中的元素个数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSet.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Util.OpenBitSet.Capacity">
            <summary>
            获取当前最大位容量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Util.OpenBitSet.Size">
            <summary>
            获取当前最大位容量。
            </summary>
        </member>
        <member name="P:EIIP.SE.Util.OpenBitSet.IsEmpty">
            <summary>
            获取一个值，该值指示是否没有设置位。
            </summary>
        </member>
        <member name="P:EIIP.SE.Util.OpenBitSet.Bits">
            <summary>
            获取或设置位数据。
            </summary>
        </member>
        <member name="P:EIIP.SE.Util.OpenBitSet.NumWords">
            <summary>
            获取或设置位集中的元素个数。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.OpenBitSetDISI">
            <summary>
            文档ID位集类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetDISI.#ctor(EIIP.SE.Search.DocIdSetIterator,System.Int32)">
            <summary>
            实例化文档ID位集类。
            </summary>
            <param name="disi">文档ID枚举数</param>
            <param name="maxSize">位集最大尺寸</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetDISI.#ctor(System.Int32)">
            <summary>
            实例化文档ID位集类。
            </summary>
            <param name="maxSize">位集最大尺寸</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetDISI.InPlaceOr(EIIP.SE.Search.DocIdSetIterator)">
            <summary>
            逻辑或添加指定文档ID集。
            </summary>
            <param name="disi">文档ID枚举数</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetDISI.InPlaceAnd(EIIP.SE.Search.DocIdSetIterator)">
            <summary>
            设置指定文档ID集的交集（逻辑与）。
            </summary>
            <param name="disi">文档ID枚举数</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetDISI.InPlaceNot(EIIP.SE.Search.DocIdSetIterator)">
            <summary>
            排除指定文档ID集（逻辑非）。
            </summary>
            <param name="disi">文档ID枚举数</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetDISI.InPlaceXor(EIIP.SE.Search.DocIdSetIterator)">
            <summary>
            逻辑异或设置指定文档ID集。
            </summary>
            <param name="disi">文档ID枚举数</param>
        </member>
        <member name="T:EIIP.SE.Util.OpenBitSetIterator">
            <summary>
            文档ID位集迭代器。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.OpenBitSetIterator.bitlist">
            <summary>
            位表。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetIterator.#ctor(EIIP.SE.Util.OpenBitSet)">
            <summary>
            实例化文档ID位集迭代器。
            </summary>
            <param name="obs">位集</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetIterator.#ctor(System.Int64[],System.Int32)">
            <summary>
            实例化文档ID位集迭代器。
            </summary>
            <param name="bits">位数据数组</param>
            <param name="numWords">数组长度</param>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetIterator.Next">
            <summary>
            移至下一文档ID。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetIterator.SkipTo(System.Int32)">
            <summary>
            跳至指定文档ID位置。当当前文档ID大于或等于指定文档ID时返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.OpenBitSetIterator.Doc">
            <summary>
            获取当前文档号。
            </summary>
            <returns></returns> 
        </member>
        <member name="T:EIIP.SE.Util.ScorerDocQueue">
            <summary>
            评价器文档队列。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.#ctor(System.Int32)">
            <summary>
            实例化评价器文档队列。
            </summary>
            <param name="maxSize">最大尺寸</param>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.Put(EIIP.SE.Search.Scorer)">
            <summary>
            添加指定评分器。
            </summary>
            <param name="scorer">评分器。</param>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.Insert(EIIP.SE.Search.Scorer)">
            <summary>
            插入指定评分器。
            </summary>
            <param name="scorer">评分器。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.Top">
            <summary>
            获取顶部评分器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.TopDoc">
            <summary>
            获取顶部评分器的文档ID。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.TopScore">
            <summary>
            获取顶部评分器的评分。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.TopNextAndAdjustElsePop">
            <summary>
            移至下一评分器。成功返回true。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.TopSkipToAndAdjustElsePop(System.Int32)">
            <summary>
            移至指定文档后的评分器。成功返回true。
            </summary>
            <param name="target">目标文档号</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.Pop">
            <summary>
            弹出评分器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.AdjustTop">
            <summary>
            顶部调整。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.Size">
            <summary>
            获取队列尺寸。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.ScorerDocQueue.Clear">
            <summary>
            清除队列。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.SmallFloat">
            <summary>
            32位的浮点数类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.SmallFloat.FloatToByte(System.Single,System.Int32,System.Int32)">
            <summary>
            将32位浮点数转换为8位浮点数。
            </summary>
            <param name="f">32位浮点数</param>
            <param name="numMantissaBits">字节中尾数位数</param>
            <param name="zeroExp">基于0的指数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.SmallFloat.ByteToFloat(System.Byte,System.Int32,System.Int32)">
            <summary>
            将8位浮点数转换为32位浮点数。
            </summary>
            <param name="b">8位浮点数</param>
            <param name="numMantissaBits">字节中尾数位数</param>
            <param name="zeroExp">基于0的指数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.SmallFloat.FloatToByte315(System.Single)">
            <summary>
            将32位浮点数转换为8位浮点数。相当于FloatToByte(b, mantissaBits=3, zeroExponent=15)，
            最小非零值: 5.820766E-10，最大值: 7.5161928E9，如 0.125
            </summary>
            <param name="f">8位浮点数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.SmallFloat.Byte315ToFloat(System.Byte)">
            <summary>
            将8位浮点数转换为32位浮点数。相当于ByteToFloat(b, mantissaBits=3, zeroExponent=15)
            </summary>
            <param name="b">8位浮点数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.SmallFloat.FloatToByte52(System.Single)">
            <summary>		
            将32位浮点数转换为8位浮点数。相当于FloatToByte(b, mantissaBits=5, zeroExponent=2)，
            最小非零值: 0.033203125，最大值: 1984.0，如 0.03125
            </summary>
            <param name="f">8位浮点数</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.SmallFloat.Byte52ToFloat(System.Byte)">
            <summary>
            将8位浮点数转换为32位浮点数。相当于ByteToFloat(b, mantissaBits=5, zeroExponent=2)
            </summary>
            <param name="b">8位浮点数</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Util.SortedVIntList">
            <summary>
            有序的非负整型数据据列表。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.SortedVIntList.BITS2VINTLIST_SIZE">
            <summary>
            位数尺寸。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.SortedVIntList.#ctor(System.Int32[])">
            <summary>
            实例化有序的非负整型数据据列表。
            </summary>
            <param name="sortedInts">有序的非负整型数组</param>
        </member>
        <member name="M:EIIP.SE.Util.SortedVIntList.#ctor(System.Int32[],System.Int32)">
            <summary>
            实例化有序的非负整型数据据列表。
            </summary>
            <param name="sortedInts">有序的非负整型数组</param>
            <param name="inputSize">要使用 sortedInts 数组中的元素个数</param>
        </member>
        <member name="M:EIIP.SE.Util.SortedVIntList.#ctor(EIIP.Collections.BitSet)">
            <summary>
            实例化有序的非负整型数据据列表。
            </summary>
            <param name="bits">位集</param>
        </member>
        <member name="M:EIIP.SE.Util.SortedVIntList.#ctor(EIIP.SE.Util.OpenBitSet)">
            <summary>
            实例化有序的非负整型数据据列表。
            </summary>
            <param name="bits">位集</param>
        </member>
        <member name="M:EIIP.SE.Util.SortedVIntList.#ctor(EIIP.SE.Search.DocIdSetIterator)">
            <summary>
            实例化有序的非负整型数据据列表。
            </summary>
            <param name="docIdSetIterator">提供文档ID集的迭代器</param>
        </member>
        <member name="M:EIIP.SE.Util.SortedVIntList.Iterator">
            <summary>
            获取文档ID集迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.SE.Util.SortedVIntList.Size">
            <summary>
            获取尺寸大小。
            </summary>
        </member>
        <member name="P:EIIP.SE.Util.SortedVIntList.ByteSize">
            <summary>
            获取存储压缩整型数据的字节数据尺寸。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.StringHelper">
            <summary>
            辅助类。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.StringHelper.bytesDifference(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            比较字节数组。
            返回两个字节数组首个不同字节的索引位置。
            </summary>
            <param name="bytes1">要比较的第一个字节数组</param>
            <param name="len1">第一个字节数组长度</param>
            <param name="bytes2">要比较的第二个字节数组</param>
            <param name="len2">第二个字节数组长度</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.SE.Util.StringHelper.StringDifference(System.String,System.String)">
            <summary>
            按字符
            </summary>
            <param name="s1">要比较的第一个字符串</param>
            <param name="s2">要比较的第二个字符串</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.SE.Util.ToStringUtils">
            <summary>
            输出辅助工具。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.ToStringUtils.Boost(System.Single)">
            <summary>
            输出指定因子字符串。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.UnicodeUtil">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UNI_SUR_HIGH_START">
            <summary>
            Unicode高位起始值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UNI_SUR_HIGH_END">
            <summary>
            Unicode高位结束值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UNI_SUR_LOW_START">
            <summary>
            Unicode低位起始值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UNI_SUR_LOW_END">
            <summary>
            Unicode低位结束值。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UNI_REPLACEMENT_CHAR">
            <summary>
            Unicode替换字符。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.UnicodeUtil.UTF16toUTF8(System.Char[],System.Int32,EIIP.SE.Util.UnicodeUtil.UTF8Result)">
            <summary>
            将UTF16转换为UTF8。
            </summary>
            <param name="source">UTF16源</param>
            <param name="offset">UTF16源起始偏移量</param>
            <param name="result">UTF8结果</param>
        </member>
        <member name="M:EIIP.SE.Util.UnicodeUtil.UTF16toUTF8(System.Char[],System.Int32,System.Int32,EIIP.SE.Util.UnicodeUtil.UTF8Result)">
            <summary>
            将UTF16转换为UTF8。
            </summary>
            <param name="source">UTF16源</param>
            <param name="offset">UTF16源起始偏移量</param>
            <param name="length">要转换的长度</param>
            <param name="result">UTF8结果</param>
        </member>
        <member name="M:EIIP.SE.Util.UnicodeUtil.UTF16toUTF8(System.String,System.Int32,System.Int32,EIIP.SE.Util.UnicodeUtil.UTF8Result)">
            <summary>
            将UTF16转换为UTF8。
            </summary>
            <param name="s">UTF16源字符串</param>
            <param name="offset">UTF16源起始偏移量</param>
            <param name="length">要转换的长度</param>
            <param name="result">UTF8结果</param>
        </member>
        <member name="M:EIIP.SE.Util.UnicodeUtil.UTF8toUTF16(System.Byte[],System.Int32,System.Int32,EIIP.SE.Util.UnicodeUtil.UTF16Result)">
            <summary>
            将UTF8转换为UTF16。
            </summary>
            <param name="utf8">UTF8源</param>
            <param name="offset">UTF8源起始偏移量</param>
            <param name="length">要转换的长度</param>
            <param name="result">UTF16结果</param>
        </member>
        <member name="T:EIIP.SE.Util.UnicodeUtil.UTF8Result">
            <summary>
            UTF8结果。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UTF8Result.result">
            <summary>
            结果数据。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UTF8Result.length">
            <summary>
            长度。
            </summary>
        </member>
        <member name="P:EIIP.SE.Util.UnicodeUtil.UTF8Result.Length">
            <summary>
            获取或设置结果长度。
            </summary>
        </member>
        <member name="T:EIIP.SE.Util.UnicodeUtil.UTF16Result">
            <summary>
            UTF16结果。
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UTF16Result.result">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UTF16Result.offsets">
            <summary>
            
            </summary>
        </member>
        <member name="F:EIIP.SE.Util.UnicodeUtil.UTF16Result.length">
            <summary>
            长度。
            </summary>
        </member>
        <member name="M:EIIP.SE.Util.UnicodeUtil.UTF16Result.copyText(EIIP.SE.Util.UnicodeUtil.UTF16Result)">
            <summary>
            复制结果文本。
            </summary>
            <param name="other"></param>
        </member>
        <member name="P:EIIP.SE.Util.UnicodeUtil.UTF16Result.Length">
            <summary>
            获取或设置结果长度。
            </summary>
        </member>
    </members>
</doc>
