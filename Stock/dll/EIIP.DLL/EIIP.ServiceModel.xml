<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EIIP.ServiceModel</name>
    </assembly>
    <members>
        <member name="T:EIIP.ServiceModel.Info">
            <summary>
            基本信息类。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.Info.Company">
            <summary>
            公司名称
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.Info.Name">
            <summary>
            产品代号
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.Info.CurrentVerCode">
            <summary>
            当前版本代号
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.Info.IDCard">
            <summary>
            ID
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.VersionInfo">
            <summary>
            产品版本信息
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.VersionInfo.WCF">
            <summary>
            WCF 版本
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.BindingRequirementAttribute">
            <summary>
            定义绑定必要条件的特性。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.BindingRequirementAttribute.ReliabilityRequired">
            <summary>
            获取或设置一个值，该值指示是否需要消息可靠性。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.BindingRequirementAttribute.WCFOnly">
            <summary>
            获取或设置一个值，该值指示是否仅使用于WCF框架。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.BindingRequirementAttribute.TransactionFlowEnabled">
            <summary>
            获取或设置一个值，该值指示是否支持事务处理。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.NetNamedPipeContextBinding">
            <summary>
            提供一个既安全又可靠且针对计算机上的通信进行了优化的命名管道上下文绑定。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBinding.#ctor">
            <summary>
            实例化命名管道上下文绑定。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBinding.#ctor(System.ServiceModel.NetNamedPipeSecurityMode)">
            <summary>
            实例化命名管道上下文绑定。
            </summary>
            <param name="securityMode">指定安全保护级别</param>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBinding.#ctor(System.String)">
            <summary>
            实例化命名管道上下文绑定。
            </summary>
            <param name="configurationName">配置名称</param>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBinding.CreateBindingElements">
            <summary>
            为绑定创建一个绑定元素集合。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.NetNamedPipeContextBinding.ContextProtectionLevel">
            <summary>
            获取或设置安全保护级别。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.NetNamedPipeContextBindingElement">
            <summary>
            命名管道上下文绑定配置元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBindingElement.#ctor">
            <summary>
            实例化命名管道上下文绑定配置元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBindingElement.#ctor(System.String)">
            <summary>
            实例化命名管道上下文绑定配置元素。
            </summary>
            <param name="name">元素名称</param>
        </member>
        <member name="M:EIIP.ServiceModel.NetNamedPipeContextBindingElement.OnApplyConfiguration(System.ServiceModel.Channels.Binding)">
            <summary>
            应用配置至实例。
            </summary>
            <param name="binding">绑定实例。</param>
        </member>
        <member name="P:EIIP.ServiceModel.NetNamedPipeContextBindingElement.BindingElementType">
            <summary>
            获取此配置元素的类型。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.NetNamedPipeContextBindingElement.ContextProtectionLevel">
            <summary>
            获取或设置上下文安全保护级别。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.NetNamedPipeContextBindingCollectionElement">
            <summary>
            命名管道上下文绑定配置元素集合。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.HeaderChannelFactory`2">
            <summary>
            报头通道拦截器工厂类。
            </summary>
            <typeparam name="T">
            由通道工厂生成的通道类型。
            此类型必须为 System.ServiceModel.Channels.IOutputChannel 或 System.ServiceModel.Channels.IRequestChannel。
            </typeparam>
            <typeparam name="H">报头数据</typeparam>
        </member>
        <member name="T:EIIP.ServiceModel.InterceptorChannelFactory`1">
            <summary>
            通道拦截器工厂类。
            </summary>
            <typeparam name="T">
            由通道工厂生成的通道类型。
            此类型必须为 System.ServiceModel.Channels.IOutputChannel 或 System.ServiceModel.Channels.IRequestChannel。
            </typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorChannelFactory`1.#ctor">
            <summary>
            实例化通道拦截器工厂。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorChannelFactory`1.#ctor(System.String)">
            <summary>
            实例化通道拦截器工厂。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorChannelFactory`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化通道拦截器工厂。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorChannelFactory`1.PreInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            前置调用。
            </summary>
            <param name="request">请求消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorChannelFactory`1.PostInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            后继调用。
            </summary>
            <param name="reply">回复消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.#ctor">
            <summary>
            实例化报头通道拦截器工厂。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.#ctor(System.String)">
            <summary>
            实例化报头通道拦截器工厂。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化报头通道拦截器工厂。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.#ctor(`1)">
            <summary>
            实例化报头通道拦截器工厂。
            </summary>
            <param name="header">报头数据</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.#ctor(`1,System.String)">
            <summary>
            实例化报头通道拦截器工厂。
            </summary>
            <param name="header">报头数据</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.#ctor(`1,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化报头通道拦截器工厂。
            </summary>
            <param name="header">报头数据</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderChannelFactory`2.PreInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            前置调用。
            </summary>
            <param name="request">请求消息</param>
        </member>
        <member name="P:EIIP.ServiceModel.HeaderChannelFactory`2.Header">
            <summary>
            获取报头数据。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.GenericResolverBehaviorAttribute">
            <summary>
            通用解析器行为特性。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.GenericResolver">
            <summary>
            通用解析器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolver.#ctor">
            <summary>
            实例化通用解析器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolver.#ctor(System.Type[])">
            <summary>
            实例化通用解析器。
            </summary>
            <param name="typesToResolve">要解析的类型。</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolver.Merge(EIIP.ServiceModel.GenericResolver,EIIP.ServiceModel.GenericResolver)">
            <summary>
            合并解析器。
            </summary>
            <param name="resolver1"></param>
            <param name="resolver2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
            <summary>
            将指定的类型名称和命名空间映射到数据契约类型。
            </summary>
            <param name="typeName">类型名称</param>
            <param name="typeNamespace">类型命名空间</param>
            <param name="declaredType">在数据契约中声明的类型</param>
            <param name="knownTypeResolver">已知类型解析器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
            <summary>
            将数据契约类型映射到类型名称和命名空间。
            </summary>
            <param name="type">要映射的类型。</param>
            <param name="declaredType">在数据契约中声明的类型</param>
            <param name="knownTypeResolver">已知类型解析器</param>
            <param name="typeName">类型名称</param>
            <param name="typeNamespace">类型命名空间</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.GenericResolver.KnownTypes">
            <summary>
            获取已知类型。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.GenericResolverInstaller">
            <summary>
            通用解析器的安装器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolverInstaller.AddGenericResolver(System.ServiceModel.ServiceHost,System.Type[])">
            <summary>
            添加通用分析器。
            </summary>
            <param name="host">服务宿主</param>
            <param name="typesToResolve">要解析的类型。</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolverInstaller.AddGenericResolver``1(System.ServiceModel.ClientBase{``0},System.Type[])">
            <summary>
            添加通用分析器。
            </summary>
            <typeparam name="T">服务契约</typeparam>
            <param name="proxy">客户端代理</param>
            <param name="typesToResolve">要解析的类型。</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericResolverInstaller.AddGenericResolver``1(System.ServiceModel.ChannelFactory{``0},System.Type[])">
            <summary>
            添加通用分析器。
            </summary>
            <typeparam name="T">服务契约</typeparam>
            <param name="factory">客户端通道工厂</param>
            <param name="typesToResolve">要解析的类型。</param>
        </member>
        <member name="T:EIIP.ServiceModel.CallbackErrorHandlerBehaviorAttribute">
            <summary>
            回调错误处理者行为特性。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ErrorHandlerBehaviorAttribute">
            <summary>
            错误处理者行为特性。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ErrorHandlerBehaviorAttribute.ServiceType">
            <summary>
            获取或设置服务类型。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.CallbackErrorHandlerBehaviorAttribute.#ctor(System.Type)">
            <summary>
            实例化回调错误处理者行为特性。
            </summary>
            <param name="clientType">客户端类型</param>
        </member>
        <member name="T:EIIP.ServiceModel.DebugHelper">
            <summary>
            调试助手类。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.DebugHelper.IncludeExceptionDetailInFaults">
            <summary>
            指示是否在错误中显示异常细节。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.DebugHelper.ExtractException(System.ServiceModel.FaultException{System.ServiceModel.ExceptionDetail})">
            <summary>
            提取异常。
            </summary>
            <param name="fault">泛型错误</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.ErrorHandlerHelper">
            <summary>
            错误处理者辅助器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ErrorHandlerHelper.PromoteException(System.Type,System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            提升异常。
            </summary>
            <param name="serviceType">服务类型。</param>
            <param name="error">异常实例</param>
            <param name="version">消息版本</param>
            <param name="fault">消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.ErrorHandlerHelper.PromoteException(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            提升异常。只能在服务中调用。
            </summary>
            <param name="error">异常实例</param>
            <param name="version">消息版本</param>
            <param name="fault">消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.ErrorHandlerHelper.LogError(System.Exception)">
            <summary>
            记录错误。
            </summary>
            <param name="error">异常。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ErrorHandlerHelper.LogError(System.Exception,System.ServiceModel.Channels.MessageFault)">
            <summary>
            记录异常。
            </summary>
            <param name="error">异常</param>
            <param name="fault">错误消息</param>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSet.LogbookDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSet.LogbookRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSet.LogbookRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.LogbookTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager">
             <summary>
            TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.UpdateUpdatedRows(EIIP.ServiceModel.Errors.LogbookDataSet,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Update rows in top-down order.
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.UpdateInsertedRows(EIIP.ServiceModel.Errors.LogbookDataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Insert rows in top-down order.
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.UpdateDeletedRows(EIIP.ServiceModel.Errors.LogbookDataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Delete rows in bottom-up order.
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.GetRealUpdatedRows(System.Data.DataRow[],System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.UpdateAll(EIIP.ServiceModel.Errors.LogbookDataSet)">
             <summary>
            Update all changes to the dataset.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.UpdateOrderOption">
             <summary>
            Update Order Option
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Errors.LogbookDataSetTableAdapters.TableAdapterManager.SelfReferenceComparer">
             <summary>
            Used to sort self-referenced table's rows
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ILogbookManagerService">
            <summary>
            定义日志定理器服务契约。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ILogbookManagerService.LogEntry(EIIP.ServiceModel.LogbookEntryService)">
            <summary>
            日志记录。
            </summary>
            <param name="entry">日志实体服务端</param>
        </member>
        <member name="M:EIIP.ServiceModel.ILogbookManagerService.Clear">
            <summary>
            清除日志。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ILogbookManagerService.GetEntries">
            <summary>
            获取日志实体服务端。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.LogbookEntryClient">
            <summary>
            日志实体客户端。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.MachineName">
            <summary>
            本地计算机的 NetBIOS 名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.HostName">
            <summary>
            程序集的简单名称或进程模块的名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.AssemblyName">
            <summary>
            默认应用程序域中的进程可执行文件。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.FileName">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.LineNumber">
            <summary>
            行号。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.TypeName">
            <summary>
            类型名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.MemberAccessed">
            <summary>
            成员访问。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.Date">
            <summary>
            日期。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.Time">
            <summary>
            时间。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.ExceptionName">
            <summary>
            异常名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.ExceptionMessage">
            <summary>
            异常消息。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.ProvidedFault">
            <summary>
            提供的错误。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.ProvidedMessage">
            <summary>
            提供的消息。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryClient.Event">
            <summary>
            事件名称。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryClient.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体客户端。
            </summary>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
            <param name="providedFault">提供的错误</param>
            <param name="providedMessage">提供的消息</param>
            <param name="eventDescription">事件描述</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryClient.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体客户端。
            </summary>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryClient.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体客户端。
            </summary>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
            <param name="providedFault">提供的错误</param>
            <param name="providedMessage">提供的消息</param>
        </member>
        <member name="T:EIIP.ServiceModel.LogbookEntryService">
            <summary>
            日志实体服务端。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.MachineName">
            <summary>
            本地计算机的 NetBIOS 名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.HostName">
            <summary>
            程序集的简单名称或进程模块的名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.AssemblyName">
            <summary>
            默认应用程序域中的进程可执行文件。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.FileName">
            <summary>
            文件名。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.LineNumber">
            <summary>
            行号。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.TypeName">
            <summary>
            类型名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.MemberAccessed">
            <summary>
            成员访问。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.Date">
            <summary>
            日期。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.Time">
            <summary>
            时间。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.ExceptionName">
            <summary>
            异常名称。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.ExceptionMessage">
            <summary>
            异常消息。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.ProvidedFault">
            <summary>
            提供的错误。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.ProvidedMessage">
            <summary>
            提供的消息。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.LogbookEntryService.Event">
            <summary>
            事件名称。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryService.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体服务端。
            </summary>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
            <param name="providedFault">提供的错误</param>
            <param name="providedMessage">提供的消息</param>
            <param name="eventDescription">事件描述</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryService.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体服务端。
            </summary>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryService.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体服务端。
            </summary>
            <param name="machineName">本地计算机的 NetBIOS 名称。</param>
            <param name="hostName">程序集的简单名称或进程模块的名称。</param>
            <param name="date">日期</param>
            <param name="time">时间</param>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
            <param name="providedFault">提供的错误</param>
            <param name="providedMessage">提供的消息</param>
            <param name="eventDescription">事件描述</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookEntryService.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            实例化日志实体服务端。
            </summary>
            <param name="assemblyName">程序集</param>
            <param name="fileName">文件名</param>
            <param name="lineNumber">行号</param>
            <param name="typeName">类型名称</param>
            <param name="methodName">方法名称</param>
            <param name="exceptionName">异常名称</param>
            <param name="exceptionMessage">异常消息</param>
            <param name="providedFault">提供的错误</param>
            <param name="providedMessage">提供的消息</param>
        </member>
        <member name="T:EIIP.ServiceModel.LogbookManager">
            <summary>
            日志管理器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManager.LogEntry(EIIP.ServiceModel.LogbookEntryService)">
            <summary>
            日志记录。
            </summary>
            <param name="entry">日志实体服务端</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManager.Clear">
            <summary>
            清除日志。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManager.GetEntries">
            <summary>
            获取日志实体服务端。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.ILogbookManager">
            <summary>
            定义日志管理器的服务契约。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ILogbookManager.LogEntry(EIIP.ServiceModel.LogbookEntryClient)">
            <summary>
            日志记录。
            </summary>
            <param name="entry">日志实体</param>
        </member>
        <member name="T:EIIP.ServiceModel.LogbookManagerClient">
            <summary>
            日志管理器客户端。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManagerClient.#ctor">
            <summary>
            实例化日志管理器客户端。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManagerClient.#ctor(System.String)">
            <summary>
            实例化日志管理器客户端。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManagerClient.#ctor(System.String,System.String)">
            <summary>
            实例化日志管理器客户端。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManagerClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化日志管理器客户端。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManagerClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化日志管理器客户端。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogbookManagerClient.LogEntry(EIIP.ServiceModel.LogbookEntryClient)">
            <summary>
            日志记录。
            </summary>
            <param name="entry">日志实体</param>
        </member>
        <member name="T:EIIP.ServiceModel.HostThreadAffinity">
            <summary>
            宿主线程关联。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.HostThreadAffinity.SetThreadAffinity(System.ServiceModel.ServiceHost,System.String)">
            <summary>
            设置线程关联。仅当打开宿主前调用。
            </summary>
            <param name="host">宿主</param>
            <param name="threadName">线程名称</param>
        </member>
        <member name="M:EIIP.ServiceModel.HostThreadAffinity.SetThreadAffinity(System.ServiceModel.ServiceHost)">
            <summary>
            设置线程关联。仅当打开宿主前调用。
            </summary>
            <param name="host">宿主</param>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalInstanceProviderFactory">
            <summary>
            实例化事务实例提供者工厂。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.MemoryProviderFactory">
            <summary>
            内存持久化工厂类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnAbort">
            <summary>
            使通信对象立即从其当前状态转换到正在关闭状态。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
            <param name="callback">接收关闭操作异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步打开操作，从而引起通信对象转换为正在打开状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成打开操作的时间。</param>
            <param name="callback">接收打开操作的异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，包含与打开操作异步相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnClose(System.TimeSpan)">
            <summary>
            在调用了一个同步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnEndClose(System.IAsyncResult)">
            <summary>
            在关闭通信对象时完成一个异步操作。
            </summary>
            <param name="result">通过调用 OnBeginClose() 方法返回的 System.IAsyncResult。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnEndOpen(System.IAsyncResult)">
            <summary>
            在打开通信对象时完成一个异步操作。
            </summary>
            <param name="result">通过调用 OnBeginOpen() 方法返回的 System.IAsyncResult。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProviderFactory.OnOpen(System.TimeSpan)">
            <summary>
            在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成打开操作的时间。</param>
        </member>
        <member name="P:EIIP.ServiceModel.MemoryProviderFactory.DefaultCloseTimeout">
            <summary>
            获取为完成关闭操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.MemoryProviderFactory.DefaultOpenTimeout">
            <summary>
            获取为完成打开操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalInstanceProviderFactory.CreateProvider(System.Guid)">
            <summary>
            初始化内存持久化提供者实例。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalInstanceProvider">
            <summary>
            支持事务实例的内存持久化提供者。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.MemoryProvider">
            <summary>
            内存持久化提供者。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.#ctor(System.Guid,EIIP.ServiceModel.IInstanceStore{System.Guid,System.Object})">
            <summary>
            实例化内存持久化提供者。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
            <param name="instanceStore">实例存储</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.Create(System.Object,System.TimeSpan)">
            <summary>
            在持久性存储区中创建服务状态记录。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout"> 时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.Load(System.TimeSpan)">
            <summary>
            从持久性存储区中加载服务状态信息。
            </summary>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.Delete(System.Object,System.TimeSpan)">
            <summary>
            从持久性存储区中永久删除服务状态信息。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnClose(System.TimeSpan)">
            <summary>
            在调用了一个同步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnOpen(System.TimeSpan)">
            <summary>
            在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.Update(System.Object,System.TimeSpan)">
            <summary>
            在持久性存储区中更新服务状态记录。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“创建”阶段开始。第一次在持久性存储区中创建服务实例记录时将进入“创建”阶段。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“删除”阶段开始。将服务状态数据从持久性存储区中永久删除时将进入“删除”阶段。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“加载”阶段开始。将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。
            </summary>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“更新”阶段开始。在持久性存储区中更新服务状态数据时将进入“更新”阶段。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.EndCreate(System.IAsyncResult)">
            <summary>
            表示“创建”阶段结束。第一次在持久性存储区中创建服务状态记录时将进入“创建”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.EndDelete(System.IAsyncResult)">
            <summary>
            表示“删除”阶段结束。将状态数据从持久性存储区中永久删除时将进入“删除”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.EndLoad(System.IAsyncResult)">
            <summary>
            表示“加载”阶段结束。将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.EndUpdate(System.IAsyncResult)">
            <summary>
            表示“更新”阶段结束。在持久性存储区中更新服务状态记录时将进入“更新”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnAbort">
            <summary>
            在调用了一个同步中止操作，从而引起通信对象转换为关闭状态的情况下，该方法插入对通信对象的处理。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
            <param name="callback">接收关闭操作异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步打开操作，从而引起通信对象转换为正在打开状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
            <param name="callback">接收关闭操作异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnEndClose(System.IAsyncResult)">
            <summary>
            在关闭通信对象时完成一个异步操作。
            </summary>
            <param name="result">对操作结果的引用。</param>
        </member>
        <member name="M:EIIP.ServiceModel.MemoryProvider.OnEndOpen(System.IAsyncResult)">
            <summary>
            在打开通信对象时完成一个异步操作。
            </summary>
            <param name="result">对操作结果的引用。</param>
        </member>
        <member name="P:EIIP.ServiceModel.MemoryProvider.DefaultCloseTimeout">
            <summary>
            获取为完成关闭操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.MemoryProvider.DefaultOpenTimeout">
            <summary>
            获取为完成打开操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalInstanceProvider.#ctor(System.Guid)">
            <summary>
            实例化支持事务实例的内存持久化提供者。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalInstanceStore`2">
            <summary>
            事务实例存储。
            </summary>
            <typeparam name="ID">要保存的服务状态数据的唯一标识符类型。</typeparam>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="T:EIIP.ServiceModel.IInstanceStore`2">
            <summary>
            定义实例持久化存储接口。
            </summary>
            <typeparam name="ID">要保存的服务状态数据的唯一标识符类型。</typeparam>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.IInstanceStore`2.RemoveInstance(`0)">
            <summary>
            移除实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
        </member>
        <member name="M:EIIP.ServiceModel.IInstanceStore`2.ContainsInstance(`0)">
            <summary>
            判定是否包含指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.IInstanceStore`2.Item(`0)">
            <summary>
            获取指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalInstanceStore`2.RemoveInstance(`0)">
            <summary>
            移除实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalInstanceStore`2.ContainsInstance(`0)">
            <summary>
            判定是否包含指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.TransactionalInstanceStore`2.Item(`0)">
            <summary>
            获取指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalMemoryStore`2">
            <summary>
            事务型内存持久化存储。
            </summary>
            <typeparam name="ID">要保存的服务状态数据的唯一标识符类型。</typeparam>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalMemoryStore`2.#ctor">
            <summary>
            实例化事务型内存持久化存储。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalMemoryStore`2.RemoveInstance(`0)">
            <summary>
            移除实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalMemoryStore`2.ContainsInstance(`0)">
            <summary>
            判定是否包含指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.TransactionalMemoryStore`2.Item(`0)">
            <summary>
            获取指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.FilePersistenceProvider">
            <summary>
            文件持久化提供者。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.#ctor(System.Guid,System.String)">
            <summary>
            实例化文件持久化提供者。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
            <param name="fileName">物理文件名</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.Create(System.Object,System.TimeSpan)">
            <summary>
            在持久性存储区中创建服务状态记录。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout"> 时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.Load(System.TimeSpan)">
            <summary>
            从持久性存储区中加载服务状态信息。
            </summary>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.Delete(System.Object,System.TimeSpan)">
            <summary>
            从持久性存储区中永久删除服务状态信息。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnClose(System.TimeSpan)">
            <summary>
            在调用了一个同步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnOpen(System.TimeSpan)">
            <summary>
            在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.Update(System.Object,System.TimeSpan)">
            <summary>
            在持久性存储区中更新服务状态记录。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“创建”阶段开始。第一次在持久性存储区中创建服务实例记录时将进入“创建”阶段。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“删除”阶段开始。将服务状态数据从持久性存储区中永久删除时将进入“删除”阶段。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“加载”阶段开始。将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。
            </summary>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            表示“更新”阶段开始。在持久性存储区中更新服务状态数据时将进入“更新”阶段。
            </summary>
            <param name="instance">实际的实例状态。</param>
            <param name="timeout">时间段，永久性提供程序在该时间段后将中止此尝试。</param>
            <param name="callback">操作完成时将要调用的方法。</param>
            <param name="state">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.EndCreate(System.IAsyncResult)">
            <summary>
            表示“创建”阶段结束。第一次在持久性存储区中创建服务状态记录时将进入“创建”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.EndDelete(System.IAsyncResult)">
            <summary>
            表示“删除”阶段结束。将状态数据从持久性存储区中永久删除时将进入“删除”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.EndLoad(System.IAsyncResult)">
            <summary>
            表示“加载”阶段结束。将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.EndUpdate(System.IAsyncResult)">
            <summary>
            表示“更新”阶段结束。在持久性存储区中更新服务状态记录时将进入“更新”阶段。
            </summary>
            <param name="result">对操作结果的引用。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnAbort">
            <summary>
            在调用了一个同步中止操作，从而引起通信对象转换为关闭状态的情况下，该方法插入对通信对象的处理。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
            <param name="callback">接收关闭操作异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步打开操作，从而引起通信对象转换为正在打开状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
            <param name="callback">接收关闭操作异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnEndClose(System.IAsyncResult)">
            <summary>
            在关闭通信对象时完成一个异步操作。
            </summary>
            <param name="result">对操作结果的引用。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProvider.OnEndOpen(System.IAsyncResult)">
            <summary>
            在打开通信对象时完成一个异步操作。
            </summary>
            <param name="result">对操作结果的引用。</param>
        </member>
        <member name="P:EIIP.ServiceModel.FilePersistenceProvider.DefaultCloseTimeout">
            <summary>
            获取为完成关闭操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.FilePersistenceProvider.DefaultOpenTimeout">
            <summary>
            获取为完成打开操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.FilePersistenceProviderFactory">
            <summary>
            文件持久化提供者工厂。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.#ctor">
            <summary>
            实例化文件持久化提供者工厂。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.#ctor(System.String)">
            <summary>
            实例化文件持久化提供者工厂。
            </summary>
            <param name="fileName">物理文件名。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
            实例化文件持久化提供者工厂。
            </summary>
            <param name="parameters">参数</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.CreateProvider(System.Guid)">
            <summary>
            初始化新文件持久化提供者实例。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnAbort">
            <summary>
            使通信对象立即从其当前状态转换到正在关闭状态。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
            <param name="callback">接收关闭操作异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，它包含与异步关闭操作相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)">
            <summary>
            在调用了异步打开操作，从而引起通信对象转换为正在打开状态的情况下，该方法将插入处理。
            </summary>
            <param name="timeout">指定在超时前必须完成打开操作的时间。</param>
            <param name="callback">接收打开操作的异步完成通知的 System.AsyncCallback 委托。</param>
            <param name="state">一个由应用程序指定的对象，包含与打开操作异步相关联的状态信息。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnClose(System.TimeSpan)">
            <summary>
            在调用了一个同步关闭操作，从而引起通信对象转换为正在关闭状态的情况下，该方法插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成关闭操作的时间。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnEndClose(System.IAsyncResult)">
            <summary>
            在关闭通信对象时完成一个异步操作。
            </summary>
            <param name="result">通过调用 OnBeginClose() 方法返回的 System.IAsyncResult。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnEndOpen(System.IAsyncResult)">
            <summary>
            在打开通信对象时完成一个异步操作。
            </summary>
            <param name="result">通过调用 OnBeginOpen() 方法返回的 System.IAsyncResult。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FilePersistenceProviderFactory.OnOpen(System.TimeSpan)">
            <summary>
            在通信对象转换为打开状态（此过程必须在指定时间间隔内完成）后插入对通信对象的处理。
            </summary>
            <param name="timeout">指定在超时前必须完成打开操作的时间。</param>
        </member>
        <member name="P:EIIP.ServiceModel.FilePersistenceProviderFactory.DefaultCloseTimeout">
            <summary>
            获取为完成关闭操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.FilePersistenceProviderFactory.DefaultOpenTimeout">
            <summary>
            获取为完成打开操作提供的默认时间间隔。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ContextManager">
            <summary>
            上下文管理器。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.ContextManager.InstanceIDKey">
            <summary>
            实例ID键名。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.CreateContext(System.String,System.String)">
            <summary>
            创建上下文字典。
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.GetContext(System.String)">
            <summary>
            获取上下文。由服务调用以读取基于上下文绑定的传入上下文。
            </summary>
            <param name="key">实例ID键名。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.SetContext(System.ServiceModel.IClientChannel,System.String,System.String)">
            <summary>
            设置上下文。由客户端调用以写入基于上下文绑定的上下文。
            </summary>
            <param name="innerChannel">内置通道</param>
            <param name="key">上下文键</param>
            <param name="value">上下文值</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.SetContext(System.ServiceModel.IClientChannel,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            设置上下文。由客户端调用以写入基于上下文绑定的上下文。
            </summary>
            <param name="innerChannel">内置通道</param>
            <param name="context">上下文字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.UpdateContext(System.ServiceModel.IClientChannel,System.String,System.String)">
            <summary>
            更新上下文。创建新的上下文以包含新的与（来自代理的）旧的上下文。
            </summary>
            <param name="innerChannel">内置通道</param>
            <param name="key">上下文键</param>
            <param name="value">上下文值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.GetInstanceID(System.ServiceModel.IClientChannel)">
            <summary>
            获取上下文全局唯一实例ID。
            </summary>
            <param name="innerChannel">内置通道</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.SetInstanceID(System.ServiceModel.IClientChannel,System.Guid)">
            <summary>
            设置上下文实例ID。
            </summary>
            <param name="innerChannel">内置通道</param>
            <param name="instanceID">上下文实例ID。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.SetContext``1(System.ServiceModel.ClientBase{``0},System.String,System.String)">
            <summary>
            扩展代理。设置上下文。
            </summary>
            <typeparam name="T">客户端代理类型</typeparam>
            <param name="proxy">客户端代理</param>
            <param name="key">上下文键</param>
            <param name="value">上下文值</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.SetContext``1(System.ServiceModel.ClientBase{``0},System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            扩展代理。设置上下文。
            </summary>
            <typeparam name="T">客户端代理类型</typeparam>
            <param name="proxy">客户端代理</param>
            <param name="context">上下文字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.UpdateContext``1(System.ServiceModel.ClientBase{``0},System.String,System.String)">
            <summary>
            更新上下文。
            </summary>
            <typeparam name="T">客户端代理类型</typeparam>
            <param name="proxy">客户端代理</param>
            <param name="key">上下文键</param>
            <param name="value">上下文值</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.SaveInstanceID(System.Guid,System.String)">
            <summary>
            保存上下文实例ID。
            </summary>
            <param name="instanceID">上下文实例ID。</param>
            <param name="fileName">物理文件名。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextManager.LoadInstanceID(System.String)">
            <summary>
            从文件加载上下文实例ID。
            </summary>
            <param name="fileName">物理文件名</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.ContextManager.InstanceID">
            <summary>
            获取全局唯一实例ID。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ContextClientBase`1">
            <summary>
            客户端的上下文基类。
            </summary>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor">
            <summary>
            实例化客户端的上下文基类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.String)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.Guid)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="instanceID">上下文实例ID</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.Guid,System.String)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="instanceID">上下文实例ID</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.Guid,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="instanceID">上下文实例ID</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.String,System.String)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="key">上下文键名</param>
            <param name="value">上下文值</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="key">上下文键名</param>
            <param name="value">上下文值</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.String,System.String,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="key">上下文键名</param>
            <param name="value">上下文值</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="context">上下文字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="context">上下文字典</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端的上下文基类。
            </summary>
            <param name="context">上下文字典</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ContextClientBase`1.DuplicateProxy">
            <summary>
            复制代理的一个副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.ContextClientBase`1.InstanceID">
            <summary>
            获取全局唯一实例ID。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PriorityClientBase`1">
            <summary>
            客户端优先级报头拦截器基类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:EIIP.ServiceModel.HeaderClientBase`2">
            <summary>
            客户端报头拦截器基类。
            </summary>
            <typeparam name="T">用于连接服务的通道。</typeparam>
            <typeparam name="H">报头数据类型</typeparam>
        </member>
        <member name="T:EIIP.ServiceModel.InterceptorClientBase`1">
            <summary>
            客户端拦截器基类。
            </summary>
            <typeparam name="T">用于连接服务的通道。</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.#ctor">
            <summary>
            实例化客户端拦截器基类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.#ctor(System.String)">
            <summary>
            实例化客户端拦截器基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.#ctor(System.String,System.String)">
            <summary>
            实例化客户端拦截器基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端拦截器基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端拦截器基类。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.PreInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            前置调用。
            </summary>
            <param name="request">请求消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.InterceptorClientBase`1.PostInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            后继调用。
            </summary>
            <param name="reply">回复消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(System.String)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(System.String,System.String)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(`1)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="header">报头数据</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(`1,System.String)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="header">报头数据</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(`1,System.String,System.String)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="header">报头数据</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(`1,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="header">报头数据</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.#ctor(`1,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端报头拦截器基类。
            </summary>
            <param name="header">报头数据</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.HeaderClientBase`2.PreInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            前置调用。
            </summary>
            <param name="request">请求消息</param>
        </member>
        <member name="P:EIIP.ServiceModel.HeaderClientBase`2.Header">
            <summary>
            获取报头数据。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(System.String)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(System.String,System.String)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(EIIP.ServiceModel.CallPriority)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="priority">优先级</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(EIIP.ServiceModel.CallPriority,System.String)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="priority">优先级</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(EIIP.ServiceModel.CallPriority,System.String,System.String)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="priority">优先级</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(EIIP.ServiceModel.CallPriority,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="priority">优先级</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityClientBase`1.#ctor(EIIP.ServiceModel.CallPriority,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端优先级报头拦截器。
            </summary>
            <param name="priority">优先级</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="T:EIIP.ServiceModel.PriorityCallsBehaviorAttribute">
            <summary>
            优先级调用行为特性。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ThreadPoolBehaviorAttribute">
            <summary>
            线程池行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolBehaviorAttribute.#ctor(System.UInt32,System.Type)">
            <summary>
            实例化线程池行为特性。
            </summary>
            <param name="poolSize">线程池尺寸。</param>
            <param name="serviceType">服务契约类型。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolBehaviorAttribute.#ctor(System.UInt32,System.Type,System.String)">
            <summary>
            实例化线程池行为特性。
            </summary>
            <param name="poolSize">线程池尺寸。</param>
            <param name="serviceType">服务契约类型。</param>
            <param name="poolName">线程池名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolBehaviorAttribute.ProvideSynchronizer">
            <summary>
            提供线程池同步装置。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.ThreadPoolBehaviorAttribute.PoolName">
            <summary>
            获取或设置线程池名称。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ThreadPoolBehaviorAttribute.PoolSize">
            <summary>
            获取或设置线程池尺寸。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ThreadPoolBehaviorAttribute.ServiceType">
            <summary>
            获取或设置服务契约类型。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityCallsBehaviorAttribute.#ctor(System.UInt32,System.Type)">
            <summary>
            实例化优先级调用行为特性。
            </summary>
            <param name="poolSize">线程池尺寸</param>
            <param name="serviceType">服务契约类型。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityCallsBehaviorAttribute.#ctor(System.UInt32,System.Type,System.String)">
            <summary>
            实例化优先级调用行为特性。
            </summary>
            <param name="poolSize">线程池尺寸。</param>
            <param name="serviceType">服务契约类型。</param>
            <param name="poolName">线程池名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PriorityCallsBehaviorAttribute.ProvideSynchronizer">
            <summary>
            提供线程池同步装置。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.PriorityContext">
            <summary>
            优先级上下文。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.PriorityContext.Current">
            <summary>
            获取当前回调优先级。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.CallPriority">
            <summary>
            指示调用的某一优先级。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.CallPriority.Low">
            <summary>
            低优先级
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.CallPriority.Normal">
            <summary>
            普通优先级
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.CallPriority.High">
            <summary>
            高优先级
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PrioritySynchronizer">
            <summary>
            支持优先级的线程池同步装置。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ThreadPoolSynchronizer">
            <summary>
            线程池同步装置。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.#ctor(System.UInt32)">
            <summary>
            实例化线程池同步装置。
            </summary>
            <param name="poolSize">线程池尺寸</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.#ctor(System.UInt32,System.String)">
            <summary>
            实例化线程池同步装置。
            </summary>
            <param name="poolSize">线程池尺寸</param>
            <param name="poolName">线程池名称</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.Dispose">
            <summary>
            析构。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.CreateCopy">
            <summary>
            创建同步上下文的一个副本。这里直接返回当前线程池。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.Post(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            将异步消息调度到一个同步上下文。
            </summary>
            <param name="method">要调用的 System.Threading.SendOrPostCallback 委托。</param>
            <param name="state">传递给委托的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.Send(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            将一个同步消息调度到一个同步上下文。
            </summary>
            <param name="method">要调用的 System.Threading.SendOrPostCallback 委托。</param>
            <param name="state">传递给委托的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.Close">
            <summary>
            关闭线程池。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolSynchronizer.Abort">
            <summary>
            终止线程池。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ThreadPoolSynchronizer.CallQueued">
            <summary>
            获取调用队列。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ThreadPoolSynchronizer.QueueEmpty">
            <summary>
            获取一个值，该值指示是否队列为空。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.PrioritySynchronizer.SlotName">
            <summary>
            数据槽的名称。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PrioritySynchronizer.#ctor(System.UInt32)">
            <summary>
            实例化支持优先级的线程池同步装置。
            </summary>
            <param name="poolSize">线程池尺寸</param>
        </member>
        <member name="M:EIIP.ServiceModel.PrioritySynchronizer.#ctor(System.UInt32,System.String)">
            <summary>
            实例化支持优先级的线程池同步装置。
            </summary>
            <param name="poolSize">线程池尺寸</param>
            <param name="poolName">线程池名称</param>
        </member>
        <member name="P:EIIP.ServiceModel.PrioritySynchronizer.Priority">
            <summary>
            获取或设置优先级。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.PrioritySynchronizer.QueueEmpty">
            <summary>
            获取一个值，该值指示队列是否为空。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.DuplexChannelFactory`2">
            <summary>
            双向通道工厂类。
            </summary>
            <typeparam name="T">由通道工厂生成的通道类型。</typeparam>
            <typeparam name="C">客户端用以侦听来自所连接服务的消息。</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(`1)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="callback">回调</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.ServiceModel.Channels.Binding)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="context">实例上下文</param>
            <param name="binding">用于通过工厂生成的通道连接至服务的 System.ServiceModel.Channels.Binding。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="context">实例上下文</param>
            <param name="endpoint">该服务的 System.ServiceModel.Description.ServiceEndpoint。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.String)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="context">实例上下文</param>
            <param name="endpointName">用于终结点配置的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(`1,System.ServiceModel.Channels.Binding)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="binding">用于通过工厂生成的通道连接至服务的 System.ServiceModel.Channels.Binding。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(`1,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="endpoint">该服务的 System.ServiceModel.Description.ServiceEndpoint。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(`1,System.String)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="endpointName">用于终结点配置的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="context">客户端用以侦听来自所连接服务的消息。</param>
            <param name="binding">用于通过工厂生成的通道连接至服务的 System.ServiceModel.Channels.Binding。</param>
            <param name="endpointAddress">提供服务位置的 System.ServiceModel.EndpointAddress。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="context">客户端用以侦听来自所连接服务的消息。</param>
            <param name="endpointName">用于终结点配置的名称。</param>
            <param name="endpointAddress">提供服务位置的 System.ServiceModel.EndpointAddress。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(`1,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="binding">用于通过工厂生成的通道连接至服务的 System.ServiceModel.Channels.Binding。</param>
            <param name="endpointAddress">提供服务位置的 System.ServiceModel.EndpointAddress。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.#ctor(`1,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化双向通道工厂。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="endpointName">用于终结点配置的名称。</param>
            <param name="endpointAddress">提供服务位置的 System.ServiceModel.EndpointAddress。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.CreateChannel(`1,System.String)">
            <summary>
            在服务和客户端上的回调实例之间创建双工通道。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="endpointName">用于终结点配置的名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.CreateChannel(EIIP.ServiceModel.InstanceContext{`1},System.String)">
            <summary>
            在服务和客户端上的回调实例之间创建双工通道。
            </summary>
            <param name="context">客户端用以侦听来自所连接服务的消息。</param>
            <param name="endpointName">用于终结点配置的名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.CreateChannel(`1,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            在服务和客户端上的回调实例之间创建双工通道。
            </summary>
            <param name="callback">客户端用以侦听来自所连接服务的消息。</param>
            <param name="binding">用于通过工厂生成的通道连接至服务的 System.ServiceModel.Channels.Binding。</param>
            <param name="endpointAddress">提供服务位置的 System.ServiceModel.EndpointAddress。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexChannelFactory`2.CreateChannel(EIIP.ServiceModel.InstanceContext{`1},System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            在服务和客户端上的回调实例之间创建双工通道。
            </summary>
            <param name="context">客户端用以侦听来自所连接服务的消息。</param>
            <param name="binding">用于通过工厂生成的通道连接至服务的 System.ServiceModel.Channels.Binding。</param>
            <param name="endpointAddress">提供服务位置的 System.ServiceModel.EndpointAddress。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.WcfWrapper`2">
            <summary>
            进程内服务托管的WCF包装类。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <typeparam name="I">服务契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.WcfWrapper`2.#ctor">
            <summary>
            实例化进程内服务托管的WCF包装。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.WcfWrapper`2.#ctor(`0)">
            <summary>
            实例化进程内服务托管的WCF包装。
            </summary>
            <param name="singleton">服务实例</param>
        </member>
        <member name="M:EIIP.ServiceModel.WcfWrapper`2.Dispose">
            <summary>
            关闭代理。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.WcfWrapper`2.Close">
            <summary>
            关闭代理。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.WcfWrapper`2.Proxy">
            <summary>
            获取代理。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.AsyncOneWayClientBase`1">
            <summary>
            异步单调的客户端基类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.AsyncOneWayClientBase`1.GetCompletion">
            <summary>
            获取异步回调。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.AsyncOneWayClientBase`1.Close">
            <summary>
            关闭。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.AsyncOneWayClientBase`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.Contract.DataTransfers">
            <summary>
            定义传输数据契约。
            </summary>
            <remarks>
            string DataSourceName: 标识Data数据源名称，如 sitename.namespace.function；
            string DataTypeName: 标识Data源数据类型；
            byte[] Data: 传输的主数据均要转换为字节，EIIP.Helper.SerializeHelper.ToBytes4Tx(DataSet|DataTable),EIIP.Helper.SerializeHelper.ToObject4Tx＜DataSet|DataTable＞()；
            string ExtraData: 提供额外的数据传输方式，EIIP.ServiceModel.Utility.Serialize(System.Collections.Generic.Dictionary＜string, string＞)。
            </remarks>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.DataSourceName">
            <summary>
            数据源名称。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.DataTypeName">
            <summary>
            数据类型名称。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.Data">
            <summary>
             数据。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.Timestamp">
            <summary>
            时间戳。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.ExtraData">
            <summary>
            附加数据。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.DataTag">
            <summary>
            数据标识。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.DataFlag">
            <summary>
            数据标志。
            </summary>
        </member>
        <member name="F:EIIP.Contract.DataTransfers.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:EIIP.Contract.DataTransfers.#ctor(System.String,System.String,System.Byte[])">
            <summary>
            实例化传输数据。
            </summary>
            <param name="dataSourceName">数据源名称</param>
            <param name="dataTypeName">数据类型名称</param>
            <param name="data">传输数据</param>
        </member>
        <member name="T:EIIP.Contract.IDataSynchronismEvents">
            <summary>
            定义传输数据同步事件接口。
            </summary>
        </member>
        <member name="M:EIIP.Contract.IDataSynchronismEvents.OnTransmit(EIIP.Contract.DataTransfers)">
            <summary>
            触发数据传送。
            </summary>
            <param name="dt">要传输的数据</param>
        </member>
        <member name="T:EIIP.Contract.IDataSynchronismSubscriptionService">
            <summary>
            定义数据同步的订阅服务接口。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ISubscriptionService">
            <summary>
            定义临时订阅服务契约。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ISubscriptionService.Subscribe(System.String)">
            <summary>
            临时订阅事件操作。
            </summary>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ISubscriptionService.Unsubscribe(System.String)">
            <summary>
            取消临时订阅事件操作。
            </summary>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="T:EIIP.Contract.IDataTransmissionEvents">
            <summary>
            数据传输事件。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet">
             <summary>
            Represents a strongly typed in-memory cache of data.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet.SubscribersDataTable">
             <summary>
            Represents the strongly named DataTable class.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet.SubscribersRow">
             <summary>
            Represents strongly named DataRow class.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet.SubscribersRowChangeEvent">
             <summary>
            Row event argument class
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.SubscribersTableAdapter">
             <summary>
            Represents the connection and commands used to retrieve and save data.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager">
             <summary>
            TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.UpdateUpdatedRows(EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Update rows in top-down order.
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.UpdateInsertedRows(EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Insert rows in top-down order.
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.UpdateDeletedRows(EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet,System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Delete rows in bottom-up order.
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.GetRealUpdatedRows(System.Data.DataRow[],System.Collections.Generic.List{System.Data.DataRow})">
             <summary>
            Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.UpdateAll(EIIP.ServiceModel.PublishSubscribe.SubscribeDataSet)">
             <summary>
            Update all changes to the dataset.
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.UpdateOrderOption">
             <summary>
            Update Order Option
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishSubscribe.SubscribeDataSetTableAdapters.TableAdapterManager.SelfReferenceComparer">
             <summary>
            Used to sort self-referenced table's rows
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ClientResponseBase`1">
            <summary>
            客户端响应基类。
            </summary>
            <typeparam name="T">用于连接服务的通道。</typeparam>
        </member>
        <member name="F:EIIP.ServiceModel.ClientResponseBase`1.ResponseAddress">
            <summary>
            响应地址。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.#ctor(System.String)">
            <summary>
            实例化客户端响应。
            </summary>
            <param name="responseAddress">响应地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.#ctor(System.String,System.String)">
            <summary>
            实例化客户端响应。
            </summary>
            <param name="responseAddress">响应地址。</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化客户端响应。
            </summary>
            <param name="responseAddress">响应地址。</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.#ctor(System.String,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端响应。
            </summary>
            <param name="responseAddress">响应地址。</param>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.#ctor(System.String,System.ServiceModel.NetMsmqBinding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化客户端响应。
            </summary>
            <param name="responseAddress">响应地址。</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.PreInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            前置调用。
            </summary>
            <param name="request">请求消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.ClientResponseBase`1.GenerateMethodID">
            <summary>
            生成方法ID。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.QueuedServiceHelper">
            <summary>
            队列服务辅助类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.QueuedServiceHelper.VerifyQueues">
            <summary>
            队列验证。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.QueuedServiceHelper.VerifyQueue``1(System.String)">
            <summary>
            队列验证。
            </summary>
            <typeparam name="T">由通道工厂生成的通道类型。</typeparam>
            <param name="endpointName">终结点名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.QueuedServiceHelper.VerifyQueue``1">
            <summary>
            队列验证。
            </summary>
            <typeparam name="T">由通道工厂生成的通道类型。</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.QueuedServiceHelper.VerifyQueue(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            队列验证。
            </summary>
            <param name="endpoint">服务终结点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.QueuedServiceHelper.PurgeQueue(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            清空队列。
            </summary>
            <param name="endpoint">服务终结点。</param>
        </member>
        <member name="T:EIIP.ServiceModel.ResponseContext">
            <summary>
            响应上下文的数据契约。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.ResponseContext.ResponseAddress">
            <summary>
            响应地址。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.ResponseContext.FaultAddress">
            <summary>
            错误地址。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.ResponseContext.MethodID">
            <summary>
            方法ID。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ResponseContext.#ctor(System.String,System.String)">
            <summary>
            实例化响应上下文的数据契约。
            </summary>
            <param name="responseAddress">响应地址</param>
            <param name="methodID">方法ID</param>
        </member>
        <member name="M:EIIP.ServiceModel.ResponseContext.#ctor(EIIP.ServiceModel.ResponseContext)">
            <summary>
            响应上下文的数据契约。
            </summary>
            <param name="responseContext">响应上下文。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ResponseContext.#ctor(System.String)">
            <summary>
            响应上下文的数据契约。
            </summary>
            <param name="responseAddress">响应地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.ResponseContext.#ctor(System.String,System.String,System.String)">
            <summary>
            响应上下文的数据契约。
            </summary>
            <param name="responseAddress">响应地址</param>
            <param name="methodID">方法ID</param>
            <param name="faultAddress">错误地址</param>
        </member>
        <member name="P:EIIP.ServiceModel.ResponseContext.Current">
            <summary>
            获取或设置当前响应上下文。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ServiceResponseBase`1">
            <summary>
            实例化服务响应基类。
            </summary>
            <typeparam name="T">用于连接服务的通道。</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceResponseBase`1.#ctor">
            <summary>
            实例化服务响应基类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceResponseBase`1.#ctor(System.ServiceModel.NetMsmqBinding)">
            <summary>
            实例化服务响应基类。
            </summary>
            <param name="binding">队列绑定</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceResponseBase`1.#ctor(System.String)">
            <summary>
            实例化服务响应基类。
            </summary>
            <param name="bindingName">队列绑定配置名称</param>
        </member>
        <member name="T:EIIP.ServiceModel.Test">
            <summary>
            
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Test.getConn">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Utility">
            <summary>
            实用工具类。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.Utility.SerializeTextPrefix">
            <summary>
            序列化文本内容前缀。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.Serialize``1(``0,System.Type[])">
            <summary>
            将数据契约对象序列化为XML字串。
            </summary>
            <typeparam name="T">数据契约类型</typeparam>
            <param name="instance">数据契约对象</param>
            <param name="konwnTypes">数据契约已知类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.Deserialize``1(System.String,System.Type[])">
            <summary>
            将XML字串反序列化为数据契约对象。
            </summary>
            <typeparam name="T">数据契约对象</typeparam>
            <param name="xmlDoc">XML字串</param>
            <param name="konwnTypes">数据契约已知类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.Serialize(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            将字典对象序列化为XML字串。
            </summary>
            <param name="dict">字典对象</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.Deserialize(System.String)">
            <summary>
            将XML字串反序列化为字典。
            </summary>
            <param name="xml">XML字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.ParseIdentityAddition(System.String)">
            <summary>
            解析身份认证附加信息。
            </summary>
            <param name="addition">身份认证附加信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.Trim(System.String)">
            <summary>
            将目标字串的前后空白去掉，如为null则返回空串。
            </summary>
            <param name="target">目标字串</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.SetContextValue``1(System.String,``0)">
            <summary>
            在当前上下文中设置值。
            </summary>
            <param name="key">键名。特别注意，必须唯一设置，且仅能设置一次</param>
            <param name="value">键值</param>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.GetContextValue``1(System.String)">
            <summary>
            在当前上下文中获取值。
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.RadixEncode(System.String,System.Boolean)">
            <summary>
            使用算术算法编码字符串。
            </summary>
            <param name="text">要编码的文本</param>
            <param name="useHighRadix">设置是否使用高进制算法，高进制算法区分字母大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.IdentityDecode(System.String,System.String@,System.String@)">
            <summary>
            解密身份信息。
            </summary>
            <param name="enc">加密字串</param>
            <param name="userName">返回用户名</param>
            <param name="password">返回密码</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.RadixDecode(System.String,System.Boolean)">
            <summary>
            使用算术算法解码字符串。
            </summary>
            <param name="text">要解码的文本</param>
            <param name="useHighRadix">设置是否使用高进制算法，必须与编码参数设置一致，高进制算法区分字母大小写</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.ToString(System.Int64,System.Int32)">
            <summary>
            将指定数值转换为特定进制数值的字符串表示形式。
            </summary>
            <param name="i">要转换的数据</param>
            <param name="radix">进制</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Utility.ToInt64(System.String,System.Int32)">
            <summary>
            转换字符串至长整型数。
            </summary>
            <param name="s">要转换的指定进制的字符串</param>
            <param name="radix">进制，最大为62</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Utility.Conn">
            <summary>
            
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalBehaviorAttribute">
            <summary>
            事务行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalBehaviorAttribute.#ctor">
            <summary>
            实例化事务行为特性。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.TransactionalBehaviorAttribute.TransactionRequiredAllOperations">
            <summary>
            获取或设置一个值，该值指示是否所有的操作需要事务。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.TransactionalBehaviorAttribute.AutoCompleteInstance">
            <summary>
            获取或设置一个值，该值指示事务是否自动完成提交。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalMemoryProvider">
            <summary>
            事务型的内存持久化提供者。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalMemoryProvider.#ctor(System.Guid)">
            <summary>
            实例化事务型的内存持久化提供者。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalMemoryProviderFactory">
            <summary>
            事务型内存持久化工厂类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalMemoryProviderFactory.CreateProvider(System.Guid)">
            <summary>
            初始化事务型内存持久化提供者实例。
            </summary>
            <param name="id">要保存的服务状态数据的唯一标识符。</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.ServiceInterceptorBehaviorAttribute">
            <summary>
            服务端拦截器行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceInterceptorBehaviorAttribute.CreateOperationInterceptor">
            <summary>
            创建操作拦截器特性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceInterceptorBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            用于更改运行时属性值或插入自定义扩展对象（例如错误处理程序、消息或参数拦截器、安全扩展以及其他自定义扩展对象）。
            </summary>
            <param name="serviceDescription">服务说明。</param>
            <param name="host">当前正在生成的宿主。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceInterceptorBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            用于向绑定元素传递自定义数据，以支持协定实现。
            </summary>
            <param name="serviceDescription">服务的服务说明。</param>
            <param name="serviceHostBase">服务的宿主。</param>
            <param name="endpoints">服务终结点。</param>
            <param name="bindingParameters">绑定元素可访问的自定义对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceInterceptorBehaviorAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            用于检查服务宿主和服务说明，从而确定服务是否可成功运行。
            </summary>
            <param name="serviceDescription">服务的服务说明。</param>
            <param name="serviceHostBase">服务的宿主。</param>
        </member>
        <member name="T:EIIP.ServiceModel.OperationInterceptorBehaviorAttribute">
            <summary>
            操作拦截器行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.OperationInterceptorBehaviorAttribute.CreateInvoker(System.ServiceModel.Dispatcher.IOperationInvoker)">
            <summary>
            创建包装了旧调用者的通用调用者。
            </summary>
            <param name="oldInvoker">旧调用者</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.OperationInterceptorBehaviorAttribute.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            实现此方法可以在运行时将数据传递给绑定，从而支持自定义行为。
            </summary>
            <param name="operationDescription">正在检查的操作。仅用于检查。如果修改了操作说明，则结果将不确定。</param>
            <param name="bindingParameters">绑定元素支持该行为所需的对象的集合。</param>
        </member>
        <member name="M:EIIP.ServiceModel.OperationInterceptorBehaviorAttribute.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)">
            <summary>
            在操作范围内执行客户端的修改或扩展。
            </summary>
            <param name="operationDescription">正在检查的操作。仅用于检查。如果修改了操作说明，则结果将不确定。</param>
            <param name="clientOperation">公开 operationDescription 所描述的操作的自定义属性的运行时对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.OperationInterceptorBehaviorAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)">
            <summary>
            在操作范围内执行服务的修改或扩展。
            </summary>
            <param name="operationDescription">正在检查的操作。仅用于检查。如果修改了操作说明，则结果将不确定。</param>
            <param name="dispatchOperation">公开 operationDescription 所描述的操作的自定义属性的运行时对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.OperationInterceptorBehaviorAttribute.Validate(System.ServiceModel.Description.OperationDescription)">
            <summary>
            在操作范围内执行服务的修改或扩展。
            </summary>
            <param name="operationDescription">正在检查的操作。仅用于检查。如果修改了操作说明，则结果将不确定。</param>
        </member>
        <member name="T:EIIP.ServiceModel.GenericInvoker">
            <summary>
            通用调用者。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.#ctor(System.ServiceModel.Dispatcher.IOperationInvoker)">
            <summary>
            实例化通用调用者。
            </summary>
            <param name="oldInvoker">要拦截的原调用者</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.AllocateInputs">
            <summary>
            返回参数对象的 System.Array。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.PreInvoke(System.Object,System.Object[])">
            <summary>
            前置调用。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.PostInvoke(System.Object,System.Object,System.Object[],System.Exception)">
            <summary>
            后置调用。始终都会调用，即使抛出了异常。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="returnedValue">返回值</param>
            <param name="outputs">方法的输出。</param>
            <param name="exp">可能的异常</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.Invoke(System.Object,System.Object[],System.Object[]@)">
            <summary>
            从一个实例和输入对象的集合返回一个对象和输出对象的集合。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
            <param name="outputs">方法的输出。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            异步调用开始。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="inputs">方法的输入。</param>
            <param name="callback">异步回调对象。</param>
            <param name="state">关联的状态数据。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.GenericInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)">
            <summary>
            异步结束方法。
            </summary>
            <param name="instance">要调用的对象。</param>
            <param name="outputs">方法的输出。</param>
            <param name="result">System.IAsyncResult 对象。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.GenericInvoker.IsSynchronous">
            <summary>
            获取一个值，该值指定调度程序是调用 System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@) 方法
            还是调用 System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object) 方法。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.FileInstanceStore`2">
            <summary>
            文件实例存储。
            </summary>
            <typeparam name="ID">要保存的服务状态数据的唯一标识符类型。</typeparam>
            <typeparam name="T">实例类型</typeparam>
        </member>
        <member name="F:EIIP.ServiceModel.FileInstanceStore`2.Filename">
            <summary>
            物理文件名称。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.FileInstanceStore`2.#ctor(System.String)">
            <summary>
            实例化文件实例存储。
            </summary>
            <param name="fileName">物理文件名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.FileInstanceStore`2.RemoveInstance(`0)">
            <summary>
            移除实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
        </member>
        <member name="M:EIIP.ServiceModel.FileInstanceStore`2.ContainsInstance(`0)">
            <summary>
            判定是否包含指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.FileInstanceStore`2.Item(`0)">
            <summary>
            获取指定实例。
            </summary>
            <param name="instanceID">实例的唯一标识符</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.ServiceThrottleHelper">
            <summary>
            服务限流辅助类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceThrottleHelper.SetThrottle(System.ServiceModel.ServiceHost,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置限流。在打开服务实例前调用。
            </summary>
            <param name="host">服务宿主</param>
            <param name="maxCalls">指定整个 System.ServiceModel.ServiceHost 中正在处理的最多消息数。</param>
            <param name="maxSessions">指定 System.ServiceModel.ServiceHost 对象可一次接受的最多会话数的值。</param>
            <param name="maxInstances">指定服务中可以一次执行的最多 System.ServiceModel.InstanceContext 对象数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceThrottleHelper.SetThrottle(System.ServiceModel.ServiceHost,System.ServiceModel.Description.ServiceThrottlingBehavior,System.Boolean)">
            <summary>
            设置限流。在打开服务实例前调用。
            </summary>
            <param name="host">服务宿主</param>
            <param name="serviceThrottle">服务限流行为</param>
            <param name="overrideConfig">设置是否覆盖配置。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceThrottleHelper.SetThrottle(System.ServiceModel.ServiceHost,System.ServiceModel.Description.ServiceThrottlingBehavior)">
            <summary>
            在打开服务实例前调用。不覆盖配置。
            </summary>
            <param name="host">服务宿主</param>
            <param name="serviceThrottle">服务限流行为</param>
        </member>
        <member name="T:EIIP.ServiceModel.MetadataHelper">
            <summary>
            元数据辅助类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetEndpoints(System.String,System.Type)">
            <summary>
            获取指定元数据的服务终结点。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <param name="contractType">元数据服务契约类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetEndpoints(System.String)">
            <summary>
            获取指定元数据的服务终结点。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetCallbackContract(System.String,System.Type)">
            <summary>
            获取元数据服务的回调契约。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <param name="contractType">元数据服务契约类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetCallbackContract(System.String,System.String,System.String)">
            <summary>
            获取元数据服务的回调契约。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <param name="contractNamespace">元数据服务契约命名空间</param>
            <param name="contractName">元数据服务契约名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.QueryContract(System.String,System.Type)">
            <summary>
            判断是否是队列契约。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <param name="contractType">元数据服务契约类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.QueryContract(System.String,System.String,System.String)">
            <summary>
            判断是否是队列契约。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <param name="contractNamespace">元数据服务契约命名空间</param>
            <param name="contractName">元数据服务契约名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetContracts(System.String)">
            <summary>
            获取元数据服务的服务契约。
            </summary>
            <param name="mexAddress">元数据地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetContracts(System.Type,System.String)">
            <summary>
            获取元数据服务的服务契约。
            </summary>
            <param name="bindingType">绑定类型</param>
            <param name="mexAddress">元数据地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetAddresses(System.String,System.Type)">
            <summary>
            获取所有的元数据服务地址。
            </summary>
            <param name="mexAddress">元数据服务地址</param>
            <param name="contractType">元数据服务契约类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetAddresses(System.String,System.String,System.String)">
            <summary>
            获取所有的元数据服务地址。
            </summary>
            <param name="mexAddress">元数据服务地址</param>
            <param name="contractNamespace">元数据服务契约命名空间</param>
            <param name="contractName">元数据服务契约名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetAddresses(System.Type,System.String,System.Type)">
            <summary>
            获取所有的元数据服务地址。
            </summary>
            <param name="bindingType">绑定类型</param>
            <param name="mexAddress">元数据服务地址</param>
            <param name="contractType">元数据服务契约类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetAddresses(System.Type,System.String,System.String,System.String)">
            <summary>
            获取元数据服务的服务契约。
            </summary>
            <param name="bindingType">绑定类型</param>
            <param name="mexAddress">元数据地址</param>
            <param name="contractNamespace">元数据服务契约命名空间</param>
            <param name="contractName">元数据服务契约名称</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetOperations(System.String,System.Type)">
            <summary>
            获取元数据服务操作。
            </summary>
            <param name="mexAddress">元数据服务地址</param>
            <param name="contractType">元数据服务契约类型</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.MetadataHelper.GetOperations(System.String,System.String,System.String)">
            <summary>
            获取元数据服务操作。
            </summary>
            <param name="mexAddress">元数据服务地址</param>
            <param name="contractNamespace">元数据服务契约命名空间</param>
            <param name="contractName">元数据服务契约名称</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.DataContractSerializer`1">
            <summary>
            数据契约序列化器。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.#ctor">
            <summary>
            实例化数据契约序列化器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.#ctor(System.Collections.Generic.IList{System.Type})">
            <summary>
            实例化数据契约序列化器。
            </summary>
            <param name="knownTypes">已知类型</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.ReadObject(System.Xml.XmlDictionaryReader)">
            <summary>
            使用 System.Xml.XmlDictionaryReader 读取 XML 文档或流，然后返回反序列化的对象。
            </summary>
            <param name="reader"> 一个用于读取 XML 文档的 System.Xml.XmlDictionaryReader。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.IsStartObject(System.Xml.XmlDictionaryReader)">
            <summary>
            获取一个值，该值指定 System.Xml.XmlDictionaryReader 是否定位于可读取的 XML 元素上。
            </summary>
            <param name="reader">一个用于读取 XML 流或文档的 System.Xml.XmlDictionaryReader。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
            <summary>
            使用 System.Xml.XmlDictionaryReader 读取 XML 流或文档并返回反序列化的对象；
            使用它还可以在序列化程序尝试读取数据之前指定它是否可以读取数据。
            </summary>
            <param name="reader">一个用于读取 XML 文档的 System.Xml.XmlDictionaryReader。</param>
            <param name="verifyObjectName">
            如果要检查包含的 XML 元素名称和命名空间是否对应于根名称和根命名空间，则为 true；
            否则为 false 以跳过验证。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteEndObject(System.Xml.XmlDictionaryWriter)">
            <summary>
            使用 System.Xml.XmlDictionaryWriter 将对象数据的结束作为结束 XML 元素写入 XML 文档或流。
            </summary>
            <param name="writer">一个用于写入 XML 文档或流的 System.Xml.XmlDictionaryWriter。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            使用指定的 System.Xml.XmlDictionaryWriter 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。
            </summary>
            <param name="writer">用于将内容写入 XML 文档或流的 System.Xml.XmlDictionaryWriter。</param>
            <param name="graph">包含要写入的内容的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
            <summary>
            使用指定的 System.Xml.XmlDictionaryWriter 将对象数据的开始作为开始 XML 元素写入。
            </summary>
            <param name="writer">用于写入 XML 文档的 System.Xml.XmlDictionaryWriter。</param>
            <param name="graph">要序列化的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.ReadObject(System.IO.Stream)">
            <summary>
            使用 System.IO.Stream 读取 XML 流或文档，然后返回反序列化的对象。
            </summary>
            <param name="stream">用于读取 XML 流或文档的 System.IO.Stream。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.ReadObject(System.Xml.XmlReader)">
            <summary>
            使用 System.Xml.XmlReader 读取 XML 文档或流，然后返回反序列化的对象。
            </summary>
            <param name="reader">一个用于读取 XML 流或文档的 System.Xml.XmlReader。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.IsStartObject(System.Xml.XmlReader)">
            <summary>
            获取一个值，该值指定 System.Xml.XmlReader 是否定位于可读取的 XML 元素上。
            </summary>
            <param name="reader">一个用于读取 XML 流或文档的 System.Xml.XmlReader。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.ReadObject(System.Xml.XmlReader,System.Boolean)">
            <summary>
            使用 System.Xml.XmlReader 读取 XML 文档或流并返回反序列化的对象；
            使用它还可以在序列化程序尝试读取数据之前指定它是否可以读取数据。
            </summary>
            <param name="reader">用于读取 XML 文档或流的 System.Xml.XmlReader。</param>
            <param name="verifyObjectName">
            如果要检查包含的 XML 元素名称和命名空间是否对应于根名称和根命名空间，则为 true；否则为 false 以跳过验证。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteEndObject(System.Xml.XmlWriter)">
            <summary>
            使用 System.Xml.XmlWriter 将对象数据的结束作为结束 XML 元素写入 XML 文档或流。
            </summary>
            <param name="writer">一个用于写入 XML 文档或流的 System.Xml.XmlWriter。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteObject(System.IO.Stream,`0)">
            <summary>
            使用指定的 System.IO.Stream 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。
            </summary>
            <param name="stream">用于写入 XML 文档或流的 System.IO.Stream。</param>
            <param name="graph">包含要写入流的数据的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteObject(System.Xml.XmlDictionaryWriter,`0)">
            <summary>
            使用指定的 System.Xml.XmlDictionaryWriter 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。
            </summary>
            <param name="writer">用于将内容写入 XML 文档或流的 System.Xml.XmlDictionaryWriter。</param>
            <param name="graph">包含要写入的内容的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteObject(System.Xml.XmlWriter,`0)">
            <summary>
            使用指定的 System.Xml.XmlWriter 将对象的完整内容（开始、内容和结束）写入 XML 文档或流。
            </summary>
            <param name="writer">一个用于写入 XML 文档或流的 System.Xml.XmlWriter。</param>
            <param name="graph">包含要写入的内容的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteObjectContent(System.Xml.XmlWriter,`0)">
            <summary>
            使用指定的 System.Xml.XmlDictionaryWriter 仅将对象的内容写入 XML 文档或流。
            </summary>
            <param name="writer">一个用于写入 XML 文档或流的 System.Xml.XmlDictionaryWriter。</param>
            <param name="graph">包含要写入的内容的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DataContractSerializer`1.WriteStartObject(System.Xml.XmlWriter,`0)">
            <summary>
            使用指定的 System.Xml.XmlWriter 仅将对象的内容写入 XML 文档或流。
            </summary>
            <param name="writer">一个用于写入 XML 文档或流的 System.Xml.XmlWriter。</param>
            <param name="graph">包含要写入的内容的对象。</param>
        </member>
        <member name="T:EIIP.ServiceModel.GenericContext`1">
            <summary>
            泛型上下文。
            </summary>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="F:EIIP.ServiceModel.GenericContext`1.Value">
            <summary>
            数据。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.GenericContext`1.#ctor(`0)">
            <summary>
            实例化泛型上下文。
            </summary>
            <param name="value">数据</param>
        </member>
        <member name="M:EIIP.ServiceModel.GenericContext`1.#ctor">
            <summary>
            实例化泛型上下文。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.GenericContext`1.Current">
            <summary>
            获取当前泛型上下文。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PersistentSubscriptionServiceClient">
            <summary>
            持久订阅服务客户端。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.IdentityClientBase`1">
            <summary>
            基于身份认证的客户端报头拦截器基类。
            </summary>
            <typeparam name="T">用于连接服务的通道。</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.#ctor">
            <summary>
            基于身份认证的客户端报头拦截器基类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.#ctor(System.String)">
            <summary>
            基于身份认证的客户端报头拦截器基类。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.#ctor(System.String,System.String)">
            <summary>
            基于身份认证的客户端报头拦截器基类。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            基于身份认证的客户端报头拦截器基类。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            基于身份认证的客户端报头拦截器基类。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.String,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="userName">登录名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.Boolean,System.String,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="useCredentials">设置是否使用安全凭证</param>
            <param name="userName">登录名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="userName">登录名</param>
            <param name="password">密码</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentitySerial(System.String)">
            <summary>
            设置身份凭证。一般用于智能锁设备。
            </summary>
            <param name="serial">锁串号。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentitySerial(System.Boolean,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="useCredentials">设置是否使用安全凭证</param>
            <param name="serial">锁串号。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="passport">通行证。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.Boolean,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="useCredentials">设置是否使用安全凭证</param>
            <param name="passport">通行证。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.String,System.Boolean,System.String,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="passport">通行证。</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentityAnonymous(System.Guid)">
            <summary>
            设置匿名身份凭证。
            </summary>
            <param name="guid">来宾（匿名）身份。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.Boolean,System.Guid)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="useCredentials">设置是否使用安全凭证</param>
            <param name="guid">来宾（匿名）身份。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentityAnonymous(System.Guid,System.Boolean,System.String,System.String)">
            <summary>
            设置匿名身份凭证。
            </summary>
            <param name="guid">来宾（匿名）身份。</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(EIIP.Core.Contract.IdentityBase)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="identityBase">登录身份基础信息。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(System.Boolean,EIIP.Core.Contract.IdentityBase)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="useCredentials">设置是否使用安全凭证</param>
            <param name="identityBase">登录身份基础信息。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity(EIIP.Core.Contract.IdentityBase,System.Boolean,System.String,System.String)">
            <summary>
            设置身份凭证。
            </summary>
            <param name="identityBase">登录身份基础信息。</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity2SL_Only4LogonService(System.String,System.String)">
            <summary>
            设置登录身份凭证(Silverlight适用)。特别注音：仅用于登录服务。
            </summary>
            <param name="userName">登录名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity2SL(EIIP.Core.Contract.IdentityBase)">
            <summary>
            设置身份凭证(Silverlight适用)。
            </summary>
            <param name="identityBase">登录身份基础信息。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentity2SL(System.String)">
            <summary>
            设置身份凭证(Silverlight适用)。
            </summary>
            <param name="passport">通行证。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentitySerial2SL(System.String)">
            <summary>
            设置身份凭证(Silverlight适用)。一般用于智能锁设备。
            </summary>
            <param name="serial">锁串号。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.SetIdentityAnonymous2SL(System.Guid)">
            <summary>
            设置匿名身份凭证(Silverlight适用)。
            </summary>
            <param name="guid">来宾（匿名）身份。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.AppendHeaderAddition(System.Boolean,System.String,System.String)">
            <summary>
            将客户端信息写入附加内容。
            </summary>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.AppendHeaderAddition(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            信息写入头部附加信息。
            </summary>
            <param name="info">要写入头部附加信息的字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.PreInvoke(System.ServiceModel.Channels.Message@)">
            <summary>
            前置调用。添加加密的身份验证票证。
            </summary>
            <param name="reply">请求消息</param>
        </member>
        <member name="M:EIIP.ServiceModel.IdentityClientBase`1.AppendPassport(System.String)">
            <summary>
            附加通行证。
            </summary>
            <param name="passport">通行证。</param>
        </member>
        <member name="T:EIIP.ServiceModel.IPersistentSubscriptionService">
            <summary>
            定义持久订阅服务契约。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.IPersistentSubscriptionService.Subscribe(System.String,System.String,System.String)">
            <summary>
            订阅指定事件地址、契约及操作事件。
            </summary>
            <param name="address">地址</param>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IPersistentSubscriptionService.Unsubscribe(System.String,System.String,System.String)">
            <summary>
            取消指定事件地址、契约及操作的订阅。
            </summary>
            <param name="address">地址</param>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.IPersistentSubscriptionService.GetAllSubscribers">
            <summary>
            获取所有的持久订阅者。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.IPersistentSubscriptionService.GetSubscribersToContract(System.String)">
            <summary>
            获取指定事件契约的持久订阅者。
            </summary>
            <param name="eventsContract">事件契约名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.IPersistentSubscriptionService.GetSubscribersToContractEventType(System.String,System.String)">
            <summary>
            获取指定事件契约与操作的持久订阅者。
            </summary>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.IPersistentSubscriptionService.GetAllSubscribersFromAddress(System.String)">
            <summary>
            获取指定事件地址的持久订阅者。
            </summary>
            <param name="address">事件地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.#ctor">
            <summary>
            实例化持久订阅服务客户端。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.#ctor(System.String)">
            <summary>
            实例化持久订阅服务客户端。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.#ctor(System.String,System.String)">
            <summary>
            实例化持久订阅服务客户端。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.#ctor(System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化持久订阅服务客户端。
            </summary>
            <param name="endpointConfigurationName">应用程序配置文件中的终结点的名称。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.#ctor(System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            实例化持久订阅服务客户端。
            </summary>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点的地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.Subscribe(System.String,System.String,System.String)">
            <summary>
            订阅指定事件地址、契约及操作事件。
            </summary>
            <param name="address">地址</param>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.Unsubscribe(System.String,System.String,System.String)">
            <summary>
            取消指定事件地址、契约及操作的订阅。
            </summary>
            <param name="address">地址</param>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.GetAllSubscribers">
            <summary>
            获取所有的持久订阅者。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.GetSubscribersToContract(System.String)">
            <summary>
            获取指定事件契约的持久订阅者。
            </summary>
            <param name="eventsContract">事件契约名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.GetSubscribersToContractEventType(System.String,System.String)">
            <summary>
            获取指定事件契约与操作的持久订阅者。
            </summary>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.PersistentSubscriptionServiceClient.GetAllSubscribersFromAddress(System.String)">
            <summary>
            获取指定事件地址的持久订阅者。
            </summary>
            <param name="address">事件地址</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.AffinitySynchronizer">
            <summary>
            关联线程同步装置。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.AffinitySynchronizer.#ctor">
            <summary>
            实例化关联线程同步装置。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.AffinitySynchronizer.#ctor(System.String)">
            <summary>
            实例化关联线程池同步装置。
            </summary>
            <param name="threadName">线程名称</param>
        </member>
        <member name="M:EIIP.ServiceModel.AffinitySynchronizer.CreateCopy">
            <summary>
            创建同步上下文的一个副本。这里直接返回当前线程池。
            </summary>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.DataTableHelper">
            <summary>
            数据表助手类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.DataTableHelper.ToArray``2(System.Data.DataTable,System.Func{``0,``1})">
            <summary>
            转换为数组。
            </summary>
            <typeparam name="R">数据行类型</typeparam>
            <typeparam name="T">数据契约</typeparam>
            <param name="table">数据表</param>
            <param name="converter">转换器</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.ServiceHost`1">
            <summary>
            泛型的服务宿主。
            </summary>
            <typeparam name="T">服务契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.AddErrorHandler(System.ServiceModel.Dispatcher.IErrorHandler)">
            <summary>
            添加特定的错误处理者。在打开服务实例前调用。
            </summary>
            <param name="errorHandler">错误处理者。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.AddErrorHandler">
            <summary>
            添加错误处理者。在打开服务实例前调用。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.EnableMetadataExchange(System.Boolean)">
            <summary>
            是否开启元数据交换（MEX）服务。在打开服务实例前调用。
            </summary>
            <param name="enableHttpGet">设置是否开启HTTP GET方式</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.AddAllMexEndPoints">
            <summary>
            为所有终结点添加元数据交换（MEX）服务。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.OnOpening">
            <summary>
            服务打开时触发的事件处理。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.OnClosing">
            <summary>
            服务关闭时触发的事件处理。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.#ctor">
            <summary>
            实例化服务宿主。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.#ctor(System.String[])">
            <summary>
            实例化服务宿主。
            </summary>
            <param name="baseAddresses">包含承载服务的基址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.#ctor(System.Uri[])">
            <summary>
            实例化服务宿主。
            </summary>
            <param name="baseAddresses">包含承载服务的基址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.#ctor(`0,System.String[])">
            <summary>
            实例化服务宿主。
            </summary>
            <param name="singleton">服务宿主实例。</param>
            <param name="baseAddresses">包含承载服务的基址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.#ctor(`0)">
            <summary>
            实例化服务宿主。
            </summary>
            <param name="singleton">服务宿主实例。</param>
        </member>
        <member name="M:EIIP.ServiceModel.ServiceHost`1.#ctor(`0,System.Uri[])">
            <summary>
            实例化服务宿主。
            </summary>
            <param name="singleton">服务宿主实例。</param>
            <param name="baseAddresses">包含承载服务的基址。</param>
        </member>
        <member name="P:EIIP.ServiceModel.ServiceHost`1.HasMexEndpoint">
            <summary>
            获取一个值，该值指示是否有 MEX 终结点。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ServiceHost`1.Throttle">
            <summary>
            获取服务限流配置。只能在打开服务实例后调用。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ServiceHost`1.IncludeExceptionDetailInFaults">
            <summary>
            获取或设置一个值，该值指示是否在错误中包括异常细节。只能在打开服务实例前调用。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ServiceHost`1.SecurityAuditEnabled">
            <summary>
            获取或设置一个值，该值指示是否开启服务安全审核。只能在打开服务实例前调用。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.ServiceHost`1.Singleton">
            <summary>
            获取服务宿主单实例。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.PublishService`1">
            <summary>
            发布服务类。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.PublishService`1.FireEvent(System.Object[])">
            <summary>
            触发事件。
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:EIIP.ServiceModel.PersistentSubscription">
            <summary>
            定义持久订阅服务的数据契约。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.PersistentSubscription.Address">
            <summary>
            获取或设置地址。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.PersistentSubscription.EventsContract">
            <summary>
            获取或设置事件契约名称。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.PersistentSubscription.EventOperation">
            <summary>
            获取或设置事件操作名称。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.SubscriptionManager`1">
            <summary>
            订阅管理器。
            </summary>
            <typeparam name="T">回调(事件)契约</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.Subscribe(System.String)">
            <summary>
            临时订阅事件操作。
            </summary>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.Unsubscribe(System.String)">
            <summary>
            取消临时订阅事件操作。
            </summary>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.GetAllSubscribers">
            <summary>
            获取所有的持久订阅者。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.GetSubscribersToContract(System.String)">
            <summary>
            获取指定事件契约的持久订阅者。
            </summary>
            <param name="eventContract">事件契约名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.GetSubscribersToContractEventType(System.String,System.String)">
            <summary>
            获取指定事件契约与操作的持久订阅者。
            </summary>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.GetAllSubscribersFromAddress(System.String)">
            <summary>
            获取指定事件地址的持久订阅者。
            </summary>
            <param name="address">事件地址</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.Unsubscribe(System.String,System.String,System.String)">
            <summary>
            取消指定事件地址、契约及操作的订阅。
            </summary>
            <param name="address">地址</param>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.SubscriptionManager`1.Subscribe(System.String,System.String,System.String)">
            <summary>
            订阅指定事件地址、契约及操作事件。
            </summary>
            <param name="address">地址</param>
            <param name="eventsContract">事件契约名称。</param>
            <param name="eventOperation">事件操作名称。</param>
        </member>
        <member name="T:EIIP.ServiceModel.DuplexClientBase`2">
            <summary>
            用于创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <typeparam name="T">要创建的通道类型。</typeparam>
            <typeparam name="C">一个将回调对象与服务的通道相关联的 System.ServiceModel.InstanceContext 对象类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(EIIP.ServiceModel.InstanceContext{`1})">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="context">一个将回调对象与服务的通道相关联的 System.ServiceModel.InstanceContext 对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.String)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="context">一个将回调对象与服务的通道相关联的 System.ServiceModel.InstanceContext 对象。</param>
            <param name="endpointName">应用程序配置文件中的客户端终结点信息的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="context">一个将回调对象与服务的通道相关联的 System.ServiceModel.InstanceContext 对象。</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="context">一个将回调对象与服务的通道相关联的 System.ServiceModel.InstanceContext 对象。</param>
            <param name="endpointName">应用程序配置文件中的客户端终结点信息的名称。</param>
            <param name="remoteAddress">服务终结点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(EIIP.ServiceModel.InstanceContext{`1},System.String,System.String)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="context">一个将回调对象与服务的通道相关联的 System.ServiceModel.InstanceContext 对象。</param>
            <param name="endpointName">应用程序配置文件中的客户端终结点信息的名称。</param>
            <param name="remoteAddress">要使用的服务终结点地址。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(`1)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="callback">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(`1,System.String)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="callback">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
            <param name="endpointName">应用程序配置文件中的客户端终结点信息的名称。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(`1,System.ServiceModel.Channels.Binding,System.ServiceModel.EndpointAddress)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="callback">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
            <param name="binding">用于调用服务的绑定。</param>
            <param name="remoteAddress">服务终结点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(`1,System.String,System.ServiceModel.EndpointAddress)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="callback">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
            <param name="endpointName">应用程序配置文件中的客户端终结点信息的名称。</param>
            <param name="remoteAddress">服务终结点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.DuplexClientBase`2.#ctor(`1,System.String,System.String)">
            <summary>
            创建双工服务的通道，并将该通道与回调对象相关联。
            </summary>
            <param name="calback">一个对象，用于创建将回调对象与服务的通道相关联的实例上下文。</param>
            <param name="endpointName">应用程序配置文件中的客户端终结点信息的名称。</param>
            <param name="remoteAddress">要使用的服务终结点地址。</param>
        </member>
        <member name="T:EIIP.ServiceModel.InProcFactory">
            <summary>
            进程内托管工厂。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.SetThrottle``1(System.ServiceModel.Description.ServiceThrottlingBehavior)">
            <summary>
            设置限流。在创建任何服务实例前调用。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <param name="throttle">设置限流</param>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.MaxThrottle``1">
            <summary>
            设置不限流。在创建任何服务实例前调用。
            </summary>
            <typeparam name="S">服务类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.SetThrottle``1(System.Int32,System.Int32,System.Int32)">
            <summary>
            设置限流。在创建任何服务实例前调用。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <param name="maxCalls">指定整个 System.ServiceModel.ServiceHost 中正在处理的最多消息数。</param>
            <param name="maxSessions">指定 System.ServiceModel.ServiceHost 对象可一次接受的最多会话数的值。</param>
            <param name="maxInstances">指定服务中可以一次执行的最多 System.ServiceModel.InstanceContext 对象数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.SetSingleton``1(``0)">
            <summary>
            设置服务类型单实例。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <param name="singleton">服务类型单实例。</param>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.CreateInstance``2">
            <summary>
            创建进程内托管服务。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <typeparam name="I">服务契约类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.CreateInstance``3(EIIP.ServiceModel.InstanceContext{``2})">
            <summary>
            创建进程内托管服务。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <typeparam name="I">服务契约类型</typeparam>
            <typeparam name="C">回调契约类型</typeparam>
            <param name="context">实例上下文</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.CreateInstance``3(``2)">
            <summary>
            创建进程内托管服务。
            </summary>
            <typeparam name="S">服务类型</typeparam>
            <typeparam name="I">服务契约类型</typeparam>
            <typeparam name="C">回调契约类型</typeparam>
            <param name="callback">回调方法</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.InProcFactory.CloseProxy``1(``0)">
            <summary>
            关闭代理。
            </summary>
            <typeparam name="I">代理实例类型</typeparam>
            <param name="instance">代理实例</param>
        </member>
        <member name="T:EIIP.ServiceModel.InstanceContext`1">
            <summary>
            实例上下文。
            </summary>
            <typeparam name="T">回调契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.InstanceContext`1.#ctor(`0)">
            <summary>
            实例化实例上下文。
            </summary>
            <param name="callbackInstance">回调实例</param>
        </member>
        <member name="M:EIIP.ServiceModel.InstanceContext`1.ReleaseServiceInstance">
            <summary>
            释放服务实例。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.InstanceContext`1.Context">
            <summary>
            获取实例上下文。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.InstanceContext`1.ServiceInstance">
            <summary>
            获取服务实例。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.CallbackThreadAffinityBehaviorAttribute">
            <summary>
            回调的线程关联性行为特性。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.CallbackThreadPoolBehaviorAttribute">
            <summary>
            回调线程池行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.CallbackThreadPoolBehaviorAttribute.#ctor(System.UInt32,System.Type)">
            <summary>
            实例化回调线程池行为特性。
            </summary>
            <param name="poolSize">线程池尺寸。</param>
            <param name="clientType">客户端契约类型</param>
        </member>
        <member name="M:EIIP.ServiceModel.CallbackThreadPoolBehaviorAttribute.#ctor(System.UInt32,System.Type,System.String)">
            <summary>
            实例化回调线程池行为特性。
            </summary>
            <param name="poolSize">线程池尺寸。</param>
            <param name="clientType">客户端契约类型</param>
            <param name="poolName">线程池名称</param>
        </member>
        <member name="M:EIIP.ServiceModel.CallbackThreadAffinityBehaviorAttribute.#ctor(System.Type)">
            <summary>
            实例化回调的线程关联性行为特性。
            </summary>
            <param name="clientType">客户端契约类型</param>
        </member>
        <member name="M:EIIP.ServiceModel.CallbackThreadAffinityBehaviorAttribute.#ctor(System.Type,System.String)">
            <summary>
            实例化回调的线程关联性行为特性。
            </summary>
            <param name="clientType">客户端契约类型</param>
            <param name="threadName">线程名称</param>
        </member>
        <member name="T:EIIP.ServiceModel.WorkItem">
            <summary>
            工作项。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.WorkItem.#ctor(System.Threading.SendOrPostCallback,System.Object)">
            <summary>
            实例化工作项。
            </summary>
            <param name="method">表示在消息即将被调度到同步上下文时要调用的方法。</param>
            <param name="state">传递给method的对象。</param>
        </member>
        <member name="M:EIIP.ServiceModel.WorkItem.CallBack">
            <summary>
            在工作线程上执行的回调。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.ThreadAffinityBehaviorAttribute">
            <summary>
            线程关联性行为特性。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadAffinityBehaviorAttribute.#ctor(System.Type)">
            <summary>
            实例化线程关联性行为特性。
            </summary>
            <param name="serviceType">终结点服务类型</param>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadAffinityBehaviorAttribute.#ctor(System.Type,System.String)">
            <summary>
            实例化线程关联性行为特性。
            </summary>
            <param name="serviceType">终结点服务类型</param>
            <param name="threadName">线程名称</param>
        </member>
        <member name="T:EIIP.ServiceModel.ThreadPoolHelper">
            <summary>
            线程池辅助类。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ThreadPoolHelper.CloseThreads(System.Type)">
            <summary>
            关闭线程池。
            </summary>
            <param name="type">指定类型的同步装置</param>
        </member>
        <member name="T:EIIP.ServiceModel.ResourceManager">
            <summary>
            资源管理器。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.ResourceManager.Clone``1(``0)">
            <summary>
            资源克隆。
            </summary>
            <typeparam name="T">资源类型</typeparam>
            <param name="source">资源</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.ResourceManager.ConstrainType(System.Type)">
            <summary>
            测试约束类型。
            </summary>
            <param name="type">要测试的类型</param>
        </member>
        <member name="M:EIIP.ServiceModel.ResourceManager.SameTransaction(System.Transactions.TransactionInformation,System.Transactions.TransactionInformation)">
            <summary>
            比较是否是相同事务。
            </summary>
            <param name="transaction1">第一个事务</param>
            <param name="transaction2">第二个事务</param>
            <returns></returns>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional`1">
            <summary>
            事务。
            </summary>
            <typeparam name="T">值类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.#ctor(`0)">
            <summary>
            实例化事务。
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.#ctor(EIIP.ServiceModel.Transactional{`0})">
            <summary>
            实例化事务。
            </summary>
            <param name="transactional">事务</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.#ctor">
            <summary>
            实例化事务。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Implicit(EIIP.ServiceModel.Transactional{`0})~`0">
            <summary>
            隐式转换为值。
            </summary>
            <param name="transactional">事务</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Equality(EIIP.ServiceModel.Transactional{`0},EIIP.ServiceModel.Transactional{`0})">
            <summary>
            重载相等。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Equality(EIIP.ServiceModel.Transactional{`0},`0)">
            <summary>
            重载相等。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Equality(`0,EIIP.ServiceModel.Transactional{`0})">
            <summary>
            重载相等。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Inequality(`0,EIIP.ServiceModel.Transactional{`0})">
            <summary>
            不等。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Inequality(EIIP.ServiceModel.Transactional{`0},`0)">
            <summary>
            不等。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.op_Inequality(EIIP.ServiceModel.Transactional{`0},EIIP.ServiceModel.Transactional{`0})">
            <summary>
            不等。
            </summary>
            <param name="t1"></param>
            <param name="t2"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.GetHashCode">
            <summary>
            获取哈希码。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional`1.Equals(System.Object)">
            <summary>
            测试相等。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional`1.Value">
            <summary>
            获取或设置值。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalArray`1">
            <summary>
            事务数组。
            </summary>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalCollection`2">
            <summary>
            事务集合。
            </summary>
            <typeparam name="C">值类型</typeparam>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalCollection`2.#ctor(`0)">
            <summary>
            实例化事务集合。
            </summary>
            <param name="collection">值集合</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalArray`1.#ctor(`0[])">
            <summary>
            实例化事务数组。
            </summary>
            <param name="array">事务数组</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            事务数组。
            </summary>
            <param name="collection">事务集合</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalArray`1.#ctor(System.Int32)">
            <summary>
            实例化事务数组。
            </summary>
            <param name="size">数组尺寸。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalArray`1.CopyTo(EIIP.ServiceModel.Transactional.TransactionalArray{`0}@,System.Int32)">
            <summary>
            将当前一维数组的所有元素复制到指定的一维数组中（从指定的目标数组索引开始）。索引指定为 32 位整数。
            </summary>
            <param name="array">一维 System.Array，它是从当前数组复制的元素的目标位置。</param>
            <param name="index">一个 32 位整数，它表示 array 中复制开始处的索引。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalArray`1.CopyTo(System.Array,System.Int32)">
            <summary>
            将当前一维数组的所有元素复制到指定的一维数组中（从指定的目标数组索引开始）。索引指定为 32 位整数。
            </summary>
            <param name="array">一维 System.Array，它是从当前数组复制的元素的目标位置。</param>
            <param name="index">一个 32 位整数，它表示 array 中复制开始处的索引。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalArray`1.Clone">
            <summary>
            创建数组的浅表副本。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalArray`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引的事务。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalArray`1.Length">
            <summary>
            获取数组长度。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalArray`1.IsFixedSize">
            <summary>
            获取一个值，该值指示数组是否具有固定大小。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalArray`1.IsReadOnly">
            <summary>
            获取一个值，该值指示数组是否为只读。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalArray`1.SyncRoot">
            <summary>
            获取一个可用于同步访问的对象。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalArray`1.IsSynchronized">
            <summary>
            获取一个值，该值指示是否同步访问（线程安全）。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalDictionary`2">
            <summary>
            事务字典。
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.#ctor">
            <summary>
            实例化事务字典。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            实例化事务字典。
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.#ctor(System.Int32)">
            <summary>
            实例化事务字典。
            </summary>
            <param name="capacity">包含的初始元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.ContainsKey(`0)">
            <summary>
            确定字典中是否包含具有指定键的元素。
            </summary>
            <param name="key">要定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Clear">
            <summary>
            从字典中移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Add(`0,`1)">
            <summary>
            将带有指定键和值的元素添加到字典中。
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="item">要添加的元素的值。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.ContainsValue(`1)">
            <summary>
            确定字典是否包含具有指定值的元素。
            </summary>
            <param name="item">要定位的元素的值。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取的值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 value 参数的类型的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Remove(`0)">
            <summary>
            从字典中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Count">
            <summary>
            获取键/值对的数目。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Keys">
            <summary>
            获取键的集合。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Values">
            <summary>
            获取值的集合。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalDictionary`2.Comparer">
            <summary>
            获取比较器。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1">
            <summary>
            事务链列表。
            </summary>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化事务链列表。
            </summary>
            <param name="collection">集合</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Clear">
            <summary>
            移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Contains(`0)">
            <summary>
            确定某元素是否在事务链列表中。
            </summary>
            <param name="item">要在事务链列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Remove(`0)">
            <summary>
            从事务链列表中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从事务链列表中移除的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            将整个事务链列表复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
            <param name="array">作为从事务链列表复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="arrayIndex">array 中从零开始的索引，将在此处开始复制。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            在指定的现有节点后添加包含指定值的新节点。
            </summary>
            <param name="node">要在其后插入包含 value 的新节点。</param>
            <param name="value">要添加到事务链列表的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
            <summary>
            在指定的现有节点前添加包含指定值的新节点。
            </summary>
            <param name="node">要在其前插入包含 value 的新节点。</param>
            <param name="value">要添加到事务链列表的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在事务链列表的开头处添加指定的新节点。
            </summary>
            <param name="node">要在事务链列表的开头处添加的新节点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.AddFirst(`0)">
            <summary>
            在事务链列表的开头处添加包含指定值的新节点。
            </summary>
            <param name="value">要在事务链列表的开头处添加的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.AddLast(`0)">
            <summary>
            在事务链列表的结尾处添加包含指定值的新节点。
            </summary>
            <param name="value">要添加到事务链列表的末尾的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            在事务链列表的结尾处添加指定的新节点。
            </summary>
            <param name="node">要添加至事务链列表结尾的新节点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Find(`0)">
            <summary>
            查找包含指定值的第一个节点。
            </summary>
            <param name="value">要在事务链列表中定位的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.FindLast(`0)">
            <summary>
            查找包含指定值的最后一个节点。
            </summary>
            <param name="value">要在事务链列表中定位的值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
            <summary>
            从事务链列表中移除指定的节点。
            </summary>
            <param name="node">要从事务链列表移除的节点。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.RemoveFirst">
            <summary>
            移除位于事务链列表开头处的节点。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.RemoveLast">
            <summary>
            移除位于事务链列表结尾处的节点。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Count">
            <summary>
            获取事务链列表中实际包含的元素数。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.IsSynchronized">
            <summary>
            非线程安全。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.SyncRoot">
            <summary>
            同步根。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.First">
            <summary>
            获取第一个节点。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalLinkedList`1.Last">
            <summary>
            获取最后一个节点。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalList`1">
            <summary>
            事务列表。
            </summary>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.#ctor">
            <summary>
            实例化事务列表。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化事务列表。
            </summary>
            <param name="collection">集合</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.#ctor(System.Int32)">
            <summary>
            实例化事务列表。
            </summary>
            <param name="capacity">新列表最初可以存储的元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.IndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个事务列表中第一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Add(`0)">
            <summary>
            将对象添加到事务列表的结尾处。
            </summary>
            <param name="item">要添加到事务列表的末尾处的对象。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将指定集合的元素添加到事务列表的末尾。
            </summary>
            <param name="collection">一个集合，其元素应被添加到事务列表的末尾。集合自身不能为 null，但它可以包含为 null 的元素（如果类型 T 为引用类型）。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Clear">
            <summary>
            从事务列表中移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.ToArray">
            <summary>
            将事务列表的元素复制到新数组中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Contains(`0)">
            <summary>
            确定某元素是否在事务列表中。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Insert(System.Int32,`0)">
            <summary>
            将元素插入事务列表的指定索引处。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Remove(`0)">
            <summary>
            从事务列表中移除特定对象的第一个匹配项。
            </summary>
            <param name="item">要从事务列表中移除的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            移除与指定的谓词所定义的条件相匹配的所有元素。
            </summary>
            <param name="match">Predicate委托，用于定义要移除的元素应满足的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.RemoveAt(System.Int32)">
            <summary>
            移除事务列表的指定索引处的元素。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Reverse">
            <summary>
            将整个事务列表中元素的顺序反转。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.CopyTo(`0[],System.Int32)">
            <summary>
            将整个事务列表复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
            <param name="array">作为从事务列表复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="arrayIndex">array 中从零开始的索引，将在此处开始复制。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.AsReadOnly">
            <summary>
            返回当前集合的只读列表包装。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.BinarySearch(`0)">
            <summary>
            使用默认的比较器在整个已排序的事务列表中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <param name="item">要定位的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在整个已排序的事务列表中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <param name="item">要定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器在已排序事务列表的某个元素范围中搜索元素，并返回该元素从零开始的索引。
            </summary>
            <param name="index">要搜索的范围从零开始的起始索引。</param>
            <param name="count">要搜索的范围的长度。</param>
            <param name="item">要定位的对象。对于引用类型，该值可以为 null。</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            将当前事务列表中的元素转换为另一种类型，并返回包含转换后的元素的列表。
            </summary>
            <typeparam name="U">目标数组元素的类型。</typeparam>
            <param name="converter">将每个元素从一种类型转换为另一种类型的转换器委托。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            将一定范围的元素从事务列表复制到兼容的一维数组中，从目标数组的指定索引位置开始放置。
            </summary>
            <param name="index">源事务列表中复制开始位置的从零开始的索引。</param>
            <param name="array">作为从事务列表复制的元素的目标位置的一维 System.Array。System.Array 必须具有从零开始的索引。</param>
            <param name="arrayIndex">array 中从零开始的索引，将在此处开始复制。</param>
            <param name="count">要复制的元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Exists(System.Predicate{`0})">
            <summary>
            确定事务列表是否包含与指定谓词所定义的条件相匹配的元素。
            </summary>
            <param name="match">Predicate委托，用于定义要搜索的元素应满足的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Find(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个事务列表中的第一个匹配元素。
            </summary>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindAll(System.Predicate{`0})">
            <summary>
            检索与指定谓词定义的条件匹配的所有元素。
            </summary>
            <param name="match">Predicate委托，用于定义要搜索的元素应满足的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个事务列表中第一个匹配元素的从零开始的索引。
            </summary>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回事务列表中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="startIndex">从零开始的搜索的起始索引。</param>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回事务列表中从指定的索引开始并包含指定元素数量的元素范围内的第一个匹配项的零始索引。
            </summary>
            <param name="startIndex">从零开始的搜索的起始索引。</param>
            <param name="count">要搜索的部分中的元素数。</param>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindLast(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个事务列表中的最后一个匹配元素。
            </summary>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回整个事务列表中最后一个匹配元素的从零开始的索引。
            </summary>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            搜索与由指定谓词定义的条件相匹配的元素，并返回事务列表中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="startIndex">向后搜索的从零开始的起始索引。</param>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            搜索与指定谓词所定义的条件相匹配的元素，并返回事务列表中包含指定元素个数并到指定索引结束的元素范围内的最后一个匹配项的零始索引。
            </summary>
            <param name="startIndex">向后搜索的从零开始的起始索引。</param>
            <param name="count">要搜索的部分中的元素数。</param>
            <param name="match">Predicate委托，用于定义要搜索的元素的条件。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.ForEach(System.Action{`0})">
            <summary>
            对事务列表的每个元素执行指定操作。
            </summary>
            <param name="action">要对事务列表的每个元素执行的Action委托。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.GetEnumerator">
            <summary>
            返回循环访问事务列表的枚举器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            创建源事务列表中的元素范围的浅表副本。
            </summary>
            <param name="index">范围开始处的从零开始的事务列表索引。</param>
            <param name="count">范围中的元素数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.IndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象，并返回事务列表中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <param name="index">从零开始的搜索的起始索引。空列表中 0（零）为有效值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象，并返回事务列表中从指定的索引开始并包含指定的元素数的元素范围内第一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <param name="index">从零开始的搜索的起始索引。空列表中 0（零）为有效值。</param>
            <param name="count">要搜索的部分中的元素数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            将集合中的某个元素插入事务列表的指定索引处。
            </summary>
            <param name="index">应在此处插入新元素的从零开始的索引。</param>
            <param name="collection">一个集合，应将其元素插入到事务列表中。集合自身不能为 null，但它可以包含为 null 的元素（如果类型 T 为引用类型）。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.LastIndexOf(`0)">
            <summary>
            搜索指定的对象，并返回整个事务列表中最后一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            搜索指定的对象，并返回事务列表中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <param name="index">向后搜索的从零开始的起始索引。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            搜索指定的对象，并返回事务列表中包含指定的元素数并在指定索引处结束的元素范围内最后一个匹配项的从零开始的索引。
            </summary>
            <param name="item">要在事务列表中查找的对象。对于引用类型，该值可以为 null。</param>
            <param name="index">向后搜索的从零开始的起始索引。</param>
            <param name="count">要搜索的部分中的元素数。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            从事务列表中移除一定范围的元素。
            </summary>
            <param name="index">要移除的元素的范围从零开始的起始索引。</param>
            <param name="count">要移除的元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            将指定范围中元素的顺序反转。
            </summary>
            <param name="index">要反转的范围的从零开始的起始索引。</param>
            <param name="count">要反转的范围内的元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Sort">
            <summary>
            使用默认比较器对整个事务列表中的元素进行排序。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            使用比较器对整个事务列表中的元素进行排序。
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Sort(System.Comparison{`0})">
            <summary>
            使用比较器对整个事务列表中的元素进行排序。
            </summary>
            <param name="comparison">比较元素时要使用的比较器。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            使用指定的比较器对事务列表中某个范围内的元素进行排序。
            </summary>
            <param name="index">要排序的范围的从零开始的起始索引。</param>
            <param name="count">要排序的范围的长度。</param>
            <param name="comparer">比较元素时要使用的比较器实现，或者为 null，表示使用默认比较器。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.TrimExcess">
            <summary>
            将容量设置为事务列表中的实际元素数目（如果该数目小于某个阈值）。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            确定是否事务列表中的每个元素都与指定的谓词所定义的条件相匹配。
            </summary>
            <param name="match">Predicate委托，定义要据以检查元素的条件。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalList`1.Capacity">
            <summary>
            获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalList`1.Count">
            <summary>
            获取事务列表中实际包含的元素数。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalList`1.Item(System.Int32)">
            <summary>
            获取或设置指定索引处的元素。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.TransactionalLock">
            <summary>
            事务锁。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.TransactionalLock.m_PendingTransactions">
            <summary>
            挂起的事务链。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalLock.Lock">
            <summary>
            锁定。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.TransactionalLock.Unlock">
            <summary>
            释放锁。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.TransactionalLock.Locked">
            <summary>
            获取一个值，该值指示是否已锁定。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalQueue`1">
            <summary>
            事务队列。
            </summary>
            <typeparam name="T">契约类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.#ctor">
            <summary>
            实例化事务队列。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化事务队列。
            </summary>
            <param name="collection">事务集合</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.#ctor(System.Int32)">
            <summary>
            实例化事务队列。
            </summary>
            <param name="capacity">事务队列可包含的初始元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到事务队列的结尾处。
            </summary>
            <param name="item">要添加到事务队列的对象。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.Dequeue">
            <summary>
            移除并返回位于事务队列开始处的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.Clear">
            <summary>
            从事务队列中移除所有对象。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.Contains(`0)">
            <summary>
            确定某元素是否在事务队列中。
            </summary>
            <param name="item">要在事务队列中定位的对象。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.Peek">
            <summary>
            返回位于事务队列开始处的对象但不将其移除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalQueue`1.ToArray">
            <summary>
            将事务队列元素复制到新数组。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalQueue`1.Count">
            <summary>
            获取事务队列中包含的元素数。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalQueue`1.IsSynchronized">
            <summary>
            不是线程安全的。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalQueue`1.SyncRoot">
            <summary>
            同步根
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2">
            <summary>
            排序的事务字典。
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            实例化排序的事务字典。
            </summary>
            <param name="dictionary">字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化排序的事务字典。
            </summary>
            <param name="dictionary">字典</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化排序的事务字典。
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.ContainsKey(`0)">
            <summary>
            确定字典中是否包含具有指定键的元素。
            </summary>
            <param name="key">要定位的键。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Clear">
            <summary>
            从字典中移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Add(`0,`1)">
            <summary>
            将带有指定键和值的元素添加到字典中。
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="item">要添加的元素的值。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.ContainsValue(`1)">
            <summary>
            确定字典是否包含具有指定值的元素。
            </summary>
            <param name="item">要定位的元素的值。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取的值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 value 参数的类型的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Remove(`0)">
            <summary>
            从字典中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Count">
            <summary>
            获取键/值对的数目。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Comparer">
            <summary>
            获取比较器。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Keys">
            <summary>
            获取键的集合。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Values">
            <summary>
            获取值的集合。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedDictionary`2.Item(`0)">
            <summary>
            获取或设置指定键的值。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalSortedList`2">
            <summary>
            事务的排序列表。
            </summary>
            <typeparam name="K">集合中键的类型。</typeparam>
            <typeparam name="T">集合中值的类型。</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            实例化事务的排序列表。
            </summary>
            <param name="dictionary">事务字典</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化事务的排序列表。
            </summary>
            <param name="dictionary">事务字典</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化事务的排序列表。
            </summary>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.#ctor(System.Int32)">
            <summary>
            实例化事务的排序列表。
            </summary>
            <param name="capacity">可包含的初始元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            实例化事务的排序列表。
            </summary>
            <param name="capacity">可包含的初始元素数。</param>
            <param name="comparer">比较器</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.IndexOfKey(`0)">
            <summary>
            在整个事务的排序列表中搜索指定键并返回从零开始的索引。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.IndexOfValue(`1)">
            <summary>
            在整个事务的排序列表中搜索指定的值，并返回第一个匹配项的从零开始的索引。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.RemoveAt(System.Int32)">
            <summary>
            移除事务的排序列表的指定索引处的元素。
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%，将容量设置为事务的排序列表中的实际元素数。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定的键相关联的值。
            </summary>
            <param name="key">要获取其值的键。</param>
            <param name="value">
            当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 value 参数的类型的默认值。该参数未经初始化即被传递。
            </param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.ContainsKey(`0)">
            <summary>
            确定事务的排序列表是否包含特定键。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Clear">
            <summary>
            从事务的排序列表中移除所有元素。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Add(`0,`1)">
            <summary>
            将带有指定键和值的元素添加到事务的排序列表中。
            </summary>
            <param name="key">要添加的元素的键。</param>
            <param name="item">要添加的元素的值。对于引用类型，该值可以为 null。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.ContainsValue(`1)">
            <summary>
            确定事务的排序列表是否包含特定值。
            </summary>
            <param name="item">要在事务的排序列表中定位的值。对于引用类型，该值可以为 null。</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Remove(`0)">
            <summary>
            从事务的排序列表中移除带有指定键的元素。
            </summary>
            <param name="key">要移除的元素的键。</param>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Capacity">
            <summary>
            获取或设置事务的排序列表可包含的元素数。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Count">
            <summary>
            获取包含在事务的排序列表中的键/值对的数目。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Comparer">
            <summary>
            获取该排序列表的比较器。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Keys">
            <summary>
            获取包含事务的排序列表中的键的集合。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Values">
            <summary>
            获取包含事务的排序列表中的值的集合。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalSortedList`2.Item(`0)">
            <summary>
            获取或设置值。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.Transactional.TransactionalStack`1">
            <summary>
            事务栈。
            </summary>
            <typeparam name="T">值类型</typeparam>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.#ctor">
            <summary>
            实例化事务堆栈。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            实例化事务堆栈。
            </summary>
            <param name="collection">事务集合</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.#ctor(System.Int32)">
            <summary>
            实例化事务堆栈。
            </summary>
            <param name="capacity">可包含的初始元素数。</param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.Push(`0)">
            <summary>
            将对象插入事务栈的顶部。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.Pop">
            <summary>
            移除并返回位于事务栈顶部的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.Clear">
            <summary>
            从事务栈中移除所有对象。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.Contains(`0)">
            <summary>
            确定某元素是否在事务栈中。
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.Peek">
            <summary>
            返回位于事务栈顶部的对象但不将其移除。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.ToArray">
            <summary>
            将事务栈复制到新数组中。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.TrimExcess">
            <summary>
            如果元素数小于当前容量的 90%，将容量设置为事务栈中的实际元素数。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.Transactional.TransactionalStack`1.GetEnumerator">
            <summary>
            返回事务栈的一个枚举数。
            </summary>
            <returns></returns>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalStack`1.Count">
            <summary>
            获取数量。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalStack`1.IsSynchronized">
            <summary>
            非线程安全。
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.Transactional.TransactionalStack`1.SyncRoot">
            <summary>
            同步根。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.IdentityContext">
            <summary>
            身份认证上下文。
            </summary>
        </member>
        <member name="F:EIIP.ServiceModel.IdentityContext.ICKEY">
            <summary>
            
            </summary>
        </member>
        <member name="P:EIIP.ServiceModel.IdentityContext.Current">
            <summary>
            获取或设置当前身份认证上下文。
            </summary>
        </member>
        <member name="T:EIIP.ServiceModel.LogonClient">
            <summary>
            登录认证客户端。
            </summary>
        </member>
        <member name="M:EIIP.ServiceModel.LogonClient.GetPassport(System.String)">
            <summary>
            获取通行证。
            </summary>
            <param name="addInfo">附加信息</param>
            <returns></returns>
        </member>
        <member name="M:EIIP.ServiceModel.LogonClient.#ctor(System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            实例化登录认证客户端。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
            <param name="isMobileDevice">设置是否是移动终端，否则是智能客户端</param>
            <param name="userAgent">客户端的原始用户代理信息。</param>
            <param name="userHostAddress">客户端的IP地址</param>
        </member>
        <member name="M:EIIP.ServiceModel.LogonClient.#ctor(System.String,System.String,System.String)">
            <summary>
            实例化登录认证客户端。
            </summary>
            <param name="endpointName">应用程序配置文件中的终结点的名称。</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
    </members>
</doc>
